// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module scmi_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 13
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output scmi_reg_pkg::scmi_reg2hw_t reg2hw, // Write


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import scmi_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] reserved_1_c0_qs;
  logic [31:0] reserved_1_c0_wd;
  logic reserved_1_c0_we;
  logic channel_status_c0_channel_free_qs;
  logic channel_status_c0_channel_free_wd;
  logic channel_status_c0_channel_free_we;
  logic channel_status_c0_channel_error_qs;
  logic channel_status_c0_channel_error_wd;
  logic channel_status_c0_channel_error_we;
  logic [29:0] channel_status_c0_field1_qs;
  logic [29:0] channel_status_c0_field1_wd;
  logic channel_status_c0_field1_we;
  logic [31:0] reserved_2_c0_qs;
  logic [31:0] reserved_2_c0_wd;
  logic reserved_2_c0_we;
  logic channel_flags_c0_intr_enable_qs;
  logic channel_flags_c0_intr_enable_wd;
  logic channel_flags_c0_intr_enable_we;
  logic [30:0] channel_flags_c0_field1_qs;
  logic [30:0] channel_flags_c0_field1_wd;
  logic channel_flags_c0_field1_we;
  logic [31:0] length_c0_qs;
  logic [31:0] length_c0_wd;
  logic length_c0_we;
  logic [7:0] message_header_c0_message_id_qs;
  logic [7:0] message_header_c0_message_id_wd;
  logic message_header_c0_message_id_we;
  logic [1:0] message_header_c0_message_type_qs;
  logic [1:0] message_header_c0_message_type_wd;
  logic message_header_c0_message_type_we;
  logic [7:0] message_header_c0_protocol_id_qs;
  logic [7:0] message_header_c0_protocol_id_wd;
  logic message_header_c0_protocol_id_we;
  logic [9:0] message_header_c0_token_qs;
  logic [9:0] message_header_c0_token_wd;
  logic message_header_c0_token_we;
  logic [3:0] message_header_c0_field1_qs;
  logic [3:0] message_header_c0_field1_wd;
  logic message_header_c0_field1_we;
  logic [31:0] message_payload_1_c0_qs;
  logic [31:0] message_payload_1_c0_wd;
  logic message_payload_1_c0_we;
  logic doorbell_c0_intr_qs;
  logic doorbell_c0_intr_wd;
  logic doorbell_c0_intr_we;
  logic [30:0] doorbell_c0_preserve_mask_qs;
  logic [30:0] doorbell_c0_preserve_mask_wd;
  logic doorbell_c0_preserve_mask_we;
  logic completion_interrupt_c0_intr_qs;
  logic completion_interrupt_c0_intr_wd;
  logic completion_interrupt_c0_intr_we;
  logic [30:0] completion_interrupt_c0_preserve_mask_qs;
  logic [30:0] completion_interrupt_c0_preserve_mask_wd;
  logic completion_interrupt_c0_preserve_mask_we;
  logic [31:0] reserved_1_c1_qs;
  logic [31:0] reserved_1_c1_wd;
  logic reserved_1_c1_we;
  logic channel_status_c1_channel_free_qs;
  logic channel_status_c1_channel_free_wd;
  logic channel_status_c1_channel_free_we;
  logic channel_status_c1_channel_error_qs;
  logic channel_status_c1_channel_error_wd;
  logic channel_status_c1_channel_error_we;
  logic [29:0] channel_status_c1_field1_qs;
  logic [29:0] channel_status_c1_field1_wd;
  logic channel_status_c1_field1_we;
  logic [31:0] reserved_2_c1_qs;
  logic [31:0] reserved_2_c1_wd;
  logic reserved_2_c1_we;
  logic channel_flags_c1_intr_enable_qs;
  logic channel_flags_c1_intr_enable_wd;
  logic channel_flags_c1_intr_enable_we;
  logic [30:0] channel_flags_c1_field1_qs;
  logic [30:0] channel_flags_c1_field1_wd;
  logic channel_flags_c1_field1_we;
  logic [31:0] length_c1_qs;
  logic [31:0] length_c1_wd;
  logic length_c1_we;
  logic [7:0] message_header_c1_message_id_qs;
  logic [7:0] message_header_c1_message_id_wd;
  logic message_header_c1_message_id_we;
  logic [1:0] message_header_c1_message_type_qs;
  logic [1:0] message_header_c1_message_type_wd;
  logic message_header_c1_message_type_we;
  logic [7:0] message_header_c1_protocol_id_qs;
  logic [7:0] message_header_c1_protocol_id_wd;
  logic message_header_c1_protocol_id_we;
  logic [9:0] message_header_c1_token_qs;
  logic [9:0] message_header_c1_token_wd;
  logic message_header_c1_token_we;
  logic [3:0] message_header_c1_field1_qs;
  logic [3:0] message_header_c1_field1_wd;
  logic message_header_c1_field1_we;
  logic [31:0] message_payload_1_c1_qs;
  logic [31:0] message_payload_1_c1_wd;
  logic message_payload_1_c1_we;
  logic doorbell_c1_intr_qs;
  logic doorbell_c1_intr_wd;
  logic doorbell_c1_intr_we;
  logic [30:0] doorbell_c1_preserve_mask_qs;
  logic [30:0] doorbell_c1_preserve_mask_wd;
  logic doorbell_c1_preserve_mask_we;
  logic completion_interrupt_c1_intr_qs;
  logic completion_interrupt_c1_intr_wd;
  logic completion_interrupt_c1_intr_we;
  logic [30:0] completion_interrupt_c1_preserve_mask_qs;
  logic [30:0] completion_interrupt_c1_preserve_mask_wd;
  logic completion_interrupt_c1_preserve_mask_we;
  logic [31:0] reserved_1_c2_qs;
  logic [31:0] reserved_1_c2_wd;
  logic reserved_1_c2_we;
  logic channel_status_c2_channel_free_qs;
  logic channel_status_c2_channel_free_wd;
  logic channel_status_c2_channel_free_we;
  logic channel_status_c2_channel_error_qs;
  logic channel_status_c2_channel_error_wd;
  logic channel_status_c2_channel_error_we;
  logic [29:0] channel_status_c2_field1_qs;
  logic [29:0] channel_status_c2_field1_wd;
  logic channel_status_c2_field1_we;
  logic [31:0] reserved_2_c2_qs;
  logic [31:0] reserved_2_c2_wd;
  logic reserved_2_c2_we;
  logic channel_flags_c2_intr_enable_qs;
  logic channel_flags_c2_intr_enable_wd;
  logic channel_flags_c2_intr_enable_we;
  logic [30:0] channel_flags_c2_field1_qs;
  logic [30:0] channel_flags_c2_field1_wd;
  logic channel_flags_c2_field1_we;
  logic [31:0] length_c2_qs;
  logic [31:0] length_c2_wd;
  logic length_c2_we;
  logic [7:0] message_header_c2_message_id_qs;
  logic [7:0] message_header_c2_message_id_wd;
  logic message_header_c2_message_id_we;
  logic [1:0] message_header_c2_message_type_qs;
  logic [1:0] message_header_c2_message_type_wd;
  logic message_header_c2_message_type_we;
  logic [7:0] message_header_c2_protocol_id_qs;
  logic [7:0] message_header_c2_protocol_id_wd;
  logic message_header_c2_protocol_id_we;
  logic [9:0] message_header_c2_token_qs;
  logic [9:0] message_header_c2_token_wd;
  logic message_header_c2_token_we;
  logic [3:0] message_header_c2_field1_qs;
  logic [3:0] message_header_c2_field1_wd;
  logic message_header_c2_field1_we;
  logic [31:0] message_payload_1_c2_qs;
  logic [31:0] message_payload_1_c2_wd;
  logic message_payload_1_c2_we;
  logic doorbell_c2_intr_qs;
  logic doorbell_c2_intr_wd;
  logic doorbell_c2_intr_we;
  logic [30:0] doorbell_c2_preserve_mask_qs;
  logic [30:0] doorbell_c2_preserve_mask_wd;
  logic doorbell_c2_preserve_mask_we;
  logic completion_interrupt_c2_intr_qs;
  logic completion_interrupt_c2_intr_wd;
  logic completion_interrupt_c2_intr_we;
  logic [30:0] completion_interrupt_c2_preserve_mask_qs;
  logic [30:0] completion_interrupt_c2_preserve_mask_wd;
  logic completion_interrupt_c2_preserve_mask_we;
  logic [31:0] reserved_1_c3_qs;
  logic [31:0] reserved_1_c3_wd;
  logic reserved_1_c3_we;
  logic channel_status_c3_channel_free_qs;
  logic channel_status_c3_channel_free_wd;
  logic channel_status_c3_channel_free_we;
  logic channel_status_c3_channel_error_qs;
  logic channel_status_c3_channel_error_wd;
  logic channel_status_c3_channel_error_we;
  logic [29:0] channel_status_c3_field1_qs;
  logic [29:0] channel_status_c3_field1_wd;
  logic channel_status_c3_field1_we;
  logic [31:0] reserved_2_c3_qs;
  logic [31:0] reserved_2_c3_wd;
  logic reserved_2_c3_we;
  logic channel_flags_c3_intr_enable_qs;
  logic channel_flags_c3_intr_enable_wd;
  logic channel_flags_c3_intr_enable_we;
  logic [30:0] channel_flags_c3_field1_qs;
  logic [30:0] channel_flags_c3_field1_wd;
  logic channel_flags_c3_field1_we;
  logic [31:0] length_c3_qs;
  logic [31:0] length_c3_wd;
  logic length_c3_we;
  logic [7:0] message_header_c3_message_id_qs;
  logic [7:0] message_header_c3_message_id_wd;
  logic message_header_c3_message_id_we;
  logic [1:0] message_header_c3_message_type_qs;
  logic [1:0] message_header_c3_message_type_wd;
  logic message_header_c3_message_type_we;
  logic [7:0] message_header_c3_protocol_id_qs;
  logic [7:0] message_header_c3_protocol_id_wd;
  logic message_header_c3_protocol_id_we;
  logic [9:0] message_header_c3_token_qs;
  logic [9:0] message_header_c3_token_wd;
  logic message_header_c3_token_we;
  logic [3:0] message_header_c3_field1_qs;
  logic [3:0] message_header_c3_field1_wd;
  logic message_header_c3_field1_we;
  logic [31:0] message_payload_1_c3_qs;
  logic [31:0] message_payload_1_c3_wd;
  logic message_payload_1_c3_we;
  logic doorbell_c3_intr_qs;
  logic doorbell_c3_intr_wd;
  logic doorbell_c3_intr_we;
  logic [30:0] doorbell_c3_preserve_mask_qs;
  logic [30:0] doorbell_c3_preserve_mask_wd;
  logic doorbell_c3_preserve_mask_we;
  logic completion_interrupt_c3_intr_qs;
  logic completion_interrupt_c3_intr_wd;
  logic completion_interrupt_c3_intr_we;
  logic [30:0] completion_interrupt_c3_preserve_mask_qs;
  logic [30:0] completion_interrupt_c3_preserve_mask_wd;
  logic completion_interrupt_c3_preserve_mask_we;
  logic [31:0] reserved_1_c4_qs;
  logic [31:0] reserved_1_c4_wd;
  logic reserved_1_c4_we;
  logic channel_status_c4_channel_free_qs;
  logic channel_status_c4_channel_free_wd;
  logic channel_status_c4_channel_free_we;
  logic channel_status_c4_channel_error_qs;
  logic channel_status_c4_channel_error_wd;
  logic channel_status_c4_channel_error_we;
  logic [29:0] channel_status_c4_field1_qs;
  logic [29:0] channel_status_c4_field1_wd;
  logic channel_status_c4_field1_we;
  logic [31:0] reserved_2_c4_qs;
  logic [31:0] reserved_2_c4_wd;
  logic reserved_2_c4_we;
  logic channel_flags_c4_intr_enable_qs;
  logic channel_flags_c4_intr_enable_wd;
  logic channel_flags_c4_intr_enable_we;
  logic [30:0] channel_flags_c4_field1_qs;
  logic [30:0] channel_flags_c4_field1_wd;
  logic channel_flags_c4_field1_we;
  logic [31:0] length_c4_qs;
  logic [31:0] length_c4_wd;
  logic length_c4_we;
  logic [7:0] message_header_c4_message_id_qs;
  logic [7:0] message_header_c4_message_id_wd;
  logic message_header_c4_message_id_we;
  logic [1:0] message_header_c4_message_type_qs;
  logic [1:0] message_header_c4_message_type_wd;
  logic message_header_c4_message_type_we;
  logic [7:0] message_header_c4_protocol_id_qs;
  logic [7:0] message_header_c4_protocol_id_wd;
  logic message_header_c4_protocol_id_we;
  logic [9:0] message_header_c4_token_qs;
  logic [9:0] message_header_c4_token_wd;
  logic message_header_c4_token_we;
  logic [3:0] message_header_c4_field1_qs;
  logic [3:0] message_header_c4_field1_wd;
  logic message_header_c4_field1_we;
  logic [31:0] message_payload_1_c4_qs;
  logic [31:0] message_payload_1_c4_wd;
  logic message_payload_1_c4_we;
  logic doorbell_c4_intr_qs;
  logic doorbell_c4_intr_wd;
  logic doorbell_c4_intr_we;
  logic [30:0] doorbell_c4_preserve_mask_qs;
  logic [30:0] doorbell_c4_preserve_mask_wd;
  logic doorbell_c4_preserve_mask_we;
  logic completion_interrupt_c4_intr_qs;
  logic completion_interrupt_c4_intr_wd;
  logic completion_interrupt_c4_intr_we;
  logic [30:0] completion_interrupt_c4_preserve_mask_qs;
  logic [30:0] completion_interrupt_c4_preserve_mask_wd;
  logic completion_interrupt_c4_preserve_mask_we;
  logic [31:0] reserved_1_c5_qs;
  logic [31:0] reserved_1_c5_wd;
  logic reserved_1_c5_we;
  logic channel_status_c5_channel_free_qs;
  logic channel_status_c5_channel_free_wd;
  logic channel_status_c5_channel_free_we;
  logic channel_status_c5_channel_error_qs;
  logic channel_status_c5_channel_error_wd;
  logic channel_status_c5_channel_error_we;
  logic [29:0] channel_status_c5_field1_qs;
  logic [29:0] channel_status_c5_field1_wd;
  logic channel_status_c5_field1_we;
  logic [31:0] reserved_2_c5_qs;
  logic [31:0] reserved_2_c5_wd;
  logic reserved_2_c5_we;
  logic channel_flags_c5_intr_enable_qs;
  logic channel_flags_c5_intr_enable_wd;
  logic channel_flags_c5_intr_enable_we;
  logic [30:0] channel_flags_c5_field1_qs;
  logic [30:0] channel_flags_c5_field1_wd;
  logic channel_flags_c5_field1_we;
  logic [31:0] length_c5_qs;
  logic [31:0] length_c5_wd;
  logic length_c5_we;
  logic [7:0] message_header_c5_message_id_qs;
  logic [7:0] message_header_c5_message_id_wd;
  logic message_header_c5_message_id_we;
  logic [1:0] message_header_c5_message_type_qs;
  logic [1:0] message_header_c5_message_type_wd;
  logic message_header_c5_message_type_we;
  logic [7:0] message_header_c5_protocol_id_qs;
  logic [7:0] message_header_c5_protocol_id_wd;
  logic message_header_c5_protocol_id_we;
  logic [9:0] message_header_c5_token_qs;
  logic [9:0] message_header_c5_token_wd;
  logic message_header_c5_token_we;
  logic [3:0] message_header_c5_field1_qs;
  logic [3:0] message_header_c5_field1_wd;
  logic message_header_c5_field1_we;
  logic [31:0] message_payload_1_c5_qs;
  logic [31:0] message_payload_1_c5_wd;
  logic message_payload_1_c5_we;
  logic doorbell_c5_intr_qs;
  logic doorbell_c5_intr_wd;
  logic doorbell_c5_intr_we;
  logic [30:0] doorbell_c5_preserve_mask_qs;
  logic [30:0] doorbell_c5_preserve_mask_wd;
  logic doorbell_c5_preserve_mask_we;
  logic completion_interrupt_c5_intr_qs;
  logic completion_interrupt_c5_intr_wd;
  logic completion_interrupt_c5_intr_we;
  logic [30:0] completion_interrupt_c5_preserve_mask_qs;
  logic [30:0] completion_interrupt_c5_preserve_mask_wd;
  logic completion_interrupt_c5_preserve_mask_we;
  logic [31:0] reserved_1_c6_qs;
  logic [31:0] reserved_1_c6_wd;
  logic reserved_1_c6_we;
  logic channel_status_c6_channel_free_qs;
  logic channel_status_c6_channel_free_wd;
  logic channel_status_c6_channel_free_we;
  logic channel_status_c6_channel_error_qs;
  logic channel_status_c6_channel_error_wd;
  logic channel_status_c6_channel_error_we;
  logic [29:0] channel_status_c6_field1_qs;
  logic [29:0] channel_status_c6_field1_wd;
  logic channel_status_c6_field1_we;
  logic [31:0] reserved_2_c6_qs;
  logic [31:0] reserved_2_c6_wd;
  logic reserved_2_c6_we;
  logic channel_flags_c6_intr_enable_qs;
  logic channel_flags_c6_intr_enable_wd;
  logic channel_flags_c6_intr_enable_we;
  logic [30:0] channel_flags_c6_field1_qs;
  logic [30:0] channel_flags_c6_field1_wd;
  logic channel_flags_c6_field1_we;
  logic [31:0] length_c6_qs;
  logic [31:0] length_c6_wd;
  logic length_c6_we;
  logic [7:0] message_header_c6_message_id_qs;
  logic [7:0] message_header_c6_message_id_wd;
  logic message_header_c6_message_id_we;
  logic [1:0] message_header_c6_message_type_qs;
  logic [1:0] message_header_c6_message_type_wd;
  logic message_header_c6_message_type_we;
  logic [7:0] message_header_c6_protocol_id_qs;
  logic [7:0] message_header_c6_protocol_id_wd;
  logic message_header_c6_protocol_id_we;
  logic [9:0] message_header_c6_token_qs;
  logic [9:0] message_header_c6_token_wd;
  logic message_header_c6_token_we;
  logic [3:0] message_header_c6_field1_qs;
  logic [3:0] message_header_c6_field1_wd;
  logic message_header_c6_field1_we;
  logic [31:0] message_payload_1_c6_qs;
  logic [31:0] message_payload_1_c6_wd;
  logic message_payload_1_c6_we;
  logic doorbell_c6_intr_qs;
  logic doorbell_c6_intr_wd;
  logic doorbell_c6_intr_we;
  logic [30:0] doorbell_c6_preserve_mask_qs;
  logic [30:0] doorbell_c6_preserve_mask_wd;
  logic doorbell_c6_preserve_mask_we;
  logic completion_interrupt_c6_intr_qs;
  logic completion_interrupt_c6_intr_wd;
  logic completion_interrupt_c6_intr_we;
  logic [30:0] completion_interrupt_c6_preserve_mask_qs;
  logic [30:0] completion_interrupt_c6_preserve_mask_wd;
  logic completion_interrupt_c6_preserve_mask_we;
  logic [31:0] reserved_1_c7_qs;
  logic [31:0] reserved_1_c7_wd;
  logic reserved_1_c7_we;
  logic channel_status_c7_channel_free_qs;
  logic channel_status_c7_channel_free_wd;
  logic channel_status_c7_channel_free_we;
  logic channel_status_c7_channel_error_qs;
  logic channel_status_c7_channel_error_wd;
  logic channel_status_c7_channel_error_we;
  logic [29:0] channel_status_c7_field1_qs;
  logic [29:0] channel_status_c7_field1_wd;
  logic channel_status_c7_field1_we;
  logic [31:0] reserved_2_c7_qs;
  logic [31:0] reserved_2_c7_wd;
  logic reserved_2_c7_we;
  logic channel_flags_c7_intr_enable_qs;
  logic channel_flags_c7_intr_enable_wd;
  logic channel_flags_c7_intr_enable_we;
  logic [30:0] channel_flags_c7_field1_qs;
  logic [30:0] channel_flags_c7_field1_wd;
  logic channel_flags_c7_field1_we;
  logic [31:0] length_c7_qs;
  logic [31:0] length_c7_wd;
  logic length_c7_we;
  logic [7:0] message_header_c7_message_id_qs;
  logic [7:0] message_header_c7_message_id_wd;
  logic message_header_c7_message_id_we;
  logic [1:0] message_header_c7_message_type_qs;
  logic [1:0] message_header_c7_message_type_wd;
  logic message_header_c7_message_type_we;
  logic [7:0] message_header_c7_protocol_id_qs;
  logic [7:0] message_header_c7_protocol_id_wd;
  logic message_header_c7_protocol_id_we;
  logic [9:0] message_header_c7_token_qs;
  logic [9:0] message_header_c7_token_wd;
  logic message_header_c7_token_we;
  logic [3:0] message_header_c7_field1_qs;
  logic [3:0] message_header_c7_field1_wd;
  logic message_header_c7_field1_we;
  logic [31:0] message_payload_1_c7_qs;
  logic [31:0] message_payload_1_c7_wd;
  logic message_payload_1_c7_we;
  logic doorbell_c7_intr_qs;
  logic doorbell_c7_intr_wd;
  logic doorbell_c7_intr_we;
  logic [30:0] doorbell_c7_preserve_mask_qs;
  logic [30:0] doorbell_c7_preserve_mask_wd;
  logic doorbell_c7_preserve_mask_we;
  logic completion_interrupt_c7_intr_qs;
  logic completion_interrupt_c7_intr_wd;
  logic completion_interrupt_c7_intr_we;
  logic [30:0] completion_interrupt_c7_preserve_mask_qs;
  logic [30:0] completion_interrupt_c7_preserve_mask_wd;
  logic completion_interrupt_c7_preserve_mask_we;
  logic [31:0] reserved_1_c8_qs;
  logic [31:0] reserved_1_c8_wd;
  logic reserved_1_c8_we;
  logic channel_status_c8_channel_free_qs;
  logic channel_status_c8_channel_free_wd;
  logic channel_status_c8_channel_free_we;
  logic channel_status_c8_channel_error_qs;
  logic channel_status_c8_channel_error_wd;
  logic channel_status_c8_channel_error_we;
  logic [29:0] channel_status_c8_field1_qs;
  logic [29:0] channel_status_c8_field1_wd;
  logic channel_status_c8_field1_we;
  logic [31:0] reserved_2_c8_qs;
  logic [31:0] reserved_2_c8_wd;
  logic reserved_2_c8_we;
  logic channel_flags_c8_intr_enable_qs;
  logic channel_flags_c8_intr_enable_wd;
  logic channel_flags_c8_intr_enable_we;
  logic [30:0] channel_flags_c8_field1_qs;
  logic [30:0] channel_flags_c8_field1_wd;
  logic channel_flags_c8_field1_we;
  logic [31:0] length_c8_qs;
  logic [31:0] length_c8_wd;
  logic length_c8_we;
  logic [7:0] message_header_c8_message_id_qs;
  logic [7:0] message_header_c8_message_id_wd;
  logic message_header_c8_message_id_we;
  logic [1:0] message_header_c8_message_type_qs;
  logic [1:0] message_header_c8_message_type_wd;
  logic message_header_c8_message_type_we;
  logic [7:0] message_header_c8_protocol_id_qs;
  logic [7:0] message_header_c8_protocol_id_wd;
  logic message_header_c8_protocol_id_we;
  logic [9:0] message_header_c8_token_qs;
  logic [9:0] message_header_c8_token_wd;
  logic message_header_c8_token_we;
  logic [3:0] message_header_c8_field1_qs;
  logic [3:0] message_header_c8_field1_wd;
  logic message_header_c8_field1_we;
  logic [31:0] message_payload_1_c8_qs;
  logic [31:0] message_payload_1_c8_wd;
  logic message_payload_1_c8_we;
  logic doorbell_c8_intr_qs;
  logic doorbell_c8_intr_wd;
  logic doorbell_c8_intr_we;
  logic [30:0] doorbell_c8_preserve_mask_qs;
  logic [30:0] doorbell_c8_preserve_mask_wd;
  logic doorbell_c8_preserve_mask_we;
  logic completion_interrupt_c8_intr_qs;
  logic completion_interrupt_c8_intr_wd;
  logic completion_interrupt_c8_intr_we;
  logic [30:0] completion_interrupt_c8_preserve_mask_qs;
  logic [30:0] completion_interrupt_c8_preserve_mask_wd;
  logic completion_interrupt_c8_preserve_mask_we;
  logic [31:0] reserved_1_c9_qs;
  logic [31:0] reserved_1_c9_wd;
  logic reserved_1_c9_we;
  logic channel_status_c9_channel_free_qs;
  logic channel_status_c9_channel_free_wd;
  logic channel_status_c9_channel_free_we;
  logic channel_status_c9_channel_error_qs;
  logic channel_status_c9_channel_error_wd;
  logic channel_status_c9_channel_error_we;
  logic [29:0] channel_status_c9_field1_qs;
  logic [29:0] channel_status_c9_field1_wd;
  logic channel_status_c9_field1_we;
  logic [31:0] reserved_2_c9_qs;
  logic [31:0] reserved_2_c9_wd;
  logic reserved_2_c9_we;
  logic channel_flags_c9_intr_enable_qs;
  logic channel_flags_c9_intr_enable_wd;
  logic channel_flags_c9_intr_enable_we;
  logic [30:0] channel_flags_c9_field1_qs;
  logic [30:0] channel_flags_c9_field1_wd;
  logic channel_flags_c9_field1_we;
  logic [31:0] length_c9_qs;
  logic [31:0] length_c9_wd;
  logic length_c9_we;
  logic [7:0] message_header_c9_message_id_qs;
  logic [7:0] message_header_c9_message_id_wd;
  logic message_header_c9_message_id_we;
  logic [1:0] message_header_c9_message_type_qs;
  logic [1:0] message_header_c9_message_type_wd;
  logic message_header_c9_message_type_we;
  logic [7:0] message_header_c9_protocol_id_qs;
  logic [7:0] message_header_c9_protocol_id_wd;
  logic message_header_c9_protocol_id_we;
  logic [9:0] message_header_c9_token_qs;
  logic [9:0] message_header_c9_token_wd;
  logic message_header_c9_token_we;
  logic [3:0] message_header_c9_field1_qs;
  logic [3:0] message_header_c9_field1_wd;
  logic message_header_c9_field1_we;
  logic [31:0] message_payload_1_c9_qs;
  logic [31:0] message_payload_1_c9_wd;
  logic message_payload_1_c9_we;
  logic doorbell_c9_intr_qs;
  logic doorbell_c9_intr_wd;
  logic doorbell_c9_intr_we;
  logic [30:0] doorbell_c9_preserve_mask_qs;
  logic [30:0] doorbell_c9_preserve_mask_wd;
  logic doorbell_c9_preserve_mask_we;
  logic completion_interrupt_c9_intr_qs;
  logic completion_interrupt_c9_intr_wd;
  logic completion_interrupt_c9_intr_we;
  logic [30:0] completion_interrupt_c9_preserve_mask_qs;
  logic [30:0] completion_interrupt_c9_preserve_mask_wd;
  logic completion_interrupt_c9_preserve_mask_we;
  logic [31:0] reserved_1_c10_qs;
  logic [31:0] reserved_1_c10_wd;
  logic reserved_1_c10_we;
  logic channel_status_c10_channel_free_qs;
  logic channel_status_c10_channel_free_wd;
  logic channel_status_c10_channel_free_we;
  logic channel_status_c10_channel_error_qs;
  logic channel_status_c10_channel_error_wd;
  logic channel_status_c10_channel_error_we;
  logic [29:0] channel_status_c10_field1_qs;
  logic [29:0] channel_status_c10_field1_wd;
  logic channel_status_c10_field1_we;
  logic [31:0] reserved_2_c10_qs;
  logic [31:0] reserved_2_c10_wd;
  logic reserved_2_c10_we;
  logic channel_flags_c10_intr_enable_qs;
  logic channel_flags_c10_intr_enable_wd;
  logic channel_flags_c10_intr_enable_we;
  logic [30:0] channel_flags_c10_field1_qs;
  logic [30:0] channel_flags_c10_field1_wd;
  logic channel_flags_c10_field1_we;
  logic [31:0] length_c10_qs;
  logic [31:0] length_c10_wd;
  logic length_c10_we;
  logic [7:0] message_header_c10_message_id_qs;
  logic [7:0] message_header_c10_message_id_wd;
  logic message_header_c10_message_id_we;
  logic [1:0] message_header_c10_message_type_qs;
  logic [1:0] message_header_c10_message_type_wd;
  logic message_header_c10_message_type_we;
  logic [7:0] message_header_c10_protocol_id_qs;
  logic [7:0] message_header_c10_protocol_id_wd;
  logic message_header_c10_protocol_id_we;
  logic [9:0] message_header_c10_token_qs;
  logic [9:0] message_header_c10_token_wd;
  logic message_header_c10_token_we;
  logic [3:0] message_header_c10_field1_qs;
  logic [3:0] message_header_c10_field1_wd;
  logic message_header_c10_field1_we;
  logic [31:0] message_payload_1_c10_qs;
  logic [31:0] message_payload_1_c10_wd;
  logic message_payload_1_c10_we;
  logic doorbell_c10_intr_qs;
  logic doorbell_c10_intr_wd;
  logic doorbell_c10_intr_we;
  logic [30:0] doorbell_c10_preserve_mask_qs;
  logic [30:0] doorbell_c10_preserve_mask_wd;
  logic doorbell_c10_preserve_mask_we;
  logic completion_interrupt_c10_intr_qs;
  logic completion_interrupt_c10_intr_wd;
  logic completion_interrupt_c10_intr_we;
  logic [30:0] completion_interrupt_c10_preserve_mask_qs;
  logic [30:0] completion_interrupt_c10_preserve_mask_wd;
  logic completion_interrupt_c10_preserve_mask_we;
  logic [31:0] reserved_1_c11_qs;
  logic [31:0] reserved_1_c11_wd;
  logic reserved_1_c11_we;
  logic channel_status_c11_channel_free_qs;
  logic channel_status_c11_channel_free_wd;
  logic channel_status_c11_channel_free_we;
  logic channel_status_c11_channel_error_qs;
  logic channel_status_c11_channel_error_wd;
  logic channel_status_c11_channel_error_we;
  logic [29:0] channel_status_c11_field1_qs;
  logic [29:0] channel_status_c11_field1_wd;
  logic channel_status_c11_field1_we;
  logic [31:0] reserved_2_c11_qs;
  logic [31:0] reserved_2_c11_wd;
  logic reserved_2_c11_we;
  logic channel_flags_c11_intr_enable_qs;
  logic channel_flags_c11_intr_enable_wd;
  logic channel_flags_c11_intr_enable_we;
  logic [30:0] channel_flags_c11_field1_qs;
  logic [30:0] channel_flags_c11_field1_wd;
  logic channel_flags_c11_field1_we;
  logic [31:0] length_c11_qs;
  logic [31:0] length_c11_wd;
  logic length_c11_we;
  logic [7:0] message_header_c11_message_id_qs;
  logic [7:0] message_header_c11_message_id_wd;
  logic message_header_c11_message_id_we;
  logic [1:0] message_header_c11_message_type_qs;
  logic [1:0] message_header_c11_message_type_wd;
  logic message_header_c11_message_type_we;
  logic [7:0] message_header_c11_protocol_id_qs;
  logic [7:0] message_header_c11_protocol_id_wd;
  logic message_header_c11_protocol_id_we;
  logic [9:0] message_header_c11_token_qs;
  logic [9:0] message_header_c11_token_wd;
  logic message_header_c11_token_we;
  logic [3:0] message_header_c11_field1_qs;
  logic [3:0] message_header_c11_field1_wd;
  logic message_header_c11_field1_we;
  logic [31:0] message_payload_1_c11_qs;
  logic [31:0] message_payload_1_c11_wd;
  logic message_payload_1_c11_we;
  logic doorbell_c11_intr_qs;
  logic doorbell_c11_intr_wd;
  logic doorbell_c11_intr_we;
  logic [30:0] doorbell_c11_preserve_mask_qs;
  logic [30:0] doorbell_c11_preserve_mask_wd;
  logic doorbell_c11_preserve_mask_we;
  logic completion_interrupt_c11_intr_qs;
  logic completion_interrupt_c11_intr_wd;
  logic completion_interrupt_c11_intr_we;
  logic [30:0] completion_interrupt_c11_preserve_mask_qs;
  logic [30:0] completion_interrupt_c11_preserve_mask_wd;
  logic completion_interrupt_c11_preserve_mask_we;
  logic [31:0] reserved_1_c12_qs;
  logic [31:0] reserved_1_c12_wd;
  logic reserved_1_c12_we;
  logic channel_status_c12_channel_free_qs;
  logic channel_status_c12_channel_free_wd;
  logic channel_status_c12_channel_free_we;
  logic channel_status_c12_channel_error_qs;
  logic channel_status_c12_channel_error_wd;
  logic channel_status_c12_channel_error_we;
  logic [29:0] channel_status_c12_field1_qs;
  logic [29:0] channel_status_c12_field1_wd;
  logic channel_status_c12_field1_we;
  logic [31:0] reserved_2_c12_qs;
  logic [31:0] reserved_2_c12_wd;
  logic reserved_2_c12_we;
  logic channel_flags_c12_intr_enable_qs;
  logic channel_flags_c12_intr_enable_wd;
  logic channel_flags_c12_intr_enable_we;
  logic [30:0] channel_flags_c12_field1_qs;
  logic [30:0] channel_flags_c12_field1_wd;
  logic channel_flags_c12_field1_we;
  logic [31:0] length_c12_qs;
  logic [31:0] length_c12_wd;
  logic length_c12_we;
  logic [7:0] message_header_c12_message_id_qs;
  logic [7:0] message_header_c12_message_id_wd;
  logic message_header_c12_message_id_we;
  logic [1:0] message_header_c12_message_type_qs;
  logic [1:0] message_header_c12_message_type_wd;
  logic message_header_c12_message_type_we;
  logic [7:0] message_header_c12_protocol_id_qs;
  logic [7:0] message_header_c12_protocol_id_wd;
  logic message_header_c12_protocol_id_we;
  logic [9:0] message_header_c12_token_qs;
  logic [9:0] message_header_c12_token_wd;
  logic message_header_c12_token_we;
  logic [3:0] message_header_c12_field1_qs;
  logic [3:0] message_header_c12_field1_wd;
  logic message_header_c12_field1_we;
  logic [31:0] message_payload_1_c12_qs;
  logic [31:0] message_payload_1_c12_wd;
  logic message_payload_1_c12_we;
  logic doorbell_c12_intr_qs;
  logic doorbell_c12_intr_wd;
  logic doorbell_c12_intr_we;
  logic [30:0] doorbell_c12_preserve_mask_qs;
  logic [30:0] doorbell_c12_preserve_mask_wd;
  logic doorbell_c12_preserve_mask_we;
  logic completion_interrupt_c12_intr_qs;
  logic completion_interrupt_c12_intr_wd;
  logic completion_interrupt_c12_intr_we;
  logic [30:0] completion_interrupt_c12_preserve_mask_qs;
  logic [30:0] completion_interrupt_c12_preserve_mask_wd;
  logic completion_interrupt_c12_preserve_mask_we;
  logic [31:0] reserved_1_c13_qs;
  logic [31:0] reserved_1_c13_wd;
  logic reserved_1_c13_we;
  logic channel_status_c13_channel_free_qs;
  logic channel_status_c13_channel_free_wd;
  logic channel_status_c13_channel_free_we;
  logic channel_status_c13_channel_error_qs;
  logic channel_status_c13_channel_error_wd;
  logic channel_status_c13_channel_error_we;
  logic [29:0] channel_status_c13_field1_qs;
  logic [29:0] channel_status_c13_field1_wd;
  logic channel_status_c13_field1_we;
  logic [31:0] reserved_2_c13_qs;
  logic [31:0] reserved_2_c13_wd;
  logic reserved_2_c13_we;
  logic channel_flags_c13_intr_enable_qs;
  logic channel_flags_c13_intr_enable_wd;
  logic channel_flags_c13_intr_enable_we;
  logic [30:0] channel_flags_c13_field1_qs;
  logic [30:0] channel_flags_c13_field1_wd;
  logic channel_flags_c13_field1_we;
  logic [31:0] length_c13_qs;
  logic [31:0] length_c13_wd;
  logic length_c13_we;
  logic [7:0] message_header_c13_message_id_qs;
  logic [7:0] message_header_c13_message_id_wd;
  logic message_header_c13_message_id_we;
  logic [1:0] message_header_c13_message_type_qs;
  logic [1:0] message_header_c13_message_type_wd;
  logic message_header_c13_message_type_we;
  logic [7:0] message_header_c13_protocol_id_qs;
  logic [7:0] message_header_c13_protocol_id_wd;
  logic message_header_c13_protocol_id_we;
  logic [9:0] message_header_c13_token_qs;
  logic [9:0] message_header_c13_token_wd;
  logic message_header_c13_token_we;
  logic [3:0] message_header_c13_field1_qs;
  logic [3:0] message_header_c13_field1_wd;
  logic message_header_c13_field1_we;
  logic [31:0] message_payload_1_c13_qs;
  logic [31:0] message_payload_1_c13_wd;
  logic message_payload_1_c13_we;
  logic doorbell_c13_intr_qs;
  logic doorbell_c13_intr_wd;
  logic doorbell_c13_intr_we;
  logic [30:0] doorbell_c13_preserve_mask_qs;
  logic [30:0] doorbell_c13_preserve_mask_wd;
  logic doorbell_c13_preserve_mask_we;
  logic completion_interrupt_c13_intr_qs;
  logic completion_interrupt_c13_intr_wd;
  logic completion_interrupt_c13_intr_we;
  logic [30:0] completion_interrupt_c13_preserve_mask_qs;
  logic [30:0] completion_interrupt_c13_preserve_mask_wd;
  logic completion_interrupt_c13_preserve_mask_we;
  logic [31:0] reserved_1_c14_qs;
  logic [31:0] reserved_1_c14_wd;
  logic reserved_1_c14_we;
  logic channel_status_c14_channel_free_qs;
  logic channel_status_c14_channel_free_wd;
  logic channel_status_c14_channel_free_we;
  logic channel_status_c14_channel_error_qs;
  logic channel_status_c14_channel_error_wd;
  logic channel_status_c14_channel_error_we;
  logic [29:0] channel_status_c14_field1_qs;
  logic [29:0] channel_status_c14_field1_wd;
  logic channel_status_c14_field1_we;
  logic [31:0] reserved_2_c14_qs;
  logic [31:0] reserved_2_c14_wd;
  logic reserved_2_c14_we;
  logic channel_flags_c14_intr_enable_qs;
  logic channel_flags_c14_intr_enable_wd;
  logic channel_flags_c14_intr_enable_we;
  logic [30:0] channel_flags_c14_field1_qs;
  logic [30:0] channel_flags_c14_field1_wd;
  logic channel_flags_c14_field1_we;
  logic [31:0] length_c14_qs;
  logic [31:0] length_c14_wd;
  logic length_c14_we;
  logic [7:0] message_header_c14_message_id_qs;
  logic [7:0] message_header_c14_message_id_wd;
  logic message_header_c14_message_id_we;
  logic [1:0] message_header_c14_message_type_qs;
  logic [1:0] message_header_c14_message_type_wd;
  logic message_header_c14_message_type_we;
  logic [7:0] message_header_c14_protocol_id_qs;
  logic [7:0] message_header_c14_protocol_id_wd;
  logic message_header_c14_protocol_id_we;
  logic [9:0] message_header_c14_token_qs;
  logic [9:0] message_header_c14_token_wd;
  logic message_header_c14_token_we;
  logic [3:0] message_header_c14_field1_qs;
  logic [3:0] message_header_c14_field1_wd;
  logic message_header_c14_field1_we;
  logic [31:0] message_payload_1_c14_qs;
  logic [31:0] message_payload_1_c14_wd;
  logic message_payload_1_c14_we;
  logic doorbell_c14_intr_qs;
  logic doorbell_c14_intr_wd;
  logic doorbell_c14_intr_we;
  logic [30:0] doorbell_c14_preserve_mask_qs;
  logic [30:0] doorbell_c14_preserve_mask_wd;
  logic doorbell_c14_preserve_mask_we;
  logic completion_interrupt_c14_intr_qs;
  logic completion_interrupt_c14_intr_wd;
  logic completion_interrupt_c14_intr_we;
  logic [30:0] completion_interrupt_c14_preserve_mask_qs;
  logic [30:0] completion_interrupt_c14_preserve_mask_wd;
  logic completion_interrupt_c14_preserve_mask_we;
  logic [31:0] reserved_1_c15_qs;
  logic [31:0] reserved_1_c15_wd;
  logic reserved_1_c15_we;
  logic channel_status_c15_channel_free_qs;
  logic channel_status_c15_channel_free_wd;
  logic channel_status_c15_channel_free_we;
  logic channel_status_c15_channel_error_qs;
  logic channel_status_c15_channel_error_wd;
  logic channel_status_c15_channel_error_we;
  logic [29:0] channel_status_c15_field1_qs;
  logic [29:0] channel_status_c15_field1_wd;
  logic channel_status_c15_field1_we;
  logic [31:0] reserved_2_c15_qs;
  logic [31:0] reserved_2_c15_wd;
  logic reserved_2_c15_we;
  logic channel_flags_c15_intr_enable_qs;
  logic channel_flags_c15_intr_enable_wd;
  logic channel_flags_c15_intr_enable_we;
  logic [30:0] channel_flags_c15_field1_qs;
  logic [30:0] channel_flags_c15_field1_wd;
  logic channel_flags_c15_field1_we;
  logic [31:0] length_c15_qs;
  logic [31:0] length_c15_wd;
  logic length_c15_we;
  logic [7:0] message_header_c15_message_id_qs;
  logic [7:0] message_header_c15_message_id_wd;
  logic message_header_c15_message_id_we;
  logic [1:0] message_header_c15_message_type_qs;
  logic [1:0] message_header_c15_message_type_wd;
  logic message_header_c15_message_type_we;
  logic [7:0] message_header_c15_protocol_id_qs;
  logic [7:0] message_header_c15_protocol_id_wd;
  logic message_header_c15_protocol_id_we;
  logic [9:0] message_header_c15_token_qs;
  logic [9:0] message_header_c15_token_wd;
  logic message_header_c15_token_we;
  logic [3:0] message_header_c15_field1_qs;
  logic [3:0] message_header_c15_field1_wd;
  logic message_header_c15_field1_we;
  logic [31:0] message_payload_1_c15_qs;
  logic [31:0] message_payload_1_c15_wd;
  logic message_payload_1_c15_we;
  logic doorbell_c15_intr_qs;
  logic doorbell_c15_intr_wd;
  logic doorbell_c15_intr_we;
  logic [30:0] doorbell_c15_preserve_mask_qs;
  logic [30:0] doorbell_c15_preserve_mask_wd;
  logic doorbell_c15_preserve_mask_we;
  logic completion_interrupt_c15_intr_qs;
  logic completion_interrupt_c15_intr_wd;
  logic completion_interrupt_c15_intr_we;
  logic [30:0] completion_interrupt_c15_preserve_mask_qs;
  logic [30:0] completion_interrupt_c15_preserve_mask_wd;
  logic completion_interrupt_c15_preserve_mask_we;
  logic [31:0] reserved_1_c16_qs;
  logic [31:0] reserved_1_c16_wd;
  logic reserved_1_c16_we;
  logic channel_status_c16_channel_free_qs;
  logic channel_status_c16_channel_free_wd;
  logic channel_status_c16_channel_free_we;
  logic channel_status_c16_channel_error_qs;
  logic channel_status_c16_channel_error_wd;
  logic channel_status_c16_channel_error_we;
  logic [29:0] channel_status_c16_field1_qs;
  logic [29:0] channel_status_c16_field1_wd;
  logic channel_status_c16_field1_we;
  logic [31:0] reserved_2_c16_qs;
  logic [31:0] reserved_2_c16_wd;
  logic reserved_2_c16_we;
  logic channel_flags_c16_intr_enable_qs;
  logic channel_flags_c16_intr_enable_wd;
  logic channel_flags_c16_intr_enable_we;
  logic [30:0] channel_flags_c16_field1_qs;
  logic [30:0] channel_flags_c16_field1_wd;
  logic channel_flags_c16_field1_we;
  logic [31:0] length_c16_qs;
  logic [31:0] length_c16_wd;
  logic length_c16_we;
  logic [7:0] message_header_c16_message_id_qs;
  logic [7:0] message_header_c16_message_id_wd;
  logic message_header_c16_message_id_we;
  logic [1:0] message_header_c16_message_type_qs;
  logic [1:0] message_header_c16_message_type_wd;
  logic message_header_c16_message_type_we;
  logic [7:0] message_header_c16_protocol_id_qs;
  logic [7:0] message_header_c16_protocol_id_wd;
  logic message_header_c16_protocol_id_we;
  logic [9:0] message_header_c16_token_qs;
  logic [9:0] message_header_c16_token_wd;
  logic message_header_c16_token_we;
  logic [3:0] message_header_c16_field1_qs;
  logic [3:0] message_header_c16_field1_wd;
  logic message_header_c16_field1_we;
  logic [31:0] message_payload_1_c16_qs;
  logic [31:0] message_payload_1_c16_wd;
  logic message_payload_1_c16_we;
  logic doorbell_c16_intr_qs;
  logic doorbell_c16_intr_wd;
  logic doorbell_c16_intr_we;
  logic [30:0] doorbell_c16_preserve_mask_qs;
  logic [30:0] doorbell_c16_preserve_mask_wd;
  logic doorbell_c16_preserve_mask_we;
  logic completion_interrupt_c16_intr_qs;
  logic completion_interrupt_c16_intr_wd;
  logic completion_interrupt_c16_intr_we;
  logic [30:0] completion_interrupt_c16_preserve_mask_qs;
  logic [30:0] completion_interrupt_c16_preserve_mask_wd;
  logic completion_interrupt_c16_preserve_mask_we;
  logic [31:0] reserved_1_c17_qs;
  logic [31:0] reserved_1_c17_wd;
  logic reserved_1_c17_we;
  logic channel_status_c17_channel_free_qs;
  logic channel_status_c17_channel_free_wd;
  logic channel_status_c17_channel_free_we;
  logic channel_status_c17_channel_error_qs;
  logic channel_status_c17_channel_error_wd;
  logic channel_status_c17_channel_error_we;
  logic [29:0] channel_status_c17_field1_qs;
  logic [29:0] channel_status_c17_field1_wd;
  logic channel_status_c17_field1_we;
  logic [31:0] reserved_2_c17_qs;
  logic [31:0] reserved_2_c17_wd;
  logic reserved_2_c17_we;
  logic channel_flags_c17_intr_enable_qs;
  logic channel_flags_c17_intr_enable_wd;
  logic channel_flags_c17_intr_enable_we;
  logic [30:0] channel_flags_c17_field1_qs;
  logic [30:0] channel_flags_c17_field1_wd;
  logic channel_flags_c17_field1_we;
  logic [31:0] length_c17_qs;
  logic [31:0] length_c17_wd;
  logic length_c17_we;
  logic [7:0] message_header_c17_message_id_qs;
  logic [7:0] message_header_c17_message_id_wd;
  logic message_header_c17_message_id_we;
  logic [1:0] message_header_c17_message_type_qs;
  logic [1:0] message_header_c17_message_type_wd;
  logic message_header_c17_message_type_we;
  logic [7:0] message_header_c17_protocol_id_qs;
  logic [7:0] message_header_c17_protocol_id_wd;
  logic message_header_c17_protocol_id_we;
  logic [9:0] message_header_c17_token_qs;
  logic [9:0] message_header_c17_token_wd;
  logic message_header_c17_token_we;
  logic [3:0] message_header_c17_field1_qs;
  logic [3:0] message_header_c17_field1_wd;
  logic message_header_c17_field1_we;
  logic [31:0] message_payload_1_c17_qs;
  logic [31:0] message_payload_1_c17_wd;
  logic message_payload_1_c17_we;
  logic doorbell_c17_intr_qs;
  logic doorbell_c17_intr_wd;
  logic doorbell_c17_intr_we;
  logic [30:0] doorbell_c17_preserve_mask_qs;
  logic [30:0] doorbell_c17_preserve_mask_wd;
  logic doorbell_c17_preserve_mask_we;
  logic completion_interrupt_c17_intr_qs;
  logic completion_interrupt_c17_intr_wd;
  logic completion_interrupt_c17_intr_we;
  logic [30:0] completion_interrupt_c17_preserve_mask_qs;
  logic [30:0] completion_interrupt_c17_preserve_mask_wd;
  logic completion_interrupt_c17_preserve_mask_we;
  logic [31:0] reserved_1_c18_qs;
  logic [31:0] reserved_1_c18_wd;
  logic reserved_1_c18_we;
  logic channel_status_c18_channel_free_qs;
  logic channel_status_c18_channel_free_wd;
  logic channel_status_c18_channel_free_we;
  logic channel_status_c18_channel_error_qs;
  logic channel_status_c18_channel_error_wd;
  logic channel_status_c18_channel_error_we;
  logic [29:0] channel_status_c18_field1_qs;
  logic [29:0] channel_status_c18_field1_wd;
  logic channel_status_c18_field1_we;
  logic [31:0] reserved_2_c18_qs;
  logic [31:0] reserved_2_c18_wd;
  logic reserved_2_c18_we;
  logic channel_flags_c18_intr_enable_qs;
  logic channel_flags_c18_intr_enable_wd;
  logic channel_flags_c18_intr_enable_we;
  logic [30:0] channel_flags_c18_field1_qs;
  logic [30:0] channel_flags_c18_field1_wd;
  logic channel_flags_c18_field1_we;
  logic [31:0] length_c18_qs;
  logic [31:0] length_c18_wd;
  logic length_c18_we;
  logic [7:0] message_header_c18_message_id_qs;
  logic [7:0] message_header_c18_message_id_wd;
  logic message_header_c18_message_id_we;
  logic [1:0] message_header_c18_message_type_qs;
  logic [1:0] message_header_c18_message_type_wd;
  logic message_header_c18_message_type_we;
  logic [7:0] message_header_c18_protocol_id_qs;
  logic [7:0] message_header_c18_protocol_id_wd;
  logic message_header_c18_protocol_id_we;
  logic [9:0] message_header_c18_token_qs;
  logic [9:0] message_header_c18_token_wd;
  logic message_header_c18_token_we;
  logic [3:0] message_header_c18_field1_qs;
  logic [3:0] message_header_c18_field1_wd;
  logic message_header_c18_field1_we;
  logic [31:0] message_payload_1_c18_qs;
  logic [31:0] message_payload_1_c18_wd;
  logic message_payload_1_c18_we;
  logic doorbell_c18_intr_qs;
  logic doorbell_c18_intr_wd;
  logic doorbell_c18_intr_we;
  logic [30:0] doorbell_c18_preserve_mask_qs;
  logic [30:0] doorbell_c18_preserve_mask_wd;
  logic doorbell_c18_preserve_mask_we;
  logic completion_interrupt_c18_intr_qs;
  logic completion_interrupt_c18_intr_wd;
  logic completion_interrupt_c18_intr_we;
  logic [30:0] completion_interrupt_c18_preserve_mask_qs;
  logic [30:0] completion_interrupt_c18_preserve_mask_wd;
  logic completion_interrupt_c18_preserve_mask_we;
  logic [31:0] reserved_1_c19_qs;
  logic [31:0] reserved_1_c19_wd;
  logic reserved_1_c19_we;
  logic channel_status_c19_channel_free_qs;
  logic channel_status_c19_channel_free_wd;
  logic channel_status_c19_channel_free_we;
  logic channel_status_c19_channel_error_qs;
  logic channel_status_c19_channel_error_wd;
  logic channel_status_c19_channel_error_we;
  logic [29:0] channel_status_c19_field1_qs;
  logic [29:0] channel_status_c19_field1_wd;
  logic channel_status_c19_field1_we;
  logic [31:0] reserved_2_c19_qs;
  logic [31:0] reserved_2_c19_wd;
  logic reserved_2_c19_we;
  logic channel_flags_c19_intr_enable_qs;
  logic channel_flags_c19_intr_enable_wd;
  logic channel_flags_c19_intr_enable_we;
  logic [30:0] channel_flags_c19_field1_qs;
  logic [30:0] channel_flags_c19_field1_wd;
  logic channel_flags_c19_field1_we;
  logic [31:0] length_c19_qs;
  logic [31:0] length_c19_wd;
  logic length_c19_we;
  logic [7:0] message_header_c19_message_id_qs;
  logic [7:0] message_header_c19_message_id_wd;
  logic message_header_c19_message_id_we;
  logic [1:0] message_header_c19_message_type_qs;
  logic [1:0] message_header_c19_message_type_wd;
  logic message_header_c19_message_type_we;
  logic [7:0] message_header_c19_protocol_id_qs;
  logic [7:0] message_header_c19_protocol_id_wd;
  logic message_header_c19_protocol_id_we;
  logic [9:0] message_header_c19_token_qs;
  logic [9:0] message_header_c19_token_wd;
  logic message_header_c19_token_we;
  logic [3:0] message_header_c19_field1_qs;
  logic [3:0] message_header_c19_field1_wd;
  logic message_header_c19_field1_we;
  logic [31:0] message_payload_1_c19_qs;
  logic [31:0] message_payload_1_c19_wd;
  logic message_payload_1_c19_we;
  logic doorbell_c19_intr_qs;
  logic doorbell_c19_intr_wd;
  logic doorbell_c19_intr_we;
  logic [30:0] doorbell_c19_preserve_mask_qs;
  logic [30:0] doorbell_c19_preserve_mask_wd;
  logic doorbell_c19_preserve_mask_we;
  logic completion_interrupt_c19_intr_qs;
  logic completion_interrupt_c19_intr_wd;
  logic completion_interrupt_c19_intr_we;
  logic [30:0] completion_interrupt_c19_preserve_mask_qs;
  logic [30:0] completion_interrupt_c19_preserve_mask_wd;
  logic completion_interrupt_c19_preserve_mask_we;
  logic [31:0] reserved_1_c20_qs;
  logic [31:0] reserved_1_c20_wd;
  logic reserved_1_c20_we;
  logic channel_status_c20_channel_free_qs;
  logic channel_status_c20_channel_free_wd;
  logic channel_status_c20_channel_free_we;
  logic channel_status_c20_channel_error_qs;
  logic channel_status_c20_channel_error_wd;
  logic channel_status_c20_channel_error_we;
  logic [29:0] channel_status_c20_field1_qs;
  logic [29:0] channel_status_c20_field1_wd;
  logic channel_status_c20_field1_we;
  logic [31:0] reserved_2_c20_qs;
  logic [31:0] reserved_2_c20_wd;
  logic reserved_2_c20_we;
  logic channel_flags_c20_intr_enable_qs;
  logic channel_flags_c20_intr_enable_wd;
  logic channel_flags_c20_intr_enable_we;
  logic [30:0] channel_flags_c20_field1_qs;
  logic [30:0] channel_flags_c20_field1_wd;
  logic channel_flags_c20_field1_we;
  logic [31:0] length_c20_qs;
  logic [31:0] length_c20_wd;
  logic length_c20_we;
  logic [7:0] message_header_c20_message_id_qs;
  logic [7:0] message_header_c20_message_id_wd;
  logic message_header_c20_message_id_we;
  logic [1:0] message_header_c20_message_type_qs;
  logic [1:0] message_header_c20_message_type_wd;
  logic message_header_c20_message_type_we;
  logic [7:0] message_header_c20_protocol_id_qs;
  logic [7:0] message_header_c20_protocol_id_wd;
  logic message_header_c20_protocol_id_we;
  logic [9:0] message_header_c20_token_qs;
  logic [9:0] message_header_c20_token_wd;
  logic message_header_c20_token_we;
  logic [3:0] message_header_c20_field1_qs;
  logic [3:0] message_header_c20_field1_wd;
  logic message_header_c20_field1_we;
  logic [31:0] message_payload_1_c20_qs;
  logic [31:0] message_payload_1_c20_wd;
  logic message_payload_1_c20_we;
  logic doorbell_c20_intr_qs;
  logic doorbell_c20_intr_wd;
  logic doorbell_c20_intr_we;
  logic [30:0] doorbell_c20_preserve_mask_qs;
  logic [30:0] doorbell_c20_preserve_mask_wd;
  logic doorbell_c20_preserve_mask_we;
  logic completion_interrupt_c20_intr_qs;
  logic completion_interrupt_c20_intr_wd;
  logic completion_interrupt_c20_intr_we;
  logic [30:0] completion_interrupt_c20_preserve_mask_qs;
  logic [30:0] completion_interrupt_c20_preserve_mask_wd;
  logic completion_interrupt_c20_preserve_mask_we;
  logic [31:0] reserved_1_c21_qs;
  logic [31:0] reserved_1_c21_wd;
  logic reserved_1_c21_we;
  logic channel_status_c21_channel_free_qs;
  logic channel_status_c21_channel_free_wd;
  logic channel_status_c21_channel_free_we;
  logic channel_status_c21_channel_error_qs;
  logic channel_status_c21_channel_error_wd;
  logic channel_status_c21_channel_error_we;
  logic [29:0] channel_status_c21_field1_qs;
  logic [29:0] channel_status_c21_field1_wd;
  logic channel_status_c21_field1_we;
  logic [31:0] reserved_2_c21_qs;
  logic [31:0] reserved_2_c21_wd;
  logic reserved_2_c21_we;
  logic channel_flags_c21_intr_enable_qs;
  logic channel_flags_c21_intr_enable_wd;
  logic channel_flags_c21_intr_enable_we;
  logic [30:0] channel_flags_c21_field1_qs;
  logic [30:0] channel_flags_c21_field1_wd;
  logic channel_flags_c21_field1_we;
  logic [31:0] length_c21_qs;
  logic [31:0] length_c21_wd;
  logic length_c21_we;
  logic [7:0] message_header_c21_message_id_qs;
  logic [7:0] message_header_c21_message_id_wd;
  logic message_header_c21_message_id_we;
  logic [1:0] message_header_c21_message_type_qs;
  logic [1:0] message_header_c21_message_type_wd;
  logic message_header_c21_message_type_we;
  logic [7:0] message_header_c21_protocol_id_qs;
  logic [7:0] message_header_c21_protocol_id_wd;
  logic message_header_c21_protocol_id_we;
  logic [9:0] message_header_c21_token_qs;
  logic [9:0] message_header_c21_token_wd;
  logic message_header_c21_token_we;
  logic [3:0] message_header_c21_field1_qs;
  logic [3:0] message_header_c21_field1_wd;
  logic message_header_c21_field1_we;
  logic [31:0] message_payload_1_c21_qs;
  logic [31:0] message_payload_1_c21_wd;
  logic message_payload_1_c21_we;
  logic doorbell_c21_intr_qs;
  logic doorbell_c21_intr_wd;
  logic doorbell_c21_intr_we;
  logic [30:0] doorbell_c21_preserve_mask_qs;
  logic [30:0] doorbell_c21_preserve_mask_wd;
  logic doorbell_c21_preserve_mask_we;
  logic completion_interrupt_c21_intr_qs;
  logic completion_interrupt_c21_intr_wd;
  logic completion_interrupt_c21_intr_we;
  logic [30:0] completion_interrupt_c21_preserve_mask_qs;
  logic [30:0] completion_interrupt_c21_preserve_mask_wd;
  logic completion_interrupt_c21_preserve_mask_we;
  logic [31:0] reserved_1_c22_qs;
  logic [31:0] reserved_1_c22_wd;
  logic reserved_1_c22_we;
  logic channel_status_c22_channel_free_qs;
  logic channel_status_c22_channel_free_wd;
  logic channel_status_c22_channel_free_we;
  logic channel_status_c22_channel_error_qs;
  logic channel_status_c22_channel_error_wd;
  logic channel_status_c22_channel_error_we;
  logic [29:0] channel_status_c22_field1_qs;
  logic [29:0] channel_status_c22_field1_wd;
  logic channel_status_c22_field1_we;
  logic [31:0] reserved_2_c22_qs;
  logic [31:0] reserved_2_c22_wd;
  logic reserved_2_c22_we;
  logic channel_flags_c22_intr_enable_qs;
  logic channel_flags_c22_intr_enable_wd;
  logic channel_flags_c22_intr_enable_we;
  logic [30:0] channel_flags_c22_field1_qs;
  logic [30:0] channel_flags_c22_field1_wd;
  logic channel_flags_c22_field1_we;
  logic [31:0] length_c22_qs;
  logic [31:0] length_c22_wd;
  logic length_c22_we;
  logic [7:0] message_header_c22_message_id_qs;
  logic [7:0] message_header_c22_message_id_wd;
  logic message_header_c22_message_id_we;
  logic [1:0] message_header_c22_message_type_qs;
  logic [1:0] message_header_c22_message_type_wd;
  logic message_header_c22_message_type_we;
  logic [7:0] message_header_c22_protocol_id_qs;
  logic [7:0] message_header_c22_protocol_id_wd;
  logic message_header_c22_protocol_id_we;
  logic [9:0] message_header_c22_token_qs;
  logic [9:0] message_header_c22_token_wd;
  logic message_header_c22_token_we;
  logic [3:0] message_header_c22_field1_qs;
  logic [3:0] message_header_c22_field1_wd;
  logic message_header_c22_field1_we;
  logic [31:0] message_payload_1_c22_qs;
  logic [31:0] message_payload_1_c22_wd;
  logic message_payload_1_c22_we;
  logic doorbell_c22_intr_qs;
  logic doorbell_c22_intr_wd;
  logic doorbell_c22_intr_we;
  logic [30:0] doorbell_c22_preserve_mask_qs;
  logic [30:0] doorbell_c22_preserve_mask_wd;
  logic doorbell_c22_preserve_mask_we;
  logic completion_interrupt_c22_intr_qs;
  logic completion_interrupt_c22_intr_wd;
  logic completion_interrupt_c22_intr_we;
  logic [30:0] completion_interrupt_c22_preserve_mask_qs;
  logic [30:0] completion_interrupt_c22_preserve_mask_wd;
  logic completion_interrupt_c22_preserve_mask_we;
  logic [31:0] reserved_1_c23_qs;
  logic [31:0] reserved_1_c23_wd;
  logic reserved_1_c23_we;
  logic channel_status_c23_channel_free_qs;
  logic channel_status_c23_channel_free_wd;
  logic channel_status_c23_channel_free_we;
  logic channel_status_c23_channel_error_qs;
  logic channel_status_c23_channel_error_wd;
  logic channel_status_c23_channel_error_we;
  logic [29:0] channel_status_c23_field1_qs;
  logic [29:0] channel_status_c23_field1_wd;
  logic channel_status_c23_field1_we;
  logic [31:0] reserved_2_c23_qs;
  logic [31:0] reserved_2_c23_wd;
  logic reserved_2_c23_we;
  logic channel_flags_c23_intr_enable_qs;
  logic channel_flags_c23_intr_enable_wd;
  logic channel_flags_c23_intr_enable_we;
  logic [30:0] channel_flags_c23_field1_qs;
  logic [30:0] channel_flags_c23_field1_wd;
  logic channel_flags_c23_field1_we;
  logic [31:0] length_c23_qs;
  logic [31:0] length_c23_wd;
  logic length_c23_we;
  logic [7:0] message_header_c23_message_id_qs;
  logic [7:0] message_header_c23_message_id_wd;
  logic message_header_c23_message_id_we;
  logic [1:0] message_header_c23_message_type_qs;
  logic [1:0] message_header_c23_message_type_wd;
  logic message_header_c23_message_type_we;
  logic [7:0] message_header_c23_protocol_id_qs;
  logic [7:0] message_header_c23_protocol_id_wd;
  logic message_header_c23_protocol_id_we;
  logic [9:0] message_header_c23_token_qs;
  logic [9:0] message_header_c23_token_wd;
  logic message_header_c23_token_we;
  logic [3:0] message_header_c23_field1_qs;
  logic [3:0] message_header_c23_field1_wd;
  logic message_header_c23_field1_we;
  logic [31:0] message_payload_1_c23_qs;
  logic [31:0] message_payload_1_c23_wd;
  logic message_payload_1_c23_we;
  logic doorbell_c23_intr_qs;
  logic doorbell_c23_intr_wd;
  logic doorbell_c23_intr_we;
  logic [30:0] doorbell_c23_preserve_mask_qs;
  logic [30:0] doorbell_c23_preserve_mask_wd;
  logic doorbell_c23_preserve_mask_we;
  logic completion_interrupt_c23_intr_qs;
  logic completion_interrupt_c23_intr_wd;
  logic completion_interrupt_c23_intr_we;
  logic [30:0] completion_interrupt_c23_preserve_mask_qs;
  logic [30:0] completion_interrupt_c23_preserve_mask_wd;
  logic completion_interrupt_c23_preserve_mask_we;
  logic [31:0] reserved_1_c24_qs;
  logic [31:0] reserved_1_c24_wd;
  logic reserved_1_c24_we;
  logic channel_status_c24_channel_free_qs;
  logic channel_status_c24_channel_free_wd;
  logic channel_status_c24_channel_free_we;
  logic channel_status_c24_channel_error_qs;
  logic channel_status_c24_channel_error_wd;
  logic channel_status_c24_channel_error_we;
  logic [29:0] channel_status_c24_field1_qs;
  logic [29:0] channel_status_c24_field1_wd;
  logic channel_status_c24_field1_we;
  logic [31:0] reserved_2_c24_qs;
  logic [31:0] reserved_2_c24_wd;
  logic reserved_2_c24_we;
  logic channel_flags_c24_intr_enable_qs;
  logic channel_flags_c24_intr_enable_wd;
  logic channel_flags_c24_intr_enable_we;
  logic [30:0] channel_flags_c24_field1_qs;
  logic [30:0] channel_flags_c24_field1_wd;
  logic channel_flags_c24_field1_we;
  logic [31:0] length_c24_qs;
  logic [31:0] length_c24_wd;
  logic length_c24_we;
  logic [7:0] message_header_c24_message_id_qs;
  logic [7:0] message_header_c24_message_id_wd;
  logic message_header_c24_message_id_we;
  logic [1:0] message_header_c24_message_type_qs;
  logic [1:0] message_header_c24_message_type_wd;
  logic message_header_c24_message_type_we;
  logic [7:0] message_header_c24_protocol_id_qs;
  logic [7:0] message_header_c24_protocol_id_wd;
  logic message_header_c24_protocol_id_we;
  logic [9:0] message_header_c24_token_qs;
  logic [9:0] message_header_c24_token_wd;
  logic message_header_c24_token_we;
  logic [3:0] message_header_c24_field1_qs;
  logic [3:0] message_header_c24_field1_wd;
  logic message_header_c24_field1_we;
  logic [31:0] message_payload_1_c24_qs;
  logic [31:0] message_payload_1_c24_wd;
  logic message_payload_1_c24_we;
  logic doorbell_c24_intr_qs;
  logic doorbell_c24_intr_wd;
  logic doorbell_c24_intr_we;
  logic [30:0] doorbell_c24_preserve_mask_qs;
  logic [30:0] doorbell_c24_preserve_mask_wd;
  logic doorbell_c24_preserve_mask_we;
  logic completion_interrupt_c24_intr_qs;
  logic completion_interrupt_c24_intr_wd;
  logic completion_interrupt_c24_intr_we;
  logic [30:0] completion_interrupt_c24_preserve_mask_qs;
  logic [30:0] completion_interrupt_c24_preserve_mask_wd;
  logic completion_interrupt_c24_preserve_mask_we;
  logic [31:0] reserved_1_c25_qs;
  logic [31:0] reserved_1_c25_wd;
  logic reserved_1_c25_we;
  logic channel_status_c25_channel_free_qs;
  logic channel_status_c25_channel_free_wd;
  logic channel_status_c25_channel_free_we;
  logic channel_status_c25_channel_error_qs;
  logic channel_status_c25_channel_error_wd;
  logic channel_status_c25_channel_error_we;
  logic [29:0] channel_status_c25_field1_qs;
  logic [29:0] channel_status_c25_field1_wd;
  logic channel_status_c25_field1_we;
  logic [31:0] reserved_2_c25_qs;
  logic [31:0] reserved_2_c25_wd;
  logic reserved_2_c25_we;
  logic channel_flags_c25_intr_enable_qs;
  logic channel_flags_c25_intr_enable_wd;
  logic channel_flags_c25_intr_enable_we;
  logic [30:0] channel_flags_c25_field1_qs;
  logic [30:0] channel_flags_c25_field1_wd;
  logic channel_flags_c25_field1_we;
  logic [31:0] length_c25_qs;
  logic [31:0] length_c25_wd;
  logic length_c25_we;
  logic [7:0] message_header_c25_message_id_qs;
  logic [7:0] message_header_c25_message_id_wd;
  logic message_header_c25_message_id_we;
  logic [1:0] message_header_c25_message_type_qs;
  logic [1:0] message_header_c25_message_type_wd;
  logic message_header_c25_message_type_we;
  logic [7:0] message_header_c25_protocol_id_qs;
  logic [7:0] message_header_c25_protocol_id_wd;
  logic message_header_c25_protocol_id_we;
  logic [9:0] message_header_c25_token_qs;
  logic [9:0] message_header_c25_token_wd;
  logic message_header_c25_token_we;
  logic [3:0] message_header_c25_field1_qs;
  logic [3:0] message_header_c25_field1_wd;
  logic message_header_c25_field1_we;
  logic [31:0] message_payload_1_c25_qs;
  logic [31:0] message_payload_1_c25_wd;
  logic message_payload_1_c25_we;
  logic doorbell_c25_intr_qs;
  logic doorbell_c25_intr_wd;
  logic doorbell_c25_intr_we;
  logic [30:0] doorbell_c25_preserve_mask_qs;
  logic [30:0] doorbell_c25_preserve_mask_wd;
  logic doorbell_c25_preserve_mask_we;
  logic completion_interrupt_c25_intr_qs;
  logic completion_interrupt_c25_intr_wd;
  logic completion_interrupt_c25_intr_we;
  logic [30:0] completion_interrupt_c25_preserve_mask_qs;
  logic [30:0] completion_interrupt_c25_preserve_mask_wd;
  logic completion_interrupt_c25_preserve_mask_we;
  logic [31:0] reserved_1_c26_qs;
  logic [31:0] reserved_1_c26_wd;
  logic reserved_1_c26_we;
  logic channel_status_c26_channel_free_qs;
  logic channel_status_c26_channel_free_wd;
  logic channel_status_c26_channel_free_we;
  logic channel_status_c26_channel_error_qs;
  logic channel_status_c26_channel_error_wd;
  logic channel_status_c26_channel_error_we;
  logic [29:0] channel_status_c26_field1_qs;
  logic [29:0] channel_status_c26_field1_wd;
  logic channel_status_c26_field1_we;
  logic [31:0] reserved_2_c26_qs;
  logic [31:0] reserved_2_c26_wd;
  logic reserved_2_c26_we;
  logic channel_flags_c26_intr_enable_qs;
  logic channel_flags_c26_intr_enable_wd;
  logic channel_flags_c26_intr_enable_we;
  logic [30:0] channel_flags_c26_field1_qs;
  logic [30:0] channel_flags_c26_field1_wd;
  logic channel_flags_c26_field1_we;
  logic [31:0] length_c26_qs;
  logic [31:0] length_c26_wd;
  logic length_c26_we;
  logic [7:0] message_header_c26_message_id_qs;
  logic [7:0] message_header_c26_message_id_wd;
  logic message_header_c26_message_id_we;
  logic [1:0] message_header_c26_message_type_qs;
  logic [1:0] message_header_c26_message_type_wd;
  logic message_header_c26_message_type_we;
  logic [7:0] message_header_c26_protocol_id_qs;
  logic [7:0] message_header_c26_protocol_id_wd;
  logic message_header_c26_protocol_id_we;
  logic [9:0] message_header_c26_token_qs;
  logic [9:0] message_header_c26_token_wd;
  logic message_header_c26_token_we;
  logic [3:0] message_header_c26_field1_qs;
  logic [3:0] message_header_c26_field1_wd;
  logic message_header_c26_field1_we;
  logic [31:0] message_payload_1_c26_qs;
  logic [31:0] message_payload_1_c26_wd;
  logic message_payload_1_c26_we;
  logic doorbell_c26_intr_qs;
  logic doorbell_c26_intr_wd;
  logic doorbell_c26_intr_we;
  logic [30:0] doorbell_c26_preserve_mask_qs;
  logic [30:0] doorbell_c26_preserve_mask_wd;
  logic doorbell_c26_preserve_mask_we;
  logic completion_interrupt_c26_intr_qs;
  logic completion_interrupt_c26_intr_wd;
  logic completion_interrupt_c26_intr_we;
  logic [30:0] completion_interrupt_c26_preserve_mask_qs;
  logic [30:0] completion_interrupt_c26_preserve_mask_wd;
  logic completion_interrupt_c26_preserve_mask_we;
  logic [31:0] reserved_1_c27_qs;
  logic [31:0] reserved_1_c27_wd;
  logic reserved_1_c27_we;
  logic channel_status_c27_channel_free_qs;
  logic channel_status_c27_channel_free_wd;
  logic channel_status_c27_channel_free_we;
  logic channel_status_c27_channel_error_qs;
  logic channel_status_c27_channel_error_wd;
  logic channel_status_c27_channel_error_we;
  logic [29:0] channel_status_c27_field1_qs;
  logic [29:0] channel_status_c27_field1_wd;
  logic channel_status_c27_field1_we;
  logic [31:0] reserved_2_c27_qs;
  logic [31:0] reserved_2_c27_wd;
  logic reserved_2_c27_we;
  logic channel_flags_c27_intr_enable_qs;
  logic channel_flags_c27_intr_enable_wd;
  logic channel_flags_c27_intr_enable_we;
  logic [30:0] channel_flags_c27_field1_qs;
  logic [30:0] channel_flags_c27_field1_wd;
  logic channel_flags_c27_field1_we;
  logic [31:0] length_c27_qs;
  logic [31:0] length_c27_wd;
  logic length_c27_we;
  logic [7:0] message_header_c27_message_id_qs;
  logic [7:0] message_header_c27_message_id_wd;
  logic message_header_c27_message_id_we;
  logic [1:0] message_header_c27_message_type_qs;
  logic [1:0] message_header_c27_message_type_wd;
  logic message_header_c27_message_type_we;
  logic [7:0] message_header_c27_protocol_id_qs;
  logic [7:0] message_header_c27_protocol_id_wd;
  logic message_header_c27_protocol_id_we;
  logic [9:0] message_header_c27_token_qs;
  logic [9:0] message_header_c27_token_wd;
  logic message_header_c27_token_we;
  logic [3:0] message_header_c27_field1_qs;
  logic [3:0] message_header_c27_field1_wd;
  logic message_header_c27_field1_we;
  logic [31:0] message_payload_1_c27_qs;
  logic [31:0] message_payload_1_c27_wd;
  logic message_payload_1_c27_we;
  logic doorbell_c27_intr_qs;
  logic doorbell_c27_intr_wd;
  logic doorbell_c27_intr_we;
  logic [30:0] doorbell_c27_preserve_mask_qs;
  logic [30:0] doorbell_c27_preserve_mask_wd;
  logic doorbell_c27_preserve_mask_we;
  logic completion_interrupt_c27_intr_qs;
  logic completion_interrupt_c27_intr_wd;
  logic completion_interrupt_c27_intr_we;
  logic [30:0] completion_interrupt_c27_preserve_mask_qs;
  logic [30:0] completion_interrupt_c27_preserve_mask_wd;
  logic completion_interrupt_c27_preserve_mask_we;
  logic [31:0] reserved_1_c28_qs;
  logic [31:0] reserved_1_c28_wd;
  logic reserved_1_c28_we;
  logic channel_status_c28_channel_free_qs;
  logic channel_status_c28_channel_free_wd;
  logic channel_status_c28_channel_free_we;
  logic channel_status_c28_channel_error_qs;
  logic channel_status_c28_channel_error_wd;
  logic channel_status_c28_channel_error_we;
  logic [29:0] channel_status_c28_field1_qs;
  logic [29:0] channel_status_c28_field1_wd;
  logic channel_status_c28_field1_we;
  logic [31:0] reserved_2_c28_qs;
  logic [31:0] reserved_2_c28_wd;
  logic reserved_2_c28_we;
  logic channel_flags_c28_intr_enable_qs;
  logic channel_flags_c28_intr_enable_wd;
  logic channel_flags_c28_intr_enable_we;
  logic [30:0] channel_flags_c28_field1_qs;
  logic [30:0] channel_flags_c28_field1_wd;
  logic channel_flags_c28_field1_we;
  logic [31:0] length_c28_qs;
  logic [31:0] length_c28_wd;
  logic length_c28_we;
  logic [7:0] message_header_c28_message_id_qs;
  logic [7:0] message_header_c28_message_id_wd;
  logic message_header_c28_message_id_we;
  logic [1:0] message_header_c28_message_type_qs;
  logic [1:0] message_header_c28_message_type_wd;
  logic message_header_c28_message_type_we;
  logic [7:0] message_header_c28_protocol_id_qs;
  logic [7:0] message_header_c28_protocol_id_wd;
  logic message_header_c28_protocol_id_we;
  logic [9:0] message_header_c28_token_qs;
  logic [9:0] message_header_c28_token_wd;
  logic message_header_c28_token_we;
  logic [3:0] message_header_c28_field1_qs;
  logic [3:0] message_header_c28_field1_wd;
  logic message_header_c28_field1_we;
  logic [31:0] message_payload_1_c28_qs;
  logic [31:0] message_payload_1_c28_wd;
  logic message_payload_1_c28_we;
  logic doorbell_c28_intr_qs;
  logic doorbell_c28_intr_wd;
  logic doorbell_c28_intr_we;
  logic [30:0] doorbell_c28_preserve_mask_qs;
  logic [30:0] doorbell_c28_preserve_mask_wd;
  logic doorbell_c28_preserve_mask_we;
  logic completion_interrupt_c28_intr_qs;
  logic completion_interrupt_c28_intr_wd;
  logic completion_interrupt_c28_intr_we;
  logic [30:0] completion_interrupt_c28_preserve_mask_qs;
  logic [30:0] completion_interrupt_c28_preserve_mask_wd;
  logic completion_interrupt_c28_preserve_mask_we;
  logic [31:0] reserved_1_c29_qs;
  logic [31:0] reserved_1_c29_wd;
  logic reserved_1_c29_we;
  logic channel_status_c29_channel_free_qs;
  logic channel_status_c29_channel_free_wd;
  logic channel_status_c29_channel_free_we;
  logic channel_status_c29_channel_error_qs;
  logic channel_status_c29_channel_error_wd;
  logic channel_status_c29_channel_error_we;
  logic [29:0] channel_status_c29_field1_qs;
  logic [29:0] channel_status_c29_field1_wd;
  logic channel_status_c29_field1_we;
  logic [31:0] reserved_2_c29_qs;
  logic [31:0] reserved_2_c29_wd;
  logic reserved_2_c29_we;
  logic channel_flags_c29_intr_enable_qs;
  logic channel_flags_c29_intr_enable_wd;
  logic channel_flags_c29_intr_enable_we;
  logic [30:0] channel_flags_c29_field1_qs;
  logic [30:0] channel_flags_c29_field1_wd;
  logic channel_flags_c29_field1_we;
  logic [31:0] length_c29_qs;
  logic [31:0] length_c29_wd;
  logic length_c29_we;
  logic [7:0] message_header_c29_message_id_qs;
  logic [7:0] message_header_c29_message_id_wd;
  logic message_header_c29_message_id_we;
  logic [1:0] message_header_c29_message_type_qs;
  logic [1:0] message_header_c29_message_type_wd;
  logic message_header_c29_message_type_we;
  logic [7:0] message_header_c29_protocol_id_qs;
  logic [7:0] message_header_c29_protocol_id_wd;
  logic message_header_c29_protocol_id_we;
  logic [9:0] message_header_c29_token_qs;
  logic [9:0] message_header_c29_token_wd;
  logic message_header_c29_token_we;
  logic [3:0] message_header_c29_field1_qs;
  logic [3:0] message_header_c29_field1_wd;
  logic message_header_c29_field1_we;
  logic [31:0] message_payload_1_c29_qs;
  logic [31:0] message_payload_1_c29_wd;
  logic message_payload_1_c29_we;
  logic doorbell_c29_intr_qs;
  logic doorbell_c29_intr_wd;
  logic doorbell_c29_intr_we;
  logic [30:0] doorbell_c29_preserve_mask_qs;
  logic [30:0] doorbell_c29_preserve_mask_wd;
  logic doorbell_c29_preserve_mask_we;
  logic completion_interrupt_c29_intr_qs;
  logic completion_interrupt_c29_intr_wd;
  logic completion_interrupt_c29_intr_we;
  logic [30:0] completion_interrupt_c29_preserve_mask_qs;
  logic [30:0] completion_interrupt_c29_preserve_mask_wd;
  logic completion_interrupt_c29_preserve_mask_we;
  logic [31:0] reserved_1_c30_qs;
  logic [31:0] reserved_1_c30_wd;
  logic reserved_1_c30_we;
  logic channel_status_c30_channel_free_qs;
  logic channel_status_c30_channel_free_wd;
  logic channel_status_c30_channel_free_we;
  logic channel_status_c30_channel_error_qs;
  logic channel_status_c30_channel_error_wd;
  logic channel_status_c30_channel_error_we;
  logic [29:0] channel_status_c30_field1_qs;
  logic [29:0] channel_status_c30_field1_wd;
  logic channel_status_c30_field1_we;
  logic [31:0] reserved_2_c30_qs;
  logic [31:0] reserved_2_c30_wd;
  logic reserved_2_c30_we;
  logic channel_flags_c30_intr_enable_qs;
  logic channel_flags_c30_intr_enable_wd;
  logic channel_flags_c30_intr_enable_we;
  logic [30:0] channel_flags_c30_field1_qs;
  logic [30:0] channel_flags_c30_field1_wd;
  logic channel_flags_c30_field1_we;
  logic [31:0] length_c30_qs;
  logic [31:0] length_c30_wd;
  logic length_c30_we;
  logic [7:0] message_header_c30_message_id_qs;
  logic [7:0] message_header_c30_message_id_wd;
  logic message_header_c30_message_id_we;
  logic [1:0] message_header_c30_message_type_qs;
  logic [1:0] message_header_c30_message_type_wd;
  logic message_header_c30_message_type_we;
  logic [7:0] message_header_c30_protocol_id_qs;
  logic [7:0] message_header_c30_protocol_id_wd;
  logic message_header_c30_protocol_id_we;
  logic [9:0] message_header_c30_token_qs;
  logic [9:0] message_header_c30_token_wd;
  logic message_header_c30_token_we;
  logic [3:0] message_header_c30_field1_qs;
  logic [3:0] message_header_c30_field1_wd;
  logic message_header_c30_field1_we;
  logic [31:0] message_payload_1_c30_qs;
  logic [31:0] message_payload_1_c30_wd;
  logic message_payload_1_c30_we;
  logic doorbell_c30_intr_qs;
  logic doorbell_c30_intr_wd;
  logic doorbell_c30_intr_we;
  logic [30:0] doorbell_c30_preserve_mask_qs;
  logic [30:0] doorbell_c30_preserve_mask_wd;
  logic doorbell_c30_preserve_mask_we;
  logic completion_interrupt_c30_intr_qs;
  logic completion_interrupt_c30_intr_wd;
  logic completion_interrupt_c30_intr_we;
  logic [30:0] completion_interrupt_c30_preserve_mask_qs;
  logic [30:0] completion_interrupt_c30_preserve_mask_wd;
  logic completion_interrupt_c30_preserve_mask_we;
  logic [31:0] reserved_1_c31_qs;
  logic [31:0] reserved_1_c31_wd;
  logic reserved_1_c31_we;
  logic channel_status_c31_channel_free_qs;
  logic channel_status_c31_channel_free_wd;
  logic channel_status_c31_channel_free_we;
  logic channel_status_c31_channel_error_qs;
  logic channel_status_c31_channel_error_wd;
  logic channel_status_c31_channel_error_we;
  logic [29:0] channel_status_c31_field1_qs;
  logic [29:0] channel_status_c31_field1_wd;
  logic channel_status_c31_field1_we;
  logic [31:0] reserved_2_c31_qs;
  logic [31:0] reserved_2_c31_wd;
  logic reserved_2_c31_we;
  logic channel_flags_c31_intr_enable_qs;
  logic channel_flags_c31_intr_enable_wd;
  logic channel_flags_c31_intr_enable_we;
  logic [30:0] channel_flags_c31_field1_qs;
  logic [30:0] channel_flags_c31_field1_wd;
  logic channel_flags_c31_field1_we;
  logic [31:0] length_c31_qs;
  logic [31:0] length_c31_wd;
  logic length_c31_we;
  logic [7:0] message_header_c31_message_id_qs;
  logic [7:0] message_header_c31_message_id_wd;
  logic message_header_c31_message_id_we;
  logic [1:0] message_header_c31_message_type_qs;
  logic [1:0] message_header_c31_message_type_wd;
  logic message_header_c31_message_type_we;
  logic [7:0] message_header_c31_protocol_id_qs;
  logic [7:0] message_header_c31_protocol_id_wd;
  logic message_header_c31_protocol_id_we;
  logic [9:0] message_header_c31_token_qs;
  logic [9:0] message_header_c31_token_wd;
  logic message_header_c31_token_we;
  logic [3:0] message_header_c31_field1_qs;
  logic [3:0] message_header_c31_field1_wd;
  logic message_header_c31_field1_we;
  logic [31:0] message_payload_1_c31_qs;
  logic [31:0] message_payload_1_c31_wd;
  logic message_payload_1_c31_we;
  logic doorbell_c31_intr_qs;
  logic doorbell_c31_intr_wd;
  logic doorbell_c31_intr_we;
  logic [30:0] doorbell_c31_preserve_mask_qs;
  logic [30:0] doorbell_c31_preserve_mask_wd;
  logic doorbell_c31_preserve_mask_we;
  logic completion_interrupt_c31_intr_qs;
  logic completion_interrupt_c31_intr_wd;
  logic completion_interrupt_c31_intr_we;
  logic [30:0] completion_interrupt_c31_preserve_mask_qs;
  logic [30:0] completion_interrupt_c31_preserve_mask_wd;
  logic completion_interrupt_c31_preserve_mask_we;
  logic [31:0] reserved_1_c32_qs;
  logic [31:0] reserved_1_c32_wd;
  logic reserved_1_c32_we;
  logic channel_status_c32_channel_free_qs;
  logic channel_status_c32_channel_free_wd;
  logic channel_status_c32_channel_free_we;
  logic channel_status_c32_channel_error_qs;
  logic channel_status_c32_channel_error_wd;
  logic channel_status_c32_channel_error_we;
  logic [29:0] channel_status_c32_field1_qs;
  logic [29:0] channel_status_c32_field1_wd;
  logic channel_status_c32_field1_we;
  logic [31:0] reserved_2_c32_qs;
  logic [31:0] reserved_2_c32_wd;
  logic reserved_2_c32_we;
  logic channel_flags_c32_intr_enable_qs;
  logic channel_flags_c32_intr_enable_wd;
  logic channel_flags_c32_intr_enable_we;
  logic [30:0] channel_flags_c32_field1_qs;
  logic [30:0] channel_flags_c32_field1_wd;
  logic channel_flags_c32_field1_we;
  logic [31:0] length_c32_qs;
  logic [31:0] length_c32_wd;
  logic length_c32_we;
  logic [7:0] message_header_c32_message_id_qs;
  logic [7:0] message_header_c32_message_id_wd;
  logic message_header_c32_message_id_we;
  logic [1:0] message_header_c32_message_type_qs;
  logic [1:0] message_header_c32_message_type_wd;
  logic message_header_c32_message_type_we;
  logic [7:0] message_header_c32_protocol_id_qs;
  logic [7:0] message_header_c32_protocol_id_wd;
  logic message_header_c32_protocol_id_we;
  logic [9:0] message_header_c32_token_qs;
  logic [9:0] message_header_c32_token_wd;
  logic message_header_c32_token_we;
  logic [3:0] message_header_c32_field1_qs;
  logic [3:0] message_header_c32_field1_wd;
  logic message_header_c32_field1_we;
  logic [31:0] message_payload_1_c32_qs;
  logic [31:0] message_payload_1_c32_wd;
  logic message_payload_1_c32_we;
  logic doorbell_c32_intr_qs;
  logic doorbell_c32_intr_wd;
  logic doorbell_c32_intr_we;
  logic [30:0] doorbell_c32_preserve_mask_qs;
  logic [30:0] doorbell_c32_preserve_mask_wd;
  logic doorbell_c32_preserve_mask_we;
  logic completion_interrupt_c32_intr_qs;
  logic completion_interrupt_c32_intr_wd;
  logic completion_interrupt_c32_intr_we;
  logic [30:0] completion_interrupt_c32_preserve_mask_qs;
  logic [30:0] completion_interrupt_c32_preserve_mask_wd;
  logic completion_interrupt_c32_preserve_mask_we;
  logic [31:0] reserved_1_c33_qs;
  logic [31:0] reserved_1_c33_wd;
  logic reserved_1_c33_we;
  logic channel_status_c33_channel_free_qs;
  logic channel_status_c33_channel_free_wd;
  logic channel_status_c33_channel_free_we;
  logic channel_status_c33_channel_error_qs;
  logic channel_status_c33_channel_error_wd;
  logic channel_status_c33_channel_error_we;
  logic [29:0] channel_status_c33_field1_qs;
  logic [29:0] channel_status_c33_field1_wd;
  logic channel_status_c33_field1_we;
  logic [31:0] reserved_2_c33_qs;
  logic [31:0] reserved_2_c33_wd;
  logic reserved_2_c33_we;
  logic channel_flags_c33_intr_enable_qs;
  logic channel_flags_c33_intr_enable_wd;
  logic channel_flags_c33_intr_enable_we;
  logic [30:0] channel_flags_c33_field1_qs;
  logic [30:0] channel_flags_c33_field1_wd;
  logic channel_flags_c33_field1_we;
  logic [31:0] length_c33_qs;
  logic [31:0] length_c33_wd;
  logic length_c33_we;
  logic [7:0] message_header_c33_message_id_qs;
  logic [7:0] message_header_c33_message_id_wd;
  logic message_header_c33_message_id_we;
  logic [1:0] message_header_c33_message_type_qs;
  logic [1:0] message_header_c33_message_type_wd;
  logic message_header_c33_message_type_we;
  logic [7:0] message_header_c33_protocol_id_qs;
  logic [7:0] message_header_c33_protocol_id_wd;
  logic message_header_c33_protocol_id_we;
  logic [9:0] message_header_c33_token_qs;
  logic [9:0] message_header_c33_token_wd;
  logic message_header_c33_token_we;
  logic [3:0] message_header_c33_field1_qs;
  logic [3:0] message_header_c33_field1_wd;
  logic message_header_c33_field1_we;
  logic [31:0] message_payload_1_c33_qs;
  logic [31:0] message_payload_1_c33_wd;
  logic message_payload_1_c33_we;
  logic doorbell_c33_intr_qs;
  logic doorbell_c33_intr_wd;
  logic doorbell_c33_intr_we;
  logic [30:0] doorbell_c33_preserve_mask_qs;
  logic [30:0] doorbell_c33_preserve_mask_wd;
  logic doorbell_c33_preserve_mask_we;
  logic completion_interrupt_c33_intr_qs;
  logic completion_interrupt_c33_intr_wd;
  logic completion_interrupt_c33_intr_we;
  logic [30:0] completion_interrupt_c33_preserve_mask_qs;
  logic [30:0] completion_interrupt_c33_preserve_mask_wd;
  logic completion_interrupt_c33_preserve_mask_we;
  logic [31:0] reserved_1_c34_qs;
  logic [31:0] reserved_1_c34_wd;
  logic reserved_1_c34_we;
  logic channel_status_c34_channel_free_qs;
  logic channel_status_c34_channel_free_wd;
  logic channel_status_c34_channel_free_we;
  logic channel_status_c34_channel_error_qs;
  logic channel_status_c34_channel_error_wd;
  logic channel_status_c34_channel_error_we;
  logic [29:0] channel_status_c34_field1_qs;
  logic [29:0] channel_status_c34_field1_wd;
  logic channel_status_c34_field1_we;
  logic [31:0] reserved_2_c34_qs;
  logic [31:0] reserved_2_c34_wd;
  logic reserved_2_c34_we;
  logic channel_flags_c34_intr_enable_qs;
  logic channel_flags_c34_intr_enable_wd;
  logic channel_flags_c34_intr_enable_we;
  logic [30:0] channel_flags_c34_field1_qs;
  logic [30:0] channel_flags_c34_field1_wd;
  logic channel_flags_c34_field1_we;
  logic [31:0] length_c34_qs;
  logic [31:0] length_c34_wd;
  logic length_c34_we;
  logic [7:0] message_header_c34_message_id_qs;
  logic [7:0] message_header_c34_message_id_wd;
  logic message_header_c34_message_id_we;
  logic [1:0] message_header_c34_message_type_qs;
  logic [1:0] message_header_c34_message_type_wd;
  logic message_header_c34_message_type_we;
  logic [7:0] message_header_c34_protocol_id_qs;
  logic [7:0] message_header_c34_protocol_id_wd;
  logic message_header_c34_protocol_id_we;
  logic [9:0] message_header_c34_token_qs;
  logic [9:0] message_header_c34_token_wd;
  logic message_header_c34_token_we;
  logic [3:0] message_header_c34_field1_qs;
  logic [3:0] message_header_c34_field1_wd;
  logic message_header_c34_field1_we;
  logic [31:0] message_payload_1_c34_qs;
  logic [31:0] message_payload_1_c34_wd;
  logic message_payload_1_c34_we;
  logic doorbell_c34_intr_qs;
  logic doorbell_c34_intr_wd;
  logic doorbell_c34_intr_we;
  logic [30:0] doorbell_c34_preserve_mask_qs;
  logic [30:0] doorbell_c34_preserve_mask_wd;
  logic doorbell_c34_preserve_mask_we;
  logic completion_interrupt_c34_intr_qs;
  logic completion_interrupt_c34_intr_wd;
  logic completion_interrupt_c34_intr_we;
  logic [30:0] completion_interrupt_c34_preserve_mask_qs;
  logic [30:0] completion_interrupt_c34_preserve_mask_wd;
  logic completion_interrupt_c34_preserve_mask_we;
  logic [31:0] reserved_1_c35_qs;
  logic [31:0] reserved_1_c35_wd;
  logic reserved_1_c35_we;
  logic channel_status_c35_channel_free_qs;
  logic channel_status_c35_channel_free_wd;
  logic channel_status_c35_channel_free_we;
  logic channel_status_c35_channel_error_qs;
  logic channel_status_c35_channel_error_wd;
  logic channel_status_c35_channel_error_we;
  logic [29:0] channel_status_c35_field1_qs;
  logic [29:0] channel_status_c35_field1_wd;
  logic channel_status_c35_field1_we;
  logic [31:0] reserved_2_c35_qs;
  logic [31:0] reserved_2_c35_wd;
  logic reserved_2_c35_we;
  logic channel_flags_c35_intr_enable_qs;
  logic channel_flags_c35_intr_enable_wd;
  logic channel_flags_c35_intr_enable_we;
  logic [30:0] channel_flags_c35_field1_qs;
  logic [30:0] channel_flags_c35_field1_wd;
  logic channel_flags_c35_field1_we;
  logic [31:0] length_c35_qs;
  logic [31:0] length_c35_wd;
  logic length_c35_we;
  logic [7:0] message_header_c35_message_id_qs;
  logic [7:0] message_header_c35_message_id_wd;
  logic message_header_c35_message_id_we;
  logic [1:0] message_header_c35_message_type_qs;
  logic [1:0] message_header_c35_message_type_wd;
  logic message_header_c35_message_type_we;
  logic [7:0] message_header_c35_protocol_id_qs;
  logic [7:0] message_header_c35_protocol_id_wd;
  logic message_header_c35_protocol_id_we;
  logic [9:0] message_header_c35_token_qs;
  logic [9:0] message_header_c35_token_wd;
  logic message_header_c35_token_we;
  logic [3:0] message_header_c35_field1_qs;
  logic [3:0] message_header_c35_field1_wd;
  logic message_header_c35_field1_we;
  logic [31:0] message_payload_1_c35_qs;
  logic [31:0] message_payload_1_c35_wd;
  logic message_payload_1_c35_we;
  logic doorbell_c35_intr_qs;
  logic doorbell_c35_intr_wd;
  logic doorbell_c35_intr_we;
  logic [30:0] doorbell_c35_preserve_mask_qs;
  logic [30:0] doorbell_c35_preserve_mask_wd;
  logic doorbell_c35_preserve_mask_we;
  logic completion_interrupt_c35_intr_qs;
  logic completion_interrupt_c35_intr_wd;
  logic completion_interrupt_c35_intr_we;
  logic [30:0] completion_interrupt_c35_preserve_mask_qs;
  logic [30:0] completion_interrupt_c35_preserve_mask_wd;
  logic completion_interrupt_c35_preserve_mask_we;
  logic [31:0] reserved_1_c36_qs;
  logic [31:0] reserved_1_c36_wd;
  logic reserved_1_c36_we;
  logic channel_status_c36_channel_free_qs;
  logic channel_status_c36_channel_free_wd;
  logic channel_status_c36_channel_free_we;
  logic channel_status_c36_channel_error_qs;
  logic channel_status_c36_channel_error_wd;
  logic channel_status_c36_channel_error_we;
  logic [29:0] channel_status_c36_field1_qs;
  logic [29:0] channel_status_c36_field1_wd;
  logic channel_status_c36_field1_we;
  logic [31:0] reserved_2_c36_qs;
  logic [31:0] reserved_2_c36_wd;
  logic reserved_2_c36_we;
  logic channel_flags_c36_intr_enable_qs;
  logic channel_flags_c36_intr_enable_wd;
  logic channel_flags_c36_intr_enable_we;
  logic [30:0] channel_flags_c36_field1_qs;
  logic [30:0] channel_flags_c36_field1_wd;
  logic channel_flags_c36_field1_we;
  logic [31:0] length_c36_qs;
  logic [31:0] length_c36_wd;
  logic length_c36_we;
  logic [7:0] message_header_c36_message_id_qs;
  logic [7:0] message_header_c36_message_id_wd;
  logic message_header_c36_message_id_we;
  logic [1:0] message_header_c36_message_type_qs;
  logic [1:0] message_header_c36_message_type_wd;
  logic message_header_c36_message_type_we;
  logic [7:0] message_header_c36_protocol_id_qs;
  logic [7:0] message_header_c36_protocol_id_wd;
  logic message_header_c36_protocol_id_we;
  logic [9:0] message_header_c36_token_qs;
  logic [9:0] message_header_c36_token_wd;
  logic message_header_c36_token_we;
  logic [3:0] message_header_c36_field1_qs;
  logic [3:0] message_header_c36_field1_wd;
  logic message_header_c36_field1_we;
  logic [31:0] message_payload_1_c36_qs;
  logic [31:0] message_payload_1_c36_wd;
  logic message_payload_1_c36_we;
  logic doorbell_c36_intr_qs;
  logic doorbell_c36_intr_wd;
  logic doorbell_c36_intr_we;
  logic [30:0] doorbell_c36_preserve_mask_qs;
  logic [30:0] doorbell_c36_preserve_mask_wd;
  logic doorbell_c36_preserve_mask_we;
  logic completion_interrupt_c36_intr_qs;
  logic completion_interrupt_c36_intr_wd;
  logic completion_interrupt_c36_intr_we;
  logic [30:0] completion_interrupt_c36_preserve_mask_qs;
  logic [30:0] completion_interrupt_c36_preserve_mask_wd;
  logic completion_interrupt_c36_preserve_mask_we;
  logic [31:0] reserved_1_c37_qs;
  logic [31:0] reserved_1_c37_wd;
  logic reserved_1_c37_we;
  logic channel_status_c37_channel_free_qs;
  logic channel_status_c37_channel_free_wd;
  logic channel_status_c37_channel_free_we;
  logic channel_status_c37_channel_error_qs;
  logic channel_status_c37_channel_error_wd;
  logic channel_status_c37_channel_error_we;
  logic [29:0] channel_status_c37_field1_qs;
  logic [29:0] channel_status_c37_field1_wd;
  logic channel_status_c37_field1_we;
  logic [31:0] reserved_2_c37_qs;
  logic [31:0] reserved_2_c37_wd;
  logic reserved_2_c37_we;
  logic channel_flags_c37_intr_enable_qs;
  logic channel_flags_c37_intr_enable_wd;
  logic channel_flags_c37_intr_enable_we;
  logic [30:0] channel_flags_c37_field1_qs;
  logic [30:0] channel_flags_c37_field1_wd;
  logic channel_flags_c37_field1_we;
  logic [31:0] length_c37_qs;
  logic [31:0] length_c37_wd;
  logic length_c37_we;
  logic [7:0] message_header_c37_message_id_qs;
  logic [7:0] message_header_c37_message_id_wd;
  logic message_header_c37_message_id_we;
  logic [1:0] message_header_c37_message_type_qs;
  logic [1:0] message_header_c37_message_type_wd;
  logic message_header_c37_message_type_we;
  logic [7:0] message_header_c37_protocol_id_qs;
  logic [7:0] message_header_c37_protocol_id_wd;
  logic message_header_c37_protocol_id_we;
  logic [9:0] message_header_c37_token_qs;
  logic [9:0] message_header_c37_token_wd;
  logic message_header_c37_token_we;
  logic [3:0] message_header_c37_field1_qs;
  logic [3:0] message_header_c37_field1_wd;
  logic message_header_c37_field1_we;
  logic [31:0] message_payload_1_c37_qs;
  logic [31:0] message_payload_1_c37_wd;
  logic message_payload_1_c37_we;
  logic doorbell_c37_intr_qs;
  logic doorbell_c37_intr_wd;
  logic doorbell_c37_intr_we;
  logic [30:0] doorbell_c37_preserve_mask_qs;
  logic [30:0] doorbell_c37_preserve_mask_wd;
  logic doorbell_c37_preserve_mask_we;
  logic completion_interrupt_c37_intr_qs;
  logic completion_interrupt_c37_intr_wd;
  logic completion_interrupt_c37_intr_we;
  logic [30:0] completion_interrupt_c37_preserve_mask_qs;
  logic [30:0] completion_interrupt_c37_preserve_mask_wd;
  logic completion_interrupt_c37_preserve_mask_we;
  logic [31:0] reserved_1_c38_qs;
  logic [31:0] reserved_1_c38_wd;
  logic reserved_1_c38_we;
  logic channel_status_c38_channel_free_qs;
  logic channel_status_c38_channel_free_wd;
  logic channel_status_c38_channel_free_we;
  logic channel_status_c38_channel_error_qs;
  logic channel_status_c38_channel_error_wd;
  logic channel_status_c38_channel_error_we;
  logic [29:0] channel_status_c38_field1_qs;
  logic [29:0] channel_status_c38_field1_wd;
  logic channel_status_c38_field1_we;
  logic [31:0] reserved_2_c38_qs;
  logic [31:0] reserved_2_c38_wd;
  logic reserved_2_c38_we;
  logic channel_flags_c38_intr_enable_qs;
  logic channel_flags_c38_intr_enable_wd;
  logic channel_flags_c38_intr_enable_we;
  logic [30:0] channel_flags_c38_field1_qs;
  logic [30:0] channel_flags_c38_field1_wd;
  logic channel_flags_c38_field1_we;
  logic [31:0] length_c38_qs;
  logic [31:0] length_c38_wd;
  logic length_c38_we;
  logic [7:0] message_header_c38_message_id_qs;
  logic [7:0] message_header_c38_message_id_wd;
  logic message_header_c38_message_id_we;
  logic [1:0] message_header_c38_message_type_qs;
  logic [1:0] message_header_c38_message_type_wd;
  logic message_header_c38_message_type_we;
  logic [7:0] message_header_c38_protocol_id_qs;
  logic [7:0] message_header_c38_protocol_id_wd;
  logic message_header_c38_protocol_id_we;
  logic [9:0] message_header_c38_token_qs;
  logic [9:0] message_header_c38_token_wd;
  logic message_header_c38_token_we;
  logic [3:0] message_header_c38_field1_qs;
  logic [3:0] message_header_c38_field1_wd;
  logic message_header_c38_field1_we;
  logic [31:0] message_payload_1_c38_qs;
  logic [31:0] message_payload_1_c38_wd;
  logic message_payload_1_c38_we;
  logic doorbell_c38_intr_qs;
  logic doorbell_c38_intr_wd;
  logic doorbell_c38_intr_we;
  logic [30:0] doorbell_c38_preserve_mask_qs;
  logic [30:0] doorbell_c38_preserve_mask_wd;
  logic doorbell_c38_preserve_mask_we;
  logic completion_interrupt_c38_intr_qs;
  logic completion_interrupt_c38_intr_wd;
  logic completion_interrupt_c38_intr_we;
  logic [30:0] completion_interrupt_c38_preserve_mask_qs;
  logic [30:0] completion_interrupt_c38_preserve_mask_wd;
  logic completion_interrupt_c38_preserve_mask_we;
  logic [31:0] reserved_1_c39_qs;
  logic [31:0] reserved_1_c39_wd;
  logic reserved_1_c39_we;
  logic channel_status_c39_channel_free_qs;
  logic channel_status_c39_channel_free_wd;
  logic channel_status_c39_channel_free_we;
  logic channel_status_c39_channel_error_qs;
  logic channel_status_c39_channel_error_wd;
  logic channel_status_c39_channel_error_we;
  logic [29:0] channel_status_c39_field1_qs;
  logic [29:0] channel_status_c39_field1_wd;
  logic channel_status_c39_field1_we;
  logic [31:0] reserved_2_c39_qs;
  logic [31:0] reserved_2_c39_wd;
  logic reserved_2_c39_we;
  logic channel_flags_c39_intr_enable_qs;
  logic channel_flags_c39_intr_enable_wd;
  logic channel_flags_c39_intr_enable_we;
  logic [30:0] channel_flags_c39_field1_qs;
  logic [30:0] channel_flags_c39_field1_wd;
  logic channel_flags_c39_field1_we;
  logic [31:0] length_c39_qs;
  logic [31:0] length_c39_wd;
  logic length_c39_we;
  logic [7:0] message_header_c39_message_id_qs;
  logic [7:0] message_header_c39_message_id_wd;
  logic message_header_c39_message_id_we;
  logic [1:0] message_header_c39_message_type_qs;
  logic [1:0] message_header_c39_message_type_wd;
  logic message_header_c39_message_type_we;
  logic [7:0] message_header_c39_protocol_id_qs;
  logic [7:0] message_header_c39_protocol_id_wd;
  logic message_header_c39_protocol_id_we;
  logic [9:0] message_header_c39_token_qs;
  logic [9:0] message_header_c39_token_wd;
  logic message_header_c39_token_we;
  logic [3:0] message_header_c39_field1_qs;
  logic [3:0] message_header_c39_field1_wd;
  logic message_header_c39_field1_we;
  logic [31:0] message_payload_1_c39_qs;
  logic [31:0] message_payload_1_c39_wd;
  logic message_payload_1_c39_we;
  logic doorbell_c39_intr_qs;
  logic doorbell_c39_intr_wd;
  logic doorbell_c39_intr_we;
  logic [30:0] doorbell_c39_preserve_mask_qs;
  logic [30:0] doorbell_c39_preserve_mask_wd;
  logic doorbell_c39_preserve_mask_we;
  logic completion_interrupt_c39_intr_qs;
  logic completion_interrupt_c39_intr_wd;
  logic completion_interrupt_c39_intr_we;
  logic [30:0] completion_interrupt_c39_preserve_mask_qs;
  logic [30:0] completion_interrupt_c39_preserve_mask_wd;
  logic completion_interrupt_c39_preserve_mask_we;
  logic [31:0] reserved_1_c40_qs;
  logic [31:0] reserved_1_c40_wd;
  logic reserved_1_c40_we;
  logic channel_status_c40_channel_free_qs;
  logic channel_status_c40_channel_free_wd;
  logic channel_status_c40_channel_free_we;
  logic channel_status_c40_channel_error_qs;
  logic channel_status_c40_channel_error_wd;
  logic channel_status_c40_channel_error_we;
  logic [29:0] channel_status_c40_field1_qs;
  logic [29:0] channel_status_c40_field1_wd;
  logic channel_status_c40_field1_we;
  logic [31:0] reserved_2_c40_qs;
  logic [31:0] reserved_2_c40_wd;
  logic reserved_2_c40_we;
  logic channel_flags_c40_intr_enable_qs;
  logic channel_flags_c40_intr_enable_wd;
  logic channel_flags_c40_intr_enable_we;
  logic [30:0] channel_flags_c40_field1_qs;
  logic [30:0] channel_flags_c40_field1_wd;
  logic channel_flags_c40_field1_we;
  logic [31:0] length_c40_qs;
  logic [31:0] length_c40_wd;
  logic length_c40_we;
  logic [7:0] message_header_c40_message_id_qs;
  logic [7:0] message_header_c40_message_id_wd;
  logic message_header_c40_message_id_we;
  logic [1:0] message_header_c40_message_type_qs;
  logic [1:0] message_header_c40_message_type_wd;
  logic message_header_c40_message_type_we;
  logic [7:0] message_header_c40_protocol_id_qs;
  logic [7:0] message_header_c40_protocol_id_wd;
  logic message_header_c40_protocol_id_we;
  logic [9:0] message_header_c40_token_qs;
  logic [9:0] message_header_c40_token_wd;
  logic message_header_c40_token_we;
  logic [3:0] message_header_c40_field1_qs;
  logic [3:0] message_header_c40_field1_wd;
  logic message_header_c40_field1_we;
  logic [31:0] message_payload_1_c40_qs;
  logic [31:0] message_payload_1_c40_wd;
  logic message_payload_1_c40_we;
  logic doorbell_c40_intr_qs;
  logic doorbell_c40_intr_wd;
  logic doorbell_c40_intr_we;
  logic [30:0] doorbell_c40_preserve_mask_qs;
  logic [30:0] doorbell_c40_preserve_mask_wd;
  logic doorbell_c40_preserve_mask_we;
  logic completion_interrupt_c40_intr_qs;
  logic completion_interrupt_c40_intr_wd;
  logic completion_interrupt_c40_intr_we;
  logic [30:0] completion_interrupt_c40_preserve_mask_qs;
  logic [30:0] completion_interrupt_c40_preserve_mask_wd;
  logic completion_interrupt_c40_preserve_mask_we;
  logic [31:0] reserved_1_c41_qs;
  logic [31:0] reserved_1_c41_wd;
  logic reserved_1_c41_we;
  logic channel_status_c41_channel_free_qs;
  logic channel_status_c41_channel_free_wd;
  logic channel_status_c41_channel_free_we;
  logic channel_status_c41_channel_error_qs;
  logic channel_status_c41_channel_error_wd;
  logic channel_status_c41_channel_error_we;
  logic [29:0] channel_status_c41_field1_qs;
  logic [29:0] channel_status_c41_field1_wd;
  logic channel_status_c41_field1_we;
  logic [31:0] reserved_2_c41_qs;
  logic [31:0] reserved_2_c41_wd;
  logic reserved_2_c41_we;
  logic channel_flags_c41_intr_enable_qs;
  logic channel_flags_c41_intr_enable_wd;
  logic channel_flags_c41_intr_enable_we;
  logic [30:0] channel_flags_c41_field1_qs;
  logic [30:0] channel_flags_c41_field1_wd;
  logic channel_flags_c41_field1_we;
  logic [31:0] length_c41_qs;
  logic [31:0] length_c41_wd;
  logic length_c41_we;
  logic [7:0] message_header_c41_message_id_qs;
  logic [7:0] message_header_c41_message_id_wd;
  logic message_header_c41_message_id_we;
  logic [1:0] message_header_c41_message_type_qs;
  logic [1:0] message_header_c41_message_type_wd;
  logic message_header_c41_message_type_we;
  logic [7:0] message_header_c41_protocol_id_qs;
  logic [7:0] message_header_c41_protocol_id_wd;
  logic message_header_c41_protocol_id_we;
  logic [9:0] message_header_c41_token_qs;
  logic [9:0] message_header_c41_token_wd;
  logic message_header_c41_token_we;
  logic [3:0] message_header_c41_field1_qs;
  logic [3:0] message_header_c41_field1_wd;
  logic message_header_c41_field1_we;
  logic [31:0] message_payload_1_c41_qs;
  logic [31:0] message_payload_1_c41_wd;
  logic message_payload_1_c41_we;
  logic doorbell_c41_intr_qs;
  logic doorbell_c41_intr_wd;
  logic doorbell_c41_intr_we;
  logic [30:0] doorbell_c41_preserve_mask_qs;
  logic [30:0] doorbell_c41_preserve_mask_wd;
  logic doorbell_c41_preserve_mask_we;
  logic completion_interrupt_c41_intr_qs;
  logic completion_interrupt_c41_intr_wd;
  logic completion_interrupt_c41_intr_we;
  logic [30:0] completion_interrupt_c41_preserve_mask_qs;
  logic [30:0] completion_interrupt_c41_preserve_mask_wd;
  logic completion_interrupt_c41_preserve_mask_we;
  logic [31:0] reserved_1_c42_qs;
  logic [31:0] reserved_1_c42_wd;
  logic reserved_1_c42_we;
  logic channel_status_c42_channel_free_qs;
  logic channel_status_c42_channel_free_wd;
  logic channel_status_c42_channel_free_we;
  logic channel_status_c42_channel_error_qs;
  logic channel_status_c42_channel_error_wd;
  logic channel_status_c42_channel_error_we;
  logic [29:0] channel_status_c42_field1_qs;
  logic [29:0] channel_status_c42_field1_wd;
  logic channel_status_c42_field1_we;
  logic [31:0] reserved_2_c42_qs;
  logic [31:0] reserved_2_c42_wd;
  logic reserved_2_c42_we;
  logic channel_flags_c42_intr_enable_qs;
  logic channel_flags_c42_intr_enable_wd;
  logic channel_flags_c42_intr_enable_we;
  logic [30:0] channel_flags_c42_field1_qs;
  logic [30:0] channel_flags_c42_field1_wd;
  logic channel_flags_c42_field1_we;
  logic [31:0] length_c42_qs;
  logic [31:0] length_c42_wd;
  logic length_c42_we;
  logic [7:0] message_header_c42_message_id_qs;
  logic [7:0] message_header_c42_message_id_wd;
  logic message_header_c42_message_id_we;
  logic [1:0] message_header_c42_message_type_qs;
  logic [1:0] message_header_c42_message_type_wd;
  logic message_header_c42_message_type_we;
  logic [7:0] message_header_c42_protocol_id_qs;
  logic [7:0] message_header_c42_protocol_id_wd;
  logic message_header_c42_protocol_id_we;
  logic [9:0] message_header_c42_token_qs;
  logic [9:0] message_header_c42_token_wd;
  logic message_header_c42_token_we;
  logic [3:0] message_header_c42_field1_qs;
  logic [3:0] message_header_c42_field1_wd;
  logic message_header_c42_field1_we;
  logic [31:0] message_payload_1_c42_qs;
  logic [31:0] message_payload_1_c42_wd;
  logic message_payload_1_c42_we;
  logic doorbell_c42_intr_qs;
  logic doorbell_c42_intr_wd;
  logic doorbell_c42_intr_we;
  logic [30:0] doorbell_c42_preserve_mask_qs;
  logic [30:0] doorbell_c42_preserve_mask_wd;
  logic doorbell_c42_preserve_mask_we;
  logic completion_interrupt_c42_intr_qs;
  logic completion_interrupt_c42_intr_wd;
  logic completion_interrupt_c42_intr_we;
  logic [30:0] completion_interrupt_c42_preserve_mask_qs;
  logic [30:0] completion_interrupt_c42_preserve_mask_wd;
  logic completion_interrupt_c42_preserve_mask_we;
  logic [31:0] reserved_1_c43_qs;
  logic [31:0] reserved_1_c43_wd;
  logic reserved_1_c43_we;
  logic channel_status_c43_channel_free_qs;
  logic channel_status_c43_channel_free_wd;
  logic channel_status_c43_channel_free_we;
  logic channel_status_c43_channel_error_qs;
  logic channel_status_c43_channel_error_wd;
  logic channel_status_c43_channel_error_we;
  logic [29:0] channel_status_c43_field1_qs;
  logic [29:0] channel_status_c43_field1_wd;
  logic channel_status_c43_field1_we;
  logic [31:0] reserved_2_c43_qs;
  logic [31:0] reserved_2_c43_wd;
  logic reserved_2_c43_we;
  logic channel_flags_c43_intr_enable_qs;
  logic channel_flags_c43_intr_enable_wd;
  logic channel_flags_c43_intr_enable_we;
  logic [30:0] channel_flags_c43_field1_qs;
  logic [30:0] channel_flags_c43_field1_wd;
  logic channel_flags_c43_field1_we;
  logic [31:0] length_c43_qs;
  logic [31:0] length_c43_wd;
  logic length_c43_we;
  logic [7:0] message_header_c43_message_id_qs;
  logic [7:0] message_header_c43_message_id_wd;
  logic message_header_c43_message_id_we;
  logic [1:0] message_header_c43_message_type_qs;
  logic [1:0] message_header_c43_message_type_wd;
  logic message_header_c43_message_type_we;
  logic [7:0] message_header_c43_protocol_id_qs;
  logic [7:0] message_header_c43_protocol_id_wd;
  logic message_header_c43_protocol_id_we;
  logic [9:0] message_header_c43_token_qs;
  logic [9:0] message_header_c43_token_wd;
  logic message_header_c43_token_we;
  logic [3:0] message_header_c43_field1_qs;
  logic [3:0] message_header_c43_field1_wd;
  logic message_header_c43_field1_we;
  logic [31:0] message_payload_1_c43_qs;
  logic [31:0] message_payload_1_c43_wd;
  logic message_payload_1_c43_we;
  logic doorbell_c43_intr_qs;
  logic doorbell_c43_intr_wd;
  logic doorbell_c43_intr_we;
  logic [30:0] doorbell_c43_preserve_mask_qs;
  logic [30:0] doorbell_c43_preserve_mask_wd;
  logic doorbell_c43_preserve_mask_we;
  logic completion_interrupt_c43_intr_qs;
  logic completion_interrupt_c43_intr_wd;
  logic completion_interrupt_c43_intr_we;
  logic [30:0] completion_interrupt_c43_preserve_mask_qs;
  logic [30:0] completion_interrupt_c43_preserve_mask_wd;
  logic completion_interrupt_c43_preserve_mask_we;
  logic [31:0] reserved_1_c44_qs;
  logic [31:0] reserved_1_c44_wd;
  logic reserved_1_c44_we;
  logic channel_status_c44_channel_free_qs;
  logic channel_status_c44_channel_free_wd;
  logic channel_status_c44_channel_free_we;
  logic channel_status_c44_channel_error_qs;
  logic channel_status_c44_channel_error_wd;
  logic channel_status_c44_channel_error_we;
  logic [29:0] channel_status_c44_field1_qs;
  logic [29:0] channel_status_c44_field1_wd;
  logic channel_status_c44_field1_we;
  logic [31:0] reserved_2_c44_qs;
  logic [31:0] reserved_2_c44_wd;
  logic reserved_2_c44_we;
  logic channel_flags_c44_intr_enable_qs;
  logic channel_flags_c44_intr_enable_wd;
  logic channel_flags_c44_intr_enable_we;
  logic [30:0] channel_flags_c44_field1_qs;
  logic [30:0] channel_flags_c44_field1_wd;
  logic channel_flags_c44_field1_we;
  logic [31:0] length_c44_qs;
  logic [31:0] length_c44_wd;
  logic length_c44_we;
  logic [7:0] message_header_c44_message_id_qs;
  logic [7:0] message_header_c44_message_id_wd;
  logic message_header_c44_message_id_we;
  logic [1:0] message_header_c44_message_type_qs;
  logic [1:0] message_header_c44_message_type_wd;
  logic message_header_c44_message_type_we;
  logic [7:0] message_header_c44_protocol_id_qs;
  logic [7:0] message_header_c44_protocol_id_wd;
  logic message_header_c44_protocol_id_we;
  logic [9:0] message_header_c44_token_qs;
  logic [9:0] message_header_c44_token_wd;
  logic message_header_c44_token_we;
  logic [3:0] message_header_c44_field1_qs;
  logic [3:0] message_header_c44_field1_wd;
  logic message_header_c44_field1_we;
  logic [31:0] message_payload_1_c44_qs;
  logic [31:0] message_payload_1_c44_wd;
  logic message_payload_1_c44_we;
  logic doorbell_c44_intr_qs;
  logic doorbell_c44_intr_wd;
  logic doorbell_c44_intr_we;
  logic [30:0] doorbell_c44_preserve_mask_qs;
  logic [30:0] doorbell_c44_preserve_mask_wd;
  logic doorbell_c44_preserve_mask_we;
  logic completion_interrupt_c44_intr_qs;
  logic completion_interrupt_c44_intr_wd;
  logic completion_interrupt_c44_intr_we;
  logic [30:0] completion_interrupt_c44_preserve_mask_qs;
  logic [30:0] completion_interrupt_c44_preserve_mask_wd;
  logic completion_interrupt_c44_preserve_mask_we;
  logic [31:0] reserved_1_c45_qs;
  logic [31:0] reserved_1_c45_wd;
  logic reserved_1_c45_we;
  logic channel_status_c45_channel_free_qs;
  logic channel_status_c45_channel_free_wd;
  logic channel_status_c45_channel_free_we;
  logic channel_status_c45_channel_error_qs;
  logic channel_status_c45_channel_error_wd;
  logic channel_status_c45_channel_error_we;
  logic [29:0] channel_status_c45_field1_qs;
  logic [29:0] channel_status_c45_field1_wd;
  logic channel_status_c45_field1_we;
  logic [31:0] reserved_2_c45_qs;
  logic [31:0] reserved_2_c45_wd;
  logic reserved_2_c45_we;
  logic channel_flags_c45_intr_enable_qs;
  logic channel_flags_c45_intr_enable_wd;
  logic channel_flags_c45_intr_enable_we;
  logic [30:0] channel_flags_c45_field1_qs;
  logic [30:0] channel_flags_c45_field1_wd;
  logic channel_flags_c45_field1_we;
  logic [31:0] length_c45_qs;
  logic [31:0] length_c45_wd;
  logic length_c45_we;
  logic [7:0] message_header_c45_message_id_qs;
  logic [7:0] message_header_c45_message_id_wd;
  logic message_header_c45_message_id_we;
  logic [1:0] message_header_c45_message_type_qs;
  logic [1:0] message_header_c45_message_type_wd;
  logic message_header_c45_message_type_we;
  logic [7:0] message_header_c45_protocol_id_qs;
  logic [7:0] message_header_c45_protocol_id_wd;
  logic message_header_c45_protocol_id_we;
  logic [9:0] message_header_c45_token_qs;
  logic [9:0] message_header_c45_token_wd;
  logic message_header_c45_token_we;
  logic [3:0] message_header_c45_field1_qs;
  logic [3:0] message_header_c45_field1_wd;
  logic message_header_c45_field1_we;
  logic [31:0] message_payload_1_c45_qs;
  logic [31:0] message_payload_1_c45_wd;
  logic message_payload_1_c45_we;
  logic doorbell_c45_intr_qs;
  logic doorbell_c45_intr_wd;
  logic doorbell_c45_intr_we;
  logic [30:0] doorbell_c45_preserve_mask_qs;
  logic [30:0] doorbell_c45_preserve_mask_wd;
  logic doorbell_c45_preserve_mask_we;
  logic completion_interrupt_c45_intr_qs;
  logic completion_interrupt_c45_intr_wd;
  logic completion_interrupt_c45_intr_we;
  logic [30:0] completion_interrupt_c45_preserve_mask_qs;
  logic [30:0] completion_interrupt_c45_preserve_mask_wd;
  logic completion_interrupt_c45_preserve_mask_we;
  logic [31:0] reserved_1_c46_qs;
  logic [31:0] reserved_1_c46_wd;
  logic reserved_1_c46_we;
  logic channel_status_c46_channel_free_qs;
  logic channel_status_c46_channel_free_wd;
  logic channel_status_c46_channel_free_we;
  logic channel_status_c46_channel_error_qs;
  logic channel_status_c46_channel_error_wd;
  logic channel_status_c46_channel_error_we;
  logic [29:0] channel_status_c46_field1_qs;
  logic [29:0] channel_status_c46_field1_wd;
  logic channel_status_c46_field1_we;
  logic [31:0] reserved_2_c46_qs;
  logic [31:0] reserved_2_c46_wd;
  logic reserved_2_c46_we;
  logic channel_flags_c46_intr_enable_qs;
  logic channel_flags_c46_intr_enable_wd;
  logic channel_flags_c46_intr_enable_we;
  logic [30:0] channel_flags_c46_field1_qs;
  logic [30:0] channel_flags_c46_field1_wd;
  logic channel_flags_c46_field1_we;
  logic [31:0] length_c46_qs;
  logic [31:0] length_c46_wd;
  logic length_c46_we;
  logic [7:0] message_header_c46_message_id_qs;
  logic [7:0] message_header_c46_message_id_wd;
  logic message_header_c46_message_id_we;
  logic [1:0] message_header_c46_message_type_qs;
  logic [1:0] message_header_c46_message_type_wd;
  logic message_header_c46_message_type_we;
  logic [7:0] message_header_c46_protocol_id_qs;
  logic [7:0] message_header_c46_protocol_id_wd;
  logic message_header_c46_protocol_id_we;
  logic [9:0] message_header_c46_token_qs;
  logic [9:0] message_header_c46_token_wd;
  logic message_header_c46_token_we;
  logic [3:0] message_header_c46_field1_qs;
  logic [3:0] message_header_c46_field1_wd;
  logic message_header_c46_field1_we;
  logic [31:0] message_payload_1_c46_qs;
  logic [31:0] message_payload_1_c46_wd;
  logic message_payload_1_c46_we;
  logic doorbell_c46_intr_qs;
  logic doorbell_c46_intr_wd;
  logic doorbell_c46_intr_we;
  logic [30:0] doorbell_c46_preserve_mask_qs;
  logic [30:0] doorbell_c46_preserve_mask_wd;
  logic doorbell_c46_preserve_mask_we;
  logic completion_interrupt_c46_intr_qs;
  logic completion_interrupt_c46_intr_wd;
  logic completion_interrupt_c46_intr_we;
  logic [30:0] completion_interrupt_c46_preserve_mask_qs;
  logic [30:0] completion_interrupt_c46_preserve_mask_wd;
  logic completion_interrupt_c46_preserve_mask_we;
  logic [31:0] reserved_1_c47_qs;
  logic [31:0] reserved_1_c47_wd;
  logic reserved_1_c47_we;
  logic channel_status_c47_channel_free_qs;
  logic channel_status_c47_channel_free_wd;
  logic channel_status_c47_channel_free_we;
  logic channel_status_c47_channel_error_qs;
  logic channel_status_c47_channel_error_wd;
  logic channel_status_c47_channel_error_we;
  logic [29:0] channel_status_c47_field1_qs;
  logic [29:0] channel_status_c47_field1_wd;
  logic channel_status_c47_field1_we;
  logic [31:0] reserved_2_c47_qs;
  logic [31:0] reserved_2_c47_wd;
  logic reserved_2_c47_we;
  logic channel_flags_c47_intr_enable_qs;
  logic channel_flags_c47_intr_enable_wd;
  logic channel_flags_c47_intr_enable_we;
  logic [30:0] channel_flags_c47_field1_qs;
  logic [30:0] channel_flags_c47_field1_wd;
  logic channel_flags_c47_field1_we;
  logic [31:0] length_c47_qs;
  logic [31:0] length_c47_wd;
  logic length_c47_we;
  logic [7:0] message_header_c47_message_id_qs;
  logic [7:0] message_header_c47_message_id_wd;
  logic message_header_c47_message_id_we;
  logic [1:0] message_header_c47_message_type_qs;
  logic [1:0] message_header_c47_message_type_wd;
  logic message_header_c47_message_type_we;
  logic [7:0] message_header_c47_protocol_id_qs;
  logic [7:0] message_header_c47_protocol_id_wd;
  logic message_header_c47_protocol_id_we;
  logic [9:0] message_header_c47_token_qs;
  logic [9:0] message_header_c47_token_wd;
  logic message_header_c47_token_we;
  logic [3:0] message_header_c47_field1_qs;
  logic [3:0] message_header_c47_field1_wd;
  logic message_header_c47_field1_we;
  logic [31:0] message_payload_1_c47_qs;
  logic [31:0] message_payload_1_c47_wd;
  logic message_payload_1_c47_we;
  logic doorbell_c47_intr_qs;
  logic doorbell_c47_intr_wd;
  logic doorbell_c47_intr_we;
  logic [30:0] doorbell_c47_preserve_mask_qs;
  logic [30:0] doorbell_c47_preserve_mask_wd;
  logic doorbell_c47_preserve_mask_we;
  logic completion_interrupt_c47_intr_qs;
  logic completion_interrupt_c47_intr_wd;
  logic completion_interrupt_c47_intr_we;
  logic [30:0] completion_interrupt_c47_preserve_mask_qs;
  logic [30:0] completion_interrupt_c47_preserve_mask_wd;
  logic completion_interrupt_c47_preserve_mask_we;
  logic [31:0] reserved_1_c48_qs;
  logic [31:0] reserved_1_c48_wd;
  logic reserved_1_c48_we;
  logic channel_status_c48_channel_free_qs;
  logic channel_status_c48_channel_free_wd;
  logic channel_status_c48_channel_free_we;
  logic channel_status_c48_channel_error_qs;
  logic channel_status_c48_channel_error_wd;
  logic channel_status_c48_channel_error_we;
  logic [29:0] channel_status_c48_field1_qs;
  logic [29:0] channel_status_c48_field1_wd;
  logic channel_status_c48_field1_we;
  logic [31:0] reserved_2_c48_qs;
  logic [31:0] reserved_2_c48_wd;
  logic reserved_2_c48_we;
  logic channel_flags_c48_intr_enable_qs;
  logic channel_flags_c48_intr_enable_wd;
  logic channel_flags_c48_intr_enable_we;
  logic [30:0] channel_flags_c48_field1_qs;
  logic [30:0] channel_flags_c48_field1_wd;
  logic channel_flags_c48_field1_we;
  logic [31:0] length_c48_qs;
  logic [31:0] length_c48_wd;
  logic length_c48_we;
  logic [7:0] message_header_c48_message_id_qs;
  logic [7:0] message_header_c48_message_id_wd;
  logic message_header_c48_message_id_we;
  logic [1:0] message_header_c48_message_type_qs;
  logic [1:0] message_header_c48_message_type_wd;
  logic message_header_c48_message_type_we;
  logic [7:0] message_header_c48_protocol_id_qs;
  logic [7:0] message_header_c48_protocol_id_wd;
  logic message_header_c48_protocol_id_we;
  logic [9:0] message_header_c48_token_qs;
  logic [9:0] message_header_c48_token_wd;
  logic message_header_c48_token_we;
  logic [3:0] message_header_c48_field1_qs;
  logic [3:0] message_header_c48_field1_wd;
  logic message_header_c48_field1_we;
  logic [31:0] message_payload_1_c48_qs;
  logic [31:0] message_payload_1_c48_wd;
  logic message_payload_1_c48_we;
  logic doorbell_c48_intr_qs;
  logic doorbell_c48_intr_wd;
  logic doorbell_c48_intr_we;
  logic [30:0] doorbell_c48_preserve_mask_qs;
  logic [30:0] doorbell_c48_preserve_mask_wd;
  logic doorbell_c48_preserve_mask_we;
  logic completion_interrupt_c48_intr_qs;
  logic completion_interrupt_c48_intr_wd;
  logic completion_interrupt_c48_intr_we;
  logic [30:0] completion_interrupt_c48_preserve_mask_qs;
  logic [30:0] completion_interrupt_c48_preserve_mask_wd;
  logic completion_interrupt_c48_preserve_mask_we;
  logic [31:0] reserved_1_c49_qs;
  logic [31:0] reserved_1_c49_wd;
  logic reserved_1_c49_we;
  logic channel_status_c49_channel_free_qs;
  logic channel_status_c49_channel_free_wd;
  logic channel_status_c49_channel_free_we;
  logic channel_status_c49_channel_error_qs;
  logic channel_status_c49_channel_error_wd;
  logic channel_status_c49_channel_error_we;
  logic [29:0] channel_status_c49_field1_qs;
  logic [29:0] channel_status_c49_field1_wd;
  logic channel_status_c49_field1_we;
  logic [31:0] reserved_2_c49_qs;
  logic [31:0] reserved_2_c49_wd;
  logic reserved_2_c49_we;
  logic channel_flags_c49_intr_enable_qs;
  logic channel_flags_c49_intr_enable_wd;
  logic channel_flags_c49_intr_enable_we;
  logic [30:0] channel_flags_c49_field1_qs;
  logic [30:0] channel_flags_c49_field1_wd;
  logic channel_flags_c49_field1_we;
  logic [31:0] length_c49_qs;
  logic [31:0] length_c49_wd;
  logic length_c49_we;
  logic [7:0] message_header_c49_message_id_qs;
  logic [7:0] message_header_c49_message_id_wd;
  logic message_header_c49_message_id_we;
  logic [1:0] message_header_c49_message_type_qs;
  logic [1:0] message_header_c49_message_type_wd;
  logic message_header_c49_message_type_we;
  logic [7:0] message_header_c49_protocol_id_qs;
  logic [7:0] message_header_c49_protocol_id_wd;
  logic message_header_c49_protocol_id_we;
  logic [9:0] message_header_c49_token_qs;
  logic [9:0] message_header_c49_token_wd;
  logic message_header_c49_token_we;
  logic [3:0] message_header_c49_field1_qs;
  logic [3:0] message_header_c49_field1_wd;
  logic message_header_c49_field1_we;
  logic [31:0] message_payload_1_c49_qs;
  logic [31:0] message_payload_1_c49_wd;
  logic message_payload_1_c49_we;
  logic doorbell_c49_intr_qs;
  logic doorbell_c49_intr_wd;
  logic doorbell_c49_intr_we;
  logic [30:0] doorbell_c49_preserve_mask_qs;
  logic [30:0] doorbell_c49_preserve_mask_wd;
  logic doorbell_c49_preserve_mask_we;
  logic completion_interrupt_c49_intr_qs;
  logic completion_interrupt_c49_intr_wd;
  logic completion_interrupt_c49_intr_we;
  logic [30:0] completion_interrupt_c49_preserve_mask_qs;
  logic [30:0] completion_interrupt_c49_preserve_mask_wd;
  logic completion_interrupt_c49_preserve_mask_we;
  logic [31:0] reserved_1_c50_qs;
  logic [31:0] reserved_1_c50_wd;
  logic reserved_1_c50_we;
  logic channel_status_c50_channel_free_qs;
  logic channel_status_c50_channel_free_wd;
  logic channel_status_c50_channel_free_we;
  logic channel_status_c50_channel_error_qs;
  logic channel_status_c50_channel_error_wd;
  logic channel_status_c50_channel_error_we;
  logic [29:0] channel_status_c50_field1_qs;
  logic [29:0] channel_status_c50_field1_wd;
  logic channel_status_c50_field1_we;
  logic [31:0] reserved_2_c50_qs;
  logic [31:0] reserved_2_c50_wd;
  logic reserved_2_c50_we;
  logic channel_flags_c50_intr_enable_qs;
  logic channel_flags_c50_intr_enable_wd;
  logic channel_flags_c50_intr_enable_we;
  logic [30:0] channel_flags_c50_field1_qs;
  logic [30:0] channel_flags_c50_field1_wd;
  logic channel_flags_c50_field1_we;
  logic [31:0] length_c50_qs;
  logic [31:0] length_c50_wd;
  logic length_c50_we;
  logic [7:0] message_header_c50_message_id_qs;
  logic [7:0] message_header_c50_message_id_wd;
  logic message_header_c50_message_id_we;
  logic [1:0] message_header_c50_message_type_qs;
  logic [1:0] message_header_c50_message_type_wd;
  logic message_header_c50_message_type_we;
  logic [7:0] message_header_c50_protocol_id_qs;
  logic [7:0] message_header_c50_protocol_id_wd;
  logic message_header_c50_protocol_id_we;
  logic [9:0] message_header_c50_token_qs;
  logic [9:0] message_header_c50_token_wd;
  logic message_header_c50_token_we;
  logic [3:0] message_header_c50_field1_qs;
  logic [3:0] message_header_c50_field1_wd;
  logic message_header_c50_field1_we;
  logic [31:0] message_payload_1_c50_qs;
  logic [31:0] message_payload_1_c50_wd;
  logic message_payload_1_c50_we;
  logic doorbell_c50_intr_qs;
  logic doorbell_c50_intr_wd;
  logic doorbell_c50_intr_we;
  logic [30:0] doorbell_c50_preserve_mask_qs;
  logic [30:0] doorbell_c50_preserve_mask_wd;
  logic doorbell_c50_preserve_mask_we;
  logic completion_interrupt_c50_intr_qs;
  logic completion_interrupt_c50_intr_wd;
  logic completion_interrupt_c50_intr_we;
  logic [30:0] completion_interrupt_c50_preserve_mask_qs;
  logic [30:0] completion_interrupt_c50_preserve_mask_wd;
  logic completion_interrupt_c50_preserve_mask_we;
  logic [31:0] reserved_1_c51_qs;
  logic [31:0] reserved_1_c51_wd;
  logic reserved_1_c51_we;
  logic channel_status_c51_channel_free_qs;
  logic channel_status_c51_channel_free_wd;
  logic channel_status_c51_channel_free_we;
  logic channel_status_c51_channel_error_qs;
  logic channel_status_c51_channel_error_wd;
  logic channel_status_c51_channel_error_we;
  logic [29:0] channel_status_c51_field1_qs;
  logic [29:0] channel_status_c51_field1_wd;
  logic channel_status_c51_field1_we;
  logic [31:0] reserved_2_c51_qs;
  logic [31:0] reserved_2_c51_wd;
  logic reserved_2_c51_we;
  logic channel_flags_c51_intr_enable_qs;
  logic channel_flags_c51_intr_enable_wd;
  logic channel_flags_c51_intr_enable_we;
  logic [30:0] channel_flags_c51_field1_qs;
  logic [30:0] channel_flags_c51_field1_wd;
  logic channel_flags_c51_field1_we;
  logic [31:0] length_c51_qs;
  logic [31:0] length_c51_wd;
  logic length_c51_we;
  logic [7:0] message_header_c51_message_id_qs;
  logic [7:0] message_header_c51_message_id_wd;
  logic message_header_c51_message_id_we;
  logic [1:0] message_header_c51_message_type_qs;
  logic [1:0] message_header_c51_message_type_wd;
  logic message_header_c51_message_type_we;
  logic [7:0] message_header_c51_protocol_id_qs;
  logic [7:0] message_header_c51_protocol_id_wd;
  logic message_header_c51_protocol_id_we;
  logic [9:0] message_header_c51_token_qs;
  logic [9:0] message_header_c51_token_wd;
  logic message_header_c51_token_we;
  logic [3:0] message_header_c51_field1_qs;
  logic [3:0] message_header_c51_field1_wd;
  logic message_header_c51_field1_we;
  logic [31:0] message_payload_1_c51_qs;
  logic [31:0] message_payload_1_c51_wd;
  logic message_payload_1_c51_we;
  logic doorbell_c51_intr_qs;
  logic doorbell_c51_intr_wd;
  logic doorbell_c51_intr_we;
  logic [30:0] doorbell_c51_preserve_mask_qs;
  logic [30:0] doorbell_c51_preserve_mask_wd;
  logic doorbell_c51_preserve_mask_we;
  logic completion_interrupt_c51_intr_qs;
  logic completion_interrupt_c51_intr_wd;
  logic completion_interrupt_c51_intr_we;
  logic [30:0] completion_interrupt_c51_preserve_mask_qs;
  logic [30:0] completion_interrupt_c51_preserve_mask_wd;
  logic completion_interrupt_c51_preserve_mask_we;
  logic [31:0] reserved_1_c52_qs;
  logic [31:0] reserved_1_c52_wd;
  logic reserved_1_c52_we;
  logic channel_status_c52_channel_free_qs;
  logic channel_status_c52_channel_free_wd;
  logic channel_status_c52_channel_free_we;
  logic channel_status_c52_channel_error_qs;
  logic channel_status_c52_channel_error_wd;
  logic channel_status_c52_channel_error_we;
  logic [29:0] channel_status_c52_field1_qs;
  logic [29:0] channel_status_c52_field1_wd;
  logic channel_status_c52_field1_we;
  logic [31:0] reserved_2_c52_qs;
  logic [31:0] reserved_2_c52_wd;
  logic reserved_2_c52_we;
  logic channel_flags_c52_intr_enable_qs;
  logic channel_flags_c52_intr_enable_wd;
  logic channel_flags_c52_intr_enable_we;
  logic [30:0] channel_flags_c52_field1_qs;
  logic [30:0] channel_flags_c52_field1_wd;
  logic channel_flags_c52_field1_we;
  logic [31:0] length_c52_qs;
  logic [31:0] length_c52_wd;
  logic length_c52_we;
  logic [7:0] message_header_c52_message_id_qs;
  logic [7:0] message_header_c52_message_id_wd;
  logic message_header_c52_message_id_we;
  logic [1:0] message_header_c52_message_type_qs;
  logic [1:0] message_header_c52_message_type_wd;
  logic message_header_c52_message_type_we;
  logic [7:0] message_header_c52_protocol_id_qs;
  logic [7:0] message_header_c52_protocol_id_wd;
  logic message_header_c52_protocol_id_we;
  logic [9:0] message_header_c52_token_qs;
  logic [9:0] message_header_c52_token_wd;
  logic message_header_c52_token_we;
  logic [3:0] message_header_c52_field1_qs;
  logic [3:0] message_header_c52_field1_wd;
  logic message_header_c52_field1_we;
  logic [31:0] message_payload_1_c52_qs;
  logic [31:0] message_payload_1_c52_wd;
  logic message_payload_1_c52_we;
  logic doorbell_c52_intr_qs;
  logic doorbell_c52_intr_wd;
  logic doorbell_c52_intr_we;
  logic [30:0] doorbell_c52_preserve_mask_qs;
  logic [30:0] doorbell_c52_preserve_mask_wd;
  logic doorbell_c52_preserve_mask_we;
  logic completion_interrupt_c52_intr_qs;
  logic completion_interrupt_c52_intr_wd;
  logic completion_interrupt_c52_intr_we;
  logic [30:0] completion_interrupt_c52_preserve_mask_qs;
  logic [30:0] completion_interrupt_c52_preserve_mask_wd;
  logic completion_interrupt_c52_preserve_mask_we;
  logic [31:0] reserved_1_c53_qs;
  logic [31:0] reserved_1_c53_wd;
  logic reserved_1_c53_we;
  logic channel_status_c53_channel_free_qs;
  logic channel_status_c53_channel_free_wd;
  logic channel_status_c53_channel_free_we;
  logic channel_status_c53_channel_error_qs;
  logic channel_status_c53_channel_error_wd;
  logic channel_status_c53_channel_error_we;
  logic [29:0] channel_status_c53_field1_qs;
  logic [29:0] channel_status_c53_field1_wd;
  logic channel_status_c53_field1_we;
  logic [31:0] reserved_2_c53_qs;
  logic [31:0] reserved_2_c53_wd;
  logic reserved_2_c53_we;
  logic channel_flags_c53_intr_enable_qs;
  logic channel_flags_c53_intr_enable_wd;
  logic channel_flags_c53_intr_enable_we;
  logic [30:0] channel_flags_c53_field1_qs;
  logic [30:0] channel_flags_c53_field1_wd;
  logic channel_flags_c53_field1_we;
  logic [31:0] length_c53_qs;
  logic [31:0] length_c53_wd;
  logic length_c53_we;
  logic [7:0] message_header_c53_message_id_qs;
  logic [7:0] message_header_c53_message_id_wd;
  logic message_header_c53_message_id_we;
  logic [1:0] message_header_c53_message_type_qs;
  logic [1:0] message_header_c53_message_type_wd;
  logic message_header_c53_message_type_we;
  logic [7:0] message_header_c53_protocol_id_qs;
  logic [7:0] message_header_c53_protocol_id_wd;
  logic message_header_c53_protocol_id_we;
  logic [9:0] message_header_c53_token_qs;
  logic [9:0] message_header_c53_token_wd;
  logic message_header_c53_token_we;
  logic [3:0] message_header_c53_field1_qs;
  logic [3:0] message_header_c53_field1_wd;
  logic message_header_c53_field1_we;
  logic [31:0] message_payload_1_c53_qs;
  logic [31:0] message_payload_1_c53_wd;
  logic message_payload_1_c53_we;
  logic doorbell_c53_intr_qs;
  logic doorbell_c53_intr_wd;
  logic doorbell_c53_intr_we;
  logic [30:0] doorbell_c53_preserve_mask_qs;
  logic [30:0] doorbell_c53_preserve_mask_wd;
  logic doorbell_c53_preserve_mask_we;
  logic completion_interrupt_c53_intr_qs;
  logic completion_interrupt_c53_intr_wd;
  logic completion_interrupt_c53_intr_we;
  logic [30:0] completion_interrupt_c53_preserve_mask_qs;
  logic [30:0] completion_interrupt_c53_preserve_mask_wd;
  logic completion_interrupt_c53_preserve_mask_we;
  logic [31:0] reserved_1_c54_qs;
  logic [31:0] reserved_1_c54_wd;
  logic reserved_1_c54_we;
  logic channel_status_c54_channel_free_qs;
  logic channel_status_c54_channel_free_wd;
  logic channel_status_c54_channel_free_we;
  logic channel_status_c54_channel_error_qs;
  logic channel_status_c54_channel_error_wd;
  logic channel_status_c54_channel_error_we;
  logic [29:0] channel_status_c54_field1_qs;
  logic [29:0] channel_status_c54_field1_wd;
  logic channel_status_c54_field1_we;
  logic [31:0] reserved_2_c54_qs;
  logic [31:0] reserved_2_c54_wd;
  logic reserved_2_c54_we;
  logic channel_flags_c54_intr_enable_qs;
  logic channel_flags_c54_intr_enable_wd;
  logic channel_flags_c54_intr_enable_we;
  logic [30:0] channel_flags_c54_field1_qs;
  logic [30:0] channel_flags_c54_field1_wd;
  logic channel_flags_c54_field1_we;
  logic [31:0] length_c54_qs;
  logic [31:0] length_c54_wd;
  logic length_c54_we;
  logic [7:0] message_header_c54_message_id_qs;
  logic [7:0] message_header_c54_message_id_wd;
  logic message_header_c54_message_id_we;
  logic [1:0] message_header_c54_message_type_qs;
  logic [1:0] message_header_c54_message_type_wd;
  logic message_header_c54_message_type_we;
  logic [7:0] message_header_c54_protocol_id_qs;
  logic [7:0] message_header_c54_protocol_id_wd;
  logic message_header_c54_protocol_id_we;
  logic [9:0] message_header_c54_token_qs;
  logic [9:0] message_header_c54_token_wd;
  logic message_header_c54_token_we;
  logic [3:0] message_header_c54_field1_qs;
  logic [3:0] message_header_c54_field1_wd;
  logic message_header_c54_field1_we;
  logic [31:0] message_payload_1_c54_qs;
  logic [31:0] message_payload_1_c54_wd;
  logic message_payload_1_c54_we;
  logic doorbell_c54_intr_qs;
  logic doorbell_c54_intr_wd;
  logic doorbell_c54_intr_we;
  logic [30:0] doorbell_c54_preserve_mask_qs;
  logic [30:0] doorbell_c54_preserve_mask_wd;
  logic doorbell_c54_preserve_mask_we;
  logic completion_interrupt_c54_intr_qs;
  logic completion_interrupt_c54_intr_wd;
  logic completion_interrupt_c54_intr_we;
  logic [30:0] completion_interrupt_c54_preserve_mask_qs;
  logic [30:0] completion_interrupt_c54_preserve_mask_wd;
  logic completion_interrupt_c54_preserve_mask_we;
  logic [31:0] reserved_1_c55_qs;
  logic [31:0] reserved_1_c55_wd;
  logic reserved_1_c55_we;
  logic channel_status_c55_channel_free_qs;
  logic channel_status_c55_channel_free_wd;
  logic channel_status_c55_channel_free_we;
  logic channel_status_c55_channel_error_qs;
  logic channel_status_c55_channel_error_wd;
  logic channel_status_c55_channel_error_we;
  logic [29:0] channel_status_c55_field1_qs;
  logic [29:0] channel_status_c55_field1_wd;
  logic channel_status_c55_field1_we;
  logic [31:0] reserved_2_c55_qs;
  logic [31:0] reserved_2_c55_wd;
  logic reserved_2_c55_we;
  logic channel_flags_c55_intr_enable_qs;
  logic channel_flags_c55_intr_enable_wd;
  logic channel_flags_c55_intr_enable_we;
  logic [30:0] channel_flags_c55_field1_qs;
  logic [30:0] channel_flags_c55_field1_wd;
  logic channel_flags_c55_field1_we;
  logic [31:0] length_c55_qs;
  logic [31:0] length_c55_wd;
  logic length_c55_we;
  logic [7:0] message_header_c55_message_id_qs;
  logic [7:0] message_header_c55_message_id_wd;
  logic message_header_c55_message_id_we;
  logic [1:0] message_header_c55_message_type_qs;
  logic [1:0] message_header_c55_message_type_wd;
  logic message_header_c55_message_type_we;
  logic [7:0] message_header_c55_protocol_id_qs;
  logic [7:0] message_header_c55_protocol_id_wd;
  logic message_header_c55_protocol_id_we;
  logic [9:0] message_header_c55_token_qs;
  logic [9:0] message_header_c55_token_wd;
  logic message_header_c55_token_we;
  logic [3:0] message_header_c55_field1_qs;
  logic [3:0] message_header_c55_field1_wd;
  logic message_header_c55_field1_we;
  logic [31:0] message_payload_1_c55_qs;
  logic [31:0] message_payload_1_c55_wd;
  logic message_payload_1_c55_we;
  logic doorbell_c55_intr_qs;
  logic doorbell_c55_intr_wd;
  logic doorbell_c55_intr_we;
  logic [30:0] doorbell_c55_preserve_mask_qs;
  logic [30:0] doorbell_c55_preserve_mask_wd;
  logic doorbell_c55_preserve_mask_we;
  logic completion_interrupt_c55_intr_qs;
  logic completion_interrupt_c55_intr_wd;
  logic completion_interrupt_c55_intr_we;
  logic [30:0] completion_interrupt_c55_preserve_mask_qs;
  logic [30:0] completion_interrupt_c55_preserve_mask_wd;
  logic completion_interrupt_c55_preserve_mask_we;
  logic [31:0] reserved_1_c56_qs;
  logic [31:0] reserved_1_c56_wd;
  logic reserved_1_c56_we;
  logic channel_status_c56_channel_free_qs;
  logic channel_status_c56_channel_free_wd;
  logic channel_status_c56_channel_free_we;
  logic channel_status_c56_channel_error_qs;
  logic channel_status_c56_channel_error_wd;
  logic channel_status_c56_channel_error_we;
  logic [29:0] channel_status_c56_field1_qs;
  logic [29:0] channel_status_c56_field1_wd;
  logic channel_status_c56_field1_we;
  logic [31:0] reserved_2_c56_qs;
  logic [31:0] reserved_2_c56_wd;
  logic reserved_2_c56_we;
  logic channel_flags_c56_intr_enable_qs;
  logic channel_flags_c56_intr_enable_wd;
  logic channel_flags_c56_intr_enable_we;
  logic [30:0] channel_flags_c56_field1_qs;
  logic [30:0] channel_flags_c56_field1_wd;
  logic channel_flags_c56_field1_we;
  logic [31:0] length_c56_qs;
  logic [31:0] length_c56_wd;
  logic length_c56_we;
  logic [7:0] message_header_c56_message_id_qs;
  logic [7:0] message_header_c56_message_id_wd;
  logic message_header_c56_message_id_we;
  logic [1:0] message_header_c56_message_type_qs;
  logic [1:0] message_header_c56_message_type_wd;
  logic message_header_c56_message_type_we;
  logic [7:0] message_header_c56_protocol_id_qs;
  logic [7:0] message_header_c56_protocol_id_wd;
  logic message_header_c56_protocol_id_we;
  logic [9:0] message_header_c56_token_qs;
  logic [9:0] message_header_c56_token_wd;
  logic message_header_c56_token_we;
  logic [3:0] message_header_c56_field1_qs;
  logic [3:0] message_header_c56_field1_wd;
  logic message_header_c56_field1_we;
  logic [31:0] message_payload_1_c56_qs;
  logic [31:0] message_payload_1_c56_wd;
  logic message_payload_1_c56_we;
  logic doorbell_c56_intr_qs;
  logic doorbell_c56_intr_wd;
  logic doorbell_c56_intr_we;
  logic [30:0] doorbell_c56_preserve_mask_qs;
  logic [30:0] doorbell_c56_preserve_mask_wd;
  logic doorbell_c56_preserve_mask_we;
  logic completion_interrupt_c56_intr_qs;
  logic completion_interrupt_c56_intr_wd;
  logic completion_interrupt_c56_intr_we;
  logic [30:0] completion_interrupt_c56_preserve_mask_qs;
  logic [30:0] completion_interrupt_c56_preserve_mask_wd;
  logic completion_interrupt_c56_preserve_mask_we;
  logic [31:0] reserved_1_c57_qs;
  logic [31:0] reserved_1_c57_wd;
  logic reserved_1_c57_we;
  logic channel_status_c57_channel_free_qs;
  logic channel_status_c57_channel_free_wd;
  logic channel_status_c57_channel_free_we;
  logic channel_status_c57_channel_error_qs;
  logic channel_status_c57_channel_error_wd;
  logic channel_status_c57_channel_error_we;
  logic [29:0] channel_status_c57_field1_qs;
  logic [29:0] channel_status_c57_field1_wd;
  logic channel_status_c57_field1_we;
  logic [31:0] reserved_2_c57_qs;
  logic [31:0] reserved_2_c57_wd;
  logic reserved_2_c57_we;
  logic channel_flags_c57_intr_enable_qs;
  logic channel_flags_c57_intr_enable_wd;
  logic channel_flags_c57_intr_enable_we;
  logic [30:0] channel_flags_c57_field1_qs;
  logic [30:0] channel_flags_c57_field1_wd;
  logic channel_flags_c57_field1_we;
  logic [31:0] length_c57_qs;
  logic [31:0] length_c57_wd;
  logic length_c57_we;
  logic [7:0] message_header_c57_message_id_qs;
  logic [7:0] message_header_c57_message_id_wd;
  logic message_header_c57_message_id_we;
  logic [1:0] message_header_c57_message_type_qs;
  logic [1:0] message_header_c57_message_type_wd;
  logic message_header_c57_message_type_we;
  logic [7:0] message_header_c57_protocol_id_qs;
  logic [7:0] message_header_c57_protocol_id_wd;
  logic message_header_c57_protocol_id_we;
  logic [9:0] message_header_c57_token_qs;
  logic [9:0] message_header_c57_token_wd;
  logic message_header_c57_token_we;
  logic [3:0] message_header_c57_field1_qs;
  logic [3:0] message_header_c57_field1_wd;
  logic message_header_c57_field1_we;
  logic [31:0] message_payload_1_c57_qs;
  logic [31:0] message_payload_1_c57_wd;
  logic message_payload_1_c57_we;
  logic doorbell_c57_intr_qs;
  logic doorbell_c57_intr_wd;
  logic doorbell_c57_intr_we;
  logic [30:0] doorbell_c57_preserve_mask_qs;
  logic [30:0] doorbell_c57_preserve_mask_wd;
  logic doorbell_c57_preserve_mask_we;
  logic completion_interrupt_c57_intr_qs;
  logic completion_interrupt_c57_intr_wd;
  logic completion_interrupt_c57_intr_we;
  logic [30:0] completion_interrupt_c57_preserve_mask_qs;
  logic [30:0] completion_interrupt_c57_preserve_mask_wd;
  logic completion_interrupt_c57_preserve_mask_we;
  logic [31:0] reserved_1_c58_qs;
  logic [31:0] reserved_1_c58_wd;
  logic reserved_1_c58_we;
  logic channel_status_c58_channel_free_qs;
  logic channel_status_c58_channel_free_wd;
  logic channel_status_c58_channel_free_we;
  logic channel_status_c58_channel_error_qs;
  logic channel_status_c58_channel_error_wd;
  logic channel_status_c58_channel_error_we;
  logic [29:0] channel_status_c58_field1_qs;
  logic [29:0] channel_status_c58_field1_wd;
  logic channel_status_c58_field1_we;
  logic [31:0] reserved_2_c58_qs;
  logic [31:0] reserved_2_c58_wd;
  logic reserved_2_c58_we;
  logic channel_flags_c58_intr_enable_qs;
  logic channel_flags_c58_intr_enable_wd;
  logic channel_flags_c58_intr_enable_we;
  logic [30:0] channel_flags_c58_field1_qs;
  logic [30:0] channel_flags_c58_field1_wd;
  logic channel_flags_c58_field1_we;
  logic [31:0] length_c58_qs;
  logic [31:0] length_c58_wd;
  logic length_c58_we;
  logic [7:0] message_header_c58_message_id_qs;
  logic [7:0] message_header_c58_message_id_wd;
  logic message_header_c58_message_id_we;
  logic [1:0] message_header_c58_message_type_qs;
  logic [1:0] message_header_c58_message_type_wd;
  logic message_header_c58_message_type_we;
  logic [7:0] message_header_c58_protocol_id_qs;
  logic [7:0] message_header_c58_protocol_id_wd;
  logic message_header_c58_protocol_id_we;
  logic [9:0] message_header_c58_token_qs;
  logic [9:0] message_header_c58_token_wd;
  logic message_header_c58_token_we;
  logic [3:0] message_header_c58_field1_qs;
  logic [3:0] message_header_c58_field1_wd;
  logic message_header_c58_field1_we;
  logic [31:0] message_payload_1_c58_qs;
  logic [31:0] message_payload_1_c58_wd;
  logic message_payload_1_c58_we;
  logic doorbell_c58_intr_qs;
  logic doorbell_c58_intr_wd;
  logic doorbell_c58_intr_we;
  logic [30:0] doorbell_c58_preserve_mask_qs;
  logic [30:0] doorbell_c58_preserve_mask_wd;
  logic doorbell_c58_preserve_mask_we;
  logic completion_interrupt_c58_intr_qs;
  logic completion_interrupt_c58_intr_wd;
  logic completion_interrupt_c58_intr_we;
  logic [30:0] completion_interrupt_c58_preserve_mask_qs;
  logic [30:0] completion_interrupt_c58_preserve_mask_wd;
  logic completion_interrupt_c58_preserve_mask_we;
  logic [31:0] reserved_1_c59_qs;
  logic [31:0] reserved_1_c59_wd;
  logic reserved_1_c59_we;
  logic channel_status_c59_channel_free_qs;
  logic channel_status_c59_channel_free_wd;
  logic channel_status_c59_channel_free_we;
  logic channel_status_c59_channel_error_qs;
  logic channel_status_c59_channel_error_wd;
  logic channel_status_c59_channel_error_we;
  logic [29:0] channel_status_c59_field1_qs;
  logic [29:0] channel_status_c59_field1_wd;
  logic channel_status_c59_field1_we;
  logic [31:0] reserved_2_c59_qs;
  logic [31:0] reserved_2_c59_wd;
  logic reserved_2_c59_we;
  logic channel_flags_c59_intr_enable_qs;
  logic channel_flags_c59_intr_enable_wd;
  logic channel_flags_c59_intr_enable_we;
  logic [30:0] channel_flags_c59_field1_qs;
  logic [30:0] channel_flags_c59_field1_wd;
  logic channel_flags_c59_field1_we;
  logic [31:0] length_c59_qs;
  logic [31:0] length_c59_wd;
  logic length_c59_we;
  logic [7:0] message_header_c59_message_id_qs;
  logic [7:0] message_header_c59_message_id_wd;
  logic message_header_c59_message_id_we;
  logic [1:0] message_header_c59_message_type_qs;
  logic [1:0] message_header_c59_message_type_wd;
  logic message_header_c59_message_type_we;
  logic [7:0] message_header_c59_protocol_id_qs;
  logic [7:0] message_header_c59_protocol_id_wd;
  logic message_header_c59_protocol_id_we;
  logic [9:0] message_header_c59_token_qs;
  logic [9:0] message_header_c59_token_wd;
  logic message_header_c59_token_we;
  logic [3:0] message_header_c59_field1_qs;
  logic [3:0] message_header_c59_field1_wd;
  logic message_header_c59_field1_we;
  logic [31:0] message_payload_1_c59_qs;
  logic [31:0] message_payload_1_c59_wd;
  logic message_payload_1_c59_we;
  logic doorbell_c59_intr_qs;
  logic doorbell_c59_intr_wd;
  logic doorbell_c59_intr_we;
  logic [30:0] doorbell_c59_preserve_mask_qs;
  logic [30:0] doorbell_c59_preserve_mask_wd;
  logic doorbell_c59_preserve_mask_we;
  logic completion_interrupt_c59_intr_qs;
  logic completion_interrupt_c59_intr_wd;
  logic completion_interrupt_c59_intr_we;
  logic [30:0] completion_interrupt_c59_preserve_mask_qs;
  logic [30:0] completion_interrupt_c59_preserve_mask_wd;
  logic completion_interrupt_c59_preserve_mask_we;
  logic [31:0] reserved_1_c60_qs;
  logic [31:0] reserved_1_c60_wd;
  logic reserved_1_c60_we;
  logic channel_status_c60_channel_free_qs;
  logic channel_status_c60_channel_free_wd;
  logic channel_status_c60_channel_free_we;
  logic channel_status_c60_channel_error_qs;
  logic channel_status_c60_channel_error_wd;
  logic channel_status_c60_channel_error_we;
  logic [29:0] channel_status_c60_field1_qs;
  logic [29:0] channel_status_c60_field1_wd;
  logic channel_status_c60_field1_we;
  logic [31:0] reserved_2_c60_qs;
  logic [31:0] reserved_2_c60_wd;
  logic reserved_2_c60_we;
  logic channel_flags_c60_intr_enable_qs;
  logic channel_flags_c60_intr_enable_wd;
  logic channel_flags_c60_intr_enable_we;
  logic [30:0] channel_flags_c60_field1_qs;
  logic [30:0] channel_flags_c60_field1_wd;
  logic channel_flags_c60_field1_we;
  logic [31:0] length_c60_qs;
  logic [31:0] length_c60_wd;
  logic length_c60_we;
  logic [7:0] message_header_c60_message_id_qs;
  logic [7:0] message_header_c60_message_id_wd;
  logic message_header_c60_message_id_we;
  logic [1:0] message_header_c60_message_type_qs;
  logic [1:0] message_header_c60_message_type_wd;
  logic message_header_c60_message_type_we;
  logic [7:0] message_header_c60_protocol_id_qs;
  logic [7:0] message_header_c60_protocol_id_wd;
  logic message_header_c60_protocol_id_we;
  logic [9:0] message_header_c60_token_qs;
  logic [9:0] message_header_c60_token_wd;
  logic message_header_c60_token_we;
  logic [3:0] message_header_c60_field1_qs;
  logic [3:0] message_header_c60_field1_wd;
  logic message_header_c60_field1_we;
  logic [31:0] message_payload_1_c60_qs;
  logic [31:0] message_payload_1_c60_wd;
  logic message_payload_1_c60_we;
  logic doorbell_c60_intr_qs;
  logic doorbell_c60_intr_wd;
  logic doorbell_c60_intr_we;
  logic [30:0] doorbell_c60_preserve_mask_qs;
  logic [30:0] doorbell_c60_preserve_mask_wd;
  logic doorbell_c60_preserve_mask_we;
  logic completion_interrupt_c60_intr_qs;
  logic completion_interrupt_c60_intr_wd;
  logic completion_interrupt_c60_intr_we;
  logic [30:0] completion_interrupt_c60_preserve_mask_qs;
  logic [30:0] completion_interrupt_c60_preserve_mask_wd;
  logic completion_interrupt_c60_preserve_mask_we;
  logic [31:0] reserved_1_c61_qs;
  logic [31:0] reserved_1_c61_wd;
  logic reserved_1_c61_we;
  logic channel_status_c61_channel_free_qs;
  logic channel_status_c61_channel_free_wd;
  logic channel_status_c61_channel_free_we;
  logic channel_status_c61_channel_error_qs;
  logic channel_status_c61_channel_error_wd;
  logic channel_status_c61_channel_error_we;
  logic [29:0] channel_status_c61_field1_qs;
  logic [29:0] channel_status_c61_field1_wd;
  logic channel_status_c61_field1_we;
  logic [31:0] reserved_2_c61_qs;
  logic [31:0] reserved_2_c61_wd;
  logic reserved_2_c61_we;
  logic channel_flags_c61_intr_enable_qs;
  logic channel_flags_c61_intr_enable_wd;
  logic channel_flags_c61_intr_enable_we;
  logic [30:0] channel_flags_c61_field1_qs;
  logic [30:0] channel_flags_c61_field1_wd;
  logic channel_flags_c61_field1_we;
  logic [31:0] length_c61_qs;
  logic [31:0] length_c61_wd;
  logic length_c61_we;
  logic [7:0] message_header_c61_message_id_qs;
  logic [7:0] message_header_c61_message_id_wd;
  logic message_header_c61_message_id_we;
  logic [1:0] message_header_c61_message_type_qs;
  logic [1:0] message_header_c61_message_type_wd;
  logic message_header_c61_message_type_we;
  logic [7:0] message_header_c61_protocol_id_qs;
  logic [7:0] message_header_c61_protocol_id_wd;
  logic message_header_c61_protocol_id_we;
  logic [9:0] message_header_c61_token_qs;
  logic [9:0] message_header_c61_token_wd;
  logic message_header_c61_token_we;
  logic [3:0] message_header_c61_field1_qs;
  logic [3:0] message_header_c61_field1_wd;
  logic message_header_c61_field1_we;
  logic [31:0] message_payload_1_c61_qs;
  logic [31:0] message_payload_1_c61_wd;
  logic message_payload_1_c61_we;
  logic doorbell_c61_intr_qs;
  logic doorbell_c61_intr_wd;
  logic doorbell_c61_intr_we;
  logic [30:0] doorbell_c61_preserve_mask_qs;
  logic [30:0] doorbell_c61_preserve_mask_wd;
  logic doorbell_c61_preserve_mask_we;
  logic completion_interrupt_c61_intr_qs;
  logic completion_interrupt_c61_intr_wd;
  logic completion_interrupt_c61_intr_we;
  logic [30:0] completion_interrupt_c61_preserve_mask_qs;
  logic [30:0] completion_interrupt_c61_preserve_mask_wd;
  logic completion_interrupt_c61_preserve_mask_we;
  logic [31:0] reserved_1_c62_qs;
  logic [31:0] reserved_1_c62_wd;
  logic reserved_1_c62_we;
  logic channel_status_c62_channel_free_qs;
  logic channel_status_c62_channel_free_wd;
  logic channel_status_c62_channel_free_we;
  logic channel_status_c62_channel_error_qs;
  logic channel_status_c62_channel_error_wd;
  logic channel_status_c62_channel_error_we;
  logic [29:0] channel_status_c62_field1_qs;
  logic [29:0] channel_status_c62_field1_wd;
  logic channel_status_c62_field1_we;
  logic [31:0] reserved_2_c62_qs;
  logic [31:0] reserved_2_c62_wd;
  logic reserved_2_c62_we;
  logic channel_flags_c62_intr_enable_qs;
  logic channel_flags_c62_intr_enable_wd;
  logic channel_flags_c62_intr_enable_we;
  logic [30:0] channel_flags_c62_field1_qs;
  logic [30:0] channel_flags_c62_field1_wd;
  logic channel_flags_c62_field1_we;
  logic [31:0] length_c62_qs;
  logic [31:0] length_c62_wd;
  logic length_c62_we;
  logic [7:0] message_header_c62_message_id_qs;
  logic [7:0] message_header_c62_message_id_wd;
  logic message_header_c62_message_id_we;
  logic [1:0] message_header_c62_message_type_qs;
  logic [1:0] message_header_c62_message_type_wd;
  logic message_header_c62_message_type_we;
  logic [7:0] message_header_c62_protocol_id_qs;
  logic [7:0] message_header_c62_protocol_id_wd;
  logic message_header_c62_protocol_id_we;
  logic [9:0] message_header_c62_token_qs;
  logic [9:0] message_header_c62_token_wd;
  logic message_header_c62_token_we;
  logic [3:0] message_header_c62_field1_qs;
  logic [3:0] message_header_c62_field1_wd;
  logic message_header_c62_field1_we;
  logic [31:0] message_payload_1_c62_qs;
  logic [31:0] message_payload_1_c62_wd;
  logic message_payload_1_c62_we;
  logic doorbell_c62_intr_qs;
  logic doorbell_c62_intr_wd;
  logic doorbell_c62_intr_we;
  logic [30:0] doorbell_c62_preserve_mask_qs;
  logic [30:0] doorbell_c62_preserve_mask_wd;
  logic doorbell_c62_preserve_mask_we;
  logic completion_interrupt_c62_intr_qs;
  logic completion_interrupt_c62_intr_wd;
  logic completion_interrupt_c62_intr_we;
  logic [30:0] completion_interrupt_c62_preserve_mask_qs;
  logic [30:0] completion_interrupt_c62_preserve_mask_wd;
  logic completion_interrupt_c62_preserve_mask_we;
  logic [31:0] reserved_1_c63_qs;
  logic [31:0] reserved_1_c63_wd;
  logic reserved_1_c63_we;
  logic channel_status_c63_channel_free_qs;
  logic channel_status_c63_channel_free_wd;
  logic channel_status_c63_channel_free_we;
  logic channel_status_c63_channel_error_qs;
  logic channel_status_c63_channel_error_wd;
  logic channel_status_c63_channel_error_we;
  logic [29:0] channel_status_c63_field1_qs;
  logic [29:0] channel_status_c63_field1_wd;
  logic channel_status_c63_field1_we;
  logic [31:0] reserved_2_c63_qs;
  logic [31:0] reserved_2_c63_wd;
  logic reserved_2_c63_we;
  logic channel_flags_c63_intr_enable_qs;
  logic channel_flags_c63_intr_enable_wd;
  logic channel_flags_c63_intr_enable_we;
  logic [30:0] channel_flags_c63_field1_qs;
  logic [30:0] channel_flags_c63_field1_wd;
  logic channel_flags_c63_field1_we;
  logic [31:0] length_c63_qs;
  logic [31:0] length_c63_wd;
  logic length_c63_we;
  logic [7:0] message_header_c63_message_id_qs;
  logic [7:0] message_header_c63_message_id_wd;
  logic message_header_c63_message_id_we;
  logic [1:0] message_header_c63_message_type_qs;
  logic [1:0] message_header_c63_message_type_wd;
  logic message_header_c63_message_type_we;
  logic [7:0] message_header_c63_protocol_id_qs;
  logic [7:0] message_header_c63_protocol_id_wd;
  logic message_header_c63_protocol_id_we;
  logic [9:0] message_header_c63_token_qs;
  logic [9:0] message_header_c63_token_wd;
  logic message_header_c63_token_we;
  logic [3:0] message_header_c63_field1_qs;
  logic [3:0] message_header_c63_field1_wd;
  logic message_header_c63_field1_we;
  logic [31:0] message_payload_1_c63_qs;
  logic [31:0] message_payload_1_c63_wd;
  logic message_payload_1_c63_we;
  logic doorbell_c63_intr_qs;
  logic doorbell_c63_intr_wd;
  logic doorbell_c63_intr_we;
  logic [30:0] doorbell_c63_preserve_mask_qs;
  logic [30:0] doorbell_c63_preserve_mask_wd;
  logic doorbell_c63_preserve_mask_we;
  logic completion_interrupt_c63_intr_qs;
  logic completion_interrupt_c63_intr_wd;
  logic completion_interrupt_c63_intr_we;
  logic [30:0] completion_interrupt_c63_preserve_mask_qs;
  logic [30:0] completion_interrupt_c63_preserve_mask_wd;
  logic completion_interrupt_c63_preserve_mask_we;
  logic [31:0] reserved_1_c64_qs;
  logic [31:0] reserved_1_c64_wd;
  logic reserved_1_c64_we;
  logic channel_status_c64_channel_free_qs;
  logic channel_status_c64_channel_free_wd;
  logic channel_status_c64_channel_free_we;
  logic channel_status_c64_channel_error_qs;
  logic channel_status_c64_channel_error_wd;
  logic channel_status_c64_channel_error_we;
  logic [29:0] channel_status_c64_field1_qs;
  logic [29:0] channel_status_c64_field1_wd;
  logic channel_status_c64_field1_we;
  logic [31:0] reserved_2_c64_qs;
  logic [31:0] reserved_2_c64_wd;
  logic reserved_2_c64_we;
  logic channel_flags_c64_intr_enable_qs;
  logic channel_flags_c64_intr_enable_wd;
  logic channel_flags_c64_intr_enable_we;
  logic [30:0] channel_flags_c64_field1_qs;
  logic [30:0] channel_flags_c64_field1_wd;
  logic channel_flags_c64_field1_we;
  logic [31:0] length_c64_qs;
  logic [31:0] length_c64_wd;
  logic length_c64_we;
  logic [7:0] message_header_c64_message_id_qs;
  logic [7:0] message_header_c64_message_id_wd;
  logic message_header_c64_message_id_we;
  logic [1:0] message_header_c64_message_type_qs;
  logic [1:0] message_header_c64_message_type_wd;
  logic message_header_c64_message_type_we;
  logic [7:0] message_header_c64_protocol_id_qs;
  logic [7:0] message_header_c64_protocol_id_wd;
  logic message_header_c64_protocol_id_we;
  logic [9:0] message_header_c64_token_qs;
  logic [9:0] message_header_c64_token_wd;
  logic message_header_c64_token_we;
  logic [3:0] message_header_c64_field1_qs;
  logic [3:0] message_header_c64_field1_wd;
  logic message_header_c64_field1_we;
  logic [31:0] message_payload_1_c64_qs;
  logic [31:0] message_payload_1_c64_wd;
  logic message_payload_1_c64_we;
  logic doorbell_c64_intr_qs;
  logic doorbell_c64_intr_wd;
  logic doorbell_c64_intr_we;
  logic [30:0] doorbell_c64_preserve_mask_qs;
  logic [30:0] doorbell_c64_preserve_mask_wd;
  logic doorbell_c64_preserve_mask_we;
  logic completion_interrupt_c64_intr_qs;
  logic completion_interrupt_c64_intr_wd;
  logic completion_interrupt_c64_intr_we;
  logic [30:0] completion_interrupt_c64_preserve_mask_qs;
  logic [30:0] completion_interrupt_c64_preserve_mask_wd;
  logic completion_interrupt_c64_preserve_mask_we;
  logic [31:0] reserved_1_c65_qs;
  logic [31:0] reserved_1_c65_wd;
  logic reserved_1_c65_we;
  logic channel_status_c65_channel_free_qs;
  logic channel_status_c65_channel_free_wd;
  logic channel_status_c65_channel_free_we;
  logic channel_status_c65_channel_error_qs;
  logic channel_status_c65_channel_error_wd;
  logic channel_status_c65_channel_error_we;
  logic [29:0] channel_status_c65_field1_qs;
  logic [29:0] channel_status_c65_field1_wd;
  logic channel_status_c65_field1_we;
  logic [31:0] reserved_2_c65_qs;
  logic [31:0] reserved_2_c65_wd;
  logic reserved_2_c65_we;
  logic channel_flags_c65_intr_enable_qs;
  logic channel_flags_c65_intr_enable_wd;
  logic channel_flags_c65_intr_enable_we;
  logic [30:0] channel_flags_c65_field1_qs;
  logic [30:0] channel_flags_c65_field1_wd;
  logic channel_flags_c65_field1_we;
  logic [31:0] length_c65_qs;
  logic [31:0] length_c65_wd;
  logic length_c65_we;
  logic [7:0] message_header_c65_message_id_qs;
  logic [7:0] message_header_c65_message_id_wd;
  logic message_header_c65_message_id_we;
  logic [1:0] message_header_c65_message_type_qs;
  logic [1:0] message_header_c65_message_type_wd;
  logic message_header_c65_message_type_we;
  logic [7:0] message_header_c65_protocol_id_qs;
  logic [7:0] message_header_c65_protocol_id_wd;
  logic message_header_c65_protocol_id_we;
  logic [9:0] message_header_c65_token_qs;
  logic [9:0] message_header_c65_token_wd;
  logic message_header_c65_token_we;
  logic [3:0] message_header_c65_field1_qs;
  logic [3:0] message_header_c65_field1_wd;
  logic message_header_c65_field1_we;
  logic [31:0] message_payload_1_c65_qs;
  logic [31:0] message_payload_1_c65_wd;
  logic message_payload_1_c65_we;
  logic doorbell_c65_intr_qs;
  logic doorbell_c65_intr_wd;
  logic doorbell_c65_intr_we;
  logic [30:0] doorbell_c65_preserve_mask_qs;
  logic [30:0] doorbell_c65_preserve_mask_wd;
  logic doorbell_c65_preserve_mask_we;
  logic completion_interrupt_c65_intr_qs;
  logic completion_interrupt_c65_intr_wd;
  logic completion_interrupt_c65_intr_we;
  logic [30:0] completion_interrupt_c65_preserve_mask_qs;
  logic [30:0] completion_interrupt_c65_preserve_mask_wd;
  logic completion_interrupt_c65_preserve_mask_we;
  logic [31:0] reserved_1_c66_qs;
  logic [31:0] reserved_1_c66_wd;
  logic reserved_1_c66_we;
  logic channel_status_c66_channel_free_qs;
  logic channel_status_c66_channel_free_wd;
  logic channel_status_c66_channel_free_we;
  logic channel_status_c66_channel_error_qs;
  logic channel_status_c66_channel_error_wd;
  logic channel_status_c66_channel_error_we;
  logic [29:0] channel_status_c66_field1_qs;
  logic [29:0] channel_status_c66_field1_wd;
  logic channel_status_c66_field1_we;
  logic [31:0] reserved_2_c66_qs;
  logic [31:0] reserved_2_c66_wd;
  logic reserved_2_c66_we;
  logic channel_flags_c66_intr_enable_qs;
  logic channel_flags_c66_intr_enable_wd;
  logic channel_flags_c66_intr_enable_we;
  logic [30:0] channel_flags_c66_field1_qs;
  logic [30:0] channel_flags_c66_field1_wd;
  logic channel_flags_c66_field1_we;
  logic [31:0] length_c66_qs;
  logic [31:0] length_c66_wd;
  logic length_c66_we;
  logic [7:0] message_header_c66_message_id_qs;
  logic [7:0] message_header_c66_message_id_wd;
  logic message_header_c66_message_id_we;
  logic [1:0] message_header_c66_message_type_qs;
  logic [1:0] message_header_c66_message_type_wd;
  logic message_header_c66_message_type_we;
  logic [7:0] message_header_c66_protocol_id_qs;
  logic [7:0] message_header_c66_protocol_id_wd;
  logic message_header_c66_protocol_id_we;
  logic [9:0] message_header_c66_token_qs;
  logic [9:0] message_header_c66_token_wd;
  logic message_header_c66_token_we;
  logic [3:0] message_header_c66_field1_qs;
  logic [3:0] message_header_c66_field1_wd;
  logic message_header_c66_field1_we;
  logic [31:0] message_payload_1_c66_qs;
  logic [31:0] message_payload_1_c66_wd;
  logic message_payload_1_c66_we;
  logic doorbell_c66_intr_qs;
  logic doorbell_c66_intr_wd;
  logic doorbell_c66_intr_we;
  logic [30:0] doorbell_c66_preserve_mask_qs;
  logic [30:0] doorbell_c66_preserve_mask_wd;
  logic doorbell_c66_preserve_mask_we;
  logic completion_interrupt_c66_intr_qs;
  logic completion_interrupt_c66_intr_wd;
  logic completion_interrupt_c66_intr_we;
  logic [30:0] completion_interrupt_c66_preserve_mask_qs;
  logic [30:0] completion_interrupt_c66_preserve_mask_wd;
  logic completion_interrupt_c66_preserve_mask_we;
  logic [31:0] reserved_1_c67_qs;
  logic [31:0] reserved_1_c67_wd;
  logic reserved_1_c67_we;
  logic channel_status_c67_channel_free_qs;
  logic channel_status_c67_channel_free_wd;
  logic channel_status_c67_channel_free_we;
  logic channel_status_c67_channel_error_qs;
  logic channel_status_c67_channel_error_wd;
  logic channel_status_c67_channel_error_we;
  logic [29:0] channel_status_c67_field1_qs;
  logic [29:0] channel_status_c67_field1_wd;
  logic channel_status_c67_field1_we;
  logic [31:0] reserved_2_c67_qs;
  logic [31:0] reserved_2_c67_wd;
  logic reserved_2_c67_we;
  logic channel_flags_c67_intr_enable_qs;
  logic channel_flags_c67_intr_enable_wd;
  logic channel_flags_c67_intr_enable_we;
  logic [30:0] channel_flags_c67_field1_qs;
  logic [30:0] channel_flags_c67_field1_wd;
  logic channel_flags_c67_field1_we;
  logic [31:0] length_c67_qs;
  logic [31:0] length_c67_wd;
  logic length_c67_we;
  logic [7:0] message_header_c67_message_id_qs;
  logic [7:0] message_header_c67_message_id_wd;
  logic message_header_c67_message_id_we;
  logic [1:0] message_header_c67_message_type_qs;
  logic [1:0] message_header_c67_message_type_wd;
  logic message_header_c67_message_type_we;
  logic [7:0] message_header_c67_protocol_id_qs;
  logic [7:0] message_header_c67_protocol_id_wd;
  logic message_header_c67_protocol_id_we;
  logic [9:0] message_header_c67_token_qs;
  logic [9:0] message_header_c67_token_wd;
  logic message_header_c67_token_we;
  logic [3:0] message_header_c67_field1_qs;
  logic [3:0] message_header_c67_field1_wd;
  logic message_header_c67_field1_we;
  logic [31:0] message_payload_1_c67_qs;
  logic [31:0] message_payload_1_c67_wd;
  logic message_payload_1_c67_we;
  logic doorbell_c67_intr_qs;
  logic doorbell_c67_intr_wd;
  logic doorbell_c67_intr_we;
  logic [30:0] doorbell_c67_preserve_mask_qs;
  logic [30:0] doorbell_c67_preserve_mask_wd;
  logic doorbell_c67_preserve_mask_we;
  logic completion_interrupt_c67_intr_qs;
  logic completion_interrupt_c67_intr_wd;
  logic completion_interrupt_c67_intr_we;
  logic [30:0] completion_interrupt_c67_preserve_mask_qs;
  logic [30:0] completion_interrupt_c67_preserve_mask_wd;
  logic completion_interrupt_c67_preserve_mask_we;
  logic [31:0] reserved_1_c68_qs;
  logic [31:0] reserved_1_c68_wd;
  logic reserved_1_c68_we;
  logic channel_status_c68_channel_free_qs;
  logic channel_status_c68_channel_free_wd;
  logic channel_status_c68_channel_free_we;
  logic channel_status_c68_channel_error_qs;
  logic channel_status_c68_channel_error_wd;
  logic channel_status_c68_channel_error_we;
  logic [29:0] channel_status_c68_field1_qs;
  logic [29:0] channel_status_c68_field1_wd;
  logic channel_status_c68_field1_we;
  logic [31:0] reserved_2_c68_qs;
  logic [31:0] reserved_2_c68_wd;
  logic reserved_2_c68_we;
  logic channel_flags_c68_intr_enable_qs;
  logic channel_flags_c68_intr_enable_wd;
  logic channel_flags_c68_intr_enable_we;
  logic [30:0] channel_flags_c68_field1_qs;
  logic [30:0] channel_flags_c68_field1_wd;
  logic channel_flags_c68_field1_we;
  logic [31:0] length_c68_qs;
  logic [31:0] length_c68_wd;
  logic length_c68_we;
  logic [7:0] message_header_c68_message_id_qs;
  logic [7:0] message_header_c68_message_id_wd;
  logic message_header_c68_message_id_we;
  logic [1:0] message_header_c68_message_type_qs;
  logic [1:0] message_header_c68_message_type_wd;
  logic message_header_c68_message_type_we;
  logic [7:0] message_header_c68_protocol_id_qs;
  logic [7:0] message_header_c68_protocol_id_wd;
  logic message_header_c68_protocol_id_we;
  logic [9:0] message_header_c68_token_qs;
  logic [9:0] message_header_c68_token_wd;
  logic message_header_c68_token_we;
  logic [3:0] message_header_c68_field1_qs;
  logic [3:0] message_header_c68_field1_wd;
  logic message_header_c68_field1_we;
  logic [31:0] message_payload_1_c68_qs;
  logic [31:0] message_payload_1_c68_wd;
  logic message_payload_1_c68_we;
  logic doorbell_c68_intr_qs;
  logic doorbell_c68_intr_wd;
  logic doorbell_c68_intr_we;
  logic [30:0] doorbell_c68_preserve_mask_qs;
  logic [30:0] doorbell_c68_preserve_mask_wd;
  logic doorbell_c68_preserve_mask_we;
  logic completion_interrupt_c68_intr_qs;
  logic completion_interrupt_c68_intr_wd;
  logic completion_interrupt_c68_intr_we;
  logic [30:0] completion_interrupt_c68_preserve_mask_qs;
  logic [30:0] completion_interrupt_c68_preserve_mask_wd;
  logic completion_interrupt_c68_preserve_mask_we;
  logic [31:0] reserved_1_c69_qs;
  logic [31:0] reserved_1_c69_wd;
  logic reserved_1_c69_we;
  logic channel_status_c69_channel_free_qs;
  logic channel_status_c69_channel_free_wd;
  logic channel_status_c69_channel_free_we;
  logic channel_status_c69_channel_error_qs;
  logic channel_status_c69_channel_error_wd;
  logic channel_status_c69_channel_error_we;
  logic [29:0] channel_status_c69_field1_qs;
  logic [29:0] channel_status_c69_field1_wd;
  logic channel_status_c69_field1_we;
  logic [31:0] reserved_2_c69_qs;
  logic [31:0] reserved_2_c69_wd;
  logic reserved_2_c69_we;
  logic channel_flags_c69_intr_enable_qs;
  logic channel_flags_c69_intr_enable_wd;
  logic channel_flags_c69_intr_enable_we;
  logic [30:0] channel_flags_c69_field1_qs;
  logic [30:0] channel_flags_c69_field1_wd;
  logic channel_flags_c69_field1_we;
  logic [31:0] length_c69_qs;
  logic [31:0] length_c69_wd;
  logic length_c69_we;
  logic [7:0] message_header_c69_message_id_qs;
  logic [7:0] message_header_c69_message_id_wd;
  logic message_header_c69_message_id_we;
  logic [1:0] message_header_c69_message_type_qs;
  logic [1:0] message_header_c69_message_type_wd;
  logic message_header_c69_message_type_we;
  logic [7:0] message_header_c69_protocol_id_qs;
  logic [7:0] message_header_c69_protocol_id_wd;
  logic message_header_c69_protocol_id_we;
  logic [9:0] message_header_c69_token_qs;
  logic [9:0] message_header_c69_token_wd;
  logic message_header_c69_token_we;
  logic [3:0] message_header_c69_field1_qs;
  logic [3:0] message_header_c69_field1_wd;
  logic message_header_c69_field1_we;
  logic [31:0] message_payload_1_c69_qs;
  logic [31:0] message_payload_1_c69_wd;
  logic message_payload_1_c69_we;
  logic doorbell_c69_intr_qs;
  logic doorbell_c69_intr_wd;
  logic doorbell_c69_intr_we;
  logic [30:0] doorbell_c69_preserve_mask_qs;
  logic [30:0] doorbell_c69_preserve_mask_wd;
  logic doorbell_c69_preserve_mask_we;
  logic completion_interrupt_c69_intr_qs;
  logic completion_interrupt_c69_intr_wd;
  logic completion_interrupt_c69_intr_we;
  logic [30:0] completion_interrupt_c69_preserve_mask_qs;
  logic [30:0] completion_interrupt_c69_preserve_mask_wd;
  logic completion_interrupt_c69_preserve_mask_we;
  logic [31:0] reserved_1_c70_qs;
  logic [31:0] reserved_1_c70_wd;
  logic reserved_1_c70_we;
  logic channel_status_c70_channel_free_qs;
  logic channel_status_c70_channel_free_wd;
  logic channel_status_c70_channel_free_we;
  logic channel_status_c70_channel_error_qs;
  logic channel_status_c70_channel_error_wd;
  logic channel_status_c70_channel_error_we;
  logic [29:0] channel_status_c70_field1_qs;
  logic [29:0] channel_status_c70_field1_wd;
  logic channel_status_c70_field1_we;
  logic [31:0] reserved_2_c70_qs;
  logic [31:0] reserved_2_c70_wd;
  logic reserved_2_c70_we;
  logic channel_flags_c70_intr_enable_qs;
  logic channel_flags_c70_intr_enable_wd;
  logic channel_flags_c70_intr_enable_we;
  logic [30:0] channel_flags_c70_field1_qs;
  logic [30:0] channel_flags_c70_field1_wd;
  logic channel_flags_c70_field1_we;
  logic [31:0] length_c70_qs;
  logic [31:0] length_c70_wd;
  logic length_c70_we;
  logic [7:0] message_header_c70_message_id_qs;
  logic [7:0] message_header_c70_message_id_wd;
  logic message_header_c70_message_id_we;
  logic [1:0] message_header_c70_message_type_qs;
  logic [1:0] message_header_c70_message_type_wd;
  logic message_header_c70_message_type_we;
  logic [7:0] message_header_c70_protocol_id_qs;
  logic [7:0] message_header_c70_protocol_id_wd;
  logic message_header_c70_protocol_id_we;
  logic [9:0] message_header_c70_token_qs;
  logic [9:0] message_header_c70_token_wd;
  logic message_header_c70_token_we;
  logic [3:0] message_header_c70_field1_qs;
  logic [3:0] message_header_c70_field1_wd;
  logic message_header_c70_field1_we;
  logic [31:0] message_payload_1_c70_qs;
  logic [31:0] message_payload_1_c70_wd;
  logic message_payload_1_c70_we;
  logic doorbell_c70_intr_qs;
  logic doorbell_c70_intr_wd;
  logic doorbell_c70_intr_we;
  logic [30:0] doorbell_c70_preserve_mask_qs;
  logic [30:0] doorbell_c70_preserve_mask_wd;
  logic doorbell_c70_preserve_mask_we;
  logic completion_interrupt_c70_intr_qs;
  logic completion_interrupt_c70_intr_wd;
  logic completion_interrupt_c70_intr_we;
  logic [30:0] completion_interrupt_c70_preserve_mask_qs;
  logic [30:0] completion_interrupt_c70_preserve_mask_wd;
  logic completion_interrupt_c70_preserve_mask_we;
  logic [31:0] reserved_1_c71_qs;
  logic [31:0] reserved_1_c71_wd;
  logic reserved_1_c71_we;
  logic channel_status_c71_channel_free_qs;
  logic channel_status_c71_channel_free_wd;
  logic channel_status_c71_channel_free_we;
  logic channel_status_c71_channel_error_qs;
  logic channel_status_c71_channel_error_wd;
  logic channel_status_c71_channel_error_we;
  logic [29:0] channel_status_c71_field1_qs;
  logic [29:0] channel_status_c71_field1_wd;
  logic channel_status_c71_field1_we;
  logic [31:0] reserved_2_c71_qs;
  logic [31:0] reserved_2_c71_wd;
  logic reserved_2_c71_we;
  logic channel_flags_c71_intr_enable_qs;
  logic channel_flags_c71_intr_enable_wd;
  logic channel_flags_c71_intr_enable_we;
  logic [30:0] channel_flags_c71_field1_qs;
  logic [30:0] channel_flags_c71_field1_wd;
  logic channel_flags_c71_field1_we;
  logic [31:0] length_c71_qs;
  logic [31:0] length_c71_wd;
  logic length_c71_we;
  logic [7:0] message_header_c71_message_id_qs;
  logic [7:0] message_header_c71_message_id_wd;
  logic message_header_c71_message_id_we;
  logic [1:0] message_header_c71_message_type_qs;
  logic [1:0] message_header_c71_message_type_wd;
  logic message_header_c71_message_type_we;
  logic [7:0] message_header_c71_protocol_id_qs;
  logic [7:0] message_header_c71_protocol_id_wd;
  logic message_header_c71_protocol_id_we;
  logic [9:0] message_header_c71_token_qs;
  logic [9:0] message_header_c71_token_wd;
  logic message_header_c71_token_we;
  logic [3:0] message_header_c71_field1_qs;
  logic [3:0] message_header_c71_field1_wd;
  logic message_header_c71_field1_we;
  logic [31:0] message_payload_1_c71_qs;
  logic [31:0] message_payload_1_c71_wd;
  logic message_payload_1_c71_we;
  logic doorbell_c71_intr_qs;
  logic doorbell_c71_intr_wd;
  logic doorbell_c71_intr_we;
  logic [30:0] doorbell_c71_preserve_mask_qs;
  logic [30:0] doorbell_c71_preserve_mask_wd;
  logic doorbell_c71_preserve_mask_we;
  logic completion_interrupt_c71_intr_qs;
  logic completion_interrupt_c71_intr_wd;
  logic completion_interrupt_c71_intr_we;
  logic [30:0] completion_interrupt_c71_preserve_mask_qs;
  logic [30:0] completion_interrupt_c71_preserve_mask_wd;
  logic completion_interrupt_c71_preserve_mask_we;
  logic [31:0] reserved_1_c72_qs;
  logic [31:0] reserved_1_c72_wd;
  logic reserved_1_c72_we;
  logic channel_status_c72_channel_free_qs;
  logic channel_status_c72_channel_free_wd;
  logic channel_status_c72_channel_free_we;
  logic channel_status_c72_channel_error_qs;
  logic channel_status_c72_channel_error_wd;
  logic channel_status_c72_channel_error_we;
  logic [29:0] channel_status_c72_field1_qs;
  logic [29:0] channel_status_c72_field1_wd;
  logic channel_status_c72_field1_we;
  logic [31:0] reserved_2_c72_qs;
  logic [31:0] reserved_2_c72_wd;
  logic reserved_2_c72_we;
  logic channel_flags_c72_intr_enable_qs;
  logic channel_flags_c72_intr_enable_wd;
  logic channel_flags_c72_intr_enable_we;
  logic [30:0] channel_flags_c72_field1_qs;
  logic [30:0] channel_flags_c72_field1_wd;
  logic channel_flags_c72_field1_we;
  logic [31:0] length_c72_qs;
  logic [31:0] length_c72_wd;
  logic length_c72_we;
  logic [7:0] message_header_c72_message_id_qs;
  logic [7:0] message_header_c72_message_id_wd;
  logic message_header_c72_message_id_we;
  logic [1:0] message_header_c72_message_type_qs;
  logic [1:0] message_header_c72_message_type_wd;
  logic message_header_c72_message_type_we;
  logic [7:0] message_header_c72_protocol_id_qs;
  logic [7:0] message_header_c72_protocol_id_wd;
  logic message_header_c72_protocol_id_we;
  logic [9:0] message_header_c72_token_qs;
  logic [9:0] message_header_c72_token_wd;
  logic message_header_c72_token_we;
  logic [3:0] message_header_c72_field1_qs;
  logic [3:0] message_header_c72_field1_wd;
  logic message_header_c72_field1_we;
  logic [31:0] message_payload_1_c72_qs;
  logic [31:0] message_payload_1_c72_wd;
  logic message_payload_1_c72_we;
  logic doorbell_c72_intr_qs;
  logic doorbell_c72_intr_wd;
  logic doorbell_c72_intr_we;
  logic [30:0] doorbell_c72_preserve_mask_qs;
  logic [30:0] doorbell_c72_preserve_mask_wd;
  logic doorbell_c72_preserve_mask_we;
  logic completion_interrupt_c72_intr_qs;
  logic completion_interrupt_c72_intr_wd;
  logic completion_interrupt_c72_intr_we;
  logic [30:0] completion_interrupt_c72_preserve_mask_qs;
  logic [30:0] completion_interrupt_c72_preserve_mask_wd;
  logic completion_interrupt_c72_preserve_mask_we;
  logic [31:0] reserved_1_c73_qs;
  logic [31:0] reserved_1_c73_wd;
  logic reserved_1_c73_we;
  logic channel_status_c73_channel_free_qs;
  logic channel_status_c73_channel_free_wd;
  logic channel_status_c73_channel_free_we;
  logic channel_status_c73_channel_error_qs;
  logic channel_status_c73_channel_error_wd;
  logic channel_status_c73_channel_error_we;
  logic [29:0] channel_status_c73_field1_qs;
  logic [29:0] channel_status_c73_field1_wd;
  logic channel_status_c73_field1_we;
  logic [31:0] reserved_2_c73_qs;
  logic [31:0] reserved_2_c73_wd;
  logic reserved_2_c73_we;
  logic channel_flags_c73_intr_enable_qs;
  logic channel_flags_c73_intr_enable_wd;
  logic channel_flags_c73_intr_enable_we;
  logic [30:0] channel_flags_c73_field1_qs;
  logic [30:0] channel_flags_c73_field1_wd;
  logic channel_flags_c73_field1_we;
  logic [31:0] length_c73_qs;
  logic [31:0] length_c73_wd;
  logic length_c73_we;
  logic [7:0] message_header_c73_message_id_qs;
  logic [7:0] message_header_c73_message_id_wd;
  logic message_header_c73_message_id_we;
  logic [1:0] message_header_c73_message_type_qs;
  logic [1:0] message_header_c73_message_type_wd;
  logic message_header_c73_message_type_we;
  logic [7:0] message_header_c73_protocol_id_qs;
  logic [7:0] message_header_c73_protocol_id_wd;
  logic message_header_c73_protocol_id_we;
  logic [9:0] message_header_c73_token_qs;
  logic [9:0] message_header_c73_token_wd;
  logic message_header_c73_token_we;
  logic [3:0] message_header_c73_field1_qs;
  logic [3:0] message_header_c73_field1_wd;
  logic message_header_c73_field1_we;
  logic [31:0] message_payload_1_c73_qs;
  logic [31:0] message_payload_1_c73_wd;
  logic message_payload_1_c73_we;
  logic doorbell_c73_intr_qs;
  logic doorbell_c73_intr_wd;
  logic doorbell_c73_intr_we;
  logic [30:0] doorbell_c73_preserve_mask_qs;
  logic [30:0] doorbell_c73_preserve_mask_wd;
  logic doorbell_c73_preserve_mask_we;
  logic completion_interrupt_c73_intr_qs;
  logic completion_interrupt_c73_intr_wd;
  logic completion_interrupt_c73_intr_we;
  logic [30:0] completion_interrupt_c73_preserve_mask_qs;
  logic [30:0] completion_interrupt_c73_preserve_mask_wd;
  logic completion_interrupt_c73_preserve_mask_we;
  logic [31:0] reserved_1_c74_qs;
  logic [31:0] reserved_1_c74_wd;
  logic reserved_1_c74_we;
  logic channel_status_c74_channel_free_qs;
  logic channel_status_c74_channel_free_wd;
  logic channel_status_c74_channel_free_we;
  logic channel_status_c74_channel_error_qs;
  logic channel_status_c74_channel_error_wd;
  logic channel_status_c74_channel_error_we;
  logic [29:0] channel_status_c74_field1_qs;
  logic [29:0] channel_status_c74_field1_wd;
  logic channel_status_c74_field1_we;
  logic [31:0] reserved_2_c74_qs;
  logic [31:0] reserved_2_c74_wd;
  logic reserved_2_c74_we;
  logic channel_flags_c74_intr_enable_qs;
  logic channel_flags_c74_intr_enable_wd;
  logic channel_flags_c74_intr_enable_we;
  logic [30:0] channel_flags_c74_field1_qs;
  logic [30:0] channel_flags_c74_field1_wd;
  logic channel_flags_c74_field1_we;
  logic [31:0] length_c74_qs;
  logic [31:0] length_c74_wd;
  logic length_c74_we;
  logic [7:0] message_header_c74_message_id_qs;
  logic [7:0] message_header_c74_message_id_wd;
  logic message_header_c74_message_id_we;
  logic [1:0] message_header_c74_message_type_qs;
  logic [1:0] message_header_c74_message_type_wd;
  logic message_header_c74_message_type_we;
  logic [7:0] message_header_c74_protocol_id_qs;
  logic [7:0] message_header_c74_protocol_id_wd;
  logic message_header_c74_protocol_id_we;
  logic [9:0] message_header_c74_token_qs;
  logic [9:0] message_header_c74_token_wd;
  logic message_header_c74_token_we;
  logic [3:0] message_header_c74_field1_qs;
  logic [3:0] message_header_c74_field1_wd;
  logic message_header_c74_field1_we;
  logic [31:0] message_payload_1_c74_qs;
  logic [31:0] message_payload_1_c74_wd;
  logic message_payload_1_c74_we;
  logic doorbell_c74_intr_qs;
  logic doorbell_c74_intr_wd;
  logic doorbell_c74_intr_we;
  logic [30:0] doorbell_c74_preserve_mask_qs;
  logic [30:0] doorbell_c74_preserve_mask_wd;
  logic doorbell_c74_preserve_mask_we;
  logic completion_interrupt_c74_intr_qs;
  logic completion_interrupt_c74_intr_wd;
  logic completion_interrupt_c74_intr_we;
  logic [30:0] completion_interrupt_c74_preserve_mask_qs;
  logic [30:0] completion_interrupt_c74_preserve_mask_wd;
  logic completion_interrupt_c74_preserve_mask_we;
  logic [31:0] reserved_1_c75_qs;
  logic [31:0] reserved_1_c75_wd;
  logic reserved_1_c75_we;
  logic channel_status_c75_channel_free_qs;
  logic channel_status_c75_channel_free_wd;
  logic channel_status_c75_channel_free_we;
  logic channel_status_c75_channel_error_qs;
  logic channel_status_c75_channel_error_wd;
  logic channel_status_c75_channel_error_we;
  logic [29:0] channel_status_c75_field1_qs;
  logic [29:0] channel_status_c75_field1_wd;
  logic channel_status_c75_field1_we;
  logic [31:0] reserved_2_c75_qs;
  logic [31:0] reserved_2_c75_wd;
  logic reserved_2_c75_we;
  logic channel_flags_c75_intr_enable_qs;
  logic channel_flags_c75_intr_enable_wd;
  logic channel_flags_c75_intr_enable_we;
  logic [30:0] channel_flags_c75_field1_qs;
  logic [30:0] channel_flags_c75_field1_wd;
  logic channel_flags_c75_field1_we;
  logic [31:0] length_c75_qs;
  logic [31:0] length_c75_wd;
  logic length_c75_we;
  logic [7:0] message_header_c75_message_id_qs;
  logic [7:0] message_header_c75_message_id_wd;
  logic message_header_c75_message_id_we;
  logic [1:0] message_header_c75_message_type_qs;
  logic [1:0] message_header_c75_message_type_wd;
  logic message_header_c75_message_type_we;
  logic [7:0] message_header_c75_protocol_id_qs;
  logic [7:0] message_header_c75_protocol_id_wd;
  logic message_header_c75_protocol_id_we;
  logic [9:0] message_header_c75_token_qs;
  logic [9:0] message_header_c75_token_wd;
  logic message_header_c75_token_we;
  logic [3:0] message_header_c75_field1_qs;
  logic [3:0] message_header_c75_field1_wd;
  logic message_header_c75_field1_we;
  logic [31:0] message_payload_1_c75_qs;
  logic [31:0] message_payload_1_c75_wd;
  logic message_payload_1_c75_we;
  logic doorbell_c75_intr_qs;
  logic doorbell_c75_intr_wd;
  logic doorbell_c75_intr_we;
  logic [30:0] doorbell_c75_preserve_mask_qs;
  logic [30:0] doorbell_c75_preserve_mask_wd;
  logic doorbell_c75_preserve_mask_we;
  logic completion_interrupt_c75_intr_qs;
  logic completion_interrupt_c75_intr_wd;
  logic completion_interrupt_c75_intr_we;
  logic [30:0] completion_interrupt_c75_preserve_mask_qs;
  logic [30:0] completion_interrupt_c75_preserve_mask_wd;
  logic completion_interrupt_c75_preserve_mask_we;
  logic [31:0] reserved_1_c76_qs;
  logic [31:0] reserved_1_c76_wd;
  logic reserved_1_c76_we;
  logic channel_status_c76_channel_free_qs;
  logic channel_status_c76_channel_free_wd;
  logic channel_status_c76_channel_free_we;
  logic channel_status_c76_channel_error_qs;
  logic channel_status_c76_channel_error_wd;
  logic channel_status_c76_channel_error_we;
  logic [29:0] channel_status_c76_field1_qs;
  logic [29:0] channel_status_c76_field1_wd;
  logic channel_status_c76_field1_we;
  logic [31:0] reserved_2_c76_qs;
  logic [31:0] reserved_2_c76_wd;
  logic reserved_2_c76_we;
  logic channel_flags_c76_intr_enable_qs;
  logic channel_flags_c76_intr_enable_wd;
  logic channel_flags_c76_intr_enable_we;
  logic [30:0] channel_flags_c76_field1_qs;
  logic [30:0] channel_flags_c76_field1_wd;
  logic channel_flags_c76_field1_we;
  logic [31:0] length_c76_qs;
  logic [31:0] length_c76_wd;
  logic length_c76_we;
  logic [7:0] message_header_c76_message_id_qs;
  logic [7:0] message_header_c76_message_id_wd;
  logic message_header_c76_message_id_we;
  logic [1:0] message_header_c76_message_type_qs;
  logic [1:0] message_header_c76_message_type_wd;
  logic message_header_c76_message_type_we;
  logic [7:0] message_header_c76_protocol_id_qs;
  logic [7:0] message_header_c76_protocol_id_wd;
  logic message_header_c76_protocol_id_we;
  logic [9:0] message_header_c76_token_qs;
  logic [9:0] message_header_c76_token_wd;
  logic message_header_c76_token_we;
  logic [3:0] message_header_c76_field1_qs;
  logic [3:0] message_header_c76_field1_wd;
  logic message_header_c76_field1_we;
  logic [31:0] message_payload_1_c76_qs;
  logic [31:0] message_payload_1_c76_wd;
  logic message_payload_1_c76_we;
  logic doorbell_c76_intr_qs;
  logic doorbell_c76_intr_wd;
  logic doorbell_c76_intr_we;
  logic [30:0] doorbell_c76_preserve_mask_qs;
  logic [30:0] doorbell_c76_preserve_mask_wd;
  logic doorbell_c76_preserve_mask_we;
  logic completion_interrupt_c76_intr_qs;
  logic completion_interrupt_c76_intr_wd;
  logic completion_interrupt_c76_intr_we;
  logic [30:0] completion_interrupt_c76_preserve_mask_qs;
  logic [30:0] completion_interrupt_c76_preserve_mask_wd;
  logic completion_interrupt_c76_preserve_mask_we;
  logic [31:0] reserved_1_c77_qs;
  logic [31:0] reserved_1_c77_wd;
  logic reserved_1_c77_we;
  logic channel_status_c77_channel_free_qs;
  logic channel_status_c77_channel_free_wd;
  logic channel_status_c77_channel_free_we;
  logic channel_status_c77_channel_error_qs;
  logic channel_status_c77_channel_error_wd;
  logic channel_status_c77_channel_error_we;
  logic [29:0] channel_status_c77_field1_qs;
  logic [29:0] channel_status_c77_field1_wd;
  logic channel_status_c77_field1_we;
  logic [31:0] reserved_2_c77_qs;
  logic [31:0] reserved_2_c77_wd;
  logic reserved_2_c77_we;
  logic channel_flags_c77_intr_enable_qs;
  logic channel_flags_c77_intr_enable_wd;
  logic channel_flags_c77_intr_enable_we;
  logic [30:0] channel_flags_c77_field1_qs;
  logic [30:0] channel_flags_c77_field1_wd;
  logic channel_flags_c77_field1_we;
  logic [31:0] length_c77_qs;
  logic [31:0] length_c77_wd;
  logic length_c77_we;
  logic [7:0] message_header_c77_message_id_qs;
  logic [7:0] message_header_c77_message_id_wd;
  logic message_header_c77_message_id_we;
  logic [1:0] message_header_c77_message_type_qs;
  logic [1:0] message_header_c77_message_type_wd;
  logic message_header_c77_message_type_we;
  logic [7:0] message_header_c77_protocol_id_qs;
  logic [7:0] message_header_c77_protocol_id_wd;
  logic message_header_c77_protocol_id_we;
  logic [9:0] message_header_c77_token_qs;
  logic [9:0] message_header_c77_token_wd;
  logic message_header_c77_token_we;
  logic [3:0] message_header_c77_field1_qs;
  logic [3:0] message_header_c77_field1_wd;
  logic message_header_c77_field1_we;
  logic [31:0] message_payload_1_c77_qs;
  logic [31:0] message_payload_1_c77_wd;
  logic message_payload_1_c77_we;
  logic doorbell_c77_intr_qs;
  logic doorbell_c77_intr_wd;
  logic doorbell_c77_intr_we;
  logic [30:0] doorbell_c77_preserve_mask_qs;
  logic [30:0] doorbell_c77_preserve_mask_wd;
  logic doorbell_c77_preserve_mask_we;
  logic completion_interrupt_c77_intr_qs;
  logic completion_interrupt_c77_intr_wd;
  logic completion_interrupt_c77_intr_we;
  logic [30:0] completion_interrupt_c77_preserve_mask_qs;
  logic [30:0] completion_interrupt_c77_preserve_mask_wd;
  logic completion_interrupt_c77_preserve_mask_we;
  logic [31:0] reserved_1_c78_qs;
  logic [31:0] reserved_1_c78_wd;
  logic reserved_1_c78_we;
  logic channel_status_c78_channel_free_qs;
  logic channel_status_c78_channel_free_wd;
  logic channel_status_c78_channel_free_we;
  logic channel_status_c78_channel_error_qs;
  logic channel_status_c78_channel_error_wd;
  logic channel_status_c78_channel_error_we;
  logic [29:0] channel_status_c78_field1_qs;
  logic [29:0] channel_status_c78_field1_wd;
  logic channel_status_c78_field1_we;
  logic [31:0] reserved_2_c78_qs;
  logic [31:0] reserved_2_c78_wd;
  logic reserved_2_c78_we;
  logic channel_flags_c78_intr_enable_qs;
  logic channel_flags_c78_intr_enable_wd;
  logic channel_flags_c78_intr_enable_we;
  logic [30:0] channel_flags_c78_field1_qs;
  logic [30:0] channel_flags_c78_field1_wd;
  logic channel_flags_c78_field1_we;
  logic [31:0] length_c78_qs;
  logic [31:0] length_c78_wd;
  logic length_c78_we;
  logic [7:0] message_header_c78_message_id_qs;
  logic [7:0] message_header_c78_message_id_wd;
  logic message_header_c78_message_id_we;
  logic [1:0] message_header_c78_message_type_qs;
  logic [1:0] message_header_c78_message_type_wd;
  logic message_header_c78_message_type_we;
  logic [7:0] message_header_c78_protocol_id_qs;
  logic [7:0] message_header_c78_protocol_id_wd;
  logic message_header_c78_protocol_id_we;
  logic [9:0] message_header_c78_token_qs;
  logic [9:0] message_header_c78_token_wd;
  logic message_header_c78_token_we;
  logic [3:0] message_header_c78_field1_qs;
  logic [3:0] message_header_c78_field1_wd;
  logic message_header_c78_field1_we;
  logic [31:0] message_payload_1_c78_qs;
  logic [31:0] message_payload_1_c78_wd;
  logic message_payload_1_c78_we;
  logic doorbell_c78_intr_qs;
  logic doorbell_c78_intr_wd;
  logic doorbell_c78_intr_we;
  logic [30:0] doorbell_c78_preserve_mask_qs;
  logic [30:0] doorbell_c78_preserve_mask_wd;
  logic doorbell_c78_preserve_mask_we;
  logic completion_interrupt_c78_intr_qs;
  logic completion_interrupt_c78_intr_wd;
  logic completion_interrupt_c78_intr_we;
  logic [30:0] completion_interrupt_c78_preserve_mask_qs;
  logic [30:0] completion_interrupt_c78_preserve_mask_wd;
  logic completion_interrupt_c78_preserve_mask_we;
  logic [31:0] reserved_1_c79_qs;
  logic [31:0] reserved_1_c79_wd;
  logic reserved_1_c79_we;
  logic channel_status_c79_channel_free_qs;
  logic channel_status_c79_channel_free_wd;
  logic channel_status_c79_channel_free_we;
  logic channel_status_c79_channel_error_qs;
  logic channel_status_c79_channel_error_wd;
  logic channel_status_c79_channel_error_we;
  logic [29:0] channel_status_c79_field1_qs;
  logic [29:0] channel_status_c79_field1_wd;
  logic channel_status_c79_field1_we;
  logic [31:0] reserved_2_c79_qs;
  logic [31:0] reserved_2_c79_wd;
  logic reserved_2_c79_we;
  logic channel_flags_c79_intr_enable_qs;
  logic channel_flags_c79_intr_enable_wd;
  logic channel_flags_c79_intr_enable_we;
  logic [30:0] channel_flags_c79_field1_qs;
  logic [30:0] channel_flags_c79_field1_wd;
  logic channel_flags_c79_field1_we;
  logic [31:0] length_c79_qs;
  logic [31:0] length_c79_wd;
  logic length_c79_we;
  logic [7:0] message_header_c79_message_id_qs;
  logic [7:0] message_header_c79_message_id_wd;
  logic message_header_c79_message_id_we;
  logic [1:0] message_header_c79_message_type_qs;
  logic [1:0] message_header_c79_message_type_wd;
  logic message_header_c79_message_type_we;
  logic [7:0] message_header_c79_protocol_id_qs;
  logic [7:0] message_header_c79_protocol_id_wd;
  logic message_header_c79_protocol_id_we;
  logic [9:0] message_header_c79_token_qs;
  logic [9:0] message_header_c79_token_wd;
  logic message_header_c79_token_we;
  logic [3:0] message_header_c79_field1_qs;
  logic [3:0] message_header_c79_field1_wd;
  logic message_header_c79_field1_we;
  logic [31:0] message_payload_1_c79_qs;
  logic [31:0] message_payload_1_c79_wd;
  logic message_payload_1_c79_we;
  logic doorbell_c79_intr_qs;
  logic doorbell_c79_intr_wd;
  logic doorbell_c79_intr_we;
  logic [30:0] doorbell_c79_preserve_mask_qs;
  logic [30:0] doorbell_c79_preserve_mask_wd;
  logic doorbell_c79_preserve_mask_we;
  logic completion_interrupt_c79_intr_qs;
  logic completion_interrupt_c79_intr_wd;
  logic completion_interrupt_c79_intr_we;
  logic [30:0] completion_interrupt_c79_preserve_mask_qs;
  logic [30:0] completion_interrupt_c79_preserve_mask_wd;
  logic completion_interrupt_c79_preserve_mask_we;
  logic [31:0] reserved_1_c80_qs;
  logic [31:0] reserved_1_c80_wd;
  logic reserved_1_c80_we;
  logic channel_status_c80_channel_free_qs;
  logic channel_status_c80_channel_free_wd;
  logic channel_status_c80_channel_free_we;
  logic channel_status_c80_channel_error_qs;
  logic channel_status_c80_channel_error_wd;
  logic channel_status_c80_channel_error_we;
  logic [29:0] channel_status_c80_field1_qs;
  logic [29:0] channel_status_c80_field1_wd;
  logic channel_status_c80_field1_we;
  logic [31:0] reserved_2_c80_qs;
  logic [31:0] reserved_2_c80_wd;
  logic reserved_2_c80_we;
  logic channel_flags_c80_intr_enable_qs;
  logic channel_flags_c80_intr_enable_wd;
  logic channel_flags_c80_intr_enable_we;
  logic [30:0] channel_flags_c80_field1_qs;
  logic [30:0] channel_flags_c80_field1_wd;
  logic channel_flags_c80_field1_we;
  logic [31:0] length_c80_qs;
  logic [31:0] length_c80_wd;
  logic length_c80_we;
  logic [7:0] message_header_c80_message_id_qs;
  logic [7:0] message_header_c80_message_id_wd;
  logic message_header_c80_message_id_we;
  logic [1:0] message_header_c80_message_type_qs;
  logic [1:0] message_header_c80_message_type_wd;
  logic message_header_c80_message_type_we;
  logic [7:0] message_header_c80_protocol_id_qs;
  logic [7:0] message_header_c80_protocol_id_wd;
  logic message_header_c80_protocol_id_we;
  logic [9:0] message_header_c80_token_qs;
  logic [9:0] message_header_c80_token_wd;
  logic message_header_c80_token_we;
  logic [3:0] message_header_c80_field1_qs;
  logic [3:0] message_header_c80_field1_wd;
  logic message_header_c80_field1_we;
  logic [31:0] message_payload_1_c80_qs;
  logic [31:0] message_payload_1_c80_wd;
  logic message_payload_1_c80_we;
  logic doorbell_c80_intr_qs;
  logic doorbell_c80_intr_wd;
  logic doorbell_c80_intr_we;
  logic [30:0] doorbell_c80_preserve_mask_qs;
  logic [30:0] doorbell_c80_preserve_mask_wd;
  logic doorbell_c80_preserve_mask_we;
  logic completion_interrupt_c80_intr_qs;
  logic completion_interrupt_c80_intr_wd;
  logic completion_interrupt_c80_intr_we;
  logic [30:0] completion_interrupt_c80_preserve_mask_qs;
  logic [30:0] completion_interrupt_c80_preserve_mask_wd;
  logic completion_interrupt_c80_preserve_mask_we;
  logic [31:0] reserved_1_c81_qs;
  logic [31:0] reserved_1_c81_wd;
  logic reserved_1_c81_we;
  logic channel_status_c81_channel_free_qs;
  logic channel_status_c81_channel_free_wd;
  logic channel_status_c81_channel_free_we;
  logic channel_status_c81_channel_error_qs;
  logic channel_status_c81_channel_error_wd;
  logic channel_status_c81_channel_error_we;
  logic [29:0] channel_status_c81_field1_qs;
  logic [29:0] channel_status_c81_field1_wd;
  logic channel_status_c81_field1_we;
  logic [31:0] reserved_2_c81_qs;
  logic [31:0] reserved_2_c81_wd;
  logic reserved_2_c81_we;
  logic channel_flags_c81_intr_enable_qs;
  logic channel_flags_c81_intr_enable_wd;
  logic channel_flags_c81_intr_enable_we;
  logic [30:0] channel_flags_c81_field1_qs;
  logic [30:0] channel_flags_c81_field1_wd;
  logic channel_flags_c81_field1_we;
  logic [31:0] length_c81_qs;
  logic [31:0] length_c81_wd;
  logic length_c81_we;
  logic [7:0] message_header_c81_message_id_qs;
  logic [7:0] message_header_c81_message_id_wd;
  logic message_header_c81_message_id_we;
  logic [1:0] message_header_c81_message_type_qs;
  logic [1:0] message_header_c81_message_type_wd;
  logic message_header_c81_message_type_we;
  logic [7:0] message_header_c81_protocol_id_qs;
  logic [7:0] message_header_c81_protocol_id_wd;
  logic message_header_c81_protocol_id_we;
  logic [9:0] message_header_c81_token_qs;
  logic [9:0] message_header_c81_token_wd;
  logic message_header_c81_token_we;
  logic [3:0] message_header_c81_field1_qs;
  logic [3:0] message_header_c81_field1_wd;
  logic message_header_c81_field1_we;
  logic [31:0] message_payload_1_c81_qs;
  logic [31:0] message_payload_1_c81_wd;
  logic message_payload_1_c81_we;
  logic doorbell_c81_intr_qs;
  logic doorbell_c81_intr_wd;
  logic doorbell_c81_intr_we;
  logic [30:0] doorbell_c81_preserve_mask_qs;
  logic [30:0] doorbell_c81_preserve_mask_wd;
  logic doorbell_c81_preserve_mask_we;
  logic completion_interrupt_c81_intr_qs;
  logic completion_interrupt_c81_intr_wd;
  logic completion_interrupt_c81_intr_we;
  logic [30:0] completion_interrupt_c81_preserve_mask_qs;
  logic [30:0] completion_interrupt_c81_preserve_mask_wd;
  logic completion_interrupt_c81_preserve_mask_we;
  logic [31:0] reserved_1_c82_qs;
  logic [31:0] reserved_1_c82_wd;
  logic reserved_1_c82_we;
  logic channel_status_c82_channel_free_qs;
  logic channel_status_c82_channel_free_wd;
  logic channel_status_c82_channel_free_we;
  logic channel_status_c82_channel_error_qs;
  logic channel_status_c82_channel_error_wd;
  logic channel_status_c82_channel_error_we;
  logic [29:0] channel_status_c82_field1_qs;
  logic [29:0] channel_status_c82_field1_wd;
  logic channel_status_c82_field1_we;
  logic [31:0] reserved_2_c82_qs;
  logic [31:0] reserved_2_c82_wd;
  logic reserved_2_c82_we;
  logic channel_flags_c82_intr_enable_qs;
  logic channel_flags_c82_intr_enable_wd;
  logic channel_flags_c82_intr_enable_we;
  logic [30:0] channel_flags_c82_field1_qs;
  logic [30:0] channel_flags_c82_field1_wd;
  logic channel_flags_c82_field1_we;
  logic [31:0] length_c82_qs;
  logic [31:0] length_c82_wd;
  logic length_c82_we;
  logic [7:0] message_header_c82_message_id_qs;
  logic [7:0] message_header_c82_message_id_wd;
  logic message_header_c82_message_id_we;
  logic [1:0] message_header_c82_message_type_qs;
  logic [1:0] message_header_c82_message_type_wd;
  logic message_header_c82_message_type_we;
  logic [7:0] message_header_c82_protocol_id_qs;
  logic [7:0] message_header_c82_protocol_id_wd;
  logic message_header_c82_protocol_id_we;
  logic [9:0] message_header_c82_token_qs;
  logic [9:0] message_header_c82_token_wd;
  logic message_header_c82_token_we;
  logic [3:0] message_header_c82_field1_qs;
  logic [3:0] message_header_c82_field1_wd;
  logic message_header_c82_field1_we;
  logic [31:0] message_payload_1_c82_qs;
  logic [31:0] message_payload_1_c82_wd;
  logic message_payload_1_c82_we;
  logic doorbell_c82_intr_qs;
  logic doorbell_c82_intr_wd;
  logic doorbell_c82_intr_we;
  logic [30:0] doorbell_c82_preserve_mask_qs;
  logic [30:0] doorbell_c82_preserve_mask_wd;
  logic doorbell_c82_preserve_mask_we;
  logic completion_interrupt_c82_intr_qs;
  logic completion_interrupt_c82_intr_wd;
  logic completion_interrupt_c82_intr_we;
  logic [30:0] completion_interrupt_c82_preserve_mask_qs;
  logic [30:0] completion_interrupt_c82_preserve_mask_wd;
  logic completion_interrupt_c82_preserve_mask_we;
  logic [31:0] reserved_1_c83_qs;
  logic [31:0] reserved_1_c83_wd;
  logic reserved_1_c83_we;
  logic channel_status_c83_channel_free_qs;
  logic channel_status_c83_channel_free_wd;
  logic channel_status_c83_channel_free_we;
  logic channel_status_c83_channel_error_qs;
  logic channel_status_c83_channel_error_wd;
  logic channel_status_c83_channel_error_we;
  logic [29:0] channel_status_c83_field1_qs;
  logic [29:0] channel_status_c83_field1_wd;
  logic channel_status_c83_field1_we;
  logic [31:0] reserved_2_c83_qs;
  logic [31:0] reserved_2_c83_wd;
  logic reserved_2_c83_we;
  logic channel_flags_c83_intr_enable_qs;
  logic channel_flags_c83_intr_enable_wd;
  logic channel_flags_c83_intr_enable_we;
  logic [30:0] channel_flags_c83_field1_qs;
  logic [30:0] channel_flags_c83_field1_wd;
  logic channel_flags_c83_field1_we;
  logic [31:0] length_c83_qs;
  logic [31:0] length_c83_wd;
  logic length_c83_we;
  logic [7:0] message_header_c83_message_id_qs;
  logic [7:0] message_header_c83_message_id_wd;
  logic message_header_c83_message_id_we;
  logic [1:0] message_header_c83_message_type_qs;
  logic [1:0] message_header_c83_message_type_wd;
  logic message_header_c83_message_type_we;
  logic [7:0] message_header_c83_protocol_id_qs;
  logic [7:0] message_header_c83_protocol_id_wd;
  logic message_header_c83_protocol_id_we;
  logic [9:0] message_header_c83_token_qs;
  logic [9:0] message_header_c83_token_wd;
  logic message_header_c83_token_we;
  logic [3:0] message_header_c83_field1_qs;
  logic [3:0] message_header_c83_field1_wd;
  logic message_header_c83_field1_we;
  logic [31:0] message_payload_1_c83_qs;
  logic [31:0] message_payload_1_c83_wd;
  logic message_payload_1_c83_we;
  logic doorbell_c83_intr_qs;
  logic doorbell_c83_intr_wd;
  logic doorbell_c83_intr_we;
  logic [30:0] doorbell_c83_preserve_mask_qs;
  logic [30:0] doorbell_c83_preserve_mask_wd;
  logic doorbell_c83_preserve_mask_we;
  logic completion_interrupt_c83_intr_qs;
  logic completion_interrupt_c83_intr_wd;
  logic completion_interrupt_c83_intr_we;
  logic [30:0] completion_interrupt_c83_preserve_mask_qs;
  logic [30:0] completion_interrupt_c83_preserve_mask_wd;
  logic completion_interrupt_c83_preserve_mask_we;
  logic [31:0] reserved_1_c84_qs;
  logic [31:0] reserved_1_c84_wd;
  logic reserved_1_c84_we;
  logic channel_status_c84_channel_free_qs;
  logic channel_status_c84_channel_free_wd;
  logic channel_status_c84_channel_free_we;
  logic channel_status_c84_channel_error_qs;
  logic channel_status_c84_channel_error_wd;
  logic channel_status_c84_channel_error_we;
  logic [29:0] channel_status_c84_field1_qs;
  logic [29:0] channel_status_c84_field1_wd;
  logic channel_status_c84_field1_we;
  logic [31:0] reserved_2_c84_qs;
  logic [31:0] reserved_2_c84_wd;
  logic reserved_2_c84_we;
  logic channel_flags_c84_intr_enable_qs;
  logic channel_flags_c84_intr_enable_wd;
  logic channel_flags_c84_intr_enable_we;
  logic [30:0] channel_flags_c84_field1_qs;
  logic [30:0] channel_flags_c84_field1_wd;
  logic channel_flags_c84_field1_we;
  logic [31:0] length_c84_qs;
  logic [31:0] length_c84_wd;
  logic length_c84_we;
  logic [7:0] message_header_c84_message_id_qs;
  logic [7:0] message_header_c84_message_id_wd;
  logic message_header_c84_message_id_we;
  logic [1:0] message_header_c84_message_type_qs;
  logic [1:0] message_header_c84_message_type_wd;
  logic message_header_c84_message_type_we;
  logic [7:0] message_header_c84_protocol_id_qs;
  logic [7:0] message_header_c84_protocol_id_wd;
  logic message_header_c84_protocol_id_we;
  logic [9:0] message_header_c84_token_qs;
  logic [9:0] message_header_c84_token_wd;
  logic message_header_c84_token_we;
  logic [3:0] message_header_c84_field1_qs;
  logic [3:0] message_header_c84_field1_wd;
  logic message_header_c84_field1_we;
  logic [31:0] message_payload_1_c84_qs;
  logic [31:0] message_payload_1_c84_wd;
  logic message_payload_1_c84_we;
  logic doorbell_c84_intr_qs;
  logic doorbell_c84_intr_wd;
  logic doorbell_c84_intr_we;
  logic [30:0] doorbell_c84_preserve_mask_qs;
  logic [30:0] doorbell_c84_preserve_mask_wd;
  logic doorbell_c84_preserve_mask_we;
  logic completion_interrupt_c84_intr_qs;
  logic completion_interrupt_c84_intr_wd;
  logic completion_interrupt_c84_intr_we;
  logic [30:0] completion_interrupt_c84_preserve_mask_qs;
  logic [30:0] completion_interrupt_c84_preserve_mask_wd;
  logic completion_interrupt_c84_preserve_mask_we;
  logic [31:0] reserved_1_c85_qs;
  logic [31:0] reserved_1_c85_wd;
  logic reserved_1_c85_we;
  logic channel_status_c85_channel_free_qs;
  logic channel_status_c85_channel_free_wd;
  logic channel_status_c85_channel_free_we;
  logic channel_status_c85_channel_error_qs;
  logic channel_status_c85_channel_error_wd;
  logic channel_status_c85_channel_error_we;
  logic [29:0] channel_status_c85_field1_qs;
  logic [29:0] channel_status_c85_field1_wd;
  logic channel_status_c85_field1_we;
  logic [31:0] reserved_2_c85_qs;
  logic [31:0] reserved_2_c85_wd;
  logic reserved_2_c85_we;
  logic channel_flags_c85_intr_enable_qs;
  logic channel_flags_c85_intr_enable_wd;
  logic channel_flags_c85_intr_enable_we;
  logic [30:0] channel_flags_c85_field1_qs;
  logic [30:0] channel_flags_c85_field1_wd;
  logic channel_flags_c85_field1_we;
  logic [31:0] length_c85_qs;
  logic [31:0] length_c85_wd;
  logic length_c85_we;
  logic [7:0] message_header_c85_message_id_qs;
  logic [7:0] message_header_c85_message_id_wd;
  logic message_header_c85_message_id_we;
  logic [1:0] message_header_c85_message_type_qs;
  logic [1:0] message_header_c85_message_type_wd;
  logic message_header_c85_message_type_we;
  logic [7:0] message_header_c85_protocol_id_qs;
  logic [7:0] message_header_c85_protocol_id_wd;
  logic message_header_c85_protocol_id_we;
  logic [9:0] message_header_c85_token_qs;
  logic [9:0] message_header_c85_token_wd;
  logic message_header_c85_token_we;
  logic [3:0] message_header_c85_field1_qs;
  logic [3:0] message_header_c85_field1_wd;
  logic message_header_c85_field1_we;
  logic [31:0] message_payload_1_c85_qs;
  logic [31:0] message_payload_1_c85_wd;
  logic message_payload_1_c85_we;
  logic doorbell_c85_intr_qs;
  logic doorbell_c85_intr_wd;
  logic doorbell_c85_intr_we;
  logic [30:0] doorbell_c85_preserve_mask_qs;
  logic [30:0] doorbell_c85_preserve_mask_wd;
  logic doorbell_c85_preserve_mask_we;
  logic completion_interrupt_c85_intr_qs;
  logic completion_interrupt_c85_intr_wd;
  logic completion_interrupt_c85_intr_we;
  logic [30:0] completion_interrupt_c85_preserve_mask_qs;
  logic [30:0] completion_interrupt_c85_preserve_mask_wd;
  logic completion_interrupt_c85_preserve_mask_we;
  logic [31:0] reserved_1_c86_qs;
  logic [31:0] reserved_1_c86_wd;
  logic reserved_1_c86_we;
  logic channel_status_c86_channel_free_qs;
  logic channel_status_c86_channel_free_wd;
  logic channel_status_c86_channel_free_we;
  logic channel_status_c86_channel_error_qs;
  logic channel_status_c86_channel_error_wd;
  logic channel_status_c86_channel_error_we;
  logic [29:0] channel_status_c86_field1_qs;
  logic [29:0] channel_status_c86_field1_wd;
  logic channel_status_c86_field1_we;
  logic [31:0] reserved_2_c86_qs;
  logic [31:0] reserved_2_c86_wd;
  logic reserved_2_c86_we;
  logic channel_flags_c86_intr_enable_qs;
  logic channel_flags_c86_intr_enable_wd;
  logic channel_flags_c86_intr_enable_we;
  logic [30:0] channel_flags_c86_field1_qs;
  logic [30:0] channel_flags_c86_field1_wd;
  logic channel_flags_c86_field1_we;
  logic [31:0] length_c86_qs;
  logic [31:0] length_c86_wd;
  logic length_c86_we;
  logic [7:0] message_header_c86_message_id_qs;
  logic [7:0] message_header_c86_message_id_wd;
  logic message_header_c86_message_id_we;
  logic [1:0] message_header_c86_message_type_qs;
  logic [1:0] message_header_c86_message_type_wd;
  logic message_header_c86_message_type_we;
  logic [7:0] message_header_c86_protocol_id_qs;
  logic [7:0] message_header_c86_protocol_id_wd;
  logic message_header_c86_protocol_id_we;
  logic [9:0] message_header_c86_token_qs;
  logic [9:0] message_header_c86_token_wd;
  logic message_header_c86_token_we;
  logic [3:0] message_header_c86_field1_qs;
  logic [3:0] message_header_c86_field1_wd;
  logic message_header_c86_field1_we;
  logic [31:0] message_payload_1_c86_qs;
  logic [31:0] message_payload_1_c86_wd;
  logic message_payload_1_c86_we;
  logic doorbell_c86_intr_qs;
  logic doorbell_c86_intr_wd;
  logic doorbell_c86_intr_we;
  logic [30:0] doorbell_c86_preserve_mask_qs;
  logic [30:0] doorbell_c86_preserve_mask_wd;
  logic doorbell_c86_preserve_mask_we;
  logic completion_interrupt_c86_intr_qs;
  logic completion_interrupt_c86_intr_wd;
  logic completion_interrupt_c86_intr_we;
  logic [30:0] completion_interrupt_c86_preserve_mask_qs;
  logic [30:0] completion_interrupt_c86_preserve_mask_wd;
  logic completion_interrupt_c86_preserve_mask_we;
  logic [31:0] reserved_1_c87_qs;
  logic [31:0] reserved_1_c87_wd;
  logic reserved_1_c87_we;
  logic channel_status_c87_channel_free_qs;
  logic channel_status_c87_channel_free_wd;
  logic channel_status_c87_channel_free_we;
  logic channel_status_c87_channel_error_qs;
  logic channel_status_c87_channel_error_wd;
  logic channel_status_c87_channel_error_we;
  logic [29:0] channel_status_c87_field1_qs;
  logic [29:0] channel_status_c87_field1_wd;
  logic channel_status_c87_field1_we;
  logic [31:0] reserved_2_c87_qs;
  logic [31:0] reserved_2_c87_wd;
  logic reserved_2_c87_we;
  logic channel_flags_c87_intr_enable_qs;
  logic channel_flags_c87_intr_enable_wd;
  logic channel_flags_c87_intr_enable_we;
  logic [30:0] channel_flags_c87_field1_qs;
  logic [30:0] channel_flags_c87_field1_wd;
  logic channel_flags_c87_field1_we;
  logic [31:0] length_c87_qs;
  logic [31:0] length_c87_wd;
  logic length_c87_we;
  logic [7:0] message_header_c87_message_id_qs;
  logic [7:0] message_header_c87_message_id_wd;
  logic message_header_c87_message_id_we;
  logic [1:0] message_header_c87_message_type_qs;
  logic [1:0] message_header_c87_message_type_wd;
  logic message_header_c87_message_type_we;
  logic [7:0] message_header_c87_protocol_id_qs;
  logic [7:0] message_header_c87_protocol_id_wd;
  logic message_header_c87_protocol_id_we;
  logic [9:0] message_header_c87_token_qs;
  logic [9:0] message_header_c87_token_wd;
  logic message_header_c87_token_we;
  logic [3:0] message_header_c87_field1_qs;
  logic [3:0] message_header_c87_field1_wd;
  logic message_header_c87_field1_we;
  logic [31:0] message_payload_1_c87_qs;
  logic [31:0] message_payload_1_c87_wd;
  logic message_payload_1_c87_we;
  logic doorbell_c87_intr_qs;
  logic doorbell_c87_intr_wd;
  logic doorbell_c87_intr_we;
  logic [30:0] doorbell_c87_preserve_mask_qs;
  logic [30:0] doorbell_c87_preserve_mask_wd;
  logic doorbell_c87_preserve_mask_we;
  logic completion_interrupt_c87_intr_qs;
  logic completion_interrupt_c87_intr_wd;
  logic completion_interrupt_c87_intr_we;
  logic [30:0] completion_interrupt_c87_preserve_mask_qs;
  logic [30:0] completion_interrupt_c87_preserve_mask_wd;
  logic completion_interrupt_c87_preserve_mask_we;
  logic [31:0] reserved_1_c88_qs;
  logic [31:0] reserved_1_c88_wd;
  logic reserved_1_c88_we;
  logic channel_status_c88_channel_free_qs;
  logic channel_status_c88_channel_free_wd;
  logic channel_status_c88_channel_free_we;
  logic channel_status_c88_channel_error_qs;
  logic channel_status_c88_channel_error_wd;
  logic channel_status_c88_channel_error_we;
  logic [29:0] channel_status_c88_field1_qs;
  logic [29:0] channel_status_c88_field1_wd;
  logic channel_status_c88_field1_we;
  logic [31:0] reserved_2_c88_qs;
  logic [31:0] reserved_2_c88_wd;
  logic reserved_2_c88_we;
  logic channel_flags_c88_intr_enable_qs;
  logic channel_flags_c88_intr_enable_wd;
  logic channel_flags_c88_intr_enable_we;
  logic [30:0] channel_flags_c88_field1_qs;
  logic [30:0] channel_flags_c88_field1_wd;
  logic channel_flags_c88_field1_we;
  logic [31:0] length_c88_qs;
  logic [31:0] length_c88_wd;
  logic length_c88_we;
  logic [7:0] message_header_c88_message_id_qs;
  logic [7:0] message_header_c88_message_id_wd;
  logic message_header_c88_message_id_we;
  logic [1:0] message_header_c88_message_type_qs;
  logic [1:0] message_header_c88_message_type_wd;
  logic message_header_c88_message_type_we;
  logic [7:0] message_header_c88_protocol_id_qs;
  logic [7:0] message_header_c88_protocol_id_wd;
  logic message_header_c88_protocol_id_we;
  logic [9:0] message_header_c88_token_qs;
  logic [9:0] message_header_c88_token_wd;
  logic message_header_c88_token_we;
  logic [3:0] message_header_c88_field1_qs;
  logic [3:0] message_header_c88_field1_wd;
  logic message_header_c88_field1_we;
  logic [31:0] message_payload_1_c88_qs;
  logic [31:0] message_payload_1_c88_wd;
  logic message_payload_1_c88_we;
  logic doorbell_c88_intr_qs;
  logic doorbell_c88_intr_wd;
  logic doorbell_c88_intr_we;
  logic [30:0] doorbell_c88_preserve_mask_qs;
  logic [30:0] doorbell_c88_preserve_mask_wd;
  logic doorbell_c88_preserve_mask_we;
  logic completion_interrupt_c88_intr_qs;
  logic completion_interrupt_c88_intr_wd;
  logic completion_interrupt_c88_intr_we;
  logic [30:0] completion_interrupt_c88_preserve_mask_qs;
  logic [30:0] completion_interrupt_c88_preserve_mask_wd;
  logic completion_interrupt_c88_preserve_mask_we;
  logic [31:0] reserved_1_c89_qs;
  logic [31:0] reserved_1_c89_wd;
  logic reserved_1_c89_we;
  logic channel_status_c89_channel_free_qs;
  logic channel_status_c89_channel_free_wd;
  logic channel_status_c89_channel_free_we;
  logic channel_status_c89_channel_error_qs;
  logic channel_status_c89_channel_error_wd;
  logic channel_status_c89_channel_error_we;
  logic [29:0] channel_status_c89_field1_qs;
  logic [29:0] channel_status_c89_field1_wd;
  logic channel_status_c89_field1_we;
  logic [31:0] reserved_2_c89_qs;
  logic [31:0] reserved_2_c89_wd;
  logic reserved_2_c89_we;
  logic channel_flags_c89_intr_enable_qs;
  logic channel_flags_c89_intr_enable_wd;
  logic channel_flags_c89_intr_enable_we;
  logic [30:0] channel_flags_c89_field1_qs;
  logic [30:0] channel_flags_c89_field1_wd;
  logic channel_flags_c89_field1_we;
  logic [31:0] length_c89_qs;
  logic [31:0] length_c89_wd;
  logic length_c89_we;
  logic [7:0] message_header_c89_message_id_qs;
  logic [7:0] message_header_c89_message_id_wd;
  logic message_header_c89_message_id_we;
  logic [1:0] message_header_c89_message_type_qs;
  logic [1:0] message_header_c89_message_type_wd;
  logic message_header_c89_message_type_we;
  logic [7:0] message_header_c89_protocol_id_qs;
  logic [7:0] message_header_c89_protocol_id_wd;
  logic message_header_c89_protocol_id_we;
  logic [9:0] message_header_c89_token_qs;
  logic [9:0] message_header_c89_token_wd;
  logic message_header_c89_token_we;
  logic [3:0] message_header_c89_field1_qs;
  logic [3:0] message_header_c89_field1_wd;
  logic message_header_c89_field1_we;
  logic [31:0] message_payload_1_c89_qs;
  logic [31:0] message_payload_1_c89_wd;
  logic message_payload_1_c89_we;
  logic doorbell_c89_intr_qs;
  logic doorbell_c89_intr_wd;
  logic doorbell_c89_intr_we;
  logic [30:0] doorbell_c89_preserve_mask_qs;
  logic [30:0] doorbell_c89_preserve_mask_wd;
  logic doorbell_c89_preserve_mask_we;
  logic completion_interrupt_c89_intr_qs;
  logic completion_interrupt_c89_intr_wd;
  logic completion_interrupt_c89_intr_we;
  logic [30:0] completion_interrupt_c89_preserve_mask_qs;
  logic [30:0] completion_interrupt_c89_preserve_mask_wd;
  logic completion_interrupt_c89_preserve_mask_we;
  logic [31:0] reserved_1_c90_qs;
  logic [31:0] reserved_1_c90_wd;
  logic reserved_1_c90_we;
  logic channel_status_c90_channel_free_qs;
  logic channel_status_c90_channel_free_wd;
  logic channel_status_c90_channel_free_we;
  logic channel_status_c90_channel_error_qs;
  logic channel_status_c90_channel_error_wd;
  logic channel_status_c90_channel_error_we;
  logic [29:0] channel_status_c90_field1_qs;
  logic [29:0] channel_status_c90_field1_wd;
  logic channel_status_c90_field1_we;
  logic [31:0] reserved_2_c90_qs;
  logic [31:0] reserved_2_c90_wd;
  logic reserved_2_c90_we;
  logic channel_flags_c90_intr_enable_qs;
  logic channel_flags_c90_intr_enable_wd;
  logic channel_flags_c90_intr_enable_we;
  logic [30:0] channel_flags_c90_field1_qs;
  logic [30:0] channel_flags_c90_field1_wd;
  logic channel_flags_c90_field1_we;
  logic [31:0] length_c90_qs;
  logic [31:0] length_c90_wd;
  logic length_c90_we;
  logic [7:0] message_header_c90_message_id_qs;
  logic [7:0] message_header_c90_message_id_wd;
  logic message_header_c90_message_id_we;
  logic [1:0] message_header_c90_message_type_qs;
  logic [1:0] message_header_c90_message_type_wd;
  logic message_header_c90_message_type_we;
  logic [7:0] message_header_c90_protocol_id_qs;
  logic [7:0] message_header_c90_protocol_id_wd;
  logic message_header_c90_protocol_id_we;
  logic [9:0] message_header_c90_token_qs;
  logic [9:0] message_header_c90_token_wd;
  logic message_header_c90_token_we;
  logic [3:0] message_header_c90_field1_qs;
  logic [3:0] message_header_c90_field1_wd;
  logic message_header_c90_field1_we;
  logic [31:0] message_payload_1_c90_qs;
  logic [31:0] message_payload_1_c90_wd;
  logic message_payload_1_c90_we;
  logic doorbell_c90_intr_qs;
  logic doorbell_c90_intr_wd;
  logic doorbell_c90_intr_we;
  logic [30:0] doorbell_c90_preserve_mask_qs;
  logic [30:0] doorbell_c90_preserve_mask_wd;
  logic doorbell_c90_preserve_mask_we;
  logic completion_interrupt_c90_intr_qs;
  logic completion_interrupt_c90_intr_wd;
  logic completion_interrupt_c90_intr_we;
  logic [30:0] completion_interrupt_c90_preserve_mask_qs;
  logic [30:0] completion_interrupt_c90_preserve_mask_wd;
  logic completion_interrupt_c90_preserve_mask_we;
  logic [31:0] reserved_1_c91_qs;
  logic [31:0] reserved_1_c91_wd;
  logic reserved_1_c91_we;
  logic channel_status_c91_channel_free_qs;
  logic channel_status_c91_channel_free_wd;
  logic channel_status_c91_channel_free_we;
  logic channel_status_c91_channel_error_qs;
  logic channel_status_c91_channel_error_wd;
  logic channel_status_c91_channel_error_we;
  logic [29:0] channel_status_c91_field1_qs;
  logic [29:0] channel_status_c91_field1_wd;
  logic channel_status_c91_field1_we;
  logic [31:0] reserved_2_c91_qs;
  logic [31:0] reserved_2_c91_wd;
  logic reserved_2_c91_we;
  logic channel_flags_c91_intr_enable_qs;
  logic channel_flags_c91_intr_enable_wd;
  logic channel_flags_c91_intr_enable_we;
  logic [30:0] channel_flags_c91_field1_qs;
  logic [30:0] channel_flags_c91_field1_wd;
  logic channel_flags_c91_field1_we;
  logic [31:0] length_c91_qs;
  logic [31:0] length_c91_wd;
  logic length_c91_we;
  logic [7:0] message_header_c91_message_id_qs;
  logic [7:0] message_header_c91_message_id_wd;
  logic message_header_c91_message_id_we;
  logic [1:0] message_header_c91_message_type_qs;
  logic [1:0] message_header_c91_message_type_wd;
  logic message_header_c91_message_type_we;
  logic [7:0] message_header_c91_protocol_id_qs;
  logic [7:0] message_header_c91_protocol_id_wd;
  logic message_header_c91_protocol_id_we;
  logic [9:0] message_header_c91_token_qs;
  logic [9:0] message_header_c91_token_wd;
  logic message_header_c91_token_we;
  logic [3:0] message_header_c91_field1_qs;
  logic [3:0] message_header_c91_field1_wd;
  logic message_header_c91_field1_we;
  logic [31:0] message_payload_1_c91_qs;
  logic [31:0] message_payload_1_c91_wd;
  logic message_payload_1_c91_we;
  logic doorbell_c91_intr_qs;
  logic doorbell_c91_intr_wd;
  logic doorbell_c91_intr_we;
  logic [30:0] doorbell_c91_preserve_mask_qs;
  logic [30:0] doorbell_c91_preserve_mask_wd;
  logic doorbell_c91_preserve_mask_we;
  logic completion_interrupt_c91_intr_qs;
  logic completion_interrupt_c91_intr_wd;
  logic completion_interrupt_c91_intr_we;
  logic [30:0] completion_interrupt_c91_preserve_mask_qs;
  logic [30:0] completion_interrupt_c91_preserve_mask_wd;
  logic completion_interrupt_c91_preserve_mask_we;
  logic [31:0] reserved_1_c92_qs;
  logic [31:0] reserved_1_c92_wd;
  logic reserved_1_c92_we;
  logic channel_status_c92_channel_free_qs;
  logic channel_status_c92_channel_free_wd;
  logic channel_status_c92_channel_free_we;
  logic channel_status_c92_channel_error_qs;
  logic channel_status_c92_channel_error_wd;
  logic channel_status_c92_channel_error_we;
  logic [29:0] channel_status_c92_field1_qs;
  logic [29:0] channel_status_c92_field1_wd;
  logic channel_status_c92_field1_we;
  logic [31:0] reserved_2_c92_qs;
  logic [31:0] reserved_2_c92_wd;
  logic reserved_2_c92_we;
  logic channel_flags_c92_intr_enable_qs;
  logic channel_flags_c92_intr_enable_wd;
  logic channel_flags_c92_intr_enable_we;
  logic [30:0] channel_flags_c92_field1_qs;
  logic [30:0] channel_flags_c92_field1_wd;
  logic channel_flags_c92_field1_we;
  logic [31:0] length_c92_qs;
  logic [31:0] length_c92_wd;
  logic length_c92_we;
  logic [7:0] message_header_c92_message_id_qs;
  logic [7:0] message_header_c92_message_id_wd;
  logic message_header_c92_message_id_we;
  logic [1:0] message_header_c92_message_type_qs;
  logic [1:0] message_header_c92_message_type_wd;
  logic message_header_c92_message_type_we;
  logic [7:0] message_header_c92_protocol_id_qs;
  logic [7:0] message_header_c92_protocol_id_wd;
  logic message_header_c92_protocol_id_we;
  logic [9:0] message_header_c92_token_qs;
  logic [9:0] message_header_c92_token_wd;
  logic message_header_c92_token_we;
  logic [3:0] message_header_c92_field1_qs;
  logic [3:0] message_header_c92_field1_wd;
  logic message_header_c92_field1_we;
  logic [31:0] message_payload_1_c92_qs;
  logic [31:0] message_payload_1_c92_wd;
  logic message_payload_1_c92_we;
  logic doorbell_c92_intr_qs;
  logic doorbell_c92_intr_wd;
  logic doorbell_c92_intr_we;
  logic [30:0] doorbell_c92_preserve_mask_qs;
  logic [30:0] doorbell_c92_preserve_mask_wd;
  logic doorbell_c92_preserve_mask_we;
  logic completion_interrupt_c92_intr_qs;
  logic completion_interrupt_c92_intr_wd;
  logic completion_interrupt_c92_intr_we;
  logic [30:0] completion_interrupt_c92_preserve_mask_qs;
  logic [30:0] completion_interrupt_c92_preserve_mask_wd;
  logic completion_interrupt_c92_preserve_mask_we;
  logic [31:0] reserved_1_c93_qs;
  logic [31:0] reserved_1_c93_wd;
  logic reserved_1_c93_we;
  logic channel_status_c93_channel_free_qs;
  logic channel_status_c93_channel_free_wd;
  logic channel_status_c93_channel_free_we;
  logic channel_status_c93_channel_error_qs;
  logic channel_status_c93_channel_error_wd;
  logic channel_status_c93_channel_error_we;
  logic [29:0] channel_status_c93_field1_qs;
  logic [29:0] channel_status_c93_field1_wd;
  logic channel_status_c93_field1_we;
  logic [31:0] reserved_2_c93_qs;
  logic [31:0] reserved_2_c93_wd;
  logic reserved_2_c93_we;
  logic channel_flags_c93_intr_enable_qs;
  logic channel_flags_c93_intr_enable_wd;
  logic channel_flags_c93_intr_enable_we;
  logic [30:0] channel_flags_c93_field1_qs;
  logic [30:0] channel_flags_c93_field1_wd;
  logic channel_flags_c93_field1_we;
  logic [31:0] length_c93_qs;
  logic [31:0] length_c93_wd;
  logic length_c93_we;
  logic [7:0] message_header_c93_message_id_qs;
  logic [7:0] message_header_c93_message_id_wd;
  logic message_header_c93_message_id_we;
  logic [1:0] message_header_c93_message_type_qs;
  logic [1:0] message_header_c93_message_type_wd;
  logic message_header_c93_message_type_we;
  logic [7:0] message_header_c93_protocol_id_qs;
  logic [7:0] message_header_c93_protocol_id_wd;
  logic message_header_c93_protocol_id_we;
  logic [9:0] message_header_c93_token_qs;
  logic [9:0] message_header_c93_token_wd;
  logic message_header_c93_token_we;
  logic [3:0] message_header_c93_field1_qs;
  logic [3:0] message_header_c93_field1_wd;
  logic message_header_c93_field1_we;
  logic [31:0] message_payload_1_c93_qs;
  logic [31:0] message_payload_1_c93_wd;
  logic message_payload_1_c93_we;
  logic doorbell_c93_intr_qs;
  logic doorbell_c93_intr_wd;
  logic doorbell_c93_intr_we;
  logic [30:0] doorbell_c93_preserve_mask_qs;
  logic [30:0] doorbell_c93_preserve_mask_wd;
  logic doorbell_c93_preserve_mask_we;
  logic completion_interrupt_c93_intr_qs;
  logic completion_interrupt_c93_intr_wd;
  logic completion_interrupt_c93_intr_we;
  logic [30:0] completion_interrupt_c93_preserve_mask_qs;
  logic [30:0] completion_interrupt_c93_preserve_mask_wd;
  logic completion_interrupt_c93_preserve_mask_we;
  logic [31:0] reserved_1_c94_qs;
  logic [31:0] reserved_1_c94_wd;
  logic reserved_1_c94_we;
  logic channel_status_c94_channel_free_qs;
  logic channel_status_c94_channel_free_wd;
  logic channel_status_c94_channel_free_we;
  logic channel_status_c94_channel_error_qs;
  logic channel_status_c94_channel_error_wd;
  logic channel_status_c94_channel_error_we;
  logic [29:0] channel_status_c94_field1_qs;
  logic [29:0] channel_status_c94_field1_wd;
  logic channel_status_c94_field1_we;
  logic [31:0] reserved_2_c94_qs;
  logic [31:0] reserved_2_c94_wd;
  logic reserved_2_c94_we;
  logic channel_flags_c94_intr_enable_qs;
  logic channel_flags_c94_intr_enable_wd;
  logic channel_flags_c94_intr_enable_we;
  logic [30:0] channel_flags_c94_field1_qs;
  logic [30:0] channel_flags_c94_field1_wd;
  logic channel_flags_c94_field1_we;
  logic [31:0] length_c94_qs;
  logic [31:0] length_c94_wd;
  logic length_c94_we;
  logic [7:0] message_header_c94_message_id_qs;
  logic [7:0] message_header_c94_message_id_wd;
  logic message_header_c94_message_id_we;
  logic [1:0] message_header_c94_message_type_qs;
  logic [1:0] message_header_c94_message_type_wd;
  logic message_header_c94_message_type_we;
  logic [7:0] message_header_c94_protocol_id_qs;
  logic [7:0] message_header_c94_protocol_id_wd;
  logic message_header_c94_protocol_id_we;
  logic [9:0] message_header_c94_token_qs;
  logic [9:0] message_header_c94_token_wd;
  logic message_header_c94_token_we;
  logic [3:0] message_header_c94_field1_qs;
  logic [3:0] message_header_c94_field1_wd;
  logic message_header_c94_field1_we;
  logic [31:0] message_payload_1_c94_qs;
  logic [31:0] message_payload_1_c94_wd;
  logic message_payload_1_c94_we;
  logic doorbell_c94_intr_qs;
  logic doorbell_c94_intr_wd;
  logic doorbell_c94_intr_we;
  logic [30:0] doorbell_c94_preserve_mask_qs;
  logic [30:0] doorbell_c94_preserve_mask_wd;
  logic doorbell_c94_preserve_mask_we;
  logic completion_interrupt_c94_intr_qs;
  logic completion_interrupt_c94_intr_wd;
  logic completion_interrupt_c94_intr_we;
  logic [30:0] completion_interrupt_c94_preserve_mask_qs;
  logic [30:0] completion_interrupt_c94_preserve_mask_wd;
  logic completion_interrupt_c94_preserve_mask_we;
  logic [31:0] reserved_1_c95_qs;
  logic [31:0] reserved_1_c95_wd;
  logic reserved_1_c95_we;
  logic channel_status_c95_channel_free_qs;
  logic channel_status_c95_channel_free_wd;
  logic channel_status_c95_channel_free_we;
  logic channel_status_c95_channel_error_qs;
  logic channel_status_c95_channel_error_wd;
  logic channel_status_c95_channel_error_we;
  logic [29:0] channel_status_c95_field1_qs;
  logic [29:0] channel_status_c95_field1_wd;
  logic channel_status_c95_field1_we;
  logic [31:0] reserved_2_c95_qs;
  logic [31:0] reserved_2_c95_wd;
  logic reserved_2_c95_we;
  logic channel_flags_c95_intr_enable_qs;
  logic channel_flags_c95_intr_enable_wd;
  logic channel_flags_c95_intr_enable_we;
  logic [30:0] channel_flags_c95_field1_qs;
  logic [30:0] channel_flags_c95_field1_wd;
  logic channel_flags_c95_field1_we;
  logic [31:0] length_c95_qs;
  logic [31:0] length_c95_wd;
  logic length_c95_we;
  logic [7:0] message_header_c95_message_id_qs;
  logic [7:0] message_header_c95_message_id_wd;
  logic message_header_c95_message_id_we;
  logic [1:0] message_header_c95_message_type_qs;
  logic [1:0] message_header_c95_message_type_wd;
  logic message_header_c95_message_type_we;
  logic [7:0] message_header_c95_protocol_id_qs;
  logic [7:0] message_header_c95_protocol_id_wd;
  logic message_header_c95_protocol_id_we;
  logic [9:0] message_header_c95_token_qs;
  logic [9:0] message_header_c95_token_wd;
  logic message_header_c95_token_we;
  logic [3:0] message_header_c95_field1_qs;
  logic [3:0] message_header_c95_field1_wd;
  logic message_header_c95_field1_we;
  logic [31:0] message_payload_1_c95_qs;
  logic [31:0] message_payload_1_c95_wd;
  logic message_payload_1_c95_we;
  logic doorbell_c95_intr_qs;
  logic doorbell_c95_intr_wd;
  logic doorbell_c95_intr_we;
  logic [30:0] doorbell_c95_preserve_mask_qs;
  logic [30:0] doorbell_c95_preserve_mask_wd;
  logic doorbell_c95_preserve_mask_we;
  logic completion_interrupt_c95_intr_qs;
  logic completion_interrupt_c95_intr_wd;
  logic completion_interrupt_c95_intr_we;
  logic [30:0] completion_interrupt_c95_preserve_mask_qs;
  logic [30:0] completion_interrupt_c95_preserve_mask_wd;
  logic completion_interrupt_c95_preserve_mask_we;
  logic [31:0] reserved_1_c96_qs;
  logic [31:0] reserved_1_c96_wd;
  logic reserved_1_c96_we;
  logic channel_status_c96_channel_free_qs;
  logic channel_status_c96_channel_free_wd;
  logic channel_status_c96_channel_free_we;
  logic channel_status_c96_channel_error_qs;
  logic channel_status_c96_channel_error_wd;
  logic channel_status_c96_channel_error_we;
  logic [29:0] channel_status_c96_field1_qs;
  logic [29:0] channel_status_c96_field1_wd;
  logic channel_status_c96_field1_we;
  logic [31:0] reserved_2_c96_qs;
  logic [31:0] reserved_2_c96_wd;
  logic reserved_2_c96_we;
  logic channel_flags_c96_intr_enable_qs;
  logic channel_flags_c96_intr_enable_wd;
  logic channel_flags_c96_intr_enable_we;
  logic [30:0] channel_flags_c96_field1_qs;
  logic [30:0] channel_flags_c96_field1_wd;
  logic channel_flags_c96_field1_we;
  logic [31:0] length_c96_qs;
  logic [31:0] length_c96_wd;
  logic length_c96_we;
  logic [7:0] message_header_c96_message_id_qs;
  logic [7:0] message_header_c96_message_id_wd;
  logic message_header_c96_message_id_we;
  logic [1:0] message_header_c96_message_type_qs;
  logic [1:0] message_header_c96_message_type_wd;
  logic message_header_c96_message_type_we;
  logic [7:0] message_header_c96_protocol_id_qs;
  logic [7:0] message_header_c96_protocol_id_wd;
  logic message_header_c96_protocol_id_we;
  logic [9:0] message_header_c96_token_qs;
  logic [9:0] message_header_c96_token_wd;
  logic message_header_c96_token_we;
  logic [3:0] message_header_c96_field1_qs;
  logic [3:0] message_header_c96_field1_wd;
  logic message_header_c96_field1_we;
  logic [31:0] message_payload_1_c96_qs;
  logic [31:0] message_payload_1_c96_wd;
  logic message_payload_1_c96_we;
  logic doorbell_c96_intr_qs;
  logic doorbell_c96_intr_wd;
  logic doorbell_c96_intr_we;
  logic [30:0] doorbell_c96_preserve_mask_qs;
  logic [30:0] doorbell_c96_preserve_mask_wd;
  logic doorbell_c96_preserve_mask_we;
  logic completion_interrupt_c96_intr_qs;
  logic completion_interrupt_c96_intr_wd;
  logic completion_interrupt_c96_intr_we;
  logic [30:0] completion_interrupt_c96_preserve_mask_qs;
  logic [30:0] completion_interrupt_c96_preserve_mask_wd;
  logic completion_interrupt_c96_preserve_mask_we;
  logic [31:0] reserved_1_c97_qs;
  logic [31:0] reserved_1_c97_wd;
  logic reserved_1_c97_we;
  logic channel_status_c97_channel_free_qs;
  logic channel_status_c97_channel_free_wd;
  logic channel_status_c97_channel_free_we;
  logic channel_status_c97_channel_error_qs;
  logic channel_status_c97_channel_error_wd;
  logic channel_status_c97_channel_error_we;
  logic [29:0] channel_status_c97_field1_qs;
  logic [29:0] channel_status_c97_field1_wd;
  logic channel_status_c97_field1_we;
  logic [31:0] reserved_2_c97_qs;
  logic [31:0] reserved_2_c97_wd;
  logic reserved_2_c97_we;
  logic channel_flags_c97_intr_enable_qs;
  logic channel_flags_c97_intr_enable_wd;
  logic channel_flags_c97_intr_enable_we;
  logic [30:0] channel_flags_c97_field1_qs;
  logic [30:0] channel_flags_c97_field1_wd;
  logic channel_flags_c97_field1_we;
  logic [31:0] length_c97_qs;
  logic [31:0] length_c97_wd;
  logic length_c97_we;
  logic [7:0] message_header_c97_message_id_qs;
  logic [7:0] message_header_c97_message_id_wd;
  logic message_header_c97_message_id_we;
  logic [1:0] message_header_c97_message_type_qs;
  logic [1:0] message_header_c97_message_type_wd;
  logic message_header_c97_message_type_we;
  logic [7:0] message_header_c97_protocol_id_qs;
  logic [7:0] message_header_c97_protocol_id_wd;
  logic message_header_c97_protocol_id_we;
  logic [9:0] message_header_c97_token_qs;
  logic [9:0] message_header_c97_token_wd;
  logic message_header_c97_token_we;
  logic [3:0] message_header_c97_field1_qs;
  logic [3:0] message_header_c97_field1_wd;
  logic message_header_c97_field1_we;
  logic [31:0] message_payload_1_c97_qs;
  logic [31:0] message_payload_1_c97_wd;
  logic message_payload_1_c97_we;
  logic doorbell_c97_intr_qs;
  logic doorbell_c97_intr_wd;
  logic doorbell_c97_intr_we;
  logic [30:0] doorbell_c97_preserve_mask_qs;
  logic [30:0] doorbell_c97_preserve_mask_wd;
  logic doorbell_c97_preserve_mask_we;
  logic completion_interrupt_c97_intr_qs;
  logic completion_interrupt_c97_intr_wd;
  logic completion_interrupt_c97_intr_we;
  logic [30:0] completion_interrupt_c97_preserve_mask_qs;
  logic [30:0] completion_interrupt_c97_preserve_mask_wd;
  logic completion_interrupt_c97_preserve_mask_we;
  logic [31:0] reserved_1_c98_qs;
  logic [31:0] reserved_1_c98_wd;
  logic reserved_1_c98_we;
  logic channel_status_c98_channel_free_qs;
  logic channel_status_c98_channel_free_wd;
  logic channel_status_c98_channel_free_we;
  logic channel_status_c98_channel_error_qs;
  logic channel_status_c98_channel_error_wd;
  logic channel_status_c98_channel_error_we;
  logic [29:0] channel_status_c98_field1_qs;
  logic [29:0] channel_status_c98_field1_wd;
  logic channel_status_c98_field1_we;
  logic [31:0] reserved_2_c98_qs;
  logic [31:0] reserved_2_c98_wd;
  logic reserved_2_c98_we;
  logic channel_flags_c98_intr_enable_qs;
  logic channel_flags_c98_intr_enable_wd;
  logic channel_flags_c98_intr_enable_we;
  logic [30:0] channel_flags_c98_field1_qs;
  logic [30:0] channel_flags_c98_field1_wd;
  logic channel_flags_c98_field1_we;
  logic [31:0] length_c98_qs;
  logic [31:0] length_c98_wd;
  logic length_c98_we;
  logic [7:0] message_header_c98_message_id_qs;
  logic [7:0] message_header_c98_message_id_wd;
  logic message_header_c98_message_id_we;
  logic [1:0] message_header_c98_message_type_qs;
  logic [1:0] message_header_c98_message_type_wd;
  logic message_header_c98_message_type_we;
  logic [7:0] message_header_c98_protocol_id_qs;
  logic [7:0] message_header_c98_protocol_id_wd;
  logic message_header_c98_protocol_id_we;
  logic [9:0] message_header_c98_token_qs;
  logic [9:0] message_header_c98_token_wd;
  logic message_header_c98_token_we;
  logic [3:0] message_header_c98_field1_qs;
  logic [3:0] message_header_c98_field1_wd;
  logic message_header_c98_field1_we;
  logic [31:0] message_payload_1_c98_qs;
  logic [31:0] message_payload_1_c98_wd;
  logic message_payload_1_c98_we;
  logic doorbell_c98_intr_qs;
  logic doorbell_c98_intr_wd;
  logic doorbell_c98_intr_we;
  logic [30:0] doorbell_c98_preserve_mask_qs;
  logic [30:0] doorbell_c98_preserve_mask_wd;
  logic doorbell_c98_preserve_mask_we;
  logic completion_interrupt_c98_intr_qs;
  logic completion_interrupt_c98_intr_wd;
  logic completion_interrupt_c98_intr_we;
  logic [30:0] completion_interrupt_c98_preserve_mask_qs;
  logic [30:0] completion_interrupt_c98_preserve_mask_wd;
  logic completion_interrupt_c98_preserve_mask_we;
  logic [31:0] reserved_1_c99_qs;
  logic [31:0] reserved_1_c99_wd;
  logic reserved_1_c99_we;
  logic channel_status_c99_channel_free_qs;
  logic channel_status_c99_channel_free_wd;
  logic channel_status_c99_channel_free_we;
  logic channel_status_c99_channel_error_qs;
  logic channel_status_c99_channel_error_wd;
  logic channel_status_c99_channel_error_we;
  logic [29:0] channel_status_c99_field1_qs;
  logic [29:0] channel_status_c99_field1_wd;
  logic channel_status_c99_field1_we;
  logic [31:0] reserved_2_c99_qs;
  logic [31:0] reserved_2_c99_wd;
  logic reserved_2_c99_we;
  logic channel_flags_c99_intr_enable_qs;
  logic channel_flags_c99_intr_enable_wd;
  logic channel_flags_c99_intr_enable_we;
  logic [30:0] channel_flags_c99_field1_qs;
  logic [30:0] channel_flags_c99_field1_wd;
  logic channel_flags_c99_field1_we;
  logic [31:0] length_c99_qs;
  logic [31:0] length_c99_wd;
  logic length_c99_we;
  logic [7:0] message_header_c99_message_id_qs;
  logic [7:0] message_header_c99_message_id_wd;
  logic message_header_c99_message_id_we;
  logic [1:0] message_header_c99_message_type_qs;
  logic [1:0] message_header_c99_message_type_wd;
  logic message_header_c99_message_type_we;
  logic [7:0] message_header_c99_protocol_id_qs;
  logic [7:0] message_header_c99_protocol_id_wd;
  logic message_header_c99_protocol_id_we;
  logic [9:0] message_header_c99_token_qs;
  logic [9:0] message_header_c99_token_wd;
  logic message_header_c99_token_we;
  logic [3:0] message_header_c99_field1_qs;
  logic [3:0] message_header_c99_field1_wd;
  logic message_header_c99_field1_we;
  logic [31:0] message_payload_1_c99_qs;
  logic [31:0] message_payload_1_c99_wd;
  logic message_payload_1_c99_we;
  logic doorbell_c99_intr_qs;
  logic doorbell_c99_intr_wd;
  logic doorbell_c99_intr_we;
  logic [30:0] doorbell_c99_preserve_mask_qs;
  logic [30:0] doorbell_c99_preserve_mask_wd;
  logic doorbell_c99_preserve_mask_we;
  logic completion_interrupt_c99_intr_qs;
  logic completion_interrupt_c99_intr_wd;
  logic completion_interrupt_c99_intr_we;
  logic [30:0] completion_interrupt_c99_preserve_mask_qs;
  logic [30:0] completion_interrupt_c99_preserve_mask_wd;
  logic completion_interrupt_c99_preserve_mask_we;
  logic [31:0] reserved_1_c100_qs;
  logic [31:0] reserved_1_c100_wd;
  logic reserved_1_c100_we;
  logic channel_status_c100_channel_free_qs;
  logic channel_status_c100_channel_free_wd;
  logic channel_status_c100_channel_free_we;
  logic channel_status_c100_channel_error_qs;
  logic channel_status_c100_channel_error_wd;
  logic channel_status_c100_channel_error_we;
  logic [29:0] channel_status_c100_field1_qs;
  logic [29:0] channel_status_c100_field1_wd;
  logic channel_status_c100_field1_we;
  logic [31:0] reserved_2_c100_qs;
  logic [31:0] reserved_2_c100_wd;
  logic reserved_2_c100_we;
  logic channel_flags_c100_intr_enable_qs;
  logic channel_flags_c100_intr_enable_wd;
  logic channel_flags_c100_intr_enable_we;
  logic [30:0] channel_flags_c100_field1_qs;
  logic [30:0] channel_flags_c100_field1_wd;
  logic channel_flags_c100_field1_we;
  logic [31:0] length_c100_qs;
  logic [31:0] length_c100_wd;
  logic length_c100_we;
  logic [7:0] message_header_c100_message_id_qs;
  logic [7:0] message_header_c100_message_id_wd;
  logic message_header_c100_message_id_we;
  logic [1:0] message_header_c100_message_type_qs;
  logic [1:0] message_header_c100_message_type_wd;
  logic message_header_c100_message_type_we;
  logic [7:0] message_header_c100_protocol_id_qs;
  logic [7:0] message_header_c100_protocol_id_wd;
  logic message_header_c100_protocol_id_we;
  logic [9:0] message_header_c100_token_qs;
  logic [9:0] message_header_c100_token_wd;
  logic message_header_c100_token_we;
  logic [3:0] message_header_c100_field1_qs;
  logic [3:0] message_header_c100_field1_wd;
  logic message_header_c100_field1_we;
  logic [31:0] message_payload_1_c100_qs;
  logic [31:0] message_payload_1_c100_wd;
  logic message_payload_1_c100_we;
  logic doorbell_c100_intr_qs;
  logic doorbell_c100_intr_wd;
  logic doorbell_c100_intr_we;
  logic [30:0] doorbell_c100_preserve_mask_qs;
  logic [30:0] doorbell_c100_preserve_mask_wd;
  logic doorbell_c100_preserve_mask_we;
  logic completion_interrupt_c100_intr_qs;
  logic completion_interrupt_c100_intr_wd;
  logic completion_interrupt_c100_intr_we;
  logic [30:0] completion_interrupt_c100_preserve_mask_qs;
  logic [30:0] completion_interrupt_c100_preserve_mask_wd;
  logic completion_interrupt_c100_preserve_mask_we;
  logic [31:0] reserved_1_c101_qs;
  logic [31:0] reserved_1_c101_wd;
  logic reserved_1_c101_we;
  logic channel_status_c101_channel_free_qs;
  logic channel_status_c101_channel_free_wd;
  logic channel_status_c101_channel_free_we;
  logic channel_status_c101_channel_error_qs;
  logic channel_status_c101_channel_error_wd;
  logic channel_status_c101_channel_error_we;
  logic [29:0] channel_status_c101_field1_qs;
  logic [29:0] channel_status_c101_field1_wd;
  logic channel_status_c101_field1_we;
  logic [31:0] reserved_2_c101_qs;
  logic [31:0] reserved_2_c101_wd;
  logic reserved_2_c101_we;
  logic channel_flags_c101_intr_enable_qs;
  logic channel_flags_c101_intr_enable_wd;
  logic channel_flags_c101_intr_enable_we;
  logic [30:0] channel_flags_c101_field1_qs;
  logic [30:0] channel_flags_c101_field1_wd;
  logic channel_flags_c101_field1_we;
  logic [31:0] length_c101_qs;
  logic [31:0] length_c101_wd;
  logic length_c101_we;
  logic [7:0] message_header_c101_message_id_qs;
  logic [7:0] message_header_c101_message_id_wd;
  logic message_header_c101_message_id_we;
  logic [1:0] message_header_c101_message_type_qs;
  logic [1:0] message_header_c101_message_type_wd;
  logic message_header_c101_message_type_we;
  logic [7:0] message_header_c101_protocol_id_qs;
  logic [7:0] message_header_c101_protocol_id_wd;
  logic message_header_c101_protocol_id_we;
  logic [9:0] message_header_c101_token_qs;
  logic [9:0] message_header_c101_token_wd;
  logic message_header_c101_token_we;
  logic [3:0] message_header_c101_field1_qs;
  logic [3:0] message_header_c101_field1_wd;
  logic message_header_c101_field1_we;
  logic [31:0] message_payload_1_c101_qs;
  logic [31:0] message_payload_1_c101_wd;
  logic message_payload_1_c101_we;
  logic doorbell_c101_intr_qs;
  logic doorbell_c101_intr_wd;
  logic doorbell_c101_intr_we;
  logic [30:0] doorbell_c101_preserve_mask_qs;
  logic [30:0] doorbell_c101_preserve_mask_wd;
  logic doorbell_c101_preserve_mask_we;
  logic completion_interrupt_c101_intr_qs;
  logic completion_interrupt_c101_intr_wd;
  logic completion_interrupt_c101_intr_we;
  logic [30:0] completion_interrupt_c101_preserve_mask_qs;
  logic [30:0] completion_interrupt_c101_preserve_mask_wd;
  logic completion_interrupt_c101_preserve_mask_we;
  logic [31:0] reserved_1_c102_qs;
  logic [31:0] reserved_1_c102_wd;
  logic reserved_1_c102_we;
  logic channel_status_c102_channel_free_qs;
  logic channel_status_c102_channel_free_wd;
  logic channel_status_c102_channel_free_we;
  logic channel_status_c102_channel_error_qs;
  logic channel_status_c102_channel_error_wd;
  logic channel_status_c102_channel_error_we;
  logic [29:0] channel_status_c102_field1_qs;
  logic [29:0] channel_status_c102_field1_wd;
  logic channel_status_c102_field1_we;
  logic [31:0] reserved_2_c102_qs;
  logic [31:0] reserved_2_c102_wd;
  logic reserved_2_c102_we;
  logic channel_flags_c102_intr_enable_qs;
  logic channel_flags_c102_intr_enable_wd;
  logic channel_flags_c102_intr_enable_we;
  logic [30:0] channel_flags_c102_field1_qs;
  logic [30:0] channel_flags_c102_field1_wd;
  logic channel_flags_c102_field1_we;
  logic [31:0] length_c102_qs;
  logic [31:0] length_c102_wd;
  logic length_c102_we;
  logic [7:0] message_header_c102_message_id_qs;
  logic [7:0] message_header_c102_message_id_wd;
  logic message_header_c102_message_id_we;
  logic [1:0] message_header_c102_message_type_qs;
  logic [1:0] message_header_c102_message_type_wd;
  logic message_header_c102_message_type_we;
  logic [7:0] message_header_c102_protocol_id_qs;
  logic [7:0] message_header_c102_protocol_id_wd;
  logic message_header_c102_protocol_id_we;
  logic [9:0] message_header_c102_token_qs;
  logic [9:0] message_header_c102_token_wd;
  logic message_header_c102_token_we;
  logic [3:0] message_header_c102_field1_qs;
  logic [3:0] message_header_c102_field1_wd;
  logic message_header_c102_field1_we;
  logic [31:0] message_payload_1_c102_qs;
  logic [31:0] message_payload_1_c102_wd;
  logic message_payload_1_c102_we;
  logic doorbell_c102_intr_qs;
  logic doorbell_c102_intr_wd;
  logic doorbell_c102_intr_we;
  logic [30:0] doorbell_c102_preserve_mask_qs;
  logic [30:0] doorbell_c102_preserve_mask_wd;
  logic doorbell_c102_preserve_mask_we;
  logic completion_interrupt_c102_intr_qs;
  logic completion_interrupt_c102_intr_wd;
  logic completion_interrupt_c102_intr_we;
  logic [30:0] completion_interrupt_c102_preserve_mask_qs;
  logic [30:0] completion_interrupt_c102_preserve_mask_wd;
  logic completion_interrupt_c102_preserve_mask_we;
  logic [31:0] reserved_1_c103_qs;
  logic [31:0] reserved_1_c103_wd;
  logic reserved_1_c103_we;
  logic channel_status_c103_channel_free_qs;
  logic channel_status_c103_channel_free_wd;
  logic channel_status_c103_channel_free_we;
  logic channel_status_c103_channel_error_qs;
  logic channel_status_c103_channel_error_wd;
  logic channel_status_c103_channel_error_we;
  logic [29:0] channel_status_c103_field1_qs;
  logic [29:0] channel_status_c103_field1_wd;
  logic channel_status_c103_field1_we;
  logic [31:0] reserved_2_c103_qs;
  logic [31:0] reserved_2_c103_wd;
  logic reserved_2_c103_we;
  logic channel_flags_c103_intr_enable_qs;
  logic channel_flags_c103_intr_enable_wd;
  logic channel_flags_c103_intr_enable_we;
  logic [30:0] channel_flags_c103_field1_qs;
  logic [30:0] channel_flags_c103_field1_wd;
  logic channel_flags_c103_field1_we;
  logic [31:0] length_c103_qs;
  logic [31:0] length_c103_wd;
  logic length_c103_we;
  logic [7:0] message_header_c103_message_id_qs;
  logic [7:0] message_header_c103_message_id_wd;
  logic message_header_c103_message_id_we;
  logic [1:0] message_header_c103_message_type_qs;
  logic [1:0] message_header_c103_message_type_wd;
  logic message_header_c103_message_type_we;
  logic [7:0] message_header_c103_protocol_id_qs;
  logic [7:0] message_header_c103_protocol_id_wd;
  logic message_header_c103_protocol_id_we;
  logic [9:0] message_header_c103_token_qs;
  logic [9:0] message_header_c103_token_wd;
  logic message_header_c103_token_we;
  logic [3:0] message_header_c103_field1_qs;
  logic [3:0] message_header_c103_field1_wd;
  logic message_header_c103_field1_we;
  logic [31:0] message_payload_1_c103_qs;
  logic [31:0] message_payload_1_c103_wd;
  logic message_payload_1_c103_we;
  logic doorbell_c103_intr_qs;
  logic doorbell_c103_intr_wd;
  logic doorbell_c103_intr_we;
  logic [30:0] doorbell_c103_preserve_mask_qs;
  logic [30:0] doorbell_c103_preserve_mask_wd;
  logic doorbell_c103_preserve_mask_we;
  logic completion_interrupt_c103_intr_qs;
  logic completion_interrupt_c103_intr_wd;
  logic completion_interrupt_c103_intr_we;
  logic [30:0] completion_interrupt_c103_preserve_mask_qs;
  logic [30:0] completion_interrupt_c103_preserve_mask_wd;
  logic completion_interrupt_c103_preserve_mask_we;
  logic [31:0] reserved_1_c104_qs;
  logic [31:0] reserved_1_c104_wd;
  logic reserved_1_c104_we;
  logic channel_status_c104_channel_free_qs;
  logic channel_status_c104_channel_free_wd;
  logic channel_status_c104_channel_free_we;
  logic channel_status_c104_channel_error_qs;
  logic channel_status_c104_channel_error_wd;
  logic channel_status_c104_channel_error_we;
  logic [29:0] channel_status_c104_field1_qs;
  logic [29:0] channel_status_c104_field1_wd;
  logic channel_status_c104_field1_we;
  logic [31:0] reserved_2_c104_qs;
  logic [31:0] reserved_2_c104_wd;
  logic reserved_2_c104_we;
  logic channel_flags_c104_intr_enable_qs;
  logic channel_flags_c104_intr_enable_wd;
  logic channel_flags_c104_intr_enable_we;
  logic [30:0] channel_flags_c104_field1_qs;
  logic [30:0] channel_flags_c104_field1_wd;
  logic channel_flags_c104_field1_we;
  logic [31:0] length_c104_qs;
  logic [31:0] length_c104_wd;
  logic length_c104_we;
  logic [7:0] message_header_c104_message_id_qs;
  logic [7:0] message_header_c104_message_id_wd;
  logic message_header_c104_message_id_we;
  logic [1:0] message_header_c104_message_type_qs;
  logic [1:0] message_header_c104_message_type_wd;
  logic message_header_c104_message_type_we;
  logic [7:0] message_header_c104_protocol_id_qs;
  logic [7:0] message_header_c104_protocol_id_wd;
  logic message_header_c104_protocol_id_we;
  logic [9:0] message_header_c104_token_qs;
  logic [9:0] message_header_c104_token_wd;
  logic message_header_c104_token_we;
  logic [3:0] message_header_c104_field1_qs;
  logic [3:0] message_header_c104_field1_wd;
  logic message_header_c104_field1_we;
  logic [31:0] message_payload_1_c104_qs;
  logic [31:0] message_payload_1_c104_wd;
  logic message_payload_1_c104_we;
  logic doorbell_c104_intr_qs;
  logic doorbell_c104_intr_wd;
  logic doorbell_c104_intr_we;
  logic [30:0] doorbell_c104_preserve_mask_qs;
  logic [30:0] doorbell_c104_preserve_mask_wd;
  logic doorbell_c104_preserve_mask_we;
  logic completion_interrupt_c104_intr_qs;
  logic completion_interrupt_c104_intr_wd;
  logic completion_interrupt_c104_intr_we;
  logic [30:0] completion_interrupt_c104_preserve_mask_qs;
  logic [30:0] completion_interrupt_c104_preserve_mask_wd;
  logic completion_interrupt_c104_preserve_mask_we;
  logic [31:0] reserved_1_c105_qs;
  logic [31:0] reserved_1_c105_wd;
  logic reserved_1_c105_we;
  logic channel_status_c105_channel_free_qs;
  logic channel_status_c105_channel_free_wd;
  logic channel_status_c105_channel_free_we;
  logic channel_status_c105_channel_error_qs;
  logic channel_status_c105_channel_error_wd;
  logic channel_status_c105_channel_error_we;
  logic [29:0] channel_status_c105_field1_qs;
  logic [29:0] channel_status_c105_field1_wd;
  logic channel_status_c105_field1_we;
  logic [31:0] reserved_2_c105_qs;
  logic [31:0] reserved_2_c105_wd;
  logic reserved_2_c105_we;
  logic channel_flags_c105_intr_enable_qs;
  logic channel_flags_c105_intr_enable_wd;
  logic channel_flags_c105_intr_enable_we;
  logic [30:0] channel_flags_c105_field1_qs;
  logic [30:0] channel_flags_c105_field1_wd;
  logic channel_flags_c105_field1_we;
  logic [31:0] length_c105_qs;
  logic [31:0] length_c105_wd;
  logic length_c105_we;
  logic [7:0] message_header_c105_message_id_qs;
  logic [7:0] message_header_c105_message_id_wd;
  logic message_header_c105_message_id_we;
  logic [1:0] message_header_c105_message_type_qs;
  logic [1:0] message_header_c105_message_type_wd;
  logic message_header_c105_message_type_we;
  logic [7:0] message_header_c105_protocol_id_qs;
  logic [7:0] message_header_c105_protocol_id_wd;
  logic message_header_c105_protocol_id_we;
  logic [9:0] message_header_c105_token_qs;
  logic [9:0] message_header_c105_token_wd;
  logic message_header_c105_token_we;
  logic [3:0] message_header_c105_field1_qs;
  logic [3:0] message_header_c105_field1_wd;
  logic message_header_c105_field1_we;
  logic [31:0] message_payload_1_c105_qs;
  logic [31:0] message_payload_1_c105_wd;
  logic message_payload_1_c105_we;
  logic doorbell_c105_intr_qs;
  logic doorbell_c105_intr_wd;
  logic doorbell_c105_intr_we;
  logic [30:0] doorbell_c105_preserve_mask_qs;
  logic [30:0] doorbell_c105_preserve_mask_wd;
  logic doorbell_c105_preserve_mask_we;
  logic completion_interrupt_c105_intr_qs;
  logic completion_interrupt_c105_intr_wd;
  logic completion_interrupt_c105_intr_we;
  logic [30:0] completion_interrupt_c105_preserve_mask_qs;
  logic [30:0] completion_interrupt_c105_preserve_mask_wd;
  logic completion_interrupt_c105_preserve_mask_we;
  logic [31:0] reserved_1_c106_qs;
  logic [31:0] reserved_1_c106_wd;
  logic reserved_1_c106_we;
  logic channel_status_c106_channel_free_qs;
  logic channel_status_c106_channel_free_wd;
  logic channel_status_c106_channel_free_we;
  logic channel_status_c106_channel_error_qs;
  logic channel_status_c106_channel_error_wd;
  logic channel_status_c106_channel_error_we;
  logic [29:0] channel_status_c106_field1_qs;
  logic [29:0] channel_status_c106_field1_wd;
  logic channel_status_c106_field1_we;
  logic [31:0] reserved_2_c106_qs;
  logic [31:0] reserved_2_c106_wd;
  logic reserved_2_c106_we;
  logic channel_flags_c106_intr_enable_qs;
  logic channel_flags_c106_intr_enable_wd;
  logic channel_flags_c106_intr_enable_we;
  logic [30:0] channel_flags_c106_field1_qs;
  logic [30:0] channel_flags_c106_field1_wd;
  logic channel_flags_c106_field1_we;
  logic [31:0] length_c106_qs;
  logic [31:0] length_c106_wd;
  logic length_c106_we;
  logic [7:0] message_header_c106_message_id_qs;
  logic [7:0] message_header_c106_message_id_wd;
  logic message_header_c106_message_id_we;
  logic [1:0] message_header_c106_message_type_qs;
  logic [1:0] message_header_c106_message_type_wd;
  logic message_header_c106_message_type_we;
  logic [7:0] message_header_c106_protocol_id_qs;
  logic [7:0] message_header_c106_protocol_id_wd;
  logic message_header_c106_protocol_id_we;
  logic [9:0] message_header_c106_token_qs;
  logic [9:0] message_header_c106_token_wd;
  logic message_header_c106_token_we;
  logic [3:0] message_header_c106_field1_qs;
  logic [3:0] message_header_c106_field1_wd;
  logic message_header_c106_field1_we;
  logic [31:0] message_payload_1_c106_qs;
  logic [31:0] message_payload_1_c106_wd;
  logic message_payload_1_c106_we;
  logic doorbell_c106_intr_qs;
  logic doorbell_c106_intr_wd;
  logic doorbell_c106_intr_we;
  logic [30:0] doorbell_c106_preserve_mask_qs;
  logic [30:0] doorbell_c106_preserve_mask_wd;
  logic doorbell_c106_preserve_mask_we;
  logic completion_interrupt_c106_intr_qs;
  logic completion_interrupt_c106_intr_wd;
  logic completion_interrupt_c106_intr_we;
  logic [30:0] completion_interrupt_c106_preserve_mask_qs;
  logic [30:0] completion_interrupt_c106_preserve_mask_wd;
  logic completion_interrupt_c106_preserve_mask_we;
  logic [31:0] reserved_1_c107_qs;
  logic [31:0] reserved_1_c107_wd;
  logic reserved_1_c107_we;
  logic channel_status_c107_channel_free_qs;
  logic channel_status_c107_channel_free_wd;
  logic channel_status_c107_channel_free_we;
  logic channel_status_c107_channel_error_qs;
  logic channel_status_c107_channel_error_wd;
  logic channel_status_c107_channel_error_we;
  logic [29:0] channel_status_c107_field1_qs;
  logic [29:0] channel_status_c107_field1_wd;
  logic channel_status_c107_field1_we;
  logic [31:0] reserved_2_c107_qs;
  logic [31:0] reserved_2_c107_wd;
  logic reserved_2_c107_we;
  logic channel_flags_c107_intr_enable_qs;
  logic channel_flags_c107_intr_enable_wd;
  logic channel_flags_c107_intr_enable_we;
  logic [30:0] channel_flags_c107_field1_qs;
  logic [30:0] channel_flags_c107_field1_wd;
  logic channel_flags_c107_field1_we;
  logic [31:0] length_c107_qs;
  logic [31:0] length_c107_wd;
  logic length_c107_we;
  logic [7:0] message_header_c107_message_id_qs;
  logic [7:0] message_header_c107_message_id_wd;
  logic message_header_c107_message_id_we;
  logic [1:0] message_header_c107_message_type_qs;
  logic [1:0] message_header_c107_message_type_wd;
  logic message_header_c107_message_type_we;
  logic [7:0] message_header_c107_protocol_id_qs;
  logic [7:0] message_header_c107_protocol_id_wd;
  logic message_header_c107_protocol_id_we;
  logic [9:0] message_header_c107_token_qs;
  logic [9:0] message_header_c107_token_wd;
  logic message_header_c107_token_we;
  logic [3:0] message_header_c107_field1_qs;
  logic [3:0] message_header_c107_field1_wd;
  logic message_header_c107_field1_we;
  logic [31:0] message_payload_1_c107_qs;
  logic [31:0] message_payload_1_c107_wd;
  logic message_payload_1_c107_we;
  logic doorbell_c107_intr_qs;
  logic doorbell_c107_intr_wd;
  logic doorbell_c107_intr_we;
  logic [30:0] doorbell_c107_preserve_mask_qs;
  logic [30:0] doorbell_c107_preserve_mask_wd;
  logic doorbell_c107_preserve_mask_we;
  logic completion_interrupt_c107_intr_qs;
  logic completion_interrupt_c107_intr_wd;
  logic completion_interrupt_c107_intr_we;
  logic [30:0] completion_interrupt_c107_preserve_mask_qs;
  logic [30:0] completion_interrupt_c107_preserve_mask_wd;
  logic completion_interrupt_c107_preserve_mask_we;
  logic [31:0] reserved_1_c108_qs;
  logic [31:0] reserved_1_c108_wd;
  logic reserved_1_c108_we;
  logic channel_status_c108_channel_free_qs;
  logic channel_status_c108_channel_free_wd;
  logic channel_status_c108_channel_free_we;
  logic channel_status_c108_channel_error_qs;
  logic channel_status_c108_channel_error_wd;
  logic channel_status_c108_channel_error_we;
  logic [29:0] channel_status_c108_field1_qs;
  logic [29:0] channel_status_c108_field1_wd;
  logic channel_status_c108_field1_we;
  logic [31:0] reserved_2_c108_qs;
  logic [31:0] reserved_2_c108_wd;
  logic reserved_2_c108_we;
  logic channel_flags_c108_intr_enable_qs;
  logic channel_flags_c108_intr_enable_wd;
  logic channel_flags_c108_intr_enable_we;
  logic [30:0] channel_flags_c108_field1_qs;
  logic [30:0] channel_flags_c108_field1_wd;
  logic channel_flags_c108_field1_we;
  logic [31:0] length_c108_qs;
  logic [31:0] length_c108_wd;
  logic length_c108_we;
  logic [7:0] message_header_c108_message_id_qs;
  logic [7:0] message_header_c108_message_id_wd;
  logic message_header_c108_message_id_we;
  logic [1:0] message_header_c108_message_type_qs;
  logic [1:0] message_header_c108_message_type_wd;
  logic message_header_c108_message_type_we;
  logic [7:0] message_header_c108_protocol_id_qs;
  logic [7:0] message_header_c108_protocol_id_wd;
  logic message_header_c108_protocol_id_we;
  logic [9:0] message_header_c108_token_qs;
  logic [9:0] message_header_c108_token_wd;
  logic message_header_c108_token_we;
  logic [3:0] message_header_c108_field1_qs;
  logic [3:0] message_header_c108_field1_wd;
  logic message_header_c108_field1_we;
  logic [31:0] message_payload_1_c108_qs;
  logic [31:0] message_payload_1_c108_wd;
  logic message_payload_1_c108_we;
  logic doorbell_c108_intr_qs;
  logic doorbell_c108_intr_wd;
  logic doorbell_c108_intr_we;
  logic [30:0] doorbell_c108_preserve_mask_qs;
  logic [30:0] doorbell_c108_preserve_mask_wd;
  logic doorbell_c108_preserve_mask_we;
  logic completion_interrupt_c108_intr_qs;
  logic completion_interrupt_c108_intr_wd;
  logic completion_interrupt_c108_intr_we;
  logic [30:0] completion_interrupt_c108_preserve_mask_qs;
  logic [30:0] completion_interrupt_c108_preserve_mask_wd;
  logic completion_interrupt_c108_preserve_mask_we;
  logic [31:0] reserved_1_c109_qs;
  logic [31:0] reserved_1_c109_wd;
  logic reserved_1_c109_we;
  logic channel_status_c109_channel_free_qs;
  logic channel_status_c109_channel_free_wd;
  logic channel_status_c109_channel_free_we;
  logic channel_status_c109_channel_error_qs;
  logic channel_status_c109_channel_error_wd;
  logic channel_status_c109_channel_error_we;
  logic [29:0] channel_status_c109_field1_qs;
  logic [29:0] channel_status_c109_field1_wd;
  logic channel_status_c109_field1_we;
  logic [31:0] reserved_2_c109_qs;
  logic [31:0] reserved_2_c109_wd;
  logic reserved_2_c109_we;
  logic channel_flags_c109_intr_enable_qs;
  logic channel_flags_c109_intr_enable_wd;
  logic channel_flags_c109_intr_enable_we;
  logic [30:0] channel_flags_c109_field1_qs;
  logic [30:0] channel_flags_c109_field1_wd;
  logic channel_flags_c109_field1_we;
  logic [31:0] length_c109_qs;
  logic [31:0] length_c109_wd;
  logic length_c109_we;
  logic [7:0] message_header_c109_message_id_qs;
  logic [7:0] message_header_c109_message_id_wd;
  logic message_header_c109_message_id_we;
  logic [1:0] message_header_c109_message_type_qs;
  logic [1:0] message_header_c109_message_type_wd;
  logic message_header_c109_message_type_we;
  logic [7:0] message_header_c109_protocol_id_qs;
  logic [7:0] message_header_c109_protocol_id_wd;
  logic message_header_c109_protocol_id_we;
  logic [9:0] message_header_c109_token_qs;
  logic [9:0] message_header_c109_token_wd;
  logic message_header_c109_token_we;
  logic [3:0] message_header_c109_field1_qs;
  logic [3:0] message_header_c109_field1_wd;
  logic message_header_c109_field1_we;
  logic [31:0] message_payload_1_c109_qs;
  logic [31:0] message_payload_1_c109_wd;
  logic message_payload_1_c109_we;
  logic doorbell_c109_intr_qs;
  logic doorbell_c109_intr_wd;
  logic doorbell_c109_intr_we;
  logic [30:0] doorbell_c109_preserve_mask_qs;
  logic [30:0] doorbell_c109_preserve_mask_wd;
  logic doorbell_c109_preserve_mask_we;
  logic completion_interrupt_c109_intr_qs;
  logic completion_interrupt_c109_intr_wd;
  logic completion_interrupt_c109_intr_we;
  logic [30:0] completion_interrupt_c109_preserve_mask_qs;
  logic [30:0] completion_interrupt_c109_preserve_mask_wd;
  logic completion_interrupt_c109_preserve_mask_we;
  logic [31:0] reserved_1_c110_qs;
  logic [31:0] reserved_1_c110_wd;
  logic reserved_1_c110_we;
  logic channel_status_c110_channel_free_qs;
  logic channel_status_c110_channel_free_wd;
  logic channel_status_c110_channel_free_we;
  logic channel_status_c110_channel_error_qs;
  logic channel_status_c110_channel_error_wd;
  logic channel_status_c110_channel_error_we;
  logic [29:0] channel_status_c110_field1_qs;
  logic [29:0] channel_status_c110_field1_wd;
  logic channel_status_c110_field1_we;
  logic [31:0] reserved_2_c110_qs;
  logic [31:0] reserved_2_c110_wd;
  logic reserved_2_c110_we;
  logic channel_flags_c110_intr_enable_qs;
  logic channel_flags_c110_intr_enable_wd;
  logic channel_flags_c110_intr_enable_we;
  logic [30:0] channel_flags_c110_field1_qs;
  logic [30:0] channel_flags_c110_field1_wd;
  logic channel_flags_c110_field1_we;
  logic [31:0] length_c110_qs;
  logic [31:0] length_c110_wd;
  logic length_c110_we;
  logic [7:0] message_header_c110_message_id_qs;
  logic [7:0] message_header_c110_message_id_wd;
  logic message_header_c110_message_id_we;
  logic [1:0] message_header_c110_message_type_qs;
  logic [1:0] message_header_c110_message_type_wd;
  logic message_header_c110_message_type_we;
  logic [7:0] message_header_c110_protocol_id_qs;
  logic [7:0] message_header_c110_protocol_id_wd;
  logic message_header_c110_protocol_id_we;
  logic [9:0] message_header_c110_token_qs;
  logic [9:0] message_header_c110_token_wd;
  logic message_header_c110_token_we;
  logic [3:0] message_header_c110_field1_qs;
  logic [3:0] message_header_c110_field1_wd;
  logic message_header_c110_field1_we;
  logic [31:0] message_payload_1_c110_qs;
  logic [31:0] message_payload_1_c110_wd;
  logic message_payload_1_c110_we;
  logic doorbell_c110_intr_qs;
  logic doorbell_c110_intr_wd;
  logic doorbell_c110_intr_we;
  logic [30:0] doorbell_c110_preserve_mask_qs;
  logic [30:0] doorbell_c110_preserve_mask_wd;
  logic doorbell_c110_preserve_mask_we;
  logic completion_interrupt_c110_intr_qs;
  logic completion_interrupt_c110_intr_wd;
  logic completion_interrupt_c110_intr_we;
  logic [30:0] completion_interrupt_c110_preserve_mask_qs;
  logic [30:0] completion_interrupt_c110_preserve_mask_wd;
  logic completion_interrupt_c110_preserve_mask_we;
  logic [31:0] reserved_1_c111_qs;
  logic [31:0] reserved_1_c111_wd;
  logic reserved_1_c111_we;
  logic channel_status_c111_channel_free_qs;
  logic channel_status_c111_channel_free_wd;
  logic channel_status_c111_channel_free_we;
  logic channel_status_c111_channel_error_qs;
  logic channel_status_c111_channel_error_wd;
  logic channel_status_c111_channel_error_we;
  logic [29:0] channel_status_c111_field1_qs;
  logic [29:0] channel_status_c111_field1_wd;
  logic channel_status_c111_field1_we;
  logic [31:0] reserved_2_c111_qs;
  logic [31:0] reserved_2_c111_wd;
  logic reserved_2_c111_we;
  logic channel_flags_c111_intr_enable_qs;
  logic channel_flags_c111_intr_enable_wd;
  logic channel_flags_c111_intr_enable_we;
  logic [30:0] channel_flags_c111_field1_qs;
  logic [30:0] channel_flags_c111_field1_wd;
  logic channel_flags_c111_field1_we;
  logic [31:0] length_c111_qs;
  logic [31:0] length_c111_wd;
  logic length_c111_we;
  logic [7:0] message_header_c111_message_id_qs;
  logic [7:0] message_header_c111_message_id_wd;
  logic message_header_c111_message_id_we;
  logic [1:0] message_header_c111_message_type_qs;
  logic [1:0] message_header_c111_message_type_wd;
  logic message_header_c111_message_type_we;
  logic [7:0] message_header_c111_protocol_id_qs;
  logic [7:0] message_header_c111_protocol_id_wd;
  logic message_header_c111_protocol_id_we;
  logic [9:0] message_header_c111_token_qs;
  logic [9:0] message_header_c111_token_wd;
  logic message_header_c111_token_we;
  logic [3:0] message_header_c111_field1_qs;
  logic [3:0] message_header_c111_field1_wd;
  logic message_header_c111_field1_we;
  logic [31:0] message_payload_1_c111_qs;
  logic [31:0] message_payload_1_c111_wd;
  logic message_payload_1_c111_we;
  logic doorbell_c111_intr_qs;
  logic doorbell_c111_intr_wd;
  logic doorbell_c111_intr_we;
  logic [30:0] doorbell_c111_preserve_mask_qs;
  logic [30:0] doorbell_c111_preserve_mask_wd;
  logic doorbell_c111_preserve_mask_we;
  logic completion_interrupt_c111_intr_qs;
  logic completion_interrupt_c111_intr_wd;
  logic completion_interrupt_c111_intr_we;
  logic [30:0] completion_interrupt_c111_preserve_mask_qs;
  logic [30:0] completion_interrupt_c111_preserve_mask_wd;
  logic completion_interrupt_c111_preserve_mask_we;
  logic [31:0] reserved_1_c112_qs;
  logic [31:0] reserved_1_c112_wd;
  logic reserved_1_c112_we;
  logic channel_status_c112_channel_free_qs;
  logic channel_status_c112_channel_free_wd;
  logic channel_status_c112_channel_free_we;
  logic channel_status_c112_channel_error_qs;
  logic channel_status_c112_channel_error_wd;
  logic channel_status_c112_channel_error_we;
  logic [29:0] channel_status_c112_field1_qs;
  logic [29:0] channel_status_c112_field1_wd;
  logic channel_status_c112_field1_we;
  logic [31:0] reserved_2_c112_qs;
  logic [31:0] reserved_2_c112_wd;
  logic reserved_2_c112_we;
  logic channel_flags_c112_intr_enable_qs;
  logic channel_flags_c112_intr_enable_wd;
  logic channel_flags_c112_intr_enable_we;
  logic [30:0] channel_flags_c112_field1_qs;
  logic [30:0] channel_flags_c112_field1_wd;
  logic channel_flags_c112_field1_we;
  logic [31:0] length_c112_qs;
  logic [31:0] length_c112_wd;
  logic length_c112_we;
  logic [7:0] message_header_c112_message_id_qs;
  logic [7:0] message_header_c112_message_id_wd;
  logic message_header_c112_message_id_we;
  logic [1:0] message_header_c112_message_type_qs;
  logic [1:0] message_header_c112_message_type_wd;
  logic message_header_c112_message_type_we;
  logic [7:0] message_header_c112_protocol_id_qs;
  logic [7:0] message_header_c112_protocol_id_wd;
  logic message_header_c112_protocol_id_we;
  logic [9:0] message_header_c112_token_qs;
  logic [9:0] message_header_c112_token_wd;
  logic message_header_c112_token_we;
  logic [3:0] message_header_c112_field1_qs;
  logic [3:0] message_header_c112_field1_wd;
  logic message_header_c112_field1_we;
  logic [31:0] message_payload_1_c112_qs;
  logic [31:0] message_payload_1_c112_wd;
  logic message_payload_1_c112_we;
  logic doorbell_c112_intr_qs;
  logic doorbell_c112_intr_wd;
  logic doorbell_c112_intr_we;
  logic [30:0] doorbell_c112_preserve_mask_qs;
  logic [30:0] doorbell_c112_preserve_mask_wd;
  logic doorbell_c112_preserve_mask_we;
  logic completion_interrupt_c112_intr_qs;
  logic completion_interrupt_c112_intr_wd;
  logic completion_interrupt_c112_intr_we;
  logic [30:0] completion_interrupt_c112_preserve_mask_qs;
  logic [30:0] completion_interrupt_c112_preserve_mask_wd;
  logic completion_interrupt_c112_preserve_mask_we;
  logic [31:0] reserved_1_c113_qs;
  logic [31:0] reserved_1_c113_wd;
  logic reserved_1_c113_we;
  logic channel_status_c113_channel_free_qs;
  logic channel_status_c113_channel_free_wd;
  logic channel_status_c113_channel_free_we;
  logic channel_status_c113_channel_error_qs;
  logic channel_status_c113_channel_error_wd;
  logic channel_status_c113_channel_error_we;
  logic [29:0] channel_status_c113_field1_qs;
  logic [29:0] channel_status_c113_field1_wd;
  logic channel_status_c113_field1_we;
  logic [31:0] reserved_2_c113_qs;
  logic [31:0] reserved_2_c113_wd;
  logic reserved_2_c113_we;
  logic channel_flags_c113_intr_enable_qs;
  logic channel_flags_c113_intr_enable_wd;
  logic channel_flags_c113_intr_enable_we;
  logic [30:0] channel_flags_c113_field1_qs;
  logic [30:0] channel_flags_c113_field1_wd;
  logic channel_flags_c113_field1_we;
  logic [31:0] length_c113_qs;
  logic [31:0] length_c113_wd;
  logic length_c113_we;
  logic [7:0] message_header_c113_message_id_qs;
  logic [7:0] message_header_c113_message_id_wd;
  logic message_header_c113_message_id_we;
  logic [1:0] message_header_c113_message_type_qs;
  logic [1:0] message_header_c113_message_type_wd;
  logic message_header_c113_message_type_we;
  logic [7:0] message_header_c113_protocol_id_qs;
  logic [7:0] message_header_c113_protocol_id_wd;
  logic message_header_c113_protocol_id_we;
  logic [9:0] message_header_c113_token_qs;
  logic [9:0] message_header_c113_token_wd;
  logic message_header_c113_token_we;
  logic [3:0] message_header_c113_field1_qs;
  logic [3:0] message_header_c113_field1_wd;
  logic message_header_c113_field1_we;
  logic [31:0] message_payload_1_c113_qs;
  logic [31:0] message_payload_1_c113_wd;
  logic message_payload_1_c113_we;
  logic doorbell_c113_intr_qs;
  logic doorbell_c113_intr_wd;
  logic doorbell_c113_intr_we;
  logic [30:0] doorbell_c113_preserve_mask_qs;
  logic [30:0] doorbell_c113_preserve_mask_wd;
  logic doorbell_c113_preserve_mask_we;
  logic completion_interrupt_c113_intr_qs;
  logic completion_interrupt_c113_intr_wd;
  logic completion_interrupt_c113_intr_we;
  logic [30:0] completion_interrupt_c113_preserve_mask_qs;
  logic [30:0] completion_interrupt_c113_preserve_mask_wd;
  logic completion_interrupt_c113_preserve_mask_we;
  logic [31:0] reserved_1_c114_qs;
  logic [31:0] reserved_1_c114_wd;
  logic reserved_1_c114_we;
  logic channel_status_c114_channel_free_qs;
  logic channel_status_c114_channel_free_wd;
  logic channel_status_c114_channel_free_we;
  logic channel_status_c114_channel_error_qs;
  logic channel_status_c114_channel_error_wd;
  logic channel_status_c114_channel_error_we;
  logic [29:0] channel_status_c114_field1_qs;
  logic [29:0] channel_status_c114_field1_wd;
  logic channel_status_c114_field1_we;
  logic [31:0] reserved_2_c114_qs;
  logic [31:0] reserved_2_c114_wd;
  logic reserved_2_c114_we;
  logic channel_flags_c114_intr_enable_qs;
  logic channel_flags_c114_intr_enable_wd;
  logic channel_flags_c114_intr_enable_we;
  logic [30:0] channel_flags_c114_field1_qs;
  logic [30:0] channel_flags_c114_field1_wd;
  logic channel_flags_c114_field1_we;
  logic [31:0] length_c114_qs;
  logic [31:0] length_c114_wd;
  logic length_c114_we;
  logic [7:0] message_header_c114_message_id_qs;
  logic [7:0] message_header_c114_message_id_wd;
  logic message_header_c114_message_id_we;
  logic [1:0] message_header_c114_message_type_qs;
  logic [1:0] message_header_c114_message_type_wd;
  logic message_header_c114_message_type_we;
  logic [7:0] message_header_c114_protocol_id_qs;
  logic [7:0] message_header_c114_protocol_id_wd;
  logic message_header_c114_protocol_id_we;
  logic [9:0] message_header_c114_token_qs;
  logic [9:0] message_header_c114_token_wd;
  logic message_header_c114_token_we;
  logic [3:0] message_header_c114_field1_qs;
  logic [3:0] message_header_c114_field1_wd;
  logic message_header_c114_field1_we;
  logic [31:0] message_payload_1_c114_qs;
  logic [31:0] message_payload_1_c114_wd;
  logic message_payload_1_c114_we;
  logic doorbell_c114_intr_qs;
  logic doorbell_c114_intr_wd;
  logic doorbell_c114_intr_we;
  logic [30:0] doorbell_c114_preserve_mask_qs;
  logic [30:0] doorbell_c114_preserve_mask_wd;
  logic doorbell_c114_preserve_mask_we;
  logic completion_interrupt_c114_intr_qs;
  logic completion_interrupt_c114_intr_wd;
  logic completion_interrupt_c114_intr_we;
  logic [30:0] completion_interrupt_c114_preserve_mask_qs;
  logic [30:0] completion_interrupt_c114_preserve_mask_wd;
  logic completion_interrupt_c114_preserve_mask_we;
  logic [31:0] reserved_1_c115_qs;
  logic [31:0] reserved_1_c115_wd;
  logic reserved_1_c115_we;
  logic channel_status_c115_channel_free_qs;
  logic channel_status_c115_channel_free_wd;
  logic channel_status_c115_channel_free_we;
  logic channel_status_c115_channel_error_qs;
  logic channel_status_c115_channel_error_wd;
  logic channel_status_c115_channel_error_we;
  logic [29:0] channel_status_c115_field1_qs;
  logic [29:0] channel_status_c115_field1_wd;
  logic channel_status_c115_field1_we;
  logic [31:0] reserved_2_c115_qs;
  logic [31:0] reserved_2_c115_wd;
  logic reserved_2_c115_we;
  logic channel_flags_c115_intr_enable_qs;
  logic channel_flags_c115_intr_enable_wd;
  logic channel_flags_c115_intr_enable_we;
  logic [30:0] channel_flags_c115_field1_qs;
  logic [30:0] channel_flags_c115_field1_wd;
  logic channel_flags_c115_field1_we;
  logic [31:0] length_c115_qs;
  logic [31:0] length_c115_wd;
  logic length_c115_we;
  logic [7:0] message_header_c115_message_id_qs;
  logic [7:0] message_header_c115_message_id_wd;
  logic message_header_c115_message_id_we;
  logic [1:0] message_header_c115_message_type_qs;
  logic [1:0] message_header_c115_message_type_wd;
  logic message_header_c115_message_type_we;
  logic [7:0] message_header_c115_protocol_id_qs;
  logic [7:0] message_header_c115_protocol_id_wd;
  logic message_header_c115_protocol_id_we;
  logic [9:0] message_header_c115_token_qs;
  logic [9:0] message_header_c115_token_wd;
  logic message_header_c115_token_we;
  logic [3:0] message_header_c115_field1_qs;
  logic [3:0] message_header_c115_field1_wd;
  logic message_header_c115_field1_we;
  logic [31:0] message_payload_1_c115_qs;
  logic [31:0] message_payload_1_c115_wd;
  logic message_payload_1_c115_we;
  logic doorbell_c115_intr_qs;
  logic doorbell_c115_intr_wd;
  logic doorbell_c115_intr_we;
  logic [30:0] doorbell_c115_preserve_mask_qs;
  logic [30:0] doorbell_c115_preserve_mask_wd;
  logic doorbell_c115_preserve_mask_we;
  logic completion_interrupt_c115_intr_qs;
  logic completion_interrupt_c115_intr_wd;
  logic completion_interrupt_c115_intr_we;
  logic [30:0] completion_interrupt_c115_preserve_mask_qs;
  logic [30:0] completion_interrupt_c115_preserve_mask_wd;
  logic completion_interrupt_c115_preserve_mask_we;
  logic [31:0] reserved_1_c116_qs;
  logic [31:0] reserved_1_c116_wd;
  logic reserved_1_c116_we;
  logic channel_status_c116_channel_free_qs;
  logic channel_status_c116_channel_free_wd;
  logic channel_status_c116_channel_free_we;
  logic channel_status_c116_channel_error_qs;
  logic channel_status_c116_channel_error_wd;
  logic channel_status_c116_channel_error_we;
  logic [29:0] channel_status_c116_field1_qs;
  logic [29:0] channel_status_c116_field1_wd;
  logic channel_status_c116_field1_we;
  logic [31:0] reserved_2_c116_qs;
  logic [31:0] reserved_2_c116_wd;
  logic reserved_2_c116_we;
  logic channel_flags_c116_intr_enable_qs;
  logic channel_flags_c116_intr_enable_wd;
  logic channel_flags_c116_intr_enable_we;
  logic [30:0] channel_flags_c116_field1_qs;
  logic [30:0] channel_flags_c116_field1_wd;
  logic channel_flags_c116_field1_we;
  logic [31:0] length_c116_qs;
  logic [31:0] length_c116_wd;
  logic length_c116_we;
  logic [7:0] message_header_c116_message_id_qs;
  logic [7:0] message_header_c116_message_id_wd;
  logic message_header_c116_message_id_we;
  logic [1:0] message_header_c116_message_type_qs;
  logic [1:0] message_header_c116_message_type_wd;
  logic message_header_c116_message_type_we;
  logic [7:0] message_header_c116_protocol_id_qs;
  logic [7:0] message_header_c116_protocol_id_wd;
  logic message_header_c116_protocol_id_we;
  logic [9:0] message_header_c116_token_qs;
  logic [9:0] message_header_c116_token_wd;
  logic message_header_c116_token_we;
  logic [3:0] message_header_c116_field1_qs;
  logic [3:0] message_header_c116_field1_wd;
  logic message_header_c116_field1_we;
  logic [31:0] message_payload_1_c116_qs;
  logic [31:0] message_payload_1_c116_wd;
  logic message_payload_1_c116_we;
  logic doorbell_c116_intr_qs;
  logic doorbell_c116_intr_wd;
  logic doorbell_c116_intr_we;
  logic [30:0] doorbell_c116_preserve_mask_qs;
  logic [30:0] doorbell_c116_preserve_mask_wd;
  logic doorbell_c116_preserve_mask_we;
  logic completion_interrupt_c116_intr_qs;
  logic completion_interrupt_c116_intr_wd;
  logic completion_interrupt_c116_intr_we;
  logic [30:0] completion_interrupt_c116_preserve_mask_qs;
  logic [30:0] completion_interrupt_c116_preserve_mask_wd;
  logic completion_interrupt_c116_preserve_mask_we;
  logic [31:0] reserved_1_c117_qs;
  logic [31:0] reserved_1_c117_wd;
  logic reserved_1_c117_we;
  logic channel_status_c117_channel_free_qs;
  logic channel_status_c117_channel_free_wd;
  logic channel_status_c117_channel_free_we;
  logic channel_status_c117_channel_error_qs;
  logic channel_status_c117_channel_error_wd;
  logic channel_status_c117_channel_error_we;
  logic [29:0] channel_status_c117_field1_qs;
  logic [29:0] channel_status_c117_field1_wd;
  logic channel_status_c117_field1_we;
  logic [31:0] reserved_2_c117_qs;
  logic [31:0] reserved_2_c117_wd;
  logic reserved_2_c117_we;
  logic channel_flags_c117_intr_enable_qs;
  logic channel_flags_c117_intr_enable_wd;
  logic channel_flags_c117_intr_enable_we;
  logic [30:0] channel_flags_c117_field1_qs;
  logic [30:0] channel_flags_c117_field1_wd;
  logic channel_flags_c117_field1_we;
  logic [31:0] length_c117_qs;
  logic [31:0] length_c117_wd;
  logic length_c117_we;
  logic [7:0] message_header_c117_message_id_qs;
  logic [7:0] message_header_c117_message_id_wd;
  logic message_header_c117_message_id_we;
  logic [1:0] message_header_c117_message_type_qs;
  logic [1:0] message_header_c117_message_type_wd;
  logic message_header_c117_message_type_we;
  logic [7:0] message_header_c117_protocol_id_qs;
  logic [7:0] message_header_c117_protocol_id_wd;
  logic message_header_c117_protocol_id_we;
  logic [9:0] message_header_c117_token_qs;
  logic [9:0] message_header_c117_token_wd;
  logic message_header_c117_token_we;
  logic [3:0] message_header_c117_field1_qs;
  logic [3:0] message_header_c117_field1_wd;
  logic message_header_c117_field1_we;
  logic [31:0] message_payload_1_c117_qs;
  logic [31:0] message_payload_1_c117_wd;
  logic message_payload_1_c117_we;
  logic doorbell_c117_intr_qs;
  logic doorbell_c117_intr_wd;
  logic doorbell_c117_intr_we;
  logic [30:0] doorbell_c117_preserve_mask_qs;
  logic [30:0] doorbell_c117_preserve_mask_wd;
  logic doorbell_c117_preserve_mask_we;
  logic completion_interrupt_c117_intr_qs;
  logic completion_interrupt_c117_intr_wd;
  logic completion_interrupt_c117_intr_we;
  logic [30:0] completion_interrupt_c117_preserve_mask_qs;
  logic [30:0] completion_interrupt_c117_preserve_mask_wd;
  logic completion_interrupt_c117_preserve_mask_we;
  logic [31:0] reserved_1_c118_qs;
  logic [31:0] reserved_1_c118_wd;
  logic reserved_1_c118_we;
  logic channel_status_c118_channel_free_qs;
  logic channel_status_c118_channel_free_wd;
  logic channel_status_c118_channel_free_we;
  logic channel_status_c118_channel_error_qs;
  logic channel_status_c118_channel_error_wd;
  logic channel_status_c118_channel_error_we;
  logic [29:0] channel_status_c118_field1_qs;
  logic [29:0] channel_status_c118_field1_wd;
  logic channel_status_c118_field1_we;
  logic [31:0] reserved_2_c118_qs;
  logic [31:0] reserved_2_c118_wd;
  logic reserved_2_c118_we;
  logic channel_flags_c118_intr_enable_qs;
  logic channel_flags_c118_intr_enable_wd;
  logic channel_flags_c118_intr_enable_we;
  logic [30:0] channel_flags_c118_field1_qs;
  logic [30:0] channel_flags_c118_field1_wd;
  logic channel_flags_c118_field1_we;
  logic [31:0] length_c118_qs;
  logic [31:0] length_c118_wd;
  logic length_c118_we;
  logic [7:0] message_header_c118_message_id_qs;
  logic [7:0] message_header_c118_message_id_wd;
  logic message_header_c118_message_id_we;
  logic [1:0] message_header_c118_message_type_qs;
  logic [1:0] message_header_c118_message_type_wd;
  logic message_header_c118_message_type_we;
  logic [7:0] message_header_c118_protocol_id_qs;
  logic [7:0] message_header_c118_protocol_id_wd;
  logic message_header_c118_protocol_id_we;
  logic [9:0] message_header_c118_token_qs;
  logic [9:0] message_header_c118_token_wd;
  logic message_header_c118_token_we;
  logic [3:0] message_header_c118_field1_qs;
  logic [3:0] message_header_c118_field1_wd;
  logic message_header_c118_field1_we;
  logic [31:0] message_payload_1_c118_qs;
  logic [31:0] message_payload_1_c118_wd;
  logic message_payload_1_c118_we;
  logic doorbell_c118_intr_qs;
  logic doorbell_c118_intr_wd;
  logic doorbell_c118_intr_we;
  logic [30:0] doorbell_c118_preserve_mask_qs;
  logic [30:0] doorbell_c118_preserve_mask_wd;
  logic doorbell_c118_preserve_mask_we;
  logic completion_interrupt_c118_intr_qs;
  logic completion_interrupt_c118_intr_wd;
  logic completion_interrupt_c118_intr_we;
  logic [30:0] completion_interrupt_c118_preserve_mask_qs;
  logic [30:0] completion_interrupt_c118_preserve_mask_wd;
  logic completion_interrupt_c118_preserve_mask_we;
  logic [31:0] reserved_1_c119_qs;
  logic [31:0] reserved_1_c119_wd;
  logic reserved_1_c119_we;
  logic channel_status_c119_channel_free_qs;
  logic channel_status_c119_channel_free_wd;
  logic channel_status_c119_channel_free_we;
  logic channel_status_c119_channel_error_qs;
  logic channel_status_c119_channel_error_wd;
  logic channel_status_c119_channel_error_we;
  logic [29:0] channel_status_c119_field1_qs;
  logic [29:0] channel_status_c119_field1_wd;
  logic channel_status_c119_field1_we;
  logic [31:0] reserved_2_c119_qs;
  logic [31:0] reserved_2_c119_wd;
  logic reserved_2_c119_we;
  logic channel_flags_c119_intr_enable_qs;
  logic channel_flags_c119_intr_enable_wd;
  logic channel_flags_c119_intr_enable_we;
  logic [30:0] channel_flags_c119_field1_qs;
  logic [30:0] channel_flags_c119_field1_wd;
  logic channel_flags_c119_field1_we;
  logic [31:0] length_c119_qs;
  logic [31:0] length_c119_wd;
  logic length_c119_we;
  logic [7:0] message_header_c119_message_id_qs;
  logic [7:0] message_header_c119_message_id_wd;
  logic message_header_c119_message_id_we;
  logic [1:0] message_header_c119_message_type_qs;
  logic [1:0] message_header_c119_message_type_wd;
  logic message_header_c119_message_type_we;
  logic [7:0] message_header_c119_protocol_id_qs;
  logic [7:0] message_header_c119_protocol_id_wd;
  logic message_header_c119_protocol_id_we;
  logic [9:0] message_header_c119_token_qs;
  logic [9:0] message_header_c119_token_wd;
  logic message_header_c119_token_we;
  logic [3:0] message_header_c119_field1_qs;
  logic [3:0] message_header_c119_field1_wd;
  logic message_header_c119_field1_we;
  logic [31:0] message_payload_1_c119_qs;
  logic [31:0] message_payload_1_c119_wd;
  logic message_payload_1_c119_we;
  logic doorbell_c119_intr_qs;
  logic doorbell_c119_intr_wd;
  logic doorbell_c119_intr_we;
  logic [30:0] doorbell_c119_preserve_mask_qs;
  logic [30:0] doorbell_c119_preserve_mask_wd;
  logic doorbell_c119_preserve_mask_we;
  logic completion_interrupt_c119_intr_qs;
  logic completion_interrupt_c119_intr_wd;
  logic completion_interrupt_c119_intr_we;
  logic [30:0] completion_interrupt_c119_preserve_mask_qs;
  logic [30:0] completion_interrupt_c119_preserve_mask_wd;
  logic completion_interrupt_c119_preserve_mask_we;
  logic [31:0] reserved_1_c120_qs;
  logic [31:0] reserved_1_c120_wd;
  logic reserved_1_c120_we;
  logic channel_status_c120_channel_free_qs;
  logic channel_status_c120_channel_free_wd;
  logic channel_status_c120_channel_free_we;
  logic channel_status_c120_channel_error_qs;
  logic channel_status_c120_channel_error_wd;
  logic channel_status_c120_channel_error_we;
  logic [29:0] channel_status_c120_field1_qs;
  logic [29:0] channel_status_c120_field1_wd;
  logic channel_status_c120_field1_we;
  logic [31:0] reserved_2_c120_qs;
  logic [31:0] reserved_2_c120_wd;
  logic reserved_2_c120_we;
  logic channel_flags_c120_intr_enable_qs;
  logic channel_flags_c120_intr_enable_wd;
  logic channel_flags_c120_intr_enable_we;
  logic [30:0] channel_flags_c120_field1_qs;
  logic [30:0] channel_flags_c120_field1_wd;
  logic channel_flags_c120_field1_we;
  logic [31:0] length_c120_qs;
  logic [31:0] length_c120_wd;
  logic length_c120_we;
  logic [7:0] message_header_c120_message_id_qs;
  logic [7:0] message_header_c120_message_id_wd;
  logic message_header_c120_message_id_we;
  logic [1:0] message_header_c120_message_type_qs;
  logic [1:0] message_header_c120_message_type_wd;
  logic message_header_c120_message_type_we;
  logic [7:0] message_header_c120_protocol_id_qs;
  logic [7:0] message_header_c120_protocol_id_wd;
  logic message_header_c120_protocol_id_we;
  logic [9:0] message_header_c120_token_qs;
  logic [9:0] message_header_c120_token_wd;
  logic message_header_c120_token_we;
  logic [3:0] message_header_c120_field1_qs;
  logic [3:0] message_header_c120_field1_wd;
  logic message_header_c120_field1_we;
  logic [31:0] message_payload_1_c120_qs;
  logic [31:0] message_payload_1_c120_wd;
  logic message_payload_1_c120_we;
  logic doorbell_c120_intr_qs;
  logic doorbell_c120_intr_wd;
  logic doorbell_c120_intr_we;
  logic [30:0] doorbell_c120_preserve_mask_qs;
  logic [30:0] doorbell_c120_preserve_mask_wd;
  logic doorbell_c120_preserve_mask_we;
  logic completion_interrupt_c120_intr_qs;
  logic completion_interrupt_c120_intr_wd;
  logic completion_interrupt_c120_intr_we;
  logic [30:0] completion_interrupt_c120_preserve_mask_qs;
  logic [30:0] completion_interrupt_c120_preserve_mask_wd;
  logic completion_interrupt_c120_preserve_mask_we;
  logic [31:0] reserved_1_c121_qs;
  logic [31:0] reserved_1_c121_wd;
  logic reserved_1_c121_we;
  logic channel_status_c121_channel_free_qs;
  logic channel_status_c121_channel_free_wd;
  logic channel_status_c121_channel_free_we;
  logic channel_status_c121_channel_error_qs;
  logic channel_status_c121_channel_error_wd;
  logic channel_status_c121_channel_error_we;
  logic [29:0] channel_status_c121_field1_qs;
  logic [29:0] channel_status_c121_field1_wd;
  logic channel_status_c121_field1_we;
  logic [31:0] reserved_2_c121_qs;
  logic [31:0] reserved_2_c121_wd;
  logic reserved_2_c121_we;
  logic channel_flags_c121_intr_enable_qs;
  logic channel_flags_c121_intr_enable_wd;
  logic channel_flags_c121_intr_enable_we;
  logic [30:0] channel_flags_c121_field1_qs;
  logic [30:0] channel_flags_c121_field1_wd;
  logic channel_flags_c121_field1_we;
  logic [31:0] length_c121_qs;
  logic [31:0] length_c121_wd;
  logic length_c121_we;
  logic [7:0] message_header_c121_message_id_qs;
  logic [7:0] message_header_c121_message_id_wd;
  logic message_header_c121_message_id_we;
  logic [1:0] message_header_c121_message_type_qs;
  logic [1:0] message_header_c121_message_type_wd;
  logic message_header_c121_message_type_we;
  logic [7:0] message_header_c121_protocol_id_qs;
  logic [7:0] message_header_c121_protocol_id_wd;
  logic message_header_c121_protocol_id_we;
  logic [9:0] message_header_c121_token_qs;
  logic [9:0] message_header_c121_token_wd;
  logic message_header_c121_token_we;
  logic [3:0] message_header_c121_field1_qs;
  logic [3:0] message_header_c121_field1_wd;
  logic message_header_c121_field1_we;
  logic [31:0] message_payload_1_c121_qs;
  logic [31:0] message_payload_1_c121_wd;
  logic message_payload_1_c121_we;
  logic doorbell_c121_intr_qs;
  logic doorbell_c121_intr_wd;
  logic doorbell_c121_intr_we;
  logic [30:0] doorbell_c121_preserve_mask_qs;
  logic [30:0] doorbell_c121_preserve_mask_wd;
  logic doorbell_c121_preserve_mask_we;
  logic completion_interrupt_c121_intr_qs;
  logic completion_interrupt_c121_intr_wd;
  logic completion_interrupt_c121_intr_we;
  logic [30:0] completion_interrupt_c121_preserve_mask_qs;
  logic [30:0] completion_interrupt_c121_preserve_mask_wd;
  logic completion_interrupt_c121_preserve_mask_we;
  logic [31:0] reserved_1_c122_qs;
  logic [31:0] reserved_1_c122_wd;
  logic reserved_1_c122_we;
  logic channel_status_c122_channel_free_qs;
  logic channel_status_c122_channel_free_wd;
  logic channel_status_c122_channel_free_we;
  logic channel_status_c122_channel_error_qs;
  logic channel_status_c122_channel_error_wd;
  logic channel_status_c122_channel_error_we;
  logic [29:0] channel_status_c122_field1_qs;
  logic [29:0] channel_status_c122_field1_wd;
  logic channel_status_c122_field1_we;
  logic [31:0] reserved_2_c122_qs;
  logic [31:0] reserved_2_c122_wd;
  logic reserved_2_c122_we;
  logic channel_flags_c122_intr_enable_qs;
  logic channel_flags_c122_intr_enable_wd;
  logic channel_flags_c122_intr_enable_we;
  logic [30:0] channel_flags_c122_field1_qs;
  logic [30:0] channel_flags_c122_field1_wd;
  logic channel_flags_c122_field1_we;
  logic [31:0] length_c122_qs;
  logic [31:0] length_c122_wd;
  logic length_c122_we;
  logic [7:0] message_header_c122_message_id_qs;
  logic [7:0] message_header_c122_message_id_wd;
  logic message_header_c122_message_id_we;
  logic [1:0] message_header_c122_message_type_qs;
  logic [1:0] message_header_c122_message_type_wd;
  logic message_header_c122_message_type_we;
  logic [7:0] message_header_c122_protocol_id_qs;
  logic [7:0] message_header_c122_protocol_id_wd;
  logic message_header_c122_protocol_id_we;
  logic [9:0] message_header_c122_token_qs;
  logic [9:0] message_header_c122_token_wd;
  logic message_header_c122_token_we;
  logic [3:0] message_header_c122_field1_qs;
  logic [3:0] message_header_c122_field1_wd;
  logic message_header_c122_field1_we;
  logic [31:0] message_payload_1_c122_qs;
  logic [31:0] message_payload_1_c122_wd;
  logic message_payload_1_c122_we;
  logic doorbell_c122_intr_qs;
  logic doorbell_c122_intr_wd;
  logic doorbell_c122_intr_we;
  logic [30:0] doorbell_c122_preserve_mask_qs;
  logic [30:0] doorbell_c122_preserve_mask_wd;
  logic doorbell_c122_preserve_mask_we;
  logic completion_interrupt_c122_intr_qs;
  logic completion_interrupt_c122_intr_wd;
  logic completion_interrupt_c122_intr_we;
  logic [30:0] completion_interrupt_c122_preserve_mask_qs;
  logic [30:0] completion_interrupt_c122_preserve_mask_wd;
  logic completion_interrupt_c122_preserve_mask_we;
  logic [31:0] reserved_1_c123_qs;
  logic [31:0] reserved_1_c123_wd;
  logic reserved_1_c123_we;
  logic channel_status_c123_channel_free_qs;
  logic channel_status_c123_channel_free_wd;
  logic channel_status_c123_channel_free_we;
  logic channel_status_c123_channel_error_qs;
  logic channel_status_c123_channel_error_wd;
  logic channel_status_c123_channel_error_we;
  logic [29:0] channel_status_c123_field1_qs;
  logic [29:0] channel_status_c123_field1_wd;
  logic channel_status_c123_field1_we;
  logic [31:0] reserved_2_c123_qs;
  logic [31:0] reserved_2_c123_wd;
  logic reserved_2_c123_we;
  logic channel_flags_c123_intr_enable_qs;
  logic channel_flags_c123_intr_enable_wd;
  logic channel_flags_c123_intr_enable_we;
  logic [30:0] channel_flags_c123_field1_qs;
  logic [30:0] channel_flags_c123_field1_wd;
  logic channel_flags_c123_field1_we;
  logic [31:0] length_c123_qs;
  logic [31:0] length_c123_wd;
  logic length_c123_we;
  logic [7:0] message_header_c123_message_id_qs;
  logic [7:0] message_header_c123_message_id_wd;
  logic message_header_c123_message_id_we;
  logic [1:0] message_header_c123_message_type_qs;
  logic [1:0] message_header_c123_message_type_wd;
  logic message_header_c123_message_type_we;
  logic [7:0] message_header_c123_protocol_id_qs;
  logic [7:0] message_header_c123_protocol_id_wd;
  logic message_header_c123_protocol_id_we;
  logic [9:0] message_header_c123_token_qs;
  logic [9:0] message_header_c123_token_wd;
  logic message_header_c123_token_we;
  logic [3:0] message_header_c123_field1_qs;
  logic [3:0] message_header_c123_field1_wd;
  logic message_header_c123_field1_we;
  logic [31:0] message_payload_1_c123_qs;
  logic [31:0] message_payload_1_c123_wd;
  logic message_payload_1_c123_we;
  logic doorbell_c123_intr_qs;
  logic doorbell_c123_intr_wd;
  logic doorbell_c123_intr_we;
  logic [30:0] doorbell_c123_preserve_mask_qs;
  logic [30:0] doorbell_c123_preserve_mask_wd;
  logic doorbell_c123_preserve_mask_we;
  logic completion_interrupt_c123_intr_qs;
  logic completion_interrupt_c123_intr_wd;
  logic completion_interrupt_c123_intr_we;
  logic [30:0] completion_interrupt_c123_preserve_mask_qs;
  logic [30:0] completion_interrupt_c123_preserve_mask_wd;
  logic completion_interrupt_c123_preserve_mask_we;
  logic [31:0] reserved_1_c124_qs;
  logic [31:0] reserved_1_c124_wd;
  logic reserved_1_c124_we;
  logic channel_status_c124_channel_free_qs;
  logic channel_status_c124_channel_free_wd;
  logic channel_status_c124_channel_free_we;
  logic channel_status_c124_channel_error_qs;
  logic channel_status_c124_channel_error_wd;
  logic channel_status_c124_channel_error_we;
  logic [29:0] channel_status_c124_field1_qs;
  logic [29:0] channel_status_c124_field1_wd;
  logic channel_status_c124_field1_we;
  logic [31:0] reserved_2_c124_qs;
  logic [31:0] reserved_2_c124_wd;
  logic reserved_2_c124_we;
  logic channel_flags_c124_intr_enable_qs;
  logic channel_flags_c124_intr_enable_wd;
  logic channel_flags_c124_intr_enable_we;
  logic [30:0] channel_flags_c124_field1_qs;
  logic [30:0] channel_flags_c124_field1_wd;
  logic channel_flags_c124_field1_we;
  logic [31:0] length_c124_qs;
  logic [31:0] length_c124_wd;
  logic length_c124_we;
  logic [7:0] message_header_c124_message_id_qs;
  logic [7:0] message_header_c124_message_id_wd;
  logic message_header_c124_message_id_we;
  logic [1:0] message_header_c124_message_type_qs;
  logic [1:0] message_header_c124_message_type_wd;
  logic message_header_c124_message_type_we;
  logic [7:0] message_header_c124_protocol_id_qs;
  logic [7:0] message_header_c124_protocol_id_wd;
  logic message_header_c124_protocol_id_we;
  logic [9:0] message_header_c124_token_qs;
  logic [9:0] message_header_c124_token_wd;
  logic message_header_c124_token_we;
  logic [3:0] message_header_c124_field1_qs;
  logic [3:0] message_header_c124_field1_wd;
  logic message_header_c124_field1_we;
  logic [31:0] message_payload_1_c124_qs;
  logic [31:0] message_payload_1_c124_wd;
  logic message_payload_1_c124_we;
  logic doorbell_c124_intr_qs;
  logic doorbell_c124_intr_wd;
  logic doorbell_c124_intr_we;
  logic [30:0] doorbell_c124_preserve_mask_qs;
  logic [30:0] doorbell_c124_preserve_mask_wd;
  logic doorbell_c124_preserve_mask_we;
  logic completion_interrupt_c124_intr_qs;
  logic completion_interrupt_c124_intr_wd;
  logic completion_interrupt_c124_intr_we;
  logic [30:0] completion_interrupt_c124_preserve_mask_qs;
  logic [30:0] completion_interrupt_c124_preserve_mask_wd;
  logic completion_interrupt_c124_preserve_mask_we;
  logic [31:0] reserved_1_c125_qs;
  logic [31:0] reserved_1_c125_wd;
  logic reserved_1_c125_we;
  logic channel_status_c125_channel_free_qs;
  logic channel_status_c125_channel_free_wd;
  logic channel_status_c125_channel_free_we;
  logic channel_status_c125_channel_error_qs;
  logic channel_status_c125_channel_error_wd;
  logic channel_status_c125_channel_error_we;
  logic [29:0] channel_status_c125_field1_qs;
  logic [29:0] channel_status_c125_field1_wd;
  logic channel_status_c125_field1_we;
  logic [31:0] reserved_2_c125_qs;
  logic [31:0] reserved_2_c125_wd;
  logic reserved_2_c125_we;
  logic channel_flags_c125_intr_enable_qs;
  logic channel_flags_c125_intr_enable_wd;
  logic channel_flags_c125_intr_enable_we;
  logic [30:0] channel_flags_c125_field1_qs;
  logic [30:0] channel_flags_c125_field1_wd;
  logic channel_flags_c125_field1_we;
  logic [31:0] length_c125_qs;
  logic [31:0] length_c125_wd;
  logic length_c125_we;
  logic [7:0] message_header_c125_message_id_qs;
  logic [7:0] message_header_c125_message_id_wd;
  logic message_header_c125_message_id_we;
  logic [1:0] message_header_c125_message_type_qs;
  logic [1:0] message_header_c125_message_type_wd;
  logic message_header_c125_message_type_we;
  logic [7:0] message_header_c125_protocol_id_qs;
  logic [7:0] message_header_c125_protocol_id_wd;
  logic message_header_c125_protocol_id_we;
  logic [9:0] message_header_c125_token_qs;
  logic [9:0] message_header_c125_token_wd;
  logic message_header_c125_token_we;
  logic [3:0] message_header_c125_field1_qs;
  logic [3:0] message_header_c125_field1_wd;
  logic message_header_c125_field1_we;
  logic [31:0] message_payload_1_c125_qs;
  logic [31:0] message_payload_1_c125_wd;
  logic message_payload_1_c125_we;
  logic doorbell_c125_intr_qs;
  logic doorbell_c125_intr_wd;
  logic doorbell_c125_intr_we;
  logic [30:0] doorbell_c125_preserve_mask_qs;
  logic [30:0] doorbell_c125_preserve_mask_wd;
  logic doorbell_c125_preserve_mask_we;
  logic completion_interrupt_c125_intr_qs;
  logic completion_interrupt_c125_intr_wd;
  logic completion_interrupt_c125_intr_we;
  logic [30:0] completion_interrupt_c125_preserve_mask_qs;
  logic [30:0] completion_interrupt_c125_preserve_mask_wd;
  logic completion_interrupt_c125_preserve_mask_we;
  logic [31:0] reserved_1_c126_qs;
  logic [31:0] reserved_1_c126_wd;
  logic reserved_1_c126_we;
  logic channel_status_c126_channel_free_qs;
  logic channel_status_c126_channel_free_wd;
  logic channel_status_c126_channel_free_we;
  logic channel_status_c126_channel_error_qs;
  logic channel_status_c126_channel_error_wd;
  logic channel_status_c126_channel_error_we;
  logic [29:0] channel_status_c126_field1_qs;
  logic [29:0] channel_status_c126_field1_wd;
  logic channel_status_c126_field1_we;
  logic [31:0] reserved_2_c126_qs;
  logic [31:0] reserved_2_c126_wd;
  logic reserved_2_c126_we;
  logic channel_flags_c126_intr_enable_qs;
  logic channel_flags_c126_intr_enable_wd;
  logic channel_flags_c126_intr_enable_we;
  logic [30:0] channel_flags_c126_field1_qs;
  logic [30:0] channel_flags_c126_field1_wd;
  logic channel_flags_c126_field1_we;
  logic [31:0] length_c126_qs;
  logic [31:0] length_c126_wd;
  logic length_c126_we;
  logic [7:0] message_header_c126_message_id_qs;
  logic [7:0] message_header_c126_message_id_wd;
  logic message_header_c126_message_id_we;
  logic [1:0] message_header_c126_message_type_qs;
  logic [1:0] message_header_c126_message_type_wd;
  logic message_header_c126_message_type_we;
  logic [7:0] message_header_c126_protocol_id_qs;
  logic [7:0] message_header_c126_protocol_id_wd;
  logic message_header_c126_protocol_id_we;
  logic [9:0] message_header_c126_token_qs;
  logic [9:0] message_header_c126_token_wd;
  logic message_header_c126_token_we;
  logic [3:0] message_header_c126_field1_qs;
  logic [3:0] message_header_c126_field1_wd;
  logic message_header_c126_field1_we;
  logic [31:0] message_payload_1_c126_qs;
  logic [31:0] message_payload_1_c126_wd;
  logic message_payload_1_c126_we;
  logic doorbell_c126_intr_qs;
  logic doorbell_c126_intr_wd;
  logic doorbell_c126_intr_we;
  logic [30:0] doorbell_c126_preserve_mask_qs;
  logic [30:0] doorbell_c126_preserve_mask_wd;
  logic doorbell_c126_preserve_mask_we;
  logic completion_interrupt_c126_intr_qs;
  logic completion_interrupt_c126_intr_wd;
  logic completion_interrupt_c126_intr_we;
  logic [30:0] completion_interrupt_c126_preserve_mask_qs;
  logic [30:0] completion_interrupt_c126_preserve_mask_wd;
  logic completion_interrupt_c126_preserve_mask_we;
  logic [31:0] reserved_1_c127_qs;
  logic [31:0] reserved_1_c127_wd;
  logic reserved_1_c127_we;
  logic channel_status_c127_channel_free_qs;
  logic channel_status_c127_channel_free_wd;
  logic channel_status_c127_channel_free_we;
  logic channel_status_c127_channel_error_qs;
  logic channel_status_c127_channel_error_wd;
  logic channel_status_c127_channel_error_we;
  logic [29:0] channel_status_c127_field1_qs;
  logic [29:0] channel_status_c127_field1_wd;
  logic channel_status_c127_field1_we;
  logic [31:0] reserved_2_c127_qs;
  logic [31:0] reserved_2_c127_wd;
  logic reserved_2_c127_we;
  logic channel_flags_c127_intr_enable_qs;
  logic channel_flags_c127_intr_enable_wd;
  logic channel_flags_c127_intr_enable_we;
  logic [30:0] channel_flags_c127_field1_qs;
  logic [30:0] channel_flags_c127_field1_wd;
  logic channel_flags_c127_field1_we;
  logic [31:0] length_c127_qs;
  logic [31:0] length_c127_wd;
  logic length_c127_we;
  logic [7:0] message_header_c127_message_id_qs;
  logic [7:0] message_header_c127_message_id_wd;
  logic message_header_c127_message_id_we;
  logic [1:0] message_header_c127_message_type_qs;
  logic [1:0] message_header_c127_message_type_wd;
  logic message_header_c127_message_type_we;
  logic [7:0] message_header_c127_protocol_id_qs;
  logic [7:0] message_header_c127_protocol_id_wd;
  logic message_header_c127_protocol_id_we;
  logic [9:0] message_header_c127_token_qs;
  logic [9:0] message_header_c127_token_wd;
  logic message_header_c127_token_we;
  logic [3:0] message_header_c127_field1_qs;
  logic [3:0] message_header_c127_field1_wd;
  logic message_header_c127_field1_we;
  logic [31:0] message_payload_1_c127_qs;
  logic [31:0] message_payload_1_c127_wd;
  logic message_payload_1_c127_we;
  logic doorbell_c127_intr_qs;
  logic doorbell_c127_intr_wd;
  logic doorbell_c127_intr_we;
  logic [30:0] doorbell_c127_preserve_mask_qs;
  logic [30:0] doorbell_c127_preserve_mask_wd;
  logic doorbell_c127_preserve_mask_we;
  logic completion_interrupt_c127_intr_qs;
  logic completion_interrupt_c127_intr_wd;
  logic completion_interrupt_c127_intr_we;
  logic [30:0] completion_interrupt_c127_preserve_mask_qs;
  logic [30:0] completion_interrupt_c127_preserve_mask_wd;
  logic completion_interrupt_c127_preserve_mask_we;
  logic [31:0] reserved_1_c128_qs;
  logic [31:0] reserved_1_c128_wd;
  logic reserved_1_c128_we;
  logic channel_status_c128_channel_free_qs;
  logic channel_status_c128_channel_free_wd;
  logic channel_status_c128_channel_free_we;
  logic channel_status_c128_channel_error_qs;
  logic channel_status_c128_channel_error_wd;
  logic channel_status_c128_channel_error_we;
  logic [29:0] channel_status_c128_field1_qs;
  logic [29:0] channel_status_c128_field1_wd;
  logic channel_status_c128_field1_we;
  logic [31:0] reserved_2_c128_qs;
  logic [31:0] reserved_2_c128_wd;
  logic reserved_2_c128_we;
  logic channel_flags_c128_intr_enable_qs;
  logic channel_flags_c128_intr_enable_wd;
  logic channel_flags_c128_intr_enable_we;
  logic [30:0] channel_flags_c128_field1_qs;
  logic [30:0] channel_flags_c128_field1_wd;
  logic channel_flags_c128_field1_we;
  logic [31:0] length_c128_qs;
  logic [31:0] length_c128_wd;
  logic length_c128_we;
  logic [7:0] message_header_c128_message_id_qs;
  logic [7:0] message_header_c128_message_id_wd;
  logic message_header_c128_message_id_we;
  logic [1:0] message_header_c128_message_type_qs;
  logic [1:0] message_header_c128_message_type_wd;
  logic message_header_c128_message_type_we;
  logic [7:0] message_header_c128_protocol_id_qs;
  logic [7:0] message_header_c128_protocol_id_wd;
  logic message_header_c128_protocol_id_we;
  logic [9:0] message_header_c128_token_qs;
  logic [9:0] message_header_c128_token_wd;
  logic message_header_c128_token_we;
  logic [3:0] message_header_c128_field1_qs;
  logic [3:0] message_header_c128_field1_wd;
  logic message_header_c128_field1_we;
  logic [31:0] message_payload_1_c128_qs;
  logic [31:0] message_payload_1_c128_wd;
  logic message_payload_1_c128_we;
  logic doorbell_c128_intr_qs;
  logic doorbell_c128_intr_wd;
  logic doorbell_c128_intr_we;
  logic [30:0] doorbell_c128_preserve_mask_qs;
  logic [30:0] doorbell_c128_preserve_mask_wd;
  logic doorbell_c128_preserve_mask_we;
  logic completion_interrupt_c128_intr_qs;
  logic completion_interrupt_c128_intr_wd;
  logic completion_interrupt_c128_intr_we;
  logic [30:0] completion_interrupt_c128_preserve_mask_qs;
  logic [30:0] completion_interrupt_c128_preserve_mask_wd;
  logic completion_interrupt_c128_preserve_mask_we;
  logic [31:0] reserved_1_c129_qs;
  logic [31:0] reserved_1_c129_wd;
  logic reserved_1_c129_we;
  logic channel_status_c129_channel_free_qs;
  logic channel_status_c129_channel_free_wd;
  logic channel_status_c129_channel_free_we;
  logic channel_status_c129_channel_error_qs;
  logic channel_status_c129_channel_error_wd;
  logic channel_status_c129_channel_error_we;
  logic [29:0] channel_status_c129_field1_qs;
  logic [29:0] channel_status_c129_field1_wd;
  logic channel_status_c129_field1_we;
  logic [31:0] reserved_2_c129_qs;
  logic [31:0] reserved_2_c129_wd;
  logic reserved_2_c129_we;
  logic channel_flags_c129_intr_enable_qs;
  logic channel_flags_c129_intr_enable_wd;
  logic channel_flags_c129_intr_enable_we;
  logic [30:0] channel_flags_c129_field1_qs;
  logic [30:0] channel_flags_c129_field1_wd;
  logic channel_flags_c129_field1_we;
  logic [31:0] length_c129_qs;
  logic [31:0] length_c129_wd;
  logic length_c129_we;
  logic [7:0] message_header_c129_message_id_qs;
  logic [7:0] message_header_c129_message_id_wd;
  logic message_header_c129_message_id_we;
  logic [1:0] message_header_c129_message_type_qs;
  logic [1:0] message_header_c129_message_type_wd;
  logic message_header_c129_message_type_we;
  logic [7:0] message_header_c129_protocol_id_qs;
  logic [7:0] message_header_c129_protocol_id_wd;
  logic message_header_c129_protocol_id_we;
  logic [9:0] message_header_c129_token_qs;
  logic [9:0] message_header_c129_token_wd;
  logic message_header_c129_token_we;
  logic [3:0] message_header_c129_field1_qs;
  logic [3:0] message_header_c129_field1_wd;
  logic message_header_c129_field1_we;
  logic [31:0] message_payload_1_c129_qs;
  logic [31:0] message_payload_1_c129_wd;
  logic message_payload_1_c129_we;
  logic doorbell_c129_intr_qs;
  logic doorbell_c129_intr_wd;
  logic doorbell_c129_intr_we;
  logic [30:0] doorbell_c129_preserve_mask_qs;
  logic [30:0] doorbell_c129_preserve_mask_wd;
  logic doorbell_c129_preserve_mask_we;
  logic completion_interrupt_c129_intr_qs;
  logic completion_interrupt_c129_intr_wd;
  logic completion_interrupt_c129_intr_we;
  logic [30:0] completion_interrupt_c129_preserve_mask_qs;
  logic [30:0] completion_interrupt_c129_preserve_mask_wd;
  logic completion_interrupt_c129_preserve_mask_we;
  logic [31:0] reserved_1_c130_qs;
  logic [31:0] reserved_1_c130_wd;
  logic reserved_1_c130_we;
  logic channel_status_c130_channel_free_qs;
  logic channel_status_c130_channel_free_wd;
  logic channel_status_c130_channel_free_we;
  logic channel_status_c130_channel_error_qs;
  logic channel_status_c130_channel_error_wd;
  logic channel_status_c130_channel_error_we;
  logic [29:0] channel_status_c130_field1_qs;
  logic [29:0] channel_status_c130_field1_wd;
  logic channel_status_c130_field1_we;
  logic [31:0] reserved_2_c130_qs;
  logic [31:0] reserved_2_c130_wd;
  logic reserved_2_c130_we;
  logic channel_flags_c130_intr_enable_qs;
  logic channel_flags_c130_intr_enable_wd;
  logic channel_flags_c130_intr_enable_we;
  logic [30:0] channel_flags_c130_field1_qs;
  logic [30:0] channel_flags_c130_field1_wd;
  logic channel_flags_c130_field1_we;
  logic [31:0] length_c130_qs;
  logic [31:0] length_c130_wd;
  logic length_c130_we;
  logic [7:0] message_header_c130_message_id_qs;
  logic [7:0] message_header_c130_message_id_wd;
  logic message_header_c130_message_id_we;
  logic [1:0] message_header_c130_message_type_qs;
  logic [1:0] message_header_c130_message_type_wd;
  logic message_header_c130_message_type_we;
  logic [7:0] message_header_c130_protocol_id_qs;
  logic [7:0] message_header_c130_protocol_id_wd;
  logic message_header_c130_protocol_id_we;
  logic [9:0] message_header_c130_token_qs;
  logic [9:0] message_header_c130_token_wd;
  logic message_header_c130_token_we;
  logic [3:0] message_header_c130_field1_qs;
  logic [3:0] message_header_c130_field1_wd;
  logic message_header_c130_field1_we;
  logic [31:0] message_payload_1_c130_qs;
  logic [31:0] message_payload_1_c130_wd;
  logic message_payload_1_c130_we;
  logic doorbell_c130_intr_qs;
  logic doorbell_c130_intr_wd;
  logic doorbell_c130_intr_we;
  logic [30:0] doorbell_c130_preserve_mask_qs;
  logic [30:0] doorbell_c130_preserve_mask_wd;
  logic doorbell_c130_preserve_mask_we;
  logic completion_interrupt_c130_intr_qs;
  logic completion_interrupt_c130_intr_wd;
  logic completion_interrupt_c130_intr_we;
  logic [30:0] completion_interrupt_c130_preserve_mask_qs;
  logic [30:0] completion_interrupt_c130_preserve_mask_wd;
  logic completion_interrupt_c130_preserve_mask_we;
  logic [31:0] reserved_1_c131_qs;
  logic [31:0] reserved_1_c131_wd;
  logic reserved_1_c131_we;
  logic channel_status_c131_channel_free_qs;
  logic channel_status_c131_channel_free_wd;
  logic channel_status_c131_channel_free_we;
  logic channel_status_c131_channel_error_qs;
  logic channel_status_c131_channel_error_wd;
  logic channel_status_c131_channel_error_we;
  logic [29:0] channel_status_c131_field1_qs;
  logic [29:0] channel_status_c131_field1_wd;
  logic channel_status_c131_field1_we;
  logic [31:0] reserved_2_c131_qs;
  logic [31:0] reserved_2_c131_wd;
  logic reserved_2_c131_we;
  logic channel_flags_c131_intr_enable_qs;
  logic channel_flags_c131_intr_enable_wd;
  logic channel_flags_c131_intr_enable_we;
  logic [30:0] channel_flags_c131_field1_qs;
  logic [30:0] channel_flags_c131_field1_wd;
  logic channel_flags_c131_field1_we;
  logic [31:0] length_c131_qs;
  logic [31:0] length_c131_wd;
  logic length_c131_we;
  logic [7:0] message_header_c131_message_id_qs;
  logic [7:0] message_header_c131_message_id_wd;
  logic message_header_c131_message_id_we;
  logic [1:0] message_header_c131_message_type_qs;
  logic [1:0] message_header_c131_message_type_wd;
  logic message_header_c131_message_type_we;
  logic [7:0] message_header_c131_protocol_id_qs;
  logic [7:0] message_header_c131_protocol_id_wd;
  logic message_header_c131_protocol_id_we;
  logic [9:0] message_header_c131_token_qs;
  logic [9:0] message_header_c131_token_wd;
  logic message_header_c131_token_we;
  logic [3:0] message_header_c131_field1_qs;
  logic [3:0] message_header_c131_field1_wd;
  logic message_header_c131_field1_we;
  logic [31:0] message_payload_1_c131_qs;
  logic [31:0] message_payload_1_c131_wd;
  logic message_payload_1_c131_we;
  logic doorbell_c131_intr_qs;
  logic doorbell_c131_intr_wd;
  logic doorbell_c131_intr_we;
  logic [30:0] doorbell_c131_preserve_mask_qs;
  logic [30:0] doorbell_c131_preserve_mask_wd;
  logic doorbell_c131_preserve_mask_we;
  logic completion_interrupt_c131_intr_qs;
  logic completion_interrupt_c131_intr_wd;
  logic completion_interrupt_c131_intr_we;
  logic [30:0] completion_interrupt_c131_preserve_mask_qs;
  logic [30:0] completion_interrupt_c131_preserve_mask_wd;
  logic completion_interrupt_c131_preserve_mask_we;
  logic [31:0] reserved_1_c132_qs;
  logic [31:0] reserved_1_c132_wd;
  logic reserved_1_c132_we;
  logic channel_status_c132_channel_free_qs;
  logic channel_status_c132_channel_free_wd;
  logic channel_status_c132_channel_free_we;
  logic channel_status_c132_channel_error_qs;
  logic channel_status_c132_channel_error_wd;
  logic channel_status_c132_channel_error_we;
  logic [29:0] channel_status_c132_field1_qs;
  logic [29:0] channel_status_c132_field1_wd;
  logic channel_status_c132_field1_we;
  logic [31:0] reserved_2_c132_qs;
  logic [31:0] reserved_2_c132_wd;
  logic reserved_2_c132_we;
  logic channel_flags_c132_intr_enable_qs;
  logic channel_flags_c132_intr_enable_wd;
  logic channel_flags_c132_intr_enable_we;
  logic [30:0] channel_flags_c132_field1_qs;
  logic [30:0] channel_flags_c132_field1_wd;
  logic channel_flags_c132_field1_we;
  logic [31:0] length_c132_qs;
  logic [31:0] length_c132_wd;
  logic length_c132_we;
  logic [7:0] message_header_c132_message_id_qs;
  logic [7:0] message_header_c132_message_id_wd;
  logic message_header_c132_message_id_we;
  logic [1:0] message_header_c132_message_type_qs;
  logic [1:0] message_header_c132_message_type_wd;
  logic message_header_c132_message_type_we;
  logic [7:0] message_header_c132_protocol_id_qs;
  logic [7:0] message_header_c132_protocol_id_wd;
  logic message_header_c132_protocol_id_we;
  logic [9:0] message_header_c132_token_qs;
  logic [9:0] message_header_c132_token_wd;
  logic message_header_c132_token_we;
  logic [3:0] message_header_c132_field1_qs;
  logic [3:0] message_header_c132_field1_wd;
  logic message_header_c132_field1_we;
  logic [31:0] message_payload_1_c132_qs;
  logic [31:0] message_payload_1_c132_wd;
  logic message_payload_1_c132_we;
  logic doorbell_c132_intr_qs;
  logic doorbell_c132_intr_wd;
  logic doorbell_c132_intr_we;
  logic [30:0] doorbell_c132_preserve_mask_qs;
  logic [30:0] doorbell_c132_preserve_mask_wd;
  logic doorbell_c132_preserve_mask_we;
  logic completion_interrupt_c132_intr_qs;
  logic completion_interrupt_c132_intr_wd;
  logic completion_interrupt_c132_intr_we;
  logic [30:0] completion_interrupt_c132_preserve_mask_qs;
  logic [30:0] completion_interrupt_c132_preserve_mask_wd;
  logic completion_interrupt_c132_preserve_mask_we;
  logic [31:0] reserved_1_c133_qs;
  logic [31:0] reserved_1_c133_wd;
  logic reserved_1_c133_we;
  logic channel_status_c133_channel_free_qs;
  logic channel_status_c133_channel_free_wd;
  logic channel_status_c133_channel_free_we;
  logic channel_status_c133_channel_error_qs;
  logic channel_status_c133_channel_error_wd;
  logic channel_status_c133_channel_error_we;
  logic [29:0] channel_status_c133_field1_qs;
  logic [29:0] channel_status_c133_field1_wd;
  logic channel_status_c133_field1_we;
  logic [31:0] reserved_2_c133_qs;
  logic [31:0] reserved_2_c133_wd;
  logic reserved_2_c133_we;
  logic channel_flags_c133_intr_enable_qs;
  logic channel_flags_c133_intr_enable_wd;
  logic channel_flags_c133_intr_enable_we;
  logic [30:0] channel_flags_c133_field1_qs;
  logic [30:0] channel_flags_c133_field1_wd;
  logic channel_flags_c133_field1_we;
  logic [31:0] length_c133_qs;
  logic [31:0] length_c133_wd;
  logic length_c133_we;
  logic [7:0] message_header_c133_message_id_qs;
  logic [7:0] message_header_c133_message_id_wd;
  logic message_header_c133_message_id_we;
  logic [1:0] message_header_c133_message_type_qs;
  logic [1:0] message_header_c133_message_type_wd;
  logic message_header_c133_message_type_we;
  logic [7:0] message_header_c133_protocol_id_qs;
  logic [7:0] message_header_c133_protocol_id_wd;
  logic message_header_c133_protocol_id_we;
  logic [9:0] message_header_c133_token_qs;
  logic [9:0] message_header_c133_token_wd;
  logic message_header_c133_token_we;
  logic [3:0] message_header_c133_field1_qs;
  logic [3:0] message_header_c133_field1_wd;
  logic message_header_c133_field1_we;
  logic [31:0] message_payload_1_c133_qs;
  logic [31:0] message_payload_1_c133_wd;
  logic message_payload_1_c133_we;
  logic doorbell_c133_intr_qs;
  logic doorbell_c133_intr_wd;
  logic doorbell_c133_intr_we;
  logic [30:0] doorbell_c133_preserve_mask_qs;
  logic [30:0] doorbell_c133_preserve_mask_wd;
  logic doorbell_c133_preserve_mask_we;
  logic completion_interrupt_c133_intr_qs;
  logic completion_interrupt_c133_intr_wd;
  logic completion_interrupt_c133_intr_we;
  logic [30:0] completion_interrupt_c133_preserve_mask_qs;
  logic [30:0] completion_interrupt_c133_preserve_mask_wd;
  logic completion_interrupt_c133_preserve_mask_we;
  logic [31:0] reserved_1_c134_qs;
  logic [31:0] reserved_1_c134_wd;
  logic reserved_1_c134_we;
  logic channel_status_c134_channel_free_qs;
  logic channel_status_c134_channel_free_wd;
  logic channel_status_c134_channel_free_we;
  logic channel_status_c134_channel_error_qs;
  logic channel_status_c134_channel_error_wd;
  logic channel_status_c134_channel_error_we;
  logic [29:0] channel_status_c134_field1_qs;
  logic [29:0] channel_status_c134_field1_wd;
  logic channel_status_c134_field1_we;
  logic [31:0] reserved_2_c134_qs;
  logic [31:0] reserved_2_c134_wd;
  logic reserved_2_c134_we;
  logic channel_flags_c134_intr_enable_qs;
  logic channel_flags_c134_intr_enable_wd;
  logic channel_flags_c134_intr_enable_we;
  logic [30:0] channel_flags_c134_field1_qs;
  logic [30:0] channel_flags_c134_field1_wd;
  logic channel_flags_c134_field1_we;
  logic [31:0] length_c134_qs;
  logic [31:0] length_c134_wd;
  logic length_c134_we;
  logic [7:0] message_header_c134_message_id_qs;
  logic [7:0] message_header_c134_message_id_wd;
  logic message_header_c134_message_id_we;
  logic [1:0] message_header_c134_message_type_qs;
  logic [1:0] message_header_c134_message_type_wd;
  logic message_header_c134_message_type_we;
  logic [7:0] message_header_c134_protocol_id_qs;
  logic [7:0] message_header_c134_protocol_id_wd;
  logic message_header_c134_protocol_id_we;
  logic [9:0] message_header_c134_token_qs;
  logic [9:0] message_header_c134_token_wd;
  logic message_header_c134_token_we;
  logic [3:0] message_header_c134_field1_qs;
  logic [3:0] message_header_c134_field1_wd;
  logic message_header_c134_field1_we;
  logic [31:0] message_payload_1_c134_qs;
  logic [31:0] message_payload_1_c134_wd;
  logic message_payload_1_c134_we;
  logic doorbell_c134_intr_qs;
  logic doorbell_c134_intr_wd;
  logic doorbell_c134_intr_we;
  logic [30:0] doorbell_c134_preserve_mask_qs;
  logic [30:0] doorbell_c134_preserve_mask_wd;
  logic doorbell_c134_preserve_mask_we;
  logic completion_interrupt_c134_intr_qs;
  logic completion_interrupt_c134_intr_wd;
  logic completion_interrupt_c134_intr_we;
  logic [30:0] completion_interrupt_c134_preserve_mask_qs;
  logic [30:0] completion_interrupt_c134_preserve_mask_wd;
  logic completion_interrupt_c134_preserve_mask_we;
  logic [31:0] reserved_1_c135_qs;
  logic [31:0] reserved_1_c135_wd;
  logic reserved_1_c135_we;
  logic channel_status_c135_channel_free_qs;
  logic channel_status_c135_channel_free_wd;
  logic channel_status_c135_channel_free_we;
  logic channel_status_c135_channel_error_qs;
  logic channel_status_c135_channel_error_wd;
  logic channel_status_c135_channel_error_we;
  logic [29:0] channel_status_c135_field1_qs;
  logic [29:0] channel_status_c135_field1_wd;
  logic channel_status_c135_field1_we;
  logic [31:0] reserved_2_c135_qs;
  logic [31:0] reserved_2_c135_wd;
  logic reserved_2_c135_we;
  logic channel_flags_c135_intr_enable_qs;
  logic channel_flags_c135_intr_enable_wd;
  logic channel_flags_c135_intr_enable_we;
  logic [30:0] channel_flags_c135_field1_qs;
  logic [30:0] channel_flags_c135_field1_wd;
  logic channel_flags_c135_field1_we;
  logic [31:0] length_c135_qs;
  logic [31:0] length_c135_wd;
  logic length_c135_we;
  logic [7:0] message_header_c135_message_id_qs;
  logic [7:0] message_header_c135_message_id_wd;
  logic message_header_c135_message_id_we;
  logic [1:0] message_header_c135_message_type_qs;
  logic [1:0] message_header_c135_message_type_wd;
  logic message_header_c135_message_type_we;
  logic [7:0] message_header_c135_protocol_id_qs;
  logic [7:0] message_header_c135_protocol_id_wd;
  logic message_header_c135_protocol_id_we;
  logic [9:0] message_header_c135_token_qs;
  logic [9:0] message_header_c135_token_wd;
  logic message_header_c135_token_we;
  logic [3:0] message_header_c135_field1_qs;
  logic [3:0] message_header_c135_field1_wd;
  logic message_header_c135_field1_we;
  logic [31:0] message_payload_1_c135_qs;
  logic [31:0] message_payload_1_c135_wd;
  logic message_payload_1_c135_we;
  logic doorbell_c135_intr_qs;
  logic doorbell_c135_intr_wd;
  logic doorbell_c135_intr_we;
  logic [30:0] doorbell_c135_preserve_mask_qs;
  logic [30:0] doorbell_c135_preserve_mask_wd;
  logic doorbell_c135_preserve_mask_we;
  logic completion_interrupt_c135_intr_qs;
  logic completion_interrupt_c135_intr_wd;
  logic completion_interrupt_c135_intr_we;
  logic [30:0] completion_interrupt_c135_preserve_mask_qs;
  logic [30:0] completion_interrupt_c135_preserve_mask_wd;
  logic completion_interrupt_c135_preserve_mask_we;
  logic [31:0] reserved_1_c136_qs;
  logic [31:0] reserved_1_c136_wd;
  logic reserved_1_c136_we;
  logic channel_status_c136_channel_free_qs;
  logic channel_status_c136_channel_free_wd;
  logic channel_status_c136_channel_free_we;
  logic channel_status_c136_channel_error_qs;
  logic channel_status_c136_channel_error_wd;
  logic channel_status_c136_channel_error_we;
  logic [29:0] channel_status_c136_field1_qs;
  logic [29:0] channel_status_c136_field1_wd;
  logic channel_status_c136_field1_we;
  logic [31:0] reserved_2_c136_qs;
  logic [31:0] reserved_2_c136_wd;
  logic reserved_2_c136_we;
  logic channel_flags_c136_intr_enable_qs;
  logic channel_flags_c136_intr_enable_wd;
  logic channel_flags_c136_intr_enable_we;
  logic [30:0] channel_flags_c136_field1_qs;
  logic [30:0] channel_flags_c136_field1_wd;
  logic channel_flags_c136_field1_we;
  logic [31:0] length_c136_qs;
  logic [31:0] length_c136_wd;
  logic length_c136_we;
  logic [7:0] message_header_c136_message_id_qs;
  logic [7:0] message_header_c136_message_id_wd;
  logic message_header_c136_message_id_we;
  logic [1:0] message_header_c136_message_type_qs;
  logic [1:0] message_header_c136_message_type_wd;
  logic message_header_c136_message_type_we;
  logic [7:0] message_header_c136_protocol_id_qs;
  logic [7:0] message_header_c136_protocol_id_wd;
  logic message_header_c136_protocol_id_we;
  logic [9:0] message_header_c136_token_qs;
  logic [9:0] message_header_c136_token_wd;
  logic message_header_c136_token_we;
  logic [3:0] message_header_c136_field1_qs;
  logic [3:0] message_header_c136_field1_wd;
  logic message_header_c136_field1_we;
  logic [31:0] message_payload_1_c136_qs;
  logic [31:0] message_payload_1_c136_wd;
  logic message_payload_1_c136_we;
  logic doorbell_c136_intr_qs;
  logic doorbell_c136_intr_wd;
  logic doorbell_c136_intr_we;
  logic [30:0] doorbell_c136_preserve_mask_qs;
  logic [30:0] doorbell_c136_preserve_mask_wd;
  logic doorbell_c136_preserve_mask_we;
  logic completion_interrupt_c136_intr_qs;
  logic completion_interrupt_c136_intr_wd;
  logic completion_interrupt_c136_intr_we;
  logic [30:0] completion_interrupt_c136_preserve_mask_qs;
  logic [30:0] completion_interrupt_c136_preserve_mask_wd;
  logic completion_interrupt_c136_preserve_mask_we;
  logic [31:0] reserved_1_c137_qs;
  logic [31:0] reserved_1_c137_wd;
  logic reserved_1_c137_we;
  logic channel_status_c137_channel_free_qs;
  logic channel_status_c137_channel_free_wd;
  logic channel_status_c137_channel_free_we;
  logic channel_status_c137_channel_error_qs;
  logic channel_status_c137_channel_error_wd;
  logic channel_status_c137_channel_error_we;
  logic [29:0] channel_status_c137_field1_qs;
  logic [29:0] channel_status_c137_field1_wd;
  logic channel_status_c137_field1_we;
  logic [31:0] reserved_2_c137_qs;
  logic [31:0] reserved_2_c137_wd;
  logic reserved_2_c137_we;
  logic channel_flags_c137_intr_enable_qs;
  logic channel_flags_c137_intr_enable_wd;
  logic channel_flags_c137_intr_enable_we;
  logic [30:0] channel_flags_c137_field1_qs;
  logic [30:0] channel_flags_c137_field1_wd;
  logic channel_flags_c137_field1_we;
  logic [31:0] length_c137_qs;
  logic [31:0] length_c137_wd;
  logic length_c137_we;
  logic [7:0] message_header_c137_message_id_qs;
  logic [7:0] message_header_c137_message_id_wd;
  logic message_header_c137_message_id_we;
  logic [1:0] message_header_c137_message_type_qs;
  logic [1:0] message_header_c137_message_type_wd;
  logic message_header_c137_message_type_we;
  logic [7:0] message_header_c137_protocol_id_qs;
  logic [7:0] message_header_c137_protocol_id_wd;
  logic message_header_c137_protocol_id_we;
  logic [9:0] message_header_c137_token_qs;
  logic [9:0] message_header_c137_token_wd;
  logic message_header_c137_token_we;
  logic [3:0] message_header_c137_field1_qs;
  logic [3:0] message_header_c137_field1_wd;
  logic message_header_c137_field1_we;
  logic [31:0] message_payload_1_c137_qs;
  logic [31:0] message_payload_1_c137_wd;
  logic message_payload_1_c137_we;
  logic doorbell_c137_intr_qs;
  logic doorbell_c137_intr_wd;
  logic doorbell_c137_intr_we;
  logic [30:0] doorbell_c137_preserve_mask_qs;
  logic [30:0] doorbell_c137_preserve_mask_wd;
  logic doorbell_c137_preserve_mask_we;
  logic completion_interrupt_c137_intr_qs;
  logic completion_interrupt_c137_intr_wd;
  logic completion_interrupt_c137_intr_we;
  logic [30:0] completion_interrupt_c137_preserve_mask_qs;
  logic [30:0] completion_interrupt_c137_preserve_mask_wd;
  logic completion_interrupt_c137_preserve_mask_we;
  logic [31:0] reserved_1_c138_qs;
  logic [31:0] reserved_1_c138_wd;
  logic reserved_1_c138_we;
  logic channel_status_c138_channel_free_qs;
  logic channel_status_c138_channel_free_wd;
  logic channel_status_c138_channel_free_we;
  logic channel_status_c138_channel_error_qs;
  logic channel_status_c138_channel_error_wd;
  logic channel_status_c138_channel_error_we;
  logic [29:0] channel_status_c138_field1_qs;
  logic [29:0] channel_status_c138_field1_wd;
  logic channel_status_c138_field1_we;
  logic [31:0] reserved_2_c138_qs;
  logic [31:0] reserved_2_c138_wd;
  logic reserved_2_c138_we;
  logic channel_flags_c138_intr_enable_qs;
  logic channel_flags_c138_intr_enable_wd;
  logic channel_flags_c138_intr_enable_we;
  logic [30:0] channel_flags_c138_field1_qs;
  logic [30:0] channel_flags_c138_field1_wd;
  logic channel_flags_c138_field1_we;
  logic [31:0] length_c138_qs;
  logic [31:0] length_c138_wd;
  logic length_c138_we;
  logic [7:0] message_header_c138_message_id_qs;
  logic [7:0] message_header_c138_message_id_wd;
  logic message_header_c138_message_id_we;
  logic [1:0] message_header_c138_message_type_qs;
  logic [1:0] message_header_c138_message_type_wd;
  logic message_header_c138_message_type_we;
  logic [7:0] message_header_c138_protocol_id_qs;
  logic [7:0] message_header_c138_protocol_id_wd;
  logic message_header_c138_protocol_id_we;
  logic [9:0] message_header_c138_token_qs;
  logic [9:0] message_header_c138_token_wd;
  logic message_header_c138_token_we;
  logic [3:0] message_header_c138_field1_qs;
  logic [3:0] message_header_c138_field1_wd;
  logic message_header_c138_field1_we;
  logic [31:0] message_payload_1_c138_qs;
  logic [31:0] message_payload_1_c138_wd;
  logic message_payload_1_c138_we;
  logic doorbell_c138_intr_qs;
  logic doorbell_c138_intr_wd;
  logic doorbell_c138_intr_we;
  logic [30:0] doorbell_c138_preserve_mask_qs;
  logic [30:0] doorbell_c138_preserve_mask_wd;
  logic doorbell_c138_preserve_mask_we;
  logic completion_interrupt_c138_intr_qs;
  logic completion_interrupt_c138_intr_wd;
  logic completion_interrupt_c138_intr_we;
  logic [30:0] completion_interrupt_c138_preserve_mask_qs;
  logic [30:0] completion_interrupt_c138_preserve_mask_wd;
  logic completion_interrupt_c138_preserve_mask_we;
  logic [31:0] reserved_1_c139_qs;
  logic [31:0] reserved_1_c139_wd;
  logic reserved_1_c139_we;
  logic channel_status_c139_channel_free_qs;
  logic channel_status_c139_channel_free_wd;
  logic channel_status_c139_channel_free_we;
  logic channel_status_c139_channel_error_qs;
  logic channel_status_c139_channel_error_wd;
  logic channel_status_c139_channel_error_we;
  logic [29:0] channel_status_c139_field1_qs;
  logic [29:0] channel_status_c139_field1_wd;
  logic channel_status_c139_field1_we;
  logic [31:0] reserved_2_c139_qs;
  logic [31:0] reserved_2_c139_wd;
  logic reserved_2_c139_we;
  logic channel_flags_c139_intr_enable_qs;
  logic channel_flags_c139_intr_enable_wd;
  logic channel_flags_c139_intr_enable_we;
  logic [30:0] channel_flags_c139_field1_qs;
  logic [30:0] channel_flags_c139_field1_wd;
  logic channel_flags_c139_field1_we;
  logic [31:0] length_c139_qs;
  logic [31:0] length_c139_wd;
  logic length_c139_we;
  logic [7:0] message_header_c139_message_id_qs;
  logic [7:0] message_header_c139_message_id_wd;
  logic message_header_c139_message_id_we;
  logic [1:0] message_header_c139_message_type_qs;
  logic [1:0] message_header_c139_message_type_wd;
  logic message_header_c139_message_type_we;
  logic [7:0] message_header_c139_protocol_id_qs;
  logic [7:0] message_header_c139_protocol_id_wd;
  logic message_header_c139_protocol_id_we;
  logic [9:0] message_header_c139_token_qs;
  logic [9:0] message_header_c139_token_wd;
  logic message_header_c139_token_we;
  logic [3:0] message_header_c139_field1_qs;
  logic [3:0] message_header_c139_field1_wd;
  logic message_header_c139_field1_we;
  logic [31:0] message_payload_1_c139_qs;
  logic [31:0] message_payload_1_c139_wd;
  logic message_payload_1_c139_we;
  logic doorbell_c139_intr_qs;
  logic doorbell_c139_intr_wd;
  logic doorbell_c139_intr_we;
  logic [30:0] doorbell_c139_preserve_mask_qs;
  logic [30:0] doorbell_c139_preserve_mask_wd;
  logic doorbell_c139_preserve_mask_we;
  logic completion_interrupt_c139_intr_qs;
  logic completion_interrupt_c139_intr_wd;
  logic completion_interrupt_c139_intr_we;
  logic [30:0] completion_interrupt_c139_preserve_mask_qs;
  logic [30:0] completion_interrupt_c139_preserve_mask_wd;
  logic completion_interrupt_c139_preserve_mask_we;
  logic [31:0] reserved_1_c140_qs;
  logic [31:0] reserved_1_c140_wd;
  logic reserved_1_c140_we;
  logic channel_status_c140_channel_free_qs;
  logic channel_status_c140_channel_free_wd;
  logic channel_status_c140_channel_free_we;
  logic channel_status_c140_channel_error_qs;
  logic channel_status_c140_channel_error_wd;
  logic channel_status_c140_channel_error_we;
  logic [29:0] channel_status_c140_field1_qs;
  logic [29:0] channel_status_c140_field1_wd;
  logic channel_status_c140_field1_we;
  logic [31:0] reserved_2_c140_qs;
  logic [31:0] reserved_2_c140_wd;
  logic reserved_2_c140_we;
  logic channel_flags_c140_intr_enable_qs;
  logic channel_flags_c140_intr_enable_wd;
  logic channel_flags_c140_intr_enable_we;
  logic [30:0] channel_flags_c140_field1_qs;
  logic [30:0] channel_flags_c140_field1_wd;
  logic channel_flags_c140_field1_we;
  logic [31:0] length_c140_qs;
  logic [31:0] length_c140_wd;
  logic length_c140_we;
  logic [7:0] message_header_c140_message_id_qs;
  logic [7:0] message_header_c140_message_id_wd;
  logic message_header_c140_message_id_we;
  logic [1:0] message_header_c140_message_type_qs;
  logic [1:0] message_header_c140_message_type_wd;
  logic message_header_c140_message_type_we;
  logic [7:0] message_header_c140_protocol_id_qs;
  logic [7:0] message_header_c140_protocol_id_wd;
  logic message_header_c140_protocol_id_we;
  logic [9:0] message_header_c140_token_qs;
  logic [9:0] message_header_c140_token_wd;
  logic message_header_c140_token_we;
  logic [3:0] message_header_c140_field1_qs;
  logic [3:0] message_header_c140_field1_wd;
  logic message_header_c140_field1_we;
  logic [31:0] message_payload_1_c140_qs;
  logic [31:0] message_payload_1_c140_wd;
  logic message_payload_1_c140_we;
  logic doorbell_c140_intr_qs;
  logic doorbell_c140_intr_wd;
  logic doorbell_c140_intr_we;
  logic [30:0] doorbell_c140_preserve_mask_qs;
  logic [30:0] doorbell_c140_preserve_mask_wd;
  logic doorbell_c140_preserve_mask_we;
  logic completion_interrupt_c140_intr_qs;
  logic completion_interrupt_c140_intr_wd;
  logic completion_interrupt_c140_intr_we;
  logic [30:0] completion_interrupt_c140_preserve_mask_qs;
  logic [30:0] completion_interrupt_c140_preserve_mask_wd;
  logic completion_interrupt_c140_preserve_mask_we;
  logic [31:0] reserved_1_c141_qs;
  logic [31:0] reserved_1_c141_wd;
  logic reserved_1_c141_we;
  logic channel_status_c141_channel_free_qs;
  logic channel_status_c141_channel_free_wd;
  logic channel_status_c141_channel_free_we;
  logic channel_status_c141_channel_error_qs;
  logic channel_status_c141_channel_error_wd;
  logic channel_status_c141_channel_error_we;
  logic [29:0] channel_status_c141_field1_qs;
  logic [29:0] channel_status_c141_field1_wd;
  logic channel_status_c141_field1_we;
  logic [31:0] reserved_2_c141_qs;
  logic [31:0] reserved_2_c141_wd;
  logic reserved_2_c141_we;
  logic channel_flags_c141_intr_enable_qs;
  logic channel_flags_c141_intr_enable_wd;
  logic channel_flags_c141_intr_enable_we;
  logic [30:0] channel_flags_c141_field1_qs;
  logic [30:0] channel_flags_c141_field1_wd;
  logic channel_flags_c141_field1_we;
  logic [31:0] length_c141_qs;
  logic [31:0] length_c141_wd;
  logic length_c141_we;
  logic [7:0] message_header_c141_message_id_qs;
  logic [7:0] message_header_c141_message_id_wd;
  logic message_header_c141_message_id_we;
  logic [1:0] message_header_c141_message_type_qs;
  logic [1:0] message_header_c141_message_type_wd;
  logic message_header_c141_message_type_we;
  logic [7:0] message_header_c141_protocol_id_qs;
  logic [7:0] message_header_c141_protocol_id_wd;
  logic message_header_c141_protocol_id_we;
  logic [9:0] message_header_c141_token_qs;
  logic [9:0] message_header_c141_token_wd;
  logic message_header_c141_token_we;
  logic [3:0] message_header_c141_field1_qs;
  logic [3:0] message_header_c141_field1_wd;
  logic message_header_c141_field1_we;
  logic [31:0] message_payload_1_c141_qs;
  logic [31:0] message_payload_1_c141_wd;
  logic message_payload_1_c141_we;
  logic doorbell_c141_intr_qs;
  logic doorbell_c141_intr_wd;
  logic doorbell_c141_intr_we;
  logic [30:0] doorbell_c141_preserve_mask_qs;
  logic [30:0] doorbell_c141_preserve_mask_wd;
  logic doorbell_c141_preserve_mask_we;
  logic completion_interrupt_c141_intr_qs;
  logic completion_interrupt_c141_intr_wd;
  logic completion_interrupt_c141_intr_we;
  logic [30:0] completion_interrupt_c141_preserve_mask_qs;
  logic [30:0] completion_interrupt_c141_preserve_mask_wd;
  logic completion_interrupt_c141_preserve_mask_we;
  logic [31:0] reserved_1_c142_qs;
  logic [31:0] reserved_1_c142_wd;
  logic reserved_1_c142_we;
  logic channel_status_c142_channel_free_qs;
  logic channel_status_c142_channel_free_wd;
  logic channel_status_c142_channel_free_we;
  logic channel_status_c142_channel_error_qs;
  logic channel_status_c142_channel_error_wd;
  logic channel_status_c142_channel_error_we;
  logic [29:0] channel_status_c142_field1_qs;
  logic [29:0] channel_status_c142_field1_wd;
  logic channel_status_c142_field1_we;
  logic [31:0] reserved_2_c142_qs;
  logic [31:0] reserved_2_c142_wd;
  logic reserved_2_c142_we;
  logic channel_flags_c142_intr_enable_qs;
  logic channel_flags_c142_intr_enable_wd;
  logic channel_flags_c142_intr_enable_we;
  logic [30:0] channel_flags_c142_field1_qs;
  logic [30:0] channel_flags_c142_field1_wd;
  logic channel_flags_c142_field1_we;
  logic [31:0] length_c142_qs;
  logic [31:0] length_c142_wd;
  logic length_c142_we;
  logic [7:0] message_header_c142_message_id_qs;
  logic [7:0] message_header_c142_message_id_wd;
  logic message_header_c142_message_id_we;
  logic [1:0] message_header_c142_message_type_qs;
  logic [1:0] message_header_c142_message_type_wd;
  logic message_header_c142_message_type_we;
  logic [7:0] message_header_c142_protocol_id_qs;
  logic [7:0] message_header_c142_protocol_id_wd;
  logic message_header_c142_protocol_id_we;
  logic [9:0] message_header_c142_token_qs;
  logic [9:0] message_header_c142_token_wd;
  logic message_header_c142_token_we;
  logic [3:0] message_header_c142_field1_qs;
  logic [3:0] message_header_c142_field1_wd;
  logic message_header_c142_field1_we;
  logic [31:0] message_payload_1_c142_qs;
  logic [31:0] message_payload_1_c142_wd;
  logic message_payload_1_c142_we;
  logic doorbell_c142_intr_qs;
  logic doorbell_c142_intr_wd;
  logic doorbell_c142_intr_we;
  logic [30:0] doorbell_c142_preserve_mask_qs;
  logic [30:0] doorbell_c142_preserve_mask_wd;
  logic doorbell_c142_preserve_mask_we;
  logic completion_interrupt_c142_intr_qs;
  logic completion_interrupt_c142_intr_wd;
  logic completion_interrupt_c142_intr_we;
  logic [30:0] completion_interrupt_c142_preserve_mask_qs;
  logic [30:0] completion_interrupt_c142_preserve_mask_wd;
  logic completion_interrupt_c142_preserve_mask_we;
  logic [31:0] reserved_1_c143_qs;
  logic [31:0] reserved_1_c143_wd;
  logic reserved_1_c143_we;
  logic channel_status_c143_channel_free_qs;
  logic channel_status_c143_channel_free_wd;
  logic channel_status_c143_channel_free_we;
  logic channel_status_c143_channel_error_qs;
  logic channel_status_c143_channel_error_wd;
  logic channel_status_c143_channel_error_we;
  logic [29:0] channel_status_c143_field1_qs;
  logic [29:0] channel_status_c143_field1_wd;
  logic channel_status_c143_field1_we;
  logic [31:0] reserved_2_c143_qs;
  logic [31:0] reserved_2_c143_wd;
  logic reserved_2_c143_we;
  logic channel_flags_c143_intr_enable_qs;
  logic channel_flags_c143_intr_enable_wd;
  logic channel_flags_c143_intr_enable_we;
  logic [30:0] channel_flags_c143_field1_qs;
  logic [30:0] channel_flags_c143_field1_wd;
  logic channel_flags_c143_field1_we;
  logic [31:0] length_c143_qs;
  logic [31:0] length_c143_wd;
  logic length_c143_we;
  logic [7:0] message_header_c143_message_id_qs;
  logic [7:0] message_header_c143_message_id_wd;
  logic message_header_c143_message_id_we;
  logic [1:0] message_header_c143_message_type_qs;
  logic [1:0] message_header_c143_message_type_wd;
  logic message_header_c143_message_type_we;
  logic [7:0] message_header_c143_protocol_id_qs;
  logic [7:0] message_header_c143_protocol_id_wd;
  logic message_header_c143_protocol_id_we;
  logic [9:0] message_header_c143_token_qs;
  logic [9:0] message_header_c143_token_wd;
  logic message_header_c143_token_we;
  logic [3:0] message_header_c143_field1_qs;
  logic [3:0] message_header_c143_field1_wd;
  logic message_header_c143_field1_we;
  logic [31:0] message_payload_1_c143_qs;
  logic [31:0] message_payload_1_c143_wd;
  logic message_payload_1_c143_we;
  logic doorbell_c143_intr_qs;
  logic doorbell_c143_intr_wd;
  logic doorbell_c143_intr_we;
  logic [30:0] doorbell_c143_preserve_mask_qs;
  logic [30:0] doorbell_c143_preserve_mask_wd;
  logic doorbell_c143_preserve_mask_we;
  logic completion_interrupt_c143_intr_qs;
  logic completion_interrupt_c143_intr_wd;
  logic completion_interrupt_c143_intr_we;
  logic [30:0] completion_interrupt_c143_preserve_mask_qs;
  logic [30:0] completion_interrupt_c143_preserve_mask_wd;
  logic completion_interrupt_c143_preserve_mask_we;
  logic [31:0] reserved_1_c144_qs;
  logic [31:0] reserved_1_c144_wd;
  logic reserved_1_c144_we;
  logic channel_status_c144_channel_free_qs;
  logic channel_status_c144_channel_free_wd;
  logic channel_status_c144_channel_free_we;
  logic channel_status_c144_channel_error_qs;
  logic channel_status_c144_channel_error_wd;
  logic channel_status_c144_channel_error_we;
  logic [29:0] channel_status_c144_field1_qs;
  logic [29:0] channel_status_c144_field1_wd;
  logic channel_status_c144_field1_we;
  logic [31:0] reserved_2_c144_qs;
  logic [31:0] reserved_2_c144_wd;
  logic reserved_2_c144_we;
  logic channel_flags_c144_intr_enable_qs;
  logic channel_flags_c144_intr_enable_wd;
  logic channel_flags_c144_intr_enable_we;
  logic [30:0] channel_flags_c144_field1_qs;
  logic [30:0] channel_flags_c144_field1_wd;
  logic channel_flags_c144_field1_we;
  logic [31:0] length_c144_qs;
  logic [31:0] length_c144_wd;
  logic length_c144_we;
  logic [7:0] message_header_c144_message_id_qs;
  logic [7:0] message_header_c144_message_id_wd;
  logic message_header_c144_message_id_we;
  logic [1:0] message_header_c144_message_type_qs;
  logic [1:0] message_header_c144_message_type_wd;
  logic message_header_c144_message_type_we;
  logic [7:0] message_header_c144_protocol_id_qs;
  logic [7:0] message_header_c144_protocol_id_wd;
  logic message_header_c144_protocol_id_we;
  logic [9:0] message_header_c144_token_qs;
  logic [9:0] message_header_c144_token_wd;
  logic message_header_c144_token_we;
  logic [3:0] message_header_c144_field1_qs;
  logic [3:0] message_header_c144_field1_wd;
  logic message_header_c144_field1_we;
  logic [31:0] message_payload_1_c144_qs;
  logic [31:0] message_payload_1_c144_wd;
  logic message_payload_1_c144_we;
  logic doorbell_c144_intr_qs;
  logic doorbell_c144_intr_wd;
  logic doorbell_c144_intr_we;
  logic [30:0] doorbell_c144_preserve_mask_qs;
  logic [30:0] doorbell_c144_preserve_mask_wd;
  logic doorbell_c144_preserve_mask_we;
  logic completion_interrupt_c144_intr_qs;
  logic completion_interrupt_c144_intr_wd;
  logic completion_interrupt_c144_intr_we;
  logic [30:0] completion_interrupt_c144_preserve_mask_qs;
  logic [30:0] completion_interrupt_c144_preserve_mask_wd;
  logic completion_interrupt_c144_preserve_mask_we;
  logic [31:0] reserved_1_c145_qs;
  logic [31:0] reserved_1_c145_wd;
  logic reserved_1_c145_we;
  logic channel_status_c145_channel_free_qs;
  logic channel_status_c145_channel_free_wd;
  logic channel_status_c145_channel_free_we;
  logic channel_status_c145_channel_error_qs;
  logic channel_status_c145_channel_error_wd;
  logic channel_status_c145_channel_error_we;
  logic [29:0] channel_status_c145_field1_qs;
  logic [29:0] channel_status_c145_field1_wd;
  logic channel_status_c145_field1_we;
  logic [31:0] reserved_2_c145_qs;
  logic [31:0] reserved_2_c145_wd;
  logic reserved_2_c145_we;
  logic channel_flags_c145_intr_enable_qs;
  logic channel_flags_c145_intr_enable_wd;
  logic channel_flags_c145_intr_enable_we;
  logic [30:0] channel_flags_c145_field1_qs;
  logic [30:0] channel_flags_c145_field1_wd;
  logic channel_flags_c145_field1_we;
  logic [31:0] length_c145_qs;
  logic [31:0] length_c145_wd;
  logic length_c145_we;
  logic [7:0] message_header_c145_message_id_qs;
  logic [7:0] message_header_c145_message_id_wd;
  logic message_header_c145_message_id_we;
  logic [1:0] message_header_c145_message_type_qs;
  logic [1:0] message_header_c145_message_type_wd;
  logic message_header_c145_message_type_we;
  logic [7:0] message_header_c145_protocol_id_qs;
  logic [7:0] message_header_c145_protocol_id_wd;
  logic message_header_c145_protocol_id_we;
  logic [9:0] message_header_c145_token_qs;
  logic [9:0] message_header_c145_token_wd;
  logic message_header_c145_token_we;
  logic [3:0] message_header_c145_field1_qs;
  logic [3:0] message_header_c145_field1_wd;
  logic message_header_c145_field1_we;
  logic [31:0] message_payload_1_c145_qs;
  logic [31:0] message_payload_1_c145_wd;
  logic message_payload_1_c145_we;
  logic doorbell_c145_intr_qs;
  logic doorbell_c145_intr_wd;
  logic doorbell_c145_intr_we;
  logic [30:0] doorbell_c145_preserve_mask_qs;
  logic [30:0] doorbell_c145_preserve_mask_wd;
  logic doorbell_c145_preserve_mask_we;
  logic completion_interrupt_c145_intr_qs;
  logic completion_interrupt_c145_intr_wd;
  logic completion_interrupt_c145_intr_we;
  logic [30:0] completion_interrupt_c145_preserve_mask_qs;
  logic [30:0] completion_interrupt_c145_preserve_mask_wd;
  logic completion_interrupt_c145_preserve_mask_we;
  logic [31:0] reserved_1_c146_qs;
  logic [31:0] reserved_1_c146_wd;
  logic reserved_1_c146_we;
  logic channel_status_c146_channel_free_qs;
  logic channel_status_c146_channel_free_wd;
  logic channel_status_c146_channel_free_we;
  logic channel_status_c146_channel_error_qs;
  logic channel_status_c146_channel_error_wd;
  logic channel_status_c146_channel_error_we;
  logic [29:0] channel_status_c146_field1_qs;
  logic [29:0] channel_status_c146_field1_wd;
  logic channel_status_c146_field1_we;
  logic [31:0] reserved_2_c146_qs;
  logic [31:0] reserved_2_c146_wd;
  logic reserved_2_c146_we;
  logic channel_flags_c146_intr_enable_qs;
  logic channel_flags_c146_intr_enable_wd;
  logic channel_flags_c146_intr_enable_we;
  logic [30:0] channel_flags_c146_field1_qs;
  logic [30:0] channel_flags_c146_field1_wd;
  logic channel_flags_c146_field1_we;
  logic [31:0] length_c146_qs;
  logic [31:0] length_c146_wd;
  logic length_c146_we;
  logic [7:0] message_header_c146_message_id_qs;
  logic [7:0] message_header_c146_message_id_wd;
  logic message_header_c146_message_id_we;
  logic [1:0] message_header_c146_message_type_qs;
  logic [1:0] message_header_c146_message_type_wd;
  logic message_header_c146_message_type_we;
  logic [7:0] message_header_c146_protocol_id_qs;
  logic [7:0] message_header_c146_protocol_id_wd;
  logic message_header_c146_protocol_id_we;
  logic [9:0] message_header_c146_token_qs;
  logic [9:0] message_header_c146_token_wd;
  logic message_header_c146_token_we;
  logic [3:0] message_header_c146_field1_qs;
  logic [3:0] message_header_c146_field1_wd;
  logic message_header_c146_field1_we;
  logic [31:0] message_payload_1_c146_qs;
  logic [31:0] message_payload_1_c146_wd;
  logic message_payload_1_c146_we;
  logic doorbell_c146_intr_qs;
  logic doorbell_c146_intr_wd;
  logic doorbell_c146_intr_we;
  logic [30:0] doorbell_c146_preserve_mask_qs;
  logic [30:0] doorbell_c146_preserve_mask_wd;
  logic doorbell_c146_preserve_mask_we;
  logic completion_interrupt_c146_intr_qs;
  logic completion_interrupt_c146_intr_wd;
  logic completion_interrupt_c146_intr_we;
  logic [30:0] completion_interrupt_c146_preserve_mask_qs;
  logic [30:0] completion_interrupt_c146_preserve_mask_wd;
  logic completion_interrupt_c146_preserve_mask_we;

  // Register instances
  // R[reserved_1_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c0_we),
    .wd     (reserved_1_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c0_qs)
  );


  // R[channel_status_c0]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c0_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c0_channel_free_we),
    .wd     (channel_status_c0_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c0_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c0_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c0_channel_error_we),
    .wd     (channel_status_c0_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c0_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c0_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c0_field1_we),
    .wd     (channel_status_c0_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c0_field1_qs)
  );


  // R[reserved_2_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c0_we),
    .wd     (reserved_2_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c0_qs)
  );


  // R[reserved_3_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c0]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c0_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c0_intr_enable_we),
    .wd     (channel_flags_c0_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c0_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c0_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c0_field1_we),
    .wd     (channel_flags_c0_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c0_field1_qs)
  );


  // R[length_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c0_we),
    .wd     (length_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c0_qs)
  );


  // R[message_header_c0]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c0_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c0_message_id_we),
    .wd     (message_header_c0_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c0_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c0_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c0_message_type_we),
    .wd     (message_header_c0_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c0_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c0_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c0_protocol_id_we),
    .wd     (message_header_c0_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c0_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c0_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c0_token_we),
    .wd     (message_header_c0_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c0_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c0_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c0_field1_we),
    .wd     (message_header_c0_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c0_field1_qs)
  );


  // R[message_payload_1_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c0_we),
    .wd     (message_payload_1_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c0_qs)
  );


  // R[doorbell_c0]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c0_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c0_intr_we),
    .wd     (doorbell_c0_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c0.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c0_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c0_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c0_preserve_mask_we),
    .wd     (doorbell_c0_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c0.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c0_preserve_mask_qs)
  );


  // R[completion_interrupt_c0]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c0_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c0_intr_we),
    .wd     (completion_interrupt_c0_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c0.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c0_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c0_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c0_preserve_mask_we),
    .wd     (completion_interrupt_c0_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c0.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c0_preserve_mask_qs)
  );


  // R[reserved_1_c1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c1_we),
    .wd     (reserved_1_c1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c1_qs)
  );


  // R[channel_status_c1]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c1_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c1_channel_free_we),
    .wd     (channel_status_c1_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c1_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c1_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c1_channel_error_we),
    .wd     (channel_status_c1_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c1_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c1_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c1_field1_we),
    .wd     (channel_status_c1_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c1_field1_qs)
  );


  // R[reserved_2_c1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c1_we),
    .wd     (reserved_2_c1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c1_qs)
  );


  // R[reserved_3_c1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c1]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c1_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c1_intr_enable_we),
    .wd     (channel_flags_c1_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c1_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c1_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c1_field1_we),
    .wd     (channel_flags_c1_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c1_field1_qs)
  );


  // R[length_c1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c1_we),
    .wd     (length_c1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c1_qs)
  );


  // R[message_header_c1]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c1_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c1_message_id_we),
    .wd     (message_header_c1_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c1_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c1_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c1_message_type_we),
    .wd     (message_header_c1_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c1_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c1_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c1_protocol_id_we),
    .wd     (message_header_c1_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c1_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c1_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c1_token_we),
    .wd     (message_header_c1_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c1_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c1_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c1_field1_we),
    .wd     (message_header_c1_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c1_field1_qs)
  );


  // R[message_payload_1_c1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c1_we),
    .wd     (message_payload_1_c1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c1_qs)
  );


  // R[doorbell_c1]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c1_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c1_intr_we),
    .wd     (doorbell_c1_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c1.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c1_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c1_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c1_preserve_mask_we),
    .wd     (doorbell_c1_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c1.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c1_preserve_mask_qs)
  );


  // R[completion_interrupt_c1]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c1_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c1_intr_we),
    .wd     (completion_interrupt_c1_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c1.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c1_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c1_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c1_preserve_mask_we),
    .wd     (completion_interrupt_c1_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c1.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c1_preserve_mask_qs)
  );


  // R[reserved_1_c2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c2_we),
    .wd     (reserved_1_c2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c2_qs)
  );


  // R[channel_status_c2]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c2_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c2_channel_free_we),
    .wd     (channel_status_c2_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c2_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c2_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c2_channel_error_we),
    .wd     (channel_status_c2_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c2_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c2_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c2_field1_we),
    .wd     (channel_status_c2_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c2_field1_qs)
  );


  // R[reserved_2_c2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c2_we),
    .wd     (reserved_2_c2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c2_qs)
  );


  // R[reserved_3_c2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c2]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c2_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c2_intr_enable_we),
    .wd     (channel_flags_c2_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c2_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c2_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c2_field1_we),
    .wd     (channel_flags_c2_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c2_field1_qs)
  );


  // R[length_c2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c2_we),
    .wd     (length_c2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c2_qs)
  );


  // R[message_header_c2]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c2_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c2_message_id_we),
    .wd     (message_header_c2_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c2_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c2_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c2_message_type_we),
    .wd     (message_header_c2_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c2_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c2_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c2_protocol_id_we),
    .wd     (message_header_c2_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c2_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c2_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c2_token_we),
    .wd     (message_header_c2_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c2_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c2_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c2_field1_we),
    .wd     (message_header_c2_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c2_field1_qs)
  );


  // R[message_payload_1_c2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c2_we),
    .wd     (message_payload_1_c2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c2_qs)
  );


  // R[doorbell_c2]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c2_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c2_intr_we),
    .wd     (doorbell_c2_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c2.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c2_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c2_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c2_preserve_mask_we),
    .wd     (doorbell_c2_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c2.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c2_preserve_mask_qs)
  );


  // R[completion_interrupt_c2]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c2_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c2_intr_we),
    .wd     (completion_interrupt_c2_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c2.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c2_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c2_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c2_preserve_mask_we),
    .wd     (completion_interrupt_c2_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c2.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c2_preserve_mask_qs)
  );


  // R[reserved_1_c3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c3_we),
    .wd     (reserved_1_c3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c3_qs)
  );


  // R[channel_status_c3]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c3_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c3_channel_free_we),
    .wd     (channel_status_c3_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c3_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c3_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c3_channel_error_we),
    .wd     (channel_status_c3_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c3_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c3_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c3_field1_we),
    .wd     (channel_status_c3_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c3_field1_qs)
  );


  // R[reserved_2_c3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c3_we),
    .wd     (reserved_2_c3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c3_qs)
  );


  // R[reserved_3_c3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c3]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c3_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c3_intr_enable_we),
    .wd     (channel_flags_c3_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c3_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c3_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c3_field1_we),
    .wd     (channel_flags_c3_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c3_field1_qs)
  );


  // R[length_c3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c3_we),
    .wd     (length_c3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c3_qs)
  );


  // R[message_header_c3]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c3_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c3_message_id_we),
    .wd     (message_header_c3_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c3_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c3_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c3_message_type_we),
    .wd     (message_header_c3_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c3_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c3_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c3_protocol_id_we),
    .wd     (message_header_c3_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c3_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c3_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c3_token_we),
    .wd     (message_header_c3_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c3_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c3_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c3_field1_we),
    .wd     (message_header_c3_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c3_field1_qs)
  );


  // R[message_payload_1_c3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c3_we),
    .wd     (message_payload_1_c3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c3_qs)
  );


  // R[doorbell_c3]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c3_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c3_intr_we),
    .wd     (doorbell_c3_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c3.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c3_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c3_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c3_preserve_mask_we),
    .wd     (doorbell_c3_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c3.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c3_preserve_mask_qs)
  );


  // R[completion_interrupt_c3]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c3_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c3_intr_we),
    .wd     (completion_interrupt_c3_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c3.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c3_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c3_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c3_preserve_mask_we),
    .wd     (completion_interrupt_c3_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c3.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c3_preserve_mask_qs)
  );


  // R[reserved_1_c4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c4_we),
    .wd     (reserved_1_c4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c4_qs)
  );


  // R[channel_status_c4]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c4_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c4_channel_free_we),
    .wd     (channel_status_c4_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c4_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c4_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c4_channel_error_we),
    .wd     (channel_status_c4_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c4_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c4_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c4_field1_we),
    .wd     (channel_status_c4_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c4_field1_qs)
  );


  // R[reserved_2_c4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c4_we),
    .wd     (reserved_2_c4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c4_qs)
  );


  // R[reserved_3_c4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c4]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c4_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c4_intr_enable_we),
    .wd     (channel_flags_c4_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c4_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c4_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c4_field1_we),
    .wd     (channel_flags_c4_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c4_field1_qs)
  );


  // R[length_c4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c4_we),
    .wd     (length_c4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c4_qs)
  );


  // R[message_header_c4]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c4_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c4_message_id_we),
    .wd     (message_header_c4_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c4_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c4_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c4_message_type_we),
    .wd     (message_header_c4_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c4_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c4_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c4_protocol_id_we),
    .wd     (message_header_c4_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c4_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c4_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c4_token_we),
    .wd     (message_header_c4_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c4_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c4_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c4_field1_we),
    .wd     (message_header_c4_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c4_field1_qs)
  );


  // R[message_payload_1_c4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c4_we),
    .wd     (message_payload_1_c4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c4_qs)
  );


  // R[doorbell_c4]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c4_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c4_intr_we),
    .wd     (doorbell_c4_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c4.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c4_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c4_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c4_preserve_mask_we),
    .wd     (doorbell_c4_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c4.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c4_preserve_mask_qs)
  );


  // R[completion_interrupt_c4]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c4_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c4_intr_we),
    .wd     (completion_interrupt_c4_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c4.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c4_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c4_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c4_preserve_mask_we),
    .wd     (completion_interrupt_c4_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c4.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c4_preserve_mask_qs)
  );


  // R[reserved_1_c5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c5_we),
    .wd     (reserved_1_c5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c5_qs)
  );


  // R[channel_status_c5]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c5_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c5_channel_free_we),
    .wd     (channel_status_c5_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c5_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c5_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c5_channel_error_we),
    .wd     (channel_status_c5_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c5_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c5_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c5_field1_we),
    .wd     (channel_status_c5_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c5_field1_qs)
  );


  // R[reserved_2_c5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c5_we),
    .wd     (reserved_2_c5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c5_qs)
  );


  // R[reserved_3_c5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c5]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c5_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c5_intr_enable_we),
    .wd     (channel_flags_c5_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c5_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c5_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c5_field1_we),
    .wd     (channel_flags_c5_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c5_field1_qs)
  );


  // R[length_c5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c5_we),
    .wd     (length_c5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c5_qs)
  );


  // R[message_header_c5]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c5_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c5_message_id_we),
    .wd     (message_header_c5_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c5_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c5_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c5_message_type_we),
    .wd     (message_header_c5_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c5_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c5_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c5_protocol_id_we),
    .wd     (message_header_c5_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c5_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c5_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c5_token_we),
    .wd     (message_header_c5_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c5_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c5_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c5_field1_we),
    .wd     (message_header_c5_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c5_field1_qs)
  );


  // R[message_payload_1_c5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c5_we),
    .wd     (message_payload_1_c5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c5_qs)
  );


  // R[doorbell_c5]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c5_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c5_intr_we),
    .wd     (doorbell_c5_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c5.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c5_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c5_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c5_preserve_mask_we),
    .wd     (doorbell_c5_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c5.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c5_preserve_mask_qs)
  );


  // R[completion_interrupt_c5]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c5_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c5_intr_we),
    .wd     (completion_interrupt_c5_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c5.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c5_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c5_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c5_preserve_mask_we),
    .wd     (completion_interrupt_c5_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c5.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c5_preserve_mask_qs)
  );


  // R[reserved_1_c6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c6_we),
    .wd     (reserved_1_c6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c6_qs)
  );


  // R[channel_status_c6]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c6_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c6_channel_free_we),
    .wd     (channel_status_c6_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c6_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c6_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c6_channel_error_we),
    .wd     (channel_status_c6_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c6_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c6_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c6_field1_we),
    .wd     (channel_status_c6_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c6_field1_qs)
  );


  // R[reserved_2_c6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c6_we),
    .wd     (reserved_2_c6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c6_qs)
  );


  // R[reserved_3_c6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c6]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c6_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c6_intr_enable_we),
    .wd     (channel_flags_c6_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c6_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c6_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c6_field1_we),
    .wd     (channel_flags_c6_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c6_field1_qs)
  );


  // R[length_c6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c6_we),
    .wd     (length_c6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c6_qs)
  );


  // R[message_header_c6]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c6_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c6_message_id_we),
    .wd     (message_header_c6_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c6_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c6_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c6_message_type_we),
    .wd     (message_header_c6_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c6_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c6_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c6_protocol_id_we),
    .wd     (message_header_c6_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c6_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c6_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c6_token_we),
    .wd     (message_header_c6_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c6_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c6_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c6_field1_we),
    .wd     (message_header_c6_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c6_field1_qs)
  );


  // R[message_payload_1_c6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c6_we),
    .wd     (message_payload_1_c6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c6_qs)
  );


  // R[doorbell_c6]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c6_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c6_intr_we),
    .wd     (doorbell_c6_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c6.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c6_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c6_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c6_preserve_mask_we),
    .wd     (doorbell_c6_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c6.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c6_preserve_mask_qs)
  );


  // R[completion_interrupt_c6]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c6_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c6_intr_we),
    .wd     (completion_interrupt_c6_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c6.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c6_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c6_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c6_preserve_mask_we),
    .wd     (completion_interrupt_c6_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c6.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c6_preserve_mask_qs)
  );


  // R[reserved_1_c7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c7_we),
    .wd     (reserved_1_c7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c7_qs)
  );


  // R[channel_status_c7]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c7_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c7_channel_free_we),
    .wd     (channel_status_c7_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c7_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c7_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c7_channel_error_we),
    .wd     (channel_status_c7_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c7_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c7_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c7_field1_we),
    .wd     (channel_status_c7_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c7_field1_qs)
  );


  // R[reserved_2_c7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c7_we),
    .wd     (reserved_2_c7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c7_qs)
  );


  // R[reserved_3_c7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c7]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c7_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c7_intr_enable_we),
    .wd     (channel_flags_c7_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c7_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c7_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c7_field1_we),
    .wd     (channel_flags_c7_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c7_field1_qs)
  );


  // R[length_c7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c7_we),
    .wd     (length_c7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c7_qs)
  );


  // R[message_header_c7]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c7_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c7_message_id_we),
    .wd     (message_header_c7_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c7_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c7_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c7_message_type_we),
    .wd     (message_header_c7_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c7_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c7_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c7_protocol_id_we),
    .wd     (message_header_c7_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c7_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c7_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c7_token_we),
    .wd     (message_header_c7_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c7_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c7_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c7_field1_we),
    .wd     (message_header_c7_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c7_field1_qs)
  );


  // R[message_payload_1_c7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c7_we),
    .wd     (message_payload_1_c7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c7_qs)
  );


  // R[doorbell_c7]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c7_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c7_intr_we),
    .wd     (doorbell_c7_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c7.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c7_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c7_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c7_preserve_mask_we),
    .wd     (doorbell_c7_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c7.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c7_preserve_mask_qs)
  );


  // R[completion_interrupt_c7]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c7_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c7_intr_we),
    .wd     (completion_interrupt_c7_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c7.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c7_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c7_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c7_preserve_mask_we),
    .wd     (completion_interrupt_c7_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c7.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c7_preserve_mask_qs)
  );


  // R[reserved_1_c8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c8_we),
    .wd     (reserved_1_c8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c8_qs)
  );


  // R[channel_status_c8]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c8_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c8_channel_free_we),
    .wd     (channel_status_c8_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c8_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c8_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c8_channel_error_we),
    .wd     (channel_status_c8_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c8_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c8_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c8_field1_we),
    .wd     (channel_status_c8_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c8_field1_qs)
  );


  // R[reserved_2_c8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c8_we),
    .wd     (reserved_2_c8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c8_qs)
  );


  // R[reserved_3_c8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c8]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c8_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c8_intr_enable_we),
    .wd     (channel_flags_c8_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c8_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c8_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c8_field1_we),
    .wd     (channel_flags_c8_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c8_field1_qs)
  );


  // R[length_c8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c8_we),
    .wd     (length_c8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c8_qs)
  );


  // R[message_header_c8]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c8_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c8_message_id_we),
    .wd     (message_header_c8_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c8_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c8_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c8_message_type_we),
    .wd     (message_header_c8_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c8_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c8_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c8_protocol_id_we),
    .wd     (message_header_c8_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c8_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c8_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c8_token_we),
    .wd     (message_header_c8_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c8_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c8_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c8_field1_we),
    .wd     (message_header_c8_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c8_field1_qs)
  );


  // R[message_payload_1_c8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c8_we),
    .wd     (message_payload_1_c8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c8_qs)
  );


  // R[doorbell_c8]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c8_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c8_intr_we),
    .wd     (doorbell_c8_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c8.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c8_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c8_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c8_preserve_mask_we),
    .wd     (doorbell_c8_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c8.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c8_preserve_mask_qs)
  );


  // R[completion_interrupt_c8]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c8_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c8_intr_we),
    .wd     (completion_interrupt_c8_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c8.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c8_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c8_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c8_preserve_mask_we),
    .wd     (completion_interrupt_c8_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c8.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c8_preserve_mask_qs)
  );


  // R[reserved_1_c9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c9_we),
    .wd     (reserved_1_c9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c9_qs)
  );


  // R[channel_status_c9]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c9_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c9_channel_free_we),
    .wd     (channel_status_c9_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c9_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c9_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c9_channel_error_we),
    .wd     (channel_status_c9_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c9_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c9_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c9_field1_we),
    .wd     (channel_status_c9_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c9_field1_qs)
  );


  // R[reserved_2_c9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c9_we),
    .wd     (reserved_2_c9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c9_qs)
  );


  // R[reserved_3_c9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c9]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c9_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c9_intr_enable_we),
    .wd     (channel_flags_c9_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c9_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c9_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c9_field1_we),
    .wd     (channel_flags_c9_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c9_field1_qs)
  );


  // R[length_c9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c9_we),
    .wd     (length_c9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c9_qs)
  );


  // R[message_header_c9]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c9_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c9_message_id_we),
    .wd     (message_header_c9_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c9_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c9_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c9_message_type_we),
    .wd     (message_header_c9_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c9_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c9_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c9_protocol_id_we),
    .wd     (message_header_c9_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c9_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c9_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c9_token_we),
    .wd     (message_header_c9_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c9_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c9_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c9_field1_we),
    .wd     (message_header_c9_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c9_field1_qs)
  );


  // R[message_payload_1_c9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c9_we),
    .wd     (message_payload_1_c9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c9_qs)
  );


  // R[doorbell_c9]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c9_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c9_intr_we),
    .wd     (doorbell_c9_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c9.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c9_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c9_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c9_preserve_mask_we),
    .wd     (doorbell_c9_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c9.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c9_preserve_mask_qs)
  );


  // R[completion_interrupt_c9]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c9_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c9_intr_we),
    .wd     (completion_interrupt_c9_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c9.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c9_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c9_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c9_preserve_mask_we),
    .wd     (completion_interrupt_c9_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c9.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c9_preserve_mask_qs)
  );


  // R[reserved_1_c10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c10_we),
    .wd     (reserved_1_c10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c10_qs)
  );


  // R[channel_status_c10]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c10_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c10_channel_free_we),
    .wd     (channel_status_c10_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c10_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c10_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c10_channel_error_we),
    .wd     (channel_status_c10_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c10_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c10_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c10_field1_we),
    .wd     (channel_status_c10_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c10_field1_qs)
  );


  // R[reserved_2_c10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c10_we),
    .wd     (reserved_2_c10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c10_qs)
  );


  // R[reserved_3_c10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c10]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c10_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c10_intr_enable_we),
    .wd     (channel_flags_c10_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c10_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c10_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c10_field1_we),
    .wd     (channel_flags_c10_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c10_field1_qs)
  );


  // R[length_c10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c10_we),
    .wd     (length_c10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c10_qs)
  );


  // R[message_header_c10]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c10_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c10_message_id_we),
    .wd     (message_header_c10_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c10_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c10_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c10_message_type_we),
    .wd     (message_header_c10_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c10_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c10_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c10_protocol_id_we),
    .wd     (message_header_c10_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c10_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c10_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c10_token_we),
    .wd     (message_header_c10_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c10_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c10_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c10_field1_we),
    .wd     (message_header_c10_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c10_field1_qs)
  );


  // R[message_payload_1_c10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c10_we),
    .wd     (message_payload_1_c10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c10_qs)
  );


  // R[doorbell_c10]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c10_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c10_intr_we),
    .wd     (doorbell_c10_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c10.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c10_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c10_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c10_preserve_mask_we),
    .wd     (doorbell_c10_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c10.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c10_preserve_mask_qs)
  );


  // R[completion_interrupt_c10]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c10_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c10_intr_we),
    .wd     (completion_interrupt_c10_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c10.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c10_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c10_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c10_preserve_mask_we),
    .wd     (completion_interrupt_c10_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c10.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c10_preserve_mask_qs)
  );


  // R[reserved_1_c11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c11_we),
    .wd     (reserved_1_c11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c11_qs)
  );


  // R[channel_status_c11]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c11_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c11_channel_free_we),
    .wd     (channel_status_c11_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c11_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c11_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c11_channel_error_we),
    .wd     (channel_status_c11_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c11_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c11_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c11_field1_we),
    .wd     (channel_status_c11_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c11_field1_qs)
  );


  // R[reserved_2_c11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c11_we),
    .wd     (reserved_2_c11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c11_qs)
  );


  // R[reserved_3_c11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c11]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c11_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c11_intr_enable_we),
    .wd     (channel_flags_c11_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c11_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c11_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c11_field1_we),
    .wd     (channel_flags_c11_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c11_field1_qs)
  );


  // R[length_c11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c11_we),
    .wd     (length_c11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c11_qs)
  );


  // R[message_header_c11]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c11_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c11_message_id_we),
    .wd     (message_header_c11_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c11_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c11_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c11_message_type_we),
    .wd     (message_header_c11_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c11_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c11_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c11_protocol_id_we),
    .wd     (message_header_c11_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c11_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c11_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c11_token_we),
    .wd     (message_header_c11_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c11_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c11_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c11_field1_we),
    .wd     (message_header_c11_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c11_field1_qs)
  );


  // R[message_payload_1_c11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c11_we),
    .wd     (message_payload_1_c11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c11_qs)
  );


  // R[doorbell_c11]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c11_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c11_intr_we),
    .wd     (doorbell_c11_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c11.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c11_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c11_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c11_preserve_mask_we),
    .wd     (doorbell_c11_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c11.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c11_preserve_mask_qs)
  );


  // R[completion_interrupt_c11]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c11_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c11_intr_we),
    .wd     (completion_interrupt_c11_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c11.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c11_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c11_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c11_preserve_mask_we),
    .wd     (completion_interrupt_c11_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c11.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c11_preserve_mask_qs)
  );


  // R[reserved_1_c12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c12_we),
    .wd     (reserved_1_c12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c12_qs)
  );


  // R[channel_status_c12]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c12_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c12_channel_free_we),
    .wd     (channel_status_c12_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c12_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c12_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c12_channel_error_we),
    .wd     (channel_status_c12_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c12_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c12_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c12_field1_we),
    .wd     (channel_status_c12_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c12_field1_qs)
  );


  // R[reserved_2_c12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c12_we),
    .wd     (reserved_2_c12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c12_qs)
  );


  // R[reserved_3_c12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c12]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c12_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c12_intr_enable_we),
    .wd     (channel_flags_c12_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c12_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c12_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c12_field1_we),
    .wd     (channel_flags_c12_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c12_field1_qs)
  );


  // R[length_c12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c12_we),
    .wd     (length_c12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c12_qs)
  );


  // R[message_header_c12]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c12_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c12_message_id_we),
    .wd     (message_header_c12_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c12_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c12_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c12_message_type_we),
    .wd     (message_header_c12_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c12_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c12_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c12_protocol_id_we),
    .wd     (message_header_c12_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c12_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c12_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c12_token_we),
    .wd     (message_header_c12_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c12_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c12_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c12_field1_we),
    .wd     (message_header_c12_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c12_field1_qs)
  );


  // R[message_payload_1_c12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c12_we),
    .wd     (message_payload_1_c12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c12_qs)
  );


  // R[doorbell_c12]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c12_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c12_intr_we),
    .wd     (doorbell_c12_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c12.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c12_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c12_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c12_preserve_mask_we),
    .wd     (doorbell_c12_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c12.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c12_preserve_mask_qs)
  );


  // R[completion_interrupt_c12]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c12_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c12_intr_we),
    .wd     (completion_interrupt_c12_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c12.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c12_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c12_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c12_preserve_mask_we),
    .wd     (completion_interrupt_c12_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c12.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c12_preserve_mask_qs)
  );


  // R[reserved_1_c13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c13_we),
    .wd     (reserved_1_c13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c13_qs)
  );


  // R[channel_status_c13]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c13_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c13_channel_free_we),
    .wd     (channel_status_c13_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c13_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c13_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c13_channel_error_we),
    .wd     (channel_status_c13_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c13_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c13_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c13_field1_we),
    .wd     (channel_status_c13_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c13_field1_qs)
  );


  // R[reserved_2_c13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c13_we),
    .wd     (reserved_2_c13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c13_qs)
  );


  // R[reserved_3_c13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c13]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c13_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c13_intr_enable_we),
    .wd     (channel_flags_c13_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c13_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c13_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c13_field1_we),
    .wd     (channel_flags_c13_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c13_field1_qs)
  );


  // R[length_c13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c13_we),
    .wd     (length_c13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c13_qs)
  );


  // R[message_header_c13]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c13_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c13_message_id_we),
    .wd     (message_header_c13_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c13_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c13_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c13_message_type_we),
    .wd     (message_header_c13_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c13_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c13_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c13_protocol_id_we),
    .wd     (message_header_c13_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c13_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c13_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c13_token_we),
    .wd     (message_header_c13_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c13_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c13_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c13_field1_we),
    .wd     (message_header_c13_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c13_field1_qs)
  );


  // R[message_payload_1_c13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c13_we),
    .wd     (message_payload_1_c13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c13_qs)
  );


  // R[doorbell_c13]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c13_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c13_intr_we),
    .wd     (doorbell_c13_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c13.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c13_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c13_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c13_preserve_mask_we),
    .wd     (doorbell_c13_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c13.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c13_preserve_mask_qs)
  );


  // R[completion_interrupt_c13]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c13_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c13_intr_we),
    .wd     (completion_interrupt_c13_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c13.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c13_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c13_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c13_preserve_mask_we),
    .wd     (completion_interrupt_c13_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c13.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c13_preserve_mask_qs)
  );


  // R[reserved_1_c14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c14_we),
    .wd     (reserved_1_c14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c14_qs)
  );


  // R[channel_status_c14]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c14_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c14_channel_free_we),
    .wd     (channel_status_c14_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c14_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c14_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c14_channel_error_we),
    .wd     (channel_status_c14_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c14_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c14_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c14_field1_we),
    .wd     (channel_status_c14_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c14_field1_qs)
  );


  // R[reserved_2_c14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c14_we),
    .wd     (reserved_2_c14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c14_qs)
  );


  // R[reserved_3_c14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c14]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c14_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c14_intr_enable_we),
    .wd     (channel_flags_c14_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c14_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c14_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c14_field1_we),
    .wd     (channel_flags_c14_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c14_field1_qs)
  );


  // R[length_c14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c14_we),
    .wd     (length_c14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c14_qs)
  );


  // R[message_header_c14]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c14_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c14_message_id_we),
    .wd     (message_header_c14_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c14_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c14_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c14_message_type_we),
    .wd     (message_header_c14_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c14_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c14_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c14_protocol_id_we),
    .wd     (message_header_c14_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c14_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c14_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c14_token_we),
    .wd     (message_header_c14_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c14_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c14_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c14_field1_we),
    .wd     (message_header_c14_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c14_field1_qs)
  );


  // R[message_payload_1_c14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c14_we),
    .wd     (message_payload_1_c14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c14_qs)
  );


  // R[doorbell_c14]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c14_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c14_intr_we),
    .wd     (doorbell_c14_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c14.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c14_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c14_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c14_preserve_mask_we),
    .wd     (doorbell_c14_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c14.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c14_preserve_mask_qs)
  );


  // R[completion_interrupt_c14]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c14_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c14_intr_we),
    .wd     (completion_interrupt_c14_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c14.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c14_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c14_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c14_preserve_mask_we),
    .wd     (completion_interrupt_c14_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c14.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c14_preserve_mask_qs)
  );


  // R[reserved_1_c15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c15_we),
    .wd     (reserved_1_c15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c15_qs)
  );


  // R[channel_status_c15]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c15_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c15_channel_free_we),
    .wd     (channel_status_c15_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c15_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c15_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c15_channel_error_we),
    .wd     (channel_status_c15_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c15_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c15_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c15_field1_we),
    .wd     (channel_status_c15_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c15_field1_qs)
  );


  // R[reserved_2_c15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c15_we),
    .wd     (reserved_2_c15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c15_qs)
  );


  // R[reserved_3_c15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c15]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c15_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c15_intr_enable_we),
    .wd     (channel_flags_c15_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c15_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c15_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c15_field1_we),
    .wd     (channel_flags_c15_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c15_field1_qs)
  );


  // R[length_c15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c15_we),
    .wd     (length_c15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c15_qs)
  );


  // R[message_header_c15]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c15_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c15_message_id_we),
    .wd     (message_header_c15_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c15_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c15_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c15_message_type_we),
    .wd     (message_header_c15_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c15_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c15_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c15_protocol_id_we),
    .wd     (message_header_c15_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c15_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c15_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c15_token_we),
    .wd     (message_header_c15_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c15_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c15_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c15_field1_we),
    .wd     (message_header_c15_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c15_field1_qs)
  );


  // R[message_payload_1_c15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c15_we),
    .wd     (message_payload_1_c15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c15_qs)
  );


  // R[doorbell_c15]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c15_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c15_intr_we),
    .wd     (doorbell_c15_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c15.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c15_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c15_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c15_preserve_mask_we),
    .wd     (doorbell_c15_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c15.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c15_preserve_mask_qs)
  );


  // R[completion_interrupt_c15]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c15_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c15_intr_we),
    .wd     (completion_interrupt_c15_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c15.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c15_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c15_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c15_preserve_mask_we),
    .wd     (completion_interrupt_c15_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c15.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c15_preserve_mask_qs)
  );


  // R[reserved_1_c16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c16_we),
    .wd     (reserved_1_c16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c16_qs)
  );


  // R[channel_status_c16]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c16_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c16_channel_free_we),
    .wd     (channel_status_c16_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c16_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c16_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c16_channel_error_we),
    .wd     (channel_status_c16_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c16_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c16_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c16_field1_we),
    .wd     (channel_status_c16_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c16_field1_qs)
  );


  // R[reserved_2_c16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c16_we),
    .wd     (reserved_2_c16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c16_qs)
  );


  // R[reserved_3_c16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c16]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c16_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c16_intr_enable_we),
    .wd     (channel_flags_c16_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c16_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c16_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c16_field1_we),
    .wd     (channel_flags_c16_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c16_field1_qs)
  );


  // R[length_c16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c16_we),
    .wd     (length_c16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c16_qs)
  );


  // R[message_header_c16]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c16_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c16_message_id_we),
    .wd     (message_header_c16_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c16_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c16_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c16_message_type_we),
    .wd     (message_header_c16_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c16_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c16_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c16_protocol_id_we),
    .wd     (message_header_c16_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c16_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c16_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c16_token_we),
    .wd     (message_header_c16_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c16_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c16_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c16_field1_we),
    .wd     (message_header_c16_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c16_field1_qs)
  );


  // R[message_payload_1_c16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c16_we),
    .wd     (message_payload_1_c16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c16_qs)
  );


  // R[doorbell_c16]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c16_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c16_intr_we),
    .wd     (doorbell_c16_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c16.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c16_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c16_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c16_preserve_mask_we),
    .wd     (doorbell_c16_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c16.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c16_preserve_mask_qs)
  );


  // R[completion_interrupt_c16]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c16_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c16_intr_we),
    .wd     (completion_interrupt_c16_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c16.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c16_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c16_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c16_preserve_mask_we),
    .wd     (completion_interrupt_c16_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c16.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c16_preserve_mask_qs)
  );


  // R[reserved_1_c17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c17_we),
    .wd     (reserved_1_c17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c17_qs)
  );


  // R[channel_status_c17]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c17_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c17_channel_free_we),
    .wd     (channel_status_c17_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c17_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c17_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c17_channel_error_we),
    .wd     (channel_status_c17_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c17_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c17_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c17_field1_we),
    .wd     (channel_status_c17_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c17_field1_qs)
  );


  // R[reserved_2_c17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c17_we),
    .wd     (reserved_2_c17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c17_qs)
  );


  // R[reserved_3_c17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c17]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c17_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c17_intr_enable_we),
    .wd     (channel_flags_c17_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c17_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c17_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c17_field1_we),
    .wd     (channel_flags_c17_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c17_field1_qs)
  );


  // R[length_c17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c17_we),
    .wd     (length_c17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c17_qs)
  );


  // R[message_header_c17]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c17_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c17_message_id_we),
    .wd     (message_header_c17_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c17_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c17_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c17_message_type_we),
    .wd     (message_header_c17_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c17_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c17_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c17_protocol_id_we),
    .wd     (message_header_c17_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c17_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c17_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c17_token_we),
    .wd     (message_header_c17_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c17_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c17_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c17_field1_we),
    .wd     (message_header_c17_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c17_field1_qs)
  );


  // R[message_payload_1_c17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c17_we),
    .wd     (message_payload_1_c17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c17_qs)
  );


  // R[doorbell_c17]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c17_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c17_intr_we),
    .wd     (doorbell_c17_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c17.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c17_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c17_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c17_preserve_mask_we),
    .wd     (doorbell_c17_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c17.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c17_preserve_mask_qs)
  );


  // R[completion_interrupt_c17]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c17_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c17_intr_we),
    .wd     (completion_interrupt_c17_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c17.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c17_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c17_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c17_preserve_mask_we),
    .wd     (completion_interrupt_c17_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c17.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c17_preserve_mask_qs)
  );


  // R[reserved_1_c18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c18_we),
    .wd     (reserved_1_c18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c18_qs)
  );


  // R[channel_status_c18]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c18_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c18_channel_free_we),
    .wd     (channel_status_c18_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c18_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c18_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c18_channel_error_we),
    .wd     (channel_status_c18_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c18_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c18_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c18_field1_we),
    .wd     (channel_status_c18_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c18_field1_qs)
  );


  // R[reserved_2_c18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c18_we),
    .wd     (reserved_2_c18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c18_qs)
  );


  // R[reserved_3_c18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c18]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c18_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c18_intr_enable_we),
    .wd     (channel_flags_c18_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c18_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c18_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c18_field1_we),
    .wd     (channel_flags_c18_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c18_field1_qs)
  );


  // R[length_c18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c18_we),
    .wd     (length_c18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c18_qs)
  );


  // R[message_header_c18]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c18_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c18_message_id_we),
    .wd     (message_header_c18_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c18_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c18_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c18_message_type_we),
    .wd     (message_header_c18_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c18_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c18_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c18_protocol_id_we),
    .wd     (message_header_c18_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c18_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c18_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c18_token_we),
    .wd     (message_header_c18_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c18_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c18_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c18_field1_we),
    .wd     (message_header_c18_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c18_field1_qs)
  );


  // R[message_payload_1_c18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c18_we),
    .wd     (message_payload_1_c18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c18_qs)
  );


  // R[doorbell_c18]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c18_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c18_intr_we),
    .wd     (doorbell_c18_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c18.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c18_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c18_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c18_preserve_mask_we),
    .wd     (doorbell_c18_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c18.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c18_preserve_mask_qs)
  );


  // R[completion_interrupt_c18]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c18_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c18_intr_we),
    .wd     (completion_interrupt_c18_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c18.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c18_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c18_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c18_preserve_mask_we),
    .wd     (completion_interrupt_c18_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c18.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c18_preserve_mask_qs)
  );


  // R[reserved_1_c19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c19_we),
    .wd     (reserved_1_c19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c19_qs)
  );


  // R[channel_status_c19]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c19_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c19_channel_free_we),
    .wd     (channel_status_c19_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c19_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c19_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c19_channel_error_we),
    .wd     (channel_status_c19_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c19_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c19_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c19_field1_we),
    .wd     (channel_status_c19_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c19_field1_qs)
  );


  // R[reserved_2_c19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c19_we),
    .wd     (reserved_2_c19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c19_qs)
  );


  // R[reserved_3_c19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c19]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c19_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c19_intr_enable_we),
    .wd     (channel_flags_c19_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c19_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c19_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c19_field1_we),
    .wd     (channel_flags_c19_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c19_field1_qs)
  );


  // R[length_c19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c19_we),
    .wd     (length_c19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c19_qs)
  );


  // R[message_header_c19]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c19_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c19_message_id_we),
    .wd     (message_header_c19_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c19_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c19_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c19_message_type_we),
    .wd     (message_header_c19_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c19_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c19_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c19_protocol_id_we),
    .wd     (message_header_c19_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c19_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c19_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c19_token_we),
    .wd     (message_header_c19_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c19_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c19_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c19_field1_we),
    .wd     (message_header_c19_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c19_field1_qs)
  );


  // R[message_payload_1_c19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c19_we),
    .wd     (message_payload_1_c19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c19_qs)
  );


  // R[doorbell_c19]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c19_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c19_intr_we),
    .wd     (doorbell_c19_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c19.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c19_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c19_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c19_preserve_mask_we),
    .wd     (doorbell_c19_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c19.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c19_preserve_mask_qs)
  );


  // R[completion_interrupt_c19]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c19_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c19_intr_we),
    .wd     (completion_interrupt_c19_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c19.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c19_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c19_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c19_preserve_mask_we),
    .wd     (completion_interrupt_c19_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c19.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c19_preserve_mask_qs)
  );


  // R[reserved_1_c20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c20_we),
    .wd     (reserved_1_c20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c20_qs)
  );


  // R[channel_status_c20]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c20_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c20_channel_free_we),
    .wd     (channel_status_c20_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c20_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c20_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c20_channel_error_we),
    .wd     (channel_status_c20_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c20_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c20_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c20_field1_we),
    .wd     (channel_status_c20_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c20_field1_qs)
  );


  // R[reserved_2_c20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c20_we),
    .wd     (reserved_2_c20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c20_qs)
  );


  // R[reserved_3_c20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c20]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c20_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c20_intr_enable_we),
    .wd     (channel_flags_c20_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c20_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c20_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c20_field1_we),
    .wd     (channel_flags_c20_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c20_field1_qs)
  );


  // R[length_c20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c20_we),
    .wd     (length_c20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c20_qs)
  );


  // R[message_header_c20]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c20_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c20_message_id_we),
    .wd     (message_header_c20_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c20_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c20_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c20_message_type_we),
    .wd     (message_header_c20_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c20_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c20_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c20_protocol_id_we),
    .wd     (message_header_c20_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c20_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c20_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c20_token_we),
    .wd     (message_header_c20_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c20_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c20_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c20_field1_we),
    .wd     (message_header_c20_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c20_field1_qs)
  );


  // R[message_payload_1_c20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c20_we),
    .wd     (message_payload_1_c20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c20_qs)
  );


  // R[doorbell_c20]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c20_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c20_intr_we),
    .wd     (doorbell_c20_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c20.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c20_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c20_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c20_preserve_mask_we),
    .wd     (doorbell_c20_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c20.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c20_preserve_mask_qs)
  );


  // R[completion_interrupt_c20]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c20_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c20_intr_we),
    .wd     (completion_interrupt_c20_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c20.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c20_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c20_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c20_preserve_mask_we),
    .wd     (completion_interrupt_c20_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c20.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c20_preserve_mask_qs)
  );


  // R[reserved_1_c21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c21_we),
    .wd     (reserved_1_c21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c21_qs)
  );


  // R[channel_status_c21]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c21_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c21_channel_free_we),
    .wd     (channel_status_c21_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c21_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c21_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c21_channel_error_we),
    .wd     (channel_status_c21_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c21_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c21_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c21_field1_we),
    .wd     (channel_status_c21_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c21_field1_qs)
  );


  // R[reserved_2_c21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c21_we),
    .wd     (reserved_2_c21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c21_qs)
  );


  // R[reserved_3_c21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c21]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c21_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c21_intr_enable_we),
    .wd     (channel_flags_c21_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c21_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c21_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c21_field1_we),
    .wd     (channel_flags_c21_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c21_field1_qs)
  );


  // R[length_c21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c21_we),
    .wd     (length_c21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c21_qs)
  );


  // R[message_header_c21]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c21_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c21_message_id_we),
    .wd     (message_header_c21_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c21_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c21_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c21_message_type_we),
    .wd     (message_header_c21_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c21_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c21_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c21_protocol_id_we),
    .wd     (message_header_c21_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c21_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c21_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c21_token_we),
    .wd     (message_header_c21_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c21_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c21_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c21_field1_we),
    .wd     (message_header_c21_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c21_field1_qs)
  );


  // R[message_payload_1_c21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c21_we),
    .wd     (message_payload_1_c21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c21_qs)
  );


  // R[doorbell_c21]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c21_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c21_intr_we),
    .wd     (doorbell_c21_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c21.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c21_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c21_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c21_preserve_mask_we),
    .wd     (doorbell_c21_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c21.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c21_preserve_mask_qs)
  );


  // R[completion_interrupt_c21]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c21_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c21_intr_we),
    .wd     (completion_interrupt_c21_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c21.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c21_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c21_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c21_preserve_mask_we),
    .wd     (completion_interrupt_c21_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c21.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c21_preserve_mask_qs)
  );


  // R[reserved_1_c22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c22_we),
    .wd     (reserved_1_c22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c22_qs)
  );


  // R[channel_status_c22]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c22_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c22_channel_free_we),
    .wd     (channel_status_c22_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c22_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c22_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c22_channel_error_we),
    .wd     (channel_status_c22_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c22_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c22_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c22_field1_we),
    .wd     (channel_status_c22_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c22_field1_qs)
  );


  // R[reserved_2_c22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c22_we),
    .wd     (reserved_2_c22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c22_qs)
  );


  // R[reserved_3_c22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c22]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c22_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c22_intr_enable_we),
    .wd     (channel_flags_c22_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c22_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c22_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c22_field1_we),
    .wd     (channel_flags_c22_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c22_field1_qs)
  );


  // R[length_c22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c22_we),
    .wd     (length_c22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c22_qs)
  );


  // R[message_header_c22]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c22_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c22_message_id_we),
    .wd     (message_header_c22_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c22_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c22_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c22_message_type_we),
    .wd     (message_header_c22_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c22_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c22_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c22_protocol_id_we),
    .wd     (message_header_c22_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c22_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c22_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c22_token_we),
    .wd     (message_header_c22_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c22_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c22_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c22_field1_we),
    .wd     (message_header_c22_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c22_field1_qs)
  );


  // R[message_payload_1_c22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c22_we),
    .wd     (message_payload_1_c22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c22_qs)
  );


  // R[doorbell_c22]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c22_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c22_intr_we),
    .wd     (doorbell_c22_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c22.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c22_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c22_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c22_preserve_mask_we),
    .wd     (doorbell_c22_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c22.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c22_preserve_mask_qs)
  );


  // R[completion_interrupt_c22]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c22_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c22_intr_we),
    .wd     (completion_interrupt_c22_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c22.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c22_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c22_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c22_preserve_mask_we),
    .wd     (completion_interrupt_c22_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c22.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c22_preserve_mask_qs)
  );


  // R[reserved_1_c23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c23_we),
    .wd     (reserved_1_c23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c23_qs)
  );


  // R[channel_status_c23]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c23_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c23_channel_free_we),
    .wd     (channel_status_c23_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c23_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c23_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c23_channel_error_we),
    .wd     (channel_status_c23_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c23_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c23_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c23_field1_we),
    .wd     (channel_status_c23_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c23_field1_qs)
  );


  // R[reserved_2_c23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c23_we),
    .wd     (reserved_2_c23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c23_qs)
  );


  // R[reserved_3_c23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c23]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c23_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c23_intr_enable_we),
    .wd     (channel_flags_c23_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c23_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c23_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c23_field1_we),
    .wd     (channel_flags_c23_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c23_field1_qs)
  );


  // R[length_c23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c23_we),
    .wd     (length_c23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c23_qs)
  );


  // R[message_header_c23]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c23_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c23_message_id_we),
    .wd     (message_header_c23_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c23_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c23_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c23_message_type_we),
    .wd     (message_header_c23_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c23_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c23_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c23_protocol_id_we),
    .wd     (message_header_c23_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c23_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c23_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c23_token_we),
    .wd     (message_header_c23_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c23_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c23_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c23_field1_we),
    .wd     (message_header_c23_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c23_field1_qs)
  );


  // R[message_payload_1_c23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c23_we),
    .wd     (message_payload_1_c23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c23_qs)
  );


  // R[doorbell_c23]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c23_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c23_intr_we),
    .wd     (doorbell_c23_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c23.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c23_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c23_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c23_preserve_mask_we),
    .wd     (doorbell_c23_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c23.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c23_preserve_mask_qs)
  );


  // R[completion_interrupt_c23]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c23_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c23_intr_we),
    .wd     (completion_interrupt_c23_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c23.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c23_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c23_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c23_preserve_mask_we),
    .wd     (completion_interrupt_c23_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c23.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c23_preserve_mask_qs)
  );


  // R[reserved_1_c24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c24_we),
    .wd     (reserved_1_c24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c24_qs)
  );


  // R[channel_status_c24]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c24_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c24_channel_free_we),
    .wd     (channel_status_c24_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c24_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c24_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c24_channel_error_we),
    .wd     (channel_status_c24_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c24_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c24_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c24_field1_we),
    .wd     (channel_status_c24_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c24_field1_qs)
  );


  // R[reserved_2_c24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c24_we),
    .wd     (reserved_2_c24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c24_qs)
  );


  // R[reserved_3_c24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c24]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c24_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c24_intr_enable_we),
    .wd     (channel_flags_c24_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c24_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c24_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c24_field1_we),
    .wd     (channel_flags_c24_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c24_field1_qs)
  );


  // R[length_c24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c24_we),
    .wd     (length_c24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c24_qs)
  );


  // R[message_header_c24]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c24_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c24_message_id_we),
    .wd     (message_header_c24_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c24_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c24_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c24_message_type_we),
    .wd     (message_header_c24_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c24_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c24_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c24_protocol_id_we),
    .wd     (message_header_c24_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c24_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c24_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c24_token_we),
    .wd     (message_header_c24_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c24_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c24_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c24_field1_we),
    .wd     (message_header_c24_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c24_field1_qs)
  );


  // R[message_payload_1_c24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c24_we),
    .wd     (message_payload_1_c24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c24_qs)
  );


  // R[doorbell_c24]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c24_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c24_intr_we),
    .wd     (doorbell_c24_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c24.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c24_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c24_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c24_preserve_mask_we),
    .wd     (doorbell_c24_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c24.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c24_preserve_mask_qs)
  );


  // R[completion_interrupt_c24]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c24_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c24_intr_we),
    .wd     (completion_interrupt_c24_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c24.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c24_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c24_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c24_preserve_mask_we),
    .wd     (completion_interrupt_c24_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c24.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c24_preserve_mask_qs)
  );


  // R[reserved_1_c25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c25_we),
    .wd     (reserved_1_c25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c25_qs)
  );


  // R[channel_status_c25]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c25_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c25_channel_free_we),
    .wd     (channel_status_c25_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c25_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c25_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c25_channel_error_we),
    .wd     (channel_status_c25_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c25_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c25_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c25_field1_we),
    .wd     (channel_status_c25_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c25_field1_qs)
  );


  // R[reserved_2_c25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c25_we),
    .wd     (reserved_2_c25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c25_qs)
  );


  // R[reserved_3_c25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c25]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c25_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c25_intr_enable_we),
    .wd     (channel_flags_c25_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c25_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c25_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c25_field1_we),
    .wd     (channel_flags_c25_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c25_field1_qs)
  );


  // R[length_c25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c25_we),
    .wd     (length_c25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c25_qs)
  );


  // R[message_header_c25]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c25_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c25_message_id_we),
    .wd     (message_header_c25_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c25_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c25_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c25_message_type_we),
    .wd     (message_header_c25_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c25_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c25_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c25_protocol_id_we),
    .wd     (message_header_c25_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c25_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c25_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c25_token_we),
    .wd     (message_header_c25_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c25_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c25_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c25_field1_we),
    .wd     (message_header_c25_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c25_field1_qs)
  );


  // R[message_payload_1_c25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c25_we),
    .wd     (message_payload_1_c25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c25_qs)
  );


  // R[doorbell_c25]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c25_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c25_intr_we),
    .wd     (doorbell_c25_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c25.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c25_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c25_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c25_preserve_mask_we),
    .wd     (doorbell_c25_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c25.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c25_preserve_mask_qs)
  );


  // R[completion_interrupt_c25]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c25_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c25_intr_we),
    .wd     (completion_interrupt_c25_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c25.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c25_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c25_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c25_preserve_mask_we),
    .wd     (completion_interrupt_c25_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c25.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c25_preserve_mask_qs)
  );


  // R[reserved_1_c26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c26_we),
    .wd     (reserved_1_c26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c26_qs)
  );


  // R[channel_status_c26]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c26_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c26_channel_free_we),
    .wd     (channel_status_c26_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c26_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c26_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c26_channel_error_we),
    .wd     (channel_status_c26_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c26_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c26_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c26_field1_we),
    .wd     (channel_status_c26_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c26_field1_qs)
  );


  // R[reserved_2_c26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c26_we),
    .wd     (reserved_2_c26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c26_qs)
  );


  // R[reserved_3_c26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c26]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c26_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c26_intr_enable_we),
    .wd     (channel_flags_c26_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c26_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c26_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c26_field1_we),
    .wd     (channel_flags_c26_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c26_field1_qs)
  );


  // R[length_c26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c26_we),
    .wd     (length_c26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c26_qs)
  );


  // R[message_header_c26]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c26_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c26_message_id_we),
    .wd     (message_header_c26_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c26_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c26_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c26_message_type_we),
    .wd     (message_header_c26_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c26_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c26_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c26_protocol_id_we),
    .wd     (message_header_c26_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c26_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c26_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c26_token_we),
    .wd     (message_header_c26_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c26_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c26_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c26_field1_we),
    .wd     (message_header_c26_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c26_field1_qs)
  );


  // R[message_payload_1_c26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c26_we),
    .wd     (message_payload_1_c26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c26_qs)
  );


  // R[doorbell_c26]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c26_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c26_intr_we),
    .wd     (doorbell_c26_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c26.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c26_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c26_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c26_preserve_mask_we),
    .wd     (doorbell_c26_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c26.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c26_preserve_mask_qs)
  );


  // R[completion_interrupt_c26]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c26_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c26_intr_we),
    .wd     (completion_interrupt_c26_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c26.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c26_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c26_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c26_preserve_mask_we),
    .wd     (completion_interrupt_c26_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c26.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c26_preserve_mask_qs)
  );


  // R[reserved_1_c27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c27_we),
    .wd     (reserved_1_c27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c27_qs)
  );


  // R[channel_status_c27]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c27_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c27_channel_free_we),
    .wd     (channel_status_c27_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c27_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c27_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c27_channel_error_we),
    .wd     (channel_status_c27_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c27_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c27_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c27_field1_we),
    .wd     (channel_status_c27_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c27_field1_qs)
  );


  // R[reserved_2_c27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c27_we),
    .wd     (reserved_2_c27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c27_qs)
  );


  // R[reserved_3_c27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c27]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c27_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c27_intr_enable_we),
    .wd     (channel_flags_c27_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c27_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c27_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c27_field1_we),
    .wd     (channel_flags_c27_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c27_field1_qs)
  );


  // R[length_c27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c27_we),
    .wd     (length_c27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c27_qs)
  );


  // R[message_header_c27]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c27_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c27_message_id_we),
    .wd     (message_header_c27_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c27_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c27_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c27_message_type_we),
    .wd     (message_header_c27_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c27_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c27_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c27_protocol_id_we),
    .wd     (message_header_c27_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c27_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c27_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c27_token_we),
    .wd     (message_header_c27_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c27_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c27_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c27_field1_we),
    .wd     (message_header_c27_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c27_field1_qs)
  );


  // R[message_payload_1_c27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c27_we),
    .wd     (message_payload_1_c27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c27_qs)
  );


  // R[doorbell_c27]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c27_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c27_intr_we),
    .wd     (doorbell_c27_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c27.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c27_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c27_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c27_preserve_mask_we),
    .wd     (doorbell_c27_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c27.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c27_preserve_mask_qs)
  );


  // R[completion_interrupt_c27]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c27_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c27_intr_we),
    .wd     (completion_interrupt_c27_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c27.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c27_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c27_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c27_preserve_mask_we),
    .wd     (completion_interrupt_c27_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c27.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c27_preserve_mask_qs)
  );


  // R[reserved_1_c28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c28_we),
    .wd     (reserved_1_c28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c28_qs)
  );


  // R[channel_status_c28]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c28_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c28_channel_free_we),
    .wd     (channel_status_c28_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c28_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c28_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c28_channel_error_we),
    .wd     (channel_status_c28_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c28_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c28_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c28_field1_we),
    .wd     (channel_status_c28_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c28_field1_qs)
  );


  // R[reserved_2_c28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c28_we),
    .wd     (reserved_2_c28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c28_qs)
  );


  // R[reserved_3_c28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c28]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c28_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c28_intr_enable_we),
    .wd     (channel_flags_c28_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c28_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c28_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c28_field1_we),
    .wd     (channel_flags_c28_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c28_field1_qs)
  );


  // R[length_c28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c28_we),
    .wd     (length_c28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c28_qs)
  );


  // R[message_header_c28]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c28_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c28_message_id_we),
    .wd     (message_header_c28_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c28_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c28_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c28_message_type_we),
    .wd     (message_header_c28_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c28_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c28_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c28_protocol_id_we),
    .wd     (message_header_c28_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c28_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c28_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c28_token_we),
    .wd     (message_header_c28_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c28_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c28_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c28_field1_we),
    .wd     (message_header_c28_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c28_field1_qs)
  );


  // R[message_payload_1_c28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c28_we),
    .wd     (message_payload_1_c28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c28_qs)
  );


  // R[doorbell_c28]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c28_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c28_intr_we),
    .wd     (doorbell_c28_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c28.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c28_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c28_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c28_preserve_mask_we),
    .wd     (doorbell_c28_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c28.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c28_preserve_mask_qs)
  );


  // R[completion_interrupt_c28]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c28_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c28_intr_we),
    .wd     (completion_interrupt_c28_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c28.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c28_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c28_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c28_preserve_mask_we),
    .wd     (completion_interrupt_c28_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c28.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c28_preserve_mask_qs)
  );


  // R[reserved_1_c29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c29_we),
    .wd     (reserved_1_c29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c29_qs)
  );


  // R[channel_status_c29]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c29_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c29_channel_free_we),
    .wd     (channel_status_c29_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c29_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c29_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c29_channel_error_we),
    .wd     (channel_status_c29_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c29_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c29_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c29_field1_we),
    .wd     (channel_status_c29_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c29_field1_qs)
  );


  // R[reserved_2_c29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c29_we),
    .wd     (reserved_2_c29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c29_qs)
  );


  // R[reserved_3_c29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c29]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c29_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c29_intr_enable_we),
    .wd     (channel_flags_c29_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c29_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c29_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c29_field1_we),
    .wd     (channel_flags_c29_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c29_field1_qs)
  );


  // R[length_c29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c29_we),
    .wd     (length_c29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c29_qs)
  );


  // R[message_header_c29]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c29_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c29_message_id_we),
    .wd     (message_header_c29_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c29_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c29_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c29_message_type_we),
    .wd     (message_header_c29_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c29_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c29_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c29_protocol_id_we),
    .wd     (message_header_c29_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c29_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c29_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c29_token_we),
    .wd     (message_header_c29_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c29_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c29_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c29_field1_we),
    .wd     (message_header_c29_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c29_field1_qs)
  );


  // R[message_payload_1_c29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c29_we),
    .wd     (message_payload_1_c29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c29_qs)
  );


  // R[doorbell_c29]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c29_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c29_intr_we),
    .wd     (doorbell_c29_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c29.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c29_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c29_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c29_preserve_mask_we),
    .wd     (doorbell_c29_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c29.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c29_preserve_mask_qs)
  );


  // R[completion_interrupt_c29]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c29_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c29_intr_we),
    .wd     (completion_interrupt_c29_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c29.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c29_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c29_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c29_preserve_mask_we),
    .wd     (completion_interrupt_c29_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c29.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c29_preserve_mask_qs)
  );


  // R[reserved_1_c30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c30_we),
    .wd     (reserved_1_c30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c30_qs)
  );


  // R[channel_status_c30]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c30_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c30_channel_free_we),
    .wd     (channel_status_c30_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c30_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c30_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c30_channel_error_we),
    .wd     (channel_status_c30_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c30_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c30_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c30_field1_we),
    .wd     (channel_status_c30_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c30_field1_qs)
  );


  // R[reserved_2_c30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c30_we),
    .wd     (reserved_2_c30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c30_qs)
  );


  // R[reserved_3_c30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c30]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c30_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c30_intr_enable_we),
    .wd     (channel_flags_c30_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c30_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c30_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c30_field1_we),
    .wd     (channel_flags_c30_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c30_field1_qs)
  );


  // R[length_c30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c30_we),
    .wd     (length_c30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c30_qs)
  );


  // R[message_header_c30]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c30_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c30_message_id_we),
    .wd     (message_header_c30_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c30_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c30_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c30_message_type_we),
    .wd     (message_header_c30_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c30_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c30_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c30_protocol_id_we),
    .wd     (message_header_c30_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c30_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c30_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c30_token_we),
    .wd     (message_header_c30_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c30_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c30_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c30_field1_we),
    .wd     (message_header_c30_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c30_field1_qs)
  );


  // R[message_payload_1_c30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c30_we),
    .wd     (message_payload_1_c30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c30_qs)
  );


  // R[doorbell_c30]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c30_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c30_intr_we),
    .wd     (doorbell_c30_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c30.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c30_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c30_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c30_preserve_mask_we),
    .wd     (doorbell_c30_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c30.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c30_preserve_mask_qs)
  );


  // R[completion_interrupt_c30]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c30_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c30_intr_we),
    .wd     (completion_interrupt_c30_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c30.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c30_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c30_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c30_preserve_mask_we),
    .wd     (completion_interrupt_c30_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c30.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c30_preserve_mask_qs)
  );


  // R[reserved_1_c31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c31_we),
    .wd     (reserved_1_c31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c31_qs)
  );


  // R[channel_status_c31]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c31_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c31_channel_free_we),
    .wd     (channel_status_c31_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c31_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c31_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c31_channel_error_we),
    .wd     (channel_status_c31_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c31_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c31_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c31_field1_we),
    .wd     (channel_status_c31_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c31_field1_qs)
  );


  // R[reserved_2_c31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c31_we),
    .wd     (reserved_2_c31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c31_qs)
  );


  // R[reserved_3_c31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c31]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c31_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c31_intr_enable_we),
    .wd     (channel_flags_c31_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c31_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c31_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c31_field1_we),
    .wd     (channel_flags_c31_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c31_field1_qs)
  );


  // R[length_c31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c31_we),
    .wd     (length_c31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c31_qs)
  );


  // R[message_header_c31]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c31_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c31_message_id_we),
    .wd     (message_header_c31_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c31_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c31_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c31_message_type_we),
    .wd     (message_header_c31_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c31_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c31_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c31_protocol_id_we),
    .wd     (message_header_c31_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c31_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c31_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c31_token_we),
    .wd     (message_header_c31_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c31_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c31_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c31_field1_we),
    .wd     (message_header_c31_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c31_field1_qs)
  );


  // R[message_payload_1_c31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c31_we),
    .wd     (message_payload_1_c31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c31_qs)
  );


  // R[doorbell_c31]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c31_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c31_intr_we),
    .wd     (doorbell_c31_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c31.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c31_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c31_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c31_preserve_mask_we),
    .wd     (doorbell_c31_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c31.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c31_preserve_mask_qs)
  );


  // R[completion_interrupt_c31]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c31_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c31_intr_we),
    .wd     (completion_interrupt_c31_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c31.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c31_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c31_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c31_preserve_mask_we),
    .wd     (completion_interrupt_c31_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c31.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c31_preserve_mask_qs)
  );


  // R[reserved_1_c32]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c32_we),
    .wd     (reserved_1_c32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c32_qs)
  );


  // R[channel_status_c32]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c32_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c32_channel_free_we),
    .wd     (channel_status_c32_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c32_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c32_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c32_channel_error_we),
    .wd     (channel_status_c32_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c32_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c32_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c32_field1_we),
    .wd     (channel_status_c32_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c32_field1_qs)
  );


  // R[reserved_2_c32]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c32_we),
    .wd     (reserved_2_c32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c32_qs)
  );


  // R[reserved_3_c32]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c32]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c32_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c32_intr_enable_we),
    .wd     (channel_flags_c32_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c32_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c32_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c32_field1_we),
    .wd     (channel_flags_c32_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c32_field1_qs)
  );


  // R[length_c32]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c32_we),
    .wd     (length_c32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c32_qs)
  );


  // R[message_header_c32]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c32_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c32_message_id_we),
    .wd     (message_header_c32_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c32_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c32_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c32_message_type_we),
    .wd     (message_header_c32_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c32_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c32_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c32_protocol_id_we),
    .wd     (message_header_c32_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c32_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c32_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c32_token_we),
    .wd     (message_header_c32_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c32_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c32_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c32_field1_we),
    .wd     (message_header_c32_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c32_field1_qs)
  );


  // R[message_payload_1_c32]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c32_we),
    .wd     (message_payload_1_c32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c32_qs)
  );


  // R[doorbell_c32]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c32_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c32_intr_we),
    .wd     (doorbell_c32_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c32.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c32_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c32_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c32_preserve_mask_we),
    .wd     (doorbell_c32_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c32.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c32_preserve_mask_qs)
  );


  // R[completion_interrupt_c32]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c32_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c32_intr_we),
    .wd     (completion_interrupt_c32_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c32.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c32_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c32_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c32_preserve_mask_we),
    .wd     (completion_interrupt_c32_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c32.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c32_preserve_mask_qs)
  );


  // R[reserved_1_c33]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c33_we),
    .wd     (reserved_1_c33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c33_qs)
  );


  // R[channel_status_c33]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c33_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c33_channel_free_we),
    .wd     (channel_status_c33_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c33_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c33_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c33_channel_error_we),
    .wd     (channel_status_c33_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c33_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c33_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c33_field1_we),
    .wd     (channel_status_c33_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c33_field1_qs)
  );


  // R[reserved_2_c33]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c33_we),
    .wd     (reserved_2_c33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c33_qs)
  );


  // R[reserved_3_c33]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c33]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c33_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c33_intr_enable_we),
    .wd     (channel_flags_c33_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c33_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c33_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c33_field1_we),
    .wd     (channel_flags_c33_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c33_field1_qs)
  );


  // R[length_c33]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c33_we),
    .wd     (length_c33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c33_qs)
  );


  // R[message_header_c33]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c33_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c33_message_id_we),
    .wd     (message_header_c33_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c33_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c33_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c33_message_type_we),
    .wd     (message_header_c33_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c33_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c33_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c33_protocol_id_we),
    .wd     (message_header_c33_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c33_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c33_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c33_token_we),
    .wd     (message_header_c33_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c33_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c33_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c33_field1_we),
    .wd     (message_header_c33_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c33_field1_qs)
  );


  // R[message_payload_1_c33]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c33_we),
    .wd     (message_payload_1_c33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c33_qs)
  );


  // R[doorbell_c33]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c33_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c33_intr_we),
    .wd     (doorbell_c33_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c33.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c33_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c33_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c33_preserve_mask_we),
    .wd     (doorbell_c33_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c33.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c33_preserve_mask_qs)
  );


  // R[completion_interrupt_c33]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c33_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c33_intr_we),
    .wd     (completion_interrupt_c33_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c33.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c33_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c33_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c33_preserve_mask_we),
    .wd     (completion_interrupt_c33_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c33.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c33_preserve_mask_qs)
  );


  // R[reserved_1_c34]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c34_we),
    .wd     (reserved_1_c34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c34_qs)
  );


  // R[channel_status_c34]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c34_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c34_channel_free_we),
    .wd     (channel_status_c34_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c34_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c34_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c34_channel_error_we),
    .wd     (channel_status_c34_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c34_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c34_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c34_field1_we),
    .wd     (channel_status_c34_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c34_field1_qs)
  );


  // R[reserved_2_c34]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c34_we),
    .wd     (reserved_2_c34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c34_qs)
  );


  // R[reserved_3_c34]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c34]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c34_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c34_intr_enable_we),
    .wd     (channel_flags_c34_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c34_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c34_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c34_field1_we),
    .wd     (channel_flags_c34_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c34_field1_qs)
  );


  // R[length_c34]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c34_we),
    .wd     (length_c34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c34_qs)
  );


  // R[message_header_c34]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c34_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c34_message_id_we),
    .wd     (message_header_c34_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c34_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c34_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c34_message_type_we),
    .wd     (message_header_c34_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c34_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c34_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c34_protocol_id_we),
    .wd     (message_header_c34_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c34_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c34_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c34_token_we),
    .wd     (message_header_c34_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c34_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c34_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c34_field1_we),
    .wd     (message_header_c34_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c34_field1_qs)
  );


  // R[message_payload_1_c34]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c34_we),
    .wd     (message_payload_1_c34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c34_qs)
  );


  // R[doorbell_c34]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c34_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c34_intr_we),
    .wd     (doorbell_c34_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c34.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c34_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c34_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c34_preserve_mask_we),
    .wd     (doorbell_c34_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c34.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c34_preserve_mask_qs)
  );


  // R[completion_interrupt_c34]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c34_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c34_intr_we),
    .wd     (completion_interrupt_c34_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c34.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c34_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c34_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c34_preserve_mask_we),
    .wd     (completion_interrupt_c34_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c34.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c34_preserve_mask_qs)
  );


  // R[reserved_1_c35]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c35_we),
    .wd     (reserved_1_c35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c35_qs)
  );


  // R[channel_status_c35]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c35_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c35_channel_free_we),
    .wd     (channel_status_c35_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c35_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c35_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c35_channel_error_we),
    .wd     (channel_status_c35_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c35_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c35_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c35_field1_we),
    .wd     (channel_status_c35_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c35_field1_qs)
  );


  // R[reserved_2_c35]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c35_we),
    .wd     (reserved_2_c35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c35_qs)
  );


  // R[reserved_3_c35]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c35]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c35_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c35_intr_enable_we),
    .wd     (channel_flags_c35_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c35_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c35_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c35_field1_we),
    .wd     (channel_flags_c35_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c35_field1_qs)
  );


  // R[length_c35]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c35_we),
    .wd     (length_c35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c35_qs)
  );


  // R[message_header_c35]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c35_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c35_message_id_we),
    .wd     (message_header_c35_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c35_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c35_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c35_message_type_we),
    .wd     (message_header_c35_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c35_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c35_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c35_protocol_id_we),
    .wd     (message_header_c35_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c35_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c35_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c35_token_we),
    .wd     (message_header_c35_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c35_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c35_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c35_field1_we),
    .wd     (message_header_c35_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c35_field1_qs)
  );


  // R[message_payload_1_c35]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c35_we),
    .wd     (message_payload_1_c35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c35_qs)
  );


  // R[doorbell_c35]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c35_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c35_intr_we),
    .wd     (doorbell_c35_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c35.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c35_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c35_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c35_preserve_mask_we),
    .wd     (doorbell_c35_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c35.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c35_preserve_mask_qs)
  );


  // R[completion_interrupt_c35]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c35_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c35_intr_we),
    .wd     (completion_interrupt_c35_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c35.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c35_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c35_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c35_preserve_mask_we),
    .wd     (completion_interrupt_c35_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c35.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c35_preserve_mask_qs)
  );


  // R[reserved_1_c36]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c36_we),
    .wd     (reserved_1_c36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c36_qs)
  );


  // R[channel_status_c36]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c36_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c36_channel_free_we),
    .wd     (channel_status_c36_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c36_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c36_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c36_channel_error_we),
    .wd     (channel_status_c36_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c36_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c36_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c36_field1_we),
    .wd     (channel_status_c36_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c36_field1_qs)
  );


  // R[reserved_2_c36]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c36_we),
    .wd     (reserved_2_c36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c36_qs)
  );


  // R[reserved_3_c36]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c36]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c36_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c36_intr_enable_we),
    .wd     (channel_flags_c36_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c36_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c36_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c36_field1_we),
    .wd     (channel_flags_c36_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c36_field1_qs)
  );


  // R[length_c36]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c36_we),
    .wd     (length_c36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c36_qs)
  );


  // R[message_header_c36]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c36_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c36_message_id_we),
    .wd     (message_header_c36_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c36_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c36_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c36_message_type_we),
    .wd     (message_header_c36_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c36_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c36_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c36_protocol_id_we),
    .wd     (message_header_c36_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c36_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c36_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c36_token_we),
    .wd     (message_header_c36_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c36_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c36_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c36_field1_we),
    .wd     (message_header_c36_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c36_field1_qs)
  );


  // R[message_payload_1_c36]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c36_we),
    .wd     (message_payload_1_c36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c36_qs)
  );


  // R[doorbell_c36]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c36_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c36_intr_we),
    .wd     (doorbell_c36_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c36.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c36_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c36_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c36_preserve_mask_we),
    .wd     (doorbell_c36_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c36.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c36_preserve_mask_qs)
  );


  // R[completion_interrupt_c36]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c36_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c36_intr_we),
    .wd     (completion_interrupt_c36_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c36.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c36_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c36_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c36_preserve_mask_we),
    .wd     (completion_interrupt_c36_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c36.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c36_preserve_mask_qs)
  );


  // R[reserved_1_c37]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c37_we),
    .wd     (reserved_1_c37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c37_qs)
  );


  // R[channel_status_c37]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c37_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c37_channel_free_we),
    .wd     (channel_status_c37_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c37_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c37_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c37_channel_error_we),
    .wd     (channel_status_c37_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c37_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c37_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c37_field1_we),
    .wd     (channel_status_c37_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c37_field1_qs)
  );


  // R[reserved_2_c37]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c37_we),
    .wd     (reserved_2_c37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c37_qs)
  );


  // R[reserved_3_c37]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c37]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c37_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c37_intr_enable_we),
    .wd     (channel_flags_c37_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c37_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c37_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c37_field1_we),
    .wd     (channel_flags_c37_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c37_field1_qs)
  );


  // R[length_c37]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c37_we),
    .wd     (length_c37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c37_qs)
  );


  // R[message_header_c37]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c37_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c37_message_id_we),
    .wd     (message_header_c37_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c37_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c37_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c37_message_type_we),
    .wd     (message_header_c37_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c37_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c37_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c37_protocol_id_we),
    .wd     (message_header_c37_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c37_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c37_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c37_token_we),
    .wd     (message_header_c37_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c37_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c37_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c37_field1_we),
    .wd     (message_header_c37_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c37_field1_qs)
  );


  // R[message_payload_1_c37]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c37_we),
    .wd     (message_payload_1_c37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c37_qs)
  );


  // R[doorbell_c37]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c37_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c37_intr_we),
    .wd     (doorbell_c37_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c37.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c37_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c37_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c37_preserve_mask_we),
    .wd     (doorbell_c37_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c37.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c37_preserve_mask_qs)
  );


  // R[completion_interrupt_c37]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c37_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c37_intr_we),
    .wd     (completion_interrupt_c37_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c37.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c37_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c37_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c37_preserve_mask_we),
    .wd     (completion_interrupt_c37_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c37.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c37_preserve_mask_qs)
  );


  // R[reserved_1_c38]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c38_we),
    .wd     (reserved_1_c38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c38_qs)
  );


  // R[channel_status_c38]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c38_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c38_channel_free_we),
    .wd     (channel_status_c38_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c38_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c38_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c38_channel_error_we),
    .wd     (channel_status_c38_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c38_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c38_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c38_field1_we),
    .wd     (channel_status_c38_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c38_field1_qs)
  );


  // R[reserved_2_c38]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c38_we),
    .wd     (reserved_2_c38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c38_qs)
  );


  // R[reserved_3_c38]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c38]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c38_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c38_intr_enable_we),
    .wd     (channel_flags_c38_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c38_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c38_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c38_field1_we),
    .wd     (channel_flags_c38_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c38_field1_qs)
  );


  // R[length_c38]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c38_we),
    .wd     (length_c38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c38_qs)
  );


  // R[message_header_c38]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c38_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c38_message_id_we),
    .wd     (message_header_c38_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c38_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c38_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c38_message_type_we),
    .wd     (message_header_c38_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c38_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c38_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c38_protocol_id_we),
    .wd     (message_header_c38_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c38_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c38_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c38_token_we),
    .wd     (message_header_c38_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c38_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c38_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c38_field1_we),
    .wd     (message_header_c38_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c38_field1_qs)
  );


  // R[message_payload_1_c38]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c38_we),
    .wd     (message_payload_1_c38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c38_qs)
  );


  // R[doorbell_c38]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c38_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c38_intr_we),
    .wd     (doorbell_c38_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c38.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c38_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c38_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c38_preserve_mask_we),
    .wd     (doorbell_c38_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c38.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c38_preserve_mask_qs)
  );


  // R[completion_interrupt_c38]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c38_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c38_intr_we),
    .wd     (completion_interrupt_c38_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c38.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c38_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c38_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c38_preserve_mask_we),
    .wd     (completion_interrupt_c38_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c38.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c38_preserve_mask_qs)
  );


  // R[reserved_1_c39]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c39_we),
    .wd     (reserved_1_c39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c39_qs)
  );


  // R[channel_status_c39]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c39_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c39_channel_free_we),
    .wd     (channel_status_c39_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c39_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c39_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c39_channel_error_we),
    .wd     (channel_status_c39_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c39_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c39_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c39_field1_we),
    .wd     (channel_status_c39_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c39_field1_qs)
  );


  // R[reserved_2_c39]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c39_we),
    .wd     (reserved_2_c39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c39_qs)
  );


  // R[reserved_3_c39]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c39]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c39_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c39_intr_enable_we),
    .wd     (channel_flags_c39_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c39_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c39_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c39_field1_we),
    .wd     (channel_flags_c39_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c39_field1_qs)
  );


  // R[length_c39]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c39_we),
    .wd     (length_c39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c39_qs)
  );


  // R[message_header_c39]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c39_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c39_message_id_we),
    .wd     (message_header_c39_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c39_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c39_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c39_message_type_we),
    .wd     (message_header_c39_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c39_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c39_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c39_protocol_id_we),
    .wd     (message_header_c39_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c39_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c39_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c39_token_we),
    .wd     (message_header_c39_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c39_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c39_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c39_field1_we),
    .wd     (message_header_c39_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c39_field1_qs)
  );


  // R[message_payload_1_c39]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c39_we),
    .wd     (message_payload_1_c39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c39_qs)
  );


  // R[doorbell_c39]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c39_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c39_intr_we),
    .wd     (doorbell_c39_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c39.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c39_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c39_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c39_preserve_mask_we),
    .wd     (doorbell_c39_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c39.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c39_preserve_mask_qs)
  );


  // R[completion_interrupt_c39]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c39_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c39_intr_we),
    .wd     (completion_interrupt_c39_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c39.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c39_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c39_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c39_preserve_mask_we),
    .wd     (completion_interrupt_c39_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c39.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c39_preserve_mask_qs)
  );


  // R[reserved_1_c40]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c40_we),
    .wd     (reserved_1_c40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c40_qs)
  );


  // R[channel_status_c40]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c40_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c40_channel_free_we),
    .wd     (channel_status_c40_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c40_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c40_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c40_channel_error_we),
    .wd     (channel_status_c40_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c40_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c40_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c40_field1_we),
    .wd     (channel_status_c40_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c40_field1_qs)
  );


  // R[reserved_2_c40]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c40_we),
    .wd     (reserved_2_c40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c40_qs)
  );


  // R[reserved_3_c40]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c40]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c40_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c40_intr_enable_we),
    .wd     (channel_flags_c40_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c40_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c40_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c40_field1_we),
    .wd     (channel_flags_c40_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c40_field1_qs)
  );


  // R[length_c40]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c40_we),
    .wd     (length_c40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c40_qs)
  );


  // R[message_header_c40]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c40_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c40_message_id_we),
    .wd     (message_header_c40_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c40_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c40_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c40_message_type_we),
    .wd     (message_header_c40_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c40_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c40_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c40_protocol_id_we),
    .wd     (message_header_c40_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c40_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c40_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c40_token_we),
    .wd     (message_header_c40_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c40_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c40_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c40_field1_we),
    .wd     (message_header_c40_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c40_field1_qs)
  );


  // R[message_payload_1_c40]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c40_we),
    .wd     (message_payload_1_c40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c40_qs)
  );


  // R[doorbell_c40]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c40_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c40_intr_we),
    .wd     (doorbell_c40_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c40.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c40_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c40_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c40_preserve_mask_we),
    .wd     (doorbell_c40_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c40.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c40_preserve_mask_qs)
  );


  // R[completion_interrupt_c40]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c40_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c40_intr_we),
    .wd     (completion_interrupt_c40_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c40.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c40_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c40_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c40_preserve_mask_we),
    .wd     (completion_interrupt_c40_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c40.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c40_preserve_mask_qs)
  );


  // R[reserved_1_c41]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c41_we),
    .wd     (reserved_1_c41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c41_qs)
  );


  // R[channel_status_c41]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c41_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c41_channel_free_we),
    .wd     (channel_status_c41_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c41_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c41_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c41_channel_error_we),
    .wd     (channel_status_c41_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c41_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c41_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c41_field1_we),
    .wd     (channel_status_c41_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c41_field1_qs)
  );


  // R[reserved_2_c41]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c41_we),
    .wd     (reserved_2_c41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c41_qs)
  );


  // R[reserved_3_c41]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c41]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c41_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c41_intr_enable_we),
    .wd     (channel_flags_c41_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c41_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c41_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c41_field1_we),
    .wd     (channel_flags_c41_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c41_field1_qs)
  );


  // R[length_c41]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c41_we),
    .wd     (length_c41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c41_qs)
  );


  // R[message_header_c41]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c41_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c41_message_id_we),
    .wd     (message_header_c41_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c41_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c41_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c41_message_type_we),
    .wd     (message_header_c41_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c41_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c41_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c41_protocol_id_we),
    .wd     (message_header_c41_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c41_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c41_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c41_token_we),
    .wd     (message_header_c41_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c41_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c41_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c41_field1_we),
    .wd     (message_header_c41_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c41_field1_qs)
  );


  // R[message_payload_1_c41]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c41_we),
    .wd     (message_payload_1_c41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c41_qs)
  );


  // R[doorbell_c41]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c41_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c41_intr_we),
    .wd     (doorbell_c41_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c41.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c41_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c41_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c41_preserve_mask_we),
    .wd     (doorbell_c41_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c41.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c41_preserve_mask_qs)
  );


  // R[completion_interrupt_c41]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c41_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c41_intr_we),
    .wd     (completion_interrupt_c41_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c41.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c41_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c41_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c41_preserve_mask_we),
    .wd     (completion_interrupt_c41_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c41.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c41_preserve_mask_qs)
  );


  // R[reserved_1_c42]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c42_we),
    .wd     (reserved_1_c42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c42_qs)
  );


  // R[channel_status_c42]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c42_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c42_channel_free_we),
    .wd     (channel_status_c42_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c42_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c42_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c42_channel_error_we),
    .wd     (channel_status_c42_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c42_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c42_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c42_field1_we),
    .wd     (channel_status_c42_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c42_field1_qs)
  );


  // R[reserved_2_c42]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c42_we),
    .wd     (reserved_2_c42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c42_qs)
  );


  // R[reserved_3_c42]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c42]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c42_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c42_intr_enable_we),
    .wd     (channel_flags_c42_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c42_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c42_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c42_field1_we),
    .wd     (channel_flags_c42_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c42_field1_qs)
  );


  // R[length_c42]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c42_we),
    .wd     (length_c42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c42_qs)
  );


  // R[message_header_c42]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c42_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c42_message_id_we),
    .wd     (message_header_c42_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c42_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c42_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c42_message_type_we),
    .wd     (message_header_c42_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c42_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c42_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c42_protocol_id_we),
    .wd     (message_header_c42_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c42_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c42_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c42_token_we),
    .wd     (message_header_c42_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c42_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c42_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c42_field1_we),
    .wd     (message_header_c42_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c42_field1_qs)
  );


  // R[message_payload_1_c42]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c42_we),
    .wd     (message_payload_1_c42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c42_qs)
  );


  // R[doorbell_c42]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c42_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c42_intr_we),
    .wd     (doorbell_c42_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c42.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c42_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c42_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c42_preserve_mask_we),
    .wd     (doorbell_c42_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c42.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c42_preserve_mask_qs)
  );


  // R[completion_interrupt_c42]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c42_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c42_intr_we),
    .wd     (completion_interrupt_c42_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c42.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c42_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c42_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c42_preserve_mask_we),
    .wd     (completion_interrupt_c42_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c42.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c42_preserve_mask_qs)
  );


  // R[reserved_1_c43]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c43_we),
    .wd     (reserved_1_c43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c43_qs)
  );


  // R[channel_status_c43]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c43_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c43_channel_free_we),
    .wd     (channel_status_c43_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c43_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c43_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c43_channel_error_we),
    .wd     (channel_status_c43_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c43_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c43_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c43_field1_we),
    .wd     (channel_status_c43_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c43_field1_qs)
  );


  // R[reserved_2_c43]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c43_we),
    .wd     (reserved_2_c43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c43_qs)
  );


  // R[reserved_3_c43]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c43]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c43_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c43_intr_enable_we),
    .wd     (channel_flags_c43_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c43_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c43_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c43_field1_we),
    .wd     (channel_flags_c43_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c43_field1_qs)
  );


  // R[length_c43]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c43_we),
    .wd     (length_c43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c43_qs)
  );


  // R[message_header_c43]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c43_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c43_message_id_we),
    .wd     (message_header_c43_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c43_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c43_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c43_message_type_we),
    .wd     (message_header_c43_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c43_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c43_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c43_protocol_id_we),
    .wd     (message_header_c43_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c43_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c43_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c43_token_we),
    .wd     (message_header_c43_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c43_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c43_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c43_field1_we),
    .wd     (message_header_c43_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c43_field1_qs)
  );


  // R[message_payload_1_c43]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c43_we),
    .wd     (message_payload_1_c43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c43_qs)
  );


  // R[doorbell_c43]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c43_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c43_intr_we),
    .wd     (doorbell_c43_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c43.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c43_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c43_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c43_preserve_mask_we),
    .wd     (doorbell_c43_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c43.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c43_preserve_mask_qs)
  );


  // R[completion_interrupt_c43]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c43_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c43_intr_we),
    .wd     (completion_interrupt_c43_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c43.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c43_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c43_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c43_preserve_mask_we),
    .wd     (completion_interrupt_c43_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c43.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c43_preserve_mask_qs)
  );


  // R[reserved_1_c44]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c44_we),
    .wd     (reserved_1_c44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c44_qs)
  );


  // R[channel_status_c44]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c44_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c44_channel_free_we),
    .wd     (channel_status_c44_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c44_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c44_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c44_channel_error_we),
    .wd     (channel_status_c44_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c44_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c44_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c44_field1_we),
    .wd     (channel_status_c44_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c44_field1_qs)
  );


  // R[reserved_2_c44]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c44_we),
    .wd     (reserved_2_c44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c44_qs)
  );


  // R[reserved_3_c44]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c44]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c44_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c44_intr_enable_we),
    .wd     (channel_flags_c44_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c44_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c44_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c44_field1_we),
    .wd     (channel_flags_c44_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c44_field1_qs)
  );


  // R[length_c44]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c44_we),
    .wd     (length_c44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c44_qs)
  );


  // R[message_header_c44]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c44_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c44_message_id_we),
    .wd     (message_header_c44_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c44_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c44_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c44_message_type_we),
    .wd     (message_header_c44_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c44_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c44_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c44_protocol_id_we),
    .wd     (message_header_c44_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c44_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c44_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c44_token_we),
    .wd     (message_header_c44_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c44_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c44_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c44_field1_we),
    .wd     (message_header_c44_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c44_field1_qs)
  );


  // R[message_payload_1_c44]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c44_we),
    .wd     (message_payload_1_c44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c44_qs)
  );


  // R[doorbell_c44]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c44_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c44_intr_we),
    .wd     (doorbell_c44_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c44.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c44_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c44_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c44_preserve_mask_we),
    .wd     (doorbell_c44_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c44.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c44_preserve_mask_qs)
  );


  // R[completion_interrupt_c44]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c44_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c44_intr_we),
    .wd     (completion_interrupt_c44_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c44.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c44_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c44_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c44_preserve_mask_we),
    .wd     (completion_interrupt_c44_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c44.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c44_preserve_mask_qs)
  );


  // R[reserved_1_c45]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c45_we),
    .wd     (reserved_1_c45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c45_qs)
  );


  // R[channel_status_c45]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c45_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c45_channel_free_we),
    .wd     (channel_status_c45_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c45_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c45_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c45_channel_error_we),
    .wd     (channel_status_c45_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c45_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c45_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c45_field1_we),
    .wd     (channel_status_c45_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c45_field1_qs)
  );


  // R[reserved_2_c45]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c45_we),
    .wd     (reserved_2_c45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c45_qs)
  );


  // R[reserved_3_c45]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c45]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c45_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c45_intr_enable_we),
    .wd     (channel_flags_c45_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c45_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c45_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c45_field1_we),
    .wd     (channel_flags_c45_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c45_field1_qs)
  );


  // R[length_c45]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c45_we),
    .wd     (length_c45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c45_qs)
  );


  // R[message_header_c45]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c45_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c45_message_id_we),
    .wd     (message_header_c45_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c45_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c45_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c45_message_type_we),
    .wd     (message_header_c45_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c45_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c45_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c45_protocol_id_we),
    .wd     (message_header_c45_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c45_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c45_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c45_token_we),
    .wd     (message_header_c45_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c45_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c45_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c45_field1_we),
    .wd     (message_header_c45_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c45_field1_qs)
  );


  // R[message_payload_1_c45]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c45_we),
    .wd     (message_payload_1_c45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c45_qs)
  );


  // R[doorbell_c45]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c45_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c45_intr_we),
    .wd     (doorbell_c45_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c45.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c45_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c45_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c45_preserve_mask_we),
    .wd     (doorbell_c45_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c45.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c45_preserve_mask_qs)
  );


  // R[completion_interrupt_c45]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c45_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c45_intr_we),
    .wd     (completion_interrupt_c45_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c45.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c45_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c45_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c45_preserve_mask_we),
    .wd     (completion_interrupt_c45_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c45.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c45_preserve_mask_qs)
  );


  // R[reserved_1_c46]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c46_we),
    .wd     (reserved_1_c46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c46_qs)
  );


  // R[channel_status_c46]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c46_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c46_channel_free_we),
    .wd     (channel_status_c46_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c46_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c46_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c46_channel_error_we),
    .wd     (channel_status_c46_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c46_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c46_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c46_field1_we),
    .wd     (channel_status_c46_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c46_field1_qs)
  );


  // R[reserved_2_c46]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c46_we),
    .wd     (reserved_2_c46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c46_qs)
  );


  // R[reserved_3_c46]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c46]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c46_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c46_intr_enable_we),
    .wd     (channel_flags_c46_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c46_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c46_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c46_field1_we),
    .wd     (channel_flags_c46_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c46_field1_qs)
  );


  // R[length_c46]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c46_we),
    .wd     (length_c46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c46_qs)
  );


  // R[message_header_c46]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c46_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c46_message_id_we),
    .wd     (message_header_c46_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c46_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c46_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c46_message_type_we),
    .wd     (message_header_c46_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c46_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c46_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c46_protocol_id_we),
    .wd     (message_header_c46_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c46_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c46_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c46_token_we),
    .wd     (message_header_c46_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c46_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c46_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c46_field1_we),
    .wd     (message_header_c46_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c46_field1_qs)
  );


  // R[message_payload_1_c46]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c46_we),
    .wd     (message_payload_1_c46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c46_qs)
  );


  // R[doorbell_c46]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c46_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c46_intr_we),
    .wd     (doorbell_c46_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c46.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c46_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c46_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c46_preserve_mask_we),
    .wd     (doorbell_c46_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c46.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c46_preserve_mask_qs)
  );


  // R[completion_interrupt_c46]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c46_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c46_intr_we),
    .wd     (completion_interrupt_c46_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c46.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c46_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c46_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c46_preserve_mask_we),
    .wd     (completion_interrupt_c46_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c46.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c46_preserve_mask_qs)
  );


  // R[reserved_1_c47]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c47_we),
    .wd     (reserved_1_c47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c47_qs)
  );


  // R[channel_status_c47]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c47_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c47_channel_free_we),
    .wd     (channel_status_c47_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c47_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c47_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c47_channel_error_we),
    .wd     (channel_status_c47_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c47_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c47_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c47_field1_we),
    .wd     (channel_status_c47_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c47_field1_qs)
  );


  // R[reserved_2_c47]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c47_we),
    .wd     (reserved_2_c47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c47_qs)
  );


  // R[reserved_3_c47]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c47]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c47_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c47_intr_enable_we),
    .wd     (channel_flags_c47_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c47_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c47_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c47_field1_we),
    .wd     (channel_flags_c47_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c47_field1_qs)
  );


  // R[length_c47]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c47_we),
    .wd     (length_c47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c47_qs)
  );


  // R[message_header_c47]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c47_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c47_message_id_we),
    .wd     (message_header_c47_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c47_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c47_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c47_message_type_we),
    .wd     (message_header_c47_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c47_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c47_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c47_protocol_id_we),
    .wd     (message_header_c47_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c47_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c47_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c47_token_we),
    .wd     (message_header_c47_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c47_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c47_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c47_field1_we),
    .wd     (message_header_c47_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c47_field1_qs)
  );


  // R[message_payload_1_c47]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c47_we),
    .wd     (message_payload_1_c47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c47_qs)
  );


  // R[doorbell_c47]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c47_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c47_intr_we),
    .wd     (doorbell_c47_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c47.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c47_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c47_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c47_preserve_mask_we),
    .wd     (doorbell_c47_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c47.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c47_preserve_mask_qs)
  );


  // R[completion_interrupt_c47]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c47_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c47_intr_we),
    .wd     (completion_interrupt_c47_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c47.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c47_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c47_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c47_preserve_mask_we),
    .wd     (completion_interrupt_c47_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c47.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c47_preserve_mask_qs)
  );


  // R[reserved_1_c48]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c48_we),
    .wd     (reserved_1_c48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c48_qs)
  );


  // R[channel_status_c48]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c48_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c48_channel_free_we),
    .wd     (channel_status_c48_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c48_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c48_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c48_channel_error_we),
    .wd     (channel_status_c48_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c48_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c48_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c48_field1_we),
    .wd     (channel_status_c48_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c48_field1_qs)
  );


  // R[reserved_2_c48]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c48_we),
    .wd     (reserved_2_c48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c48_qs)
  );


  // R[reserved_3_c48]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c48]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c48_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c48_intr_enable_we),
    .wd     (channel_flags_c48_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c48_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c48_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c48_field1_we),
    .wd     (channel_flags_c48_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c48_field1_qs)
  );


  // R[length_c48]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c48_we),
    .wd     (length_c48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c48_qs)
  );


  // R[message_header_c48]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c48_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c48_message_id_we),
    .wd     (message_header_c48_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c48_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c48_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c48_message_type_we),
    .wd     (message_header_c48_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c48_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c48_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c48_protocol_id_we),
    .wd     (message_header_c48_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c48_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c48_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c48_token_we),
    .wd     (message_header_c48_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c48_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c48_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c48_field1_we),
    .wd     (message_header_c48_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c48_field1_qs)
  );


  // R[message_payload_1_c48]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c48_we),
    .wd     (message_payload_1_c48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c48_qs)
  );


  // R[doorbell_c48]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c48_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c48_intr_we),
    .wd     (doorbell_c48_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c48.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c48_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c48_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c48_preserve_mask_we),
    .wd     (doorbell_c48_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c48.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c48_preserve_mask_qs)
  );


  // R[completion_interrupt_c48]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c48_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c48_intr_we),
    .wd     (completion_interrupt_c48_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c48.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c48_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c48_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c48_preserve_mask_we),
    .wd     (completion_interrupt_c48_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c48.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c48_preserve_mask_qs)
  );


  // R[reserved_1_c49]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c49_we),
    .wd     (reserved_1_c49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c49_qs)
  );


  // R[channel_status_c49]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c49_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c49_channel_free_we),
    .wd     (channel_status_c49_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c49_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c49_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c49_channel_error_we),
    .wd     (channel_status_c49_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c49_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c49_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c49_field1_we),
    .wd     (channel_status_c49_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c49_field1_qs)
  );


  // R[reserved_2_c49]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c49_we),
    .wd     (reserved_2_c49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c49_qs)
  );


  // R[reserved_3_c49]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c49]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c49_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c49_intr_enable_we),
    .wd     (channel_flags_c49_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c49_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c49_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c49_field1_we),
    .wd     (channel_flags_c49_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c49_field1_qs)
  );


  // R[length_c49]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c49_we),
    .wd     (length_c49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c49_qs)
  );


  // R[message_header_c49]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c49_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c49_message_id_we),
    .wd     (message_header_c49_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c49_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c49_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c49_message_type_we),
    .wd     (message_header_c49_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c49_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c49_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c49_protocol_id_we),
    .wd     (message_header_c49_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c49_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c49_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c49_token_we),
    .wd     (message_header_c49_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c49_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c49_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c49_field1_we),
    .wd     (message_header_c49_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c49_field1_qs)
  );


  // R[message_payload_1_c49]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c49_we),
    .wd     (message_payload_1_c49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c49_qs)
  );


  // R[doorbell_c49]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c49_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c49_intr_we),
    .wd     (doorbell_c49_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c49.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c49_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c49_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c49_preserve_mask_we),
    .wd     (doorbell_c49_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c49.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c49_preserve_mask_qs)
  );


  // R[completion_interrupt_c49]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c49_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c49_intr_we),
    .wd     (completion_interrupt_c49_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c49.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c49_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c49_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c49_preserve_mask_we),
    .wd     (completion_interrupt_c49_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c49.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c49_preserve_mask_qs)
  );


  // R[reserved_1_c50]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c50_we),
    .wd     (reserved_1_c50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c50_qs)
  );


  // R[channel_status_c50]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c50_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c50_channel_free_we),
    .wd     (channel_status_c50_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c50_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c50_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c50_channel_error_we),
    .wd     (channel_status_c50_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c50_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c50_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c50_field1_we),
    .wd     (channel_status_c50_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c50_field1_qs)
  );


  // R[reserved_2_c50]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c50_we),
    .wd     (reserved_2_c50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c50_qs)
  );


  // R[reserved_3_c50]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c50]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c50_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c50_intr_enable_we),
    .wd     (channel_flags_c50_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c50_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c50_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c50_field1_we),
    .wd     (channel_flags_c50_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c50_field1_qs)
  );


  // R[length_c50]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c50_we),
    .wd     (length_c50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c50_qs)
  );


  // R[message_header_c50]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c50_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c50_message_id_we),
    .wd     (message_header_c50_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c50_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c50_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c50_message_type_we),
    .wd     (message_header_c50_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c50_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c50_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c50_protocol_id_we),
    .wd     (message_header_c50_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c50_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c50_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c50_token_we),
    .wd     (message_header_c50_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c50_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c50_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c50_field1_we),
    .wd     (message_header_c50_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c50_field1_qs)
  );


  // R[message_payload_1_c50]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c50_we),
    .wd     (message_payload_1_c50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c50_qs)
  );


  // R[doorbell_c50]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c50_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c50_intr_we),
    .wd     (doorbell_c50_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c50.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c50_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c50_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c50_preserve_mask_we),
    .wd     (doorbell_c50_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c50.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c50_preserve_mask_qs)
  );


  // R[completion_interrupt_c50]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c50_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c50_intr_we),
    .wd     (completion_interrupt_c50_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c50.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c50_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c50_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c50_preserve_mask_we),
    .wd     (completion_interrupt_c50_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c50.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c50_preserve_mask_qs)
  );


  // R[reserved_1_c51]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c51_we),
    .wd     (reserved_1_c51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c51_qs)
  );


  // R[channel_status_c51]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c51_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c51_channel_free_we),
    .wd     (channel_status_c51_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c51_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c51_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c51_channel_error_we),
    .wd     (channel_status_c51_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c51_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c51_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c51_field1_we),
    .wd     (channel_status_c51_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c51_field1_qs)
  );


  // R[reserved_2_c51]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c51_we),
    .wd     (reserved_2_c51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c51_qs)
  );


  // R[reserved_3_c51]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c51]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c51_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c51_intr_enable_we),
    .wd     (channel_flags_c51_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c51_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c51_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c51_field1_we),
    .wd     (channel_flags_c51_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c51_field1_qs)
  );


  // R[length_c51]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c51_we),
    .wd     (length_c51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c51_qs)
  );


  // R[message_header_c51]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c51_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c51_message_id_we),
    .wd     (message_header_c51_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c51_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c51_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c51_message_type_we),
    .wd     (message_header_c51_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c51_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c51_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c51_protocol_id_we),
    .wd     (message_header_c51_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c51_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c51_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c51_token_we),
    .wd     (message_header_c51_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c51_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c51_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c51_field1_we),
    .wd     (message_header_c51_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c51_field1_qs)
  );


  // R[message_payload_1_c51]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c51_we),
    .wd     (message_payload_1_c51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c51_qs)
  );


  // R[doorbell_c51]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c51_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c51_intr_we),
    .wd     (doorbell_c51_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c51.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c51_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c51_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c51_preserve_mask_we),
    .wd     (doorbell_c51_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c51.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c51_preserve_mask_qs)
  );


  // R[completion_interrupt_c51]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c51_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c51_intr_we),
    .wd     (completion_interrupt_c51_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c51.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c51_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c51_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c51_preserve_mask_we),
    .wd     (completion_interrupt_c51_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c51.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c51_preserve_mask_qs)
  );


  // R[reserved_1_c52]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c52_we),
    .wd     (reserved_1_c52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c52_qs)
  );


  // R[channel_status_c52]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c52_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c52_channel_free_we),
    .wd     (channel_status_c52_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c52_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c52_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c52_channel_error_we),
    .wd     (channel_status_c52_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c52_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c52_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c52_field1_we),
    .wd     (channel_status_c52_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c52_field1_qs)
  );


  // R[reserved_2_c52]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c52_we),
    .wd     (reserved_2_c52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c52_qs)
  );


  // R[reserved_3_c52]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c52]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c52_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c52_intr_enable_we),
    .wd     (channel_flags_c52_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c52_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c52_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c52_field1_we),
    .wd     (channel_flags_c52_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c52_field1_qs)
  );


  // R[length_c52]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c52_we),
    .wd     (length_c52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c52_qs)
  );


  // R[message_header_c52]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c52_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c52_message_id_we),
    .wd     (message_header_c52_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c52_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c52_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c52_message_type_we),
    .wd     (message_header_c52_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c52_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c52_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c52_protocol_id_we),
    .wd     (message_header_c52_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c52_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c52_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c52_token_we),
    .wd     (message_header_c52_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c52_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c52_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c52_field1_we),
    .wd     (message_header_c52_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c52_field1_qs)
  );


  // R[message_payload_1_c52]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c52_we),
    .wd     (message_payload_1_c52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c52_qs)
  );


  // R[doorbell_c52]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c52_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c52_intr_we),
    .wd     (doorbell_c52_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c52.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c52_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c52_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c52_preserve_mask_we),
    .wd     (doorbell_c52_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c52.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c52_preserve_mask_qs)
  );


  // R[completion_interrupt_c52]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c52_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c52_intr_we),
    .wd     (completion_interrupt_c52_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c52.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c52_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c52_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c52_preserve_mask_we),
    .wd     (completion_interrupt_c52_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c52.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c52_preserve_mask_qs)
  );


  // R[reserved_1_c53]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c53_we),
    .wd     (reserved_1_c53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c53_qs)
  );


  // R[channel_status_c53]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c53_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c53_channel_free_we),
    .wd     (channel_status_c53_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c53_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c53_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c53_channel_error_we),
    .wd     (channel_status_c53_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c53_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c53_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c53_field1_we),
    .wd     (channel_status_c53_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c53_field1_qs)
  );


  // R[reserved_2_c53]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c53_we),
    .wd     (reserved_2_c53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c53_qs)
  );


  // R[reserved_3_c53]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c53]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c53_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c53_intr_enable_we),
    .wd     (channel_flags_c53_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c53_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c53_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c53_field1_we),
    .wd     (channel_flags_c53_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c53_field1_qs)
  );


  // R[length_c53]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c53_we),
    .wd     (length_c53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c53_qs)
  );


  // R[message_header_c53]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c53_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c53_message_id_we),
    .wd     (message_header_c53_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c53_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c53_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c53_message_type_we),
    .wd     (message_header_c53_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c53_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c53_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c53_protocol_id_we),
    .wd     (message_header_c53_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c53_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c53_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c53_token_we),
    .wd     (message_header_c53_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c53_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c53_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c53_field1_we),
    .wd     (message_header_c53_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c53_field1_qs)
  );


  // R[message_payload_1_c53]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c53_we),
    .wd     (message_payload_1_c53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c53_qs)
  );


  // R[doorbell_c53]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c53_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c53_intr_we),
    .wd     (doorbell_c53_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c53.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c53_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c53_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c53_preserve_mask_we),
    .wd     (doorbell_c53_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c53.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c53_preserve_mask_qs)
  );


  // R[completion_interrupt_c53]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c53_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c53_intr_we),
    .wd     (completion_interrupt_c53_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c53.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c53_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c53_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c53_preserve_mask_we),
    .wd     (completion_interrupt_c53_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c53.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c53_preserve_mask_qs)
  );


  // R[reserved_1_c54]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c54_we),
    .wd     (reserved_1_c54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c54_qs)
  );


  // R[channel_status_c54]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c54_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c54_channel_free_we),
    .wd     (channel_status_c54_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c54_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c54_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c54_channel_error_we),
    .wd     (channel_status_c54_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c54_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c54_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c54_field1_we),
    .wd     (channel_status_c54_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c54_field1_qs)
  );


  // R[reserved_2_c54]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c54_we),
    .wd     (reserved_2_c54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c54_qs)
  );


  // R[reserved_3_c54]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c54]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c54_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c54_intr_enable_we),
    .wd     (channel_flags_c54_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c54_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c54_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c54_field1_we),
    .wd     (channel_flags_c54_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c54_field1_qs)
  );


  // R[length_c54]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c54_we),
    .wd     (length_c54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c54_qs)
  );


  // R[message_header_c54]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c54_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c54_message_id_we),
    .wd     (message_header_c54_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c54_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c54_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c54_message_type_we),
    .wd     (message_header_c54_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c54_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c54_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c54_protocol_id_we),
    .wd     (message_header_c54_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c54_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c54_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c54_token_we),
    .wd     (message_header_c54_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c54_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c54_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c54_field1_we),
    .wd     (message_header_c54_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c54_field1_qs)
  );


  // R[message_payload_1_c54]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c54_we),
    .wd     (message_payload_1_c54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c54_qs)
  );


  // R[doorbell_c54]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c54_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c54_intr_we),
    .wd     (doorbell_c54_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c54.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c54_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c54_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c54_preserve_mask_we),
    .wd     (doorbell_c54_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c54.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c54_preserve_mask_qs)
  );


  // R[completion_interrupt_c54]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c54_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c54_intr_we),
    .wd     (completion_interrupt_c54_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c54.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c54_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c54_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c54_preserve_mask_we),
    .wd     (completion_interrupt_c54_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c54.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c54_preserve_mask_qs)
  );


  // R[reserved_1_c55]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c55_we),
    .wd     (reserved_1_c55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c55_qs)
  );


  // R[channel_status_c55]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c55_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c55_channel_free_we),
    .wd     (channel_status_c55_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c55_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c55_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c55_channel_error_we),
    .wd     (channel_status_c55_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c55_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c55_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c55_field1_we),
    .wd     (channel_status_c55_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c55_field1_qs)
  );


  // R[reserved_2_c55]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c55_we),
    .wd     (reserved_2_c55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c55_qs)
  );


  // R[reserved_3_c55]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c55]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c55_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c55_intr_enable_we),
    .wd     (channel_flags_c55_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c55_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c55_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c55_field1_we),
    .wd     (channel_flags_c55_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c55_field1_qs)
  );


  // R[length_c55]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c55_we),
    .wd     (length_c55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c55_qs)
  );


  // R[message_header_c55]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c55_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c55_message_id_we),
    .wd     (message_header_c55_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c55_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c55_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c55_message_type_we),
    .wd     (message_header_c55_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c55_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c55_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c55_protocol_id_we),
    .wd     (message_header_c55_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c55_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c55_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c55_token_we),
    .wd     (message_header_c55_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c55_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c55_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c55_field1_we),
    .wd     (message_header_c55_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c55_field1_qs)
  );


  // R[message_payload_1_c55]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c55_we),
    .wd     (message_payload_1_c55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c55_qs)
  );


  // R[doorbell_c55]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c55_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c55_intr_we),
    .wd     (doorbell_c55_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c55.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c55_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c55_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c55_preserve_mask_we),
    .wd     (doorbell_c55_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c55.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c55_preserve_mask_qs)
  );


  // R[completion_interrupt_c55]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c55_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c55_intr_we),
    .wd     (completion_interrupt_c55_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c55.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c55_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c55_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c55_preserve_mask_we),
    .wd     (completion_interrupt_c55_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c55.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c55_preserve_mask_qs)
  );


  // R[reserved_1_c56]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c56_we),
    .wd     (reserved_1_c56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c56_qs)
  );


  // R[channel_status_c56]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c56_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c56_channel_free_we),
    .wd     (channel_status_c56_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c56_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c56_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c56_channel_error_we),
    .wd     (channel_status_c56_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c56_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c56_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c56_field1_we),
    .wd     (channel_status_c56_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c56_field1_qs)
  );


  // R[reserved_2_c56]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c56_we),
    .wd     (reserved_2_c56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c56_qs)
  );


  // R[reserved_3_c56]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c56]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c56_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c56_intr_enable_we),
    .wd     (channel_flags_c56_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c56_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c56_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c56_field1_we),
    .wd     (channel_flags_c56_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c56_field1_qs)
  );


  // R[length_c56]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c56_we),
    .wd     (length_c56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c56_qs)
  );


  // R[message_header_c56]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c56_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c56_message_id_we),
    .wd     (message_header_c56_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c56_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c56_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c56_message_type_we),
    .wd     (message_header_c56_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c56_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c56_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c56_protocol_id_we),
    .wd     (message_header_c56_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c56_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c56_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c56_token_we),
    .wd     (message_header_c56_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c56_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c56_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c56_field1_we),
    .wd     (message_header_c56_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c56_field1_qs)
  );


  // R[message_payload_1_c56]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c56_we),
    .wd     (message_payload_1_c56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c56_qs)
  );


  // R[doorbell_c56]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c56_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c56_intr_we),
    .wd     (doorbell_c56_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c56.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c56_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c56_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c56_preserve_mask_we),
    .wd     (doorbell_c56_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c56.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c56_preserve_mask_qs)
  );


  // R[completion_interrupt_c56]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c56_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c56_intr_we),
    .wd     (completion_interrupt_c56_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c56.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c56_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c56_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c56_preserve_mask_we),
    .wd     (completion_interrupt_c56_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c56.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c56_preserve_mask_qs)
  );


  // R[reserved_1_c57]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c57_we),
    .wd     (reserved_1_c57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c57_qs)
  );


  // R[channel_status_c57]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c57_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c57_channel_free_we),
    .wd     (channel_status_c57_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c57_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c57_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c57_channel_error_we),
    .wd     (channel_status_c57_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c57_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c57_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c57_field1_we),
    .wd     (channel_status_c57_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c57_field1_qs)
  );


  // R[reserved_2_c57]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c57_we),
    .wd     (reserved_2_c57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c57_qs)
  );


  // R[reserved_3_c57]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c57]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c57_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c57_intr_enable_we),
    .wd     (channel_flags_c57_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c57_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c57_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c57_field1_we),
    .wd     (channel_flags_c57_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c57_field1_qs)
  );


  // R[length_c57]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c57_we),
    .wd     (length_c57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c57_qs)
  );


  // R[message_header_c57]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c57_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c57_message_id_we),
    .wd     (message_header_c57_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c57_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c57_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c57_message_type_we),
    .wd     (message_header_c57_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c57_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c57_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c57_protocol_id_we),
    .wd     (message_header_c57_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c57_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c57_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c57_token_we),
    .wd     (message_header_c57_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c57_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c57_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c57_field1_we),
    .wd     (message_header_c57_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c57_field1_qs)
  );


  // R[message_payload_1_c57]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c57_we),
    .wd     (message_payload_1_c57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c57_qs)
  );


  // R[doorbell_c57]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c57_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c57_intr_we),
    .wd     (doorbell_c57_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c57.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c57_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c57_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c57_preserve_mask_we),
    .wd     (doorbell_c57_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c57.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c57_preserve_mask_qs)
  );


  // R[completion_interrupt_c57]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c57_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c57_intr_we),
    .wd     (completion_interrupt_c57_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c57.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c57_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c57_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c57_preserve_mask_we),
    .wd     (completion_interrupt_c57_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c57.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c57_preserve_mask_qs)
  );


  // R[reserved_1_c58]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c58_we),
    .wd     (reserved_1_c58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c58_qs)
  );


  // R[channel_status_c58]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c58_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c58_channel_free_we),
    .wd     (channel_status_c58_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c58_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c58_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c58_channel_error_we),
    .wd     (channel_status_c58_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c58_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c58_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c58_field1_we),
    .wd     (channel_status_c58_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c58_field1_qs)
  );


  // R[reserved_2_c58]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c58_we),
    .wd     (reserved_2_c58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c58_qs)
  );


  // R[reserved_3_c58]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c58]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c58_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c58_intr_enable_we),
    .wd     (channel_flags_c58_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c58_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c58_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c58_field1_we),
    .wd     (channel_flags_c58_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c58_field1_qs)
  );


  // R[length_c58]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c58_we),
    .wd     (length_c58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c58_qs)
  );


  // R[message_header_c58]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c58_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c58_message_id_we),
    .wd     (message_header_c58_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c58_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c58_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c58_message_type_we),
    .wd     (message_header_c58_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c58_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c58_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c58_protocol_id_we),
    .wd     (message_header_c58_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c58_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c58_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c58_token_we),
    .wd     (message_header_c58_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c58_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c58_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c58_field1_we),
    .wd     (message_header_c58_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c58_field1_qs)
  );


  // R[message_payload_1_c58]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c58_we),
    .wd     (message_payload_1_c58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c58_qs)
  );


  // R[doorbell_c58]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c58_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c58_intr_we),
    .wd     (doorbell_c58_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c58.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c58_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c58_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c58_preserve_mask_we),
    .wd     (doorbell_c58_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c58.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c58_preserve_mask_qs)
  );


  // R[completion_interrupt_c58]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c58_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c58_intr_we),
    .wd     (completion_interrupt_c58_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c58.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c58_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c58_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c58_preserve_mask_we),
    .wd     (completion_interrupt_c58_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c58.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c58_preserve_mask_qs)
  );


  // R[reserved_1_c59]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c59_we),
    .wd     (reserved_1_c59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c59_qs)
  );


  // R[channel_status_c59]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c59_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c59_channel_free_we),
    .wd     (channel_status_c59_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c59_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c59_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c59_channel_error_we),
    .wd     (channel_status_c59_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c59_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c59_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c59_field1_we),
    .wd     (channel_status_c59_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c59_field1_qs)
  );


  // R[reserved_2_c59]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c59_we),
    .wd     (reserved_2_c59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c59_qs)
  );


  // R[reserved_3_c59]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c59]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c59_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c59_intr_enable_we),
    .wd     (channel_flags_c59_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c59_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c59_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c59_field1_we),
    .wd     (channel_flags_c59_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c59_field1_qs)
  );


  // R[length_c59]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c59_we),
    .wd     (length_c59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c59_qs)
  );


  // R[message_header_c59]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c59_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c59_message_id_we),
    .wd     (message_header_c59_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c59_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c59_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c59_message_type_we),
    .wd     (message_header_c59_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c59_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c59_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c59_protocol_id_we),
    .wd     (message_header_c59_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c59_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c59_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c59_token_we),
    .wd     (message_header_c59_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c59_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c59_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c59_field1_we),
    .wd     (message_header_c59_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c59_field1_qs)
  );


  // R[message_payload_1_c59]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c59_we),
    .wd     (message_payload_1_c59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c59_qs)
  );


  // R[doorbell_c59]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c59_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c59_intr_we),
    .wd     (doorbell_c59_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c59.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c59_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c59_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c59_preserve_mask_we),
    .wd     (doorbell_c59_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c59.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c59_preserve_mask_qs)
  );


  // R[completion_interrupt_c59]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c59_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c59_intr_we),
    .wd     (completion_interrupt_c59_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c59.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c59_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c59_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c59_preserve_mask_we),
    .wd     (completion_interrupt_c59_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c59.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c59_preserve_mask_qs)
  );


  // R[reserved_1_c60]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c60_we),
    .wd     (reserved_1_c60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c60_qs)
  );


  // R[channel_status_c60]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c60_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c60_channel_free_we),
    .wd     (channel_status_c60_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c60_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c60_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c60_channel_error_we),
    .wd     (channel_status_c60_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c60_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c60_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c60_field1_we),
    .wd     (channel_status_c60_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c60_field1_qs)
  );


  // R[reserved_2_c60]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c60_we),
    .wd     (reserved_2_c60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c60_qs)
  );


  // R[reserved_3_c60]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c60]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c60_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c60_intr_enable_we),
    .wd     (channel_flags_c60_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c60_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c60_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c60_field1_we),
    .wd     (channel_flags_c60_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c60_field1_qs)
  );


  // R[length_c60]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c60_we),
    .wd     (length_c60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c60_qs)
  );


  // R[message_header_c60]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c60_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c60_message_id_we),
    .wd     (message_header_c60_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c60_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c60_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c60_message_type_we),
    .wd     (message_header_c60_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c60_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c60_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c60_protocol_id_we),
    .wd     (message_header_c60_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c60_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c60_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c60_token_we),
    .wd     (message_header_c60_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c60_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c60_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c60_field1_we),
    .wd     (message_header_c60_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c60_field1_qs)
  );


  // R[message_payload_1_c60]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c60_we),
    .wd     (message_payload_1_c60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c60_qs)
  );


  // R[doorbell_c60]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c60_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c60_intr_we),
    .wd     (doorbell_c60_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c60.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c60_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c60_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c60_preserve_mask_we),
    .wd     (doorbell_c60_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c60.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c60_preserve_mask_qs)
  );


  // R[completion_interrupt_c60]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c60_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c60_intr_we),
    .wd     (completion_interrupt_c60_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c60.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c60_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c60_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c60_preserve_mask_we),
    .wd     (completion_interrupt_c60_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c60.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c60_preserve_mask_qs)
  );


  // R[reserved_1_c61]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c61_we),
    .wd     (reserved_1_c61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c61_qs)
  );


  // R[channel_status_c61]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c61_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c61_channel_free_we),
    .wd     (channel_status_c61_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c61_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c61_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c61_channel_error_we),
    .wd     (channel_status_c61_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c61_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c61_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c61_field1_we),
    .wd     (channel_status_c61_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c61_field1_qs)
  );


  // R[reserved_2_c61]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c61_we),
    .wd     (reserved_2_c61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c61_qs)
  );


  // R[reserved_3_c61]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c61]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c61_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c61_intr_enable_we),
    .wd     (channel_flags_c61_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c61_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c61_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c61_field1_we),
    .wd     (channel_flags_c61_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c61_field1_qs)
  );


  // R[length_c61]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c61_we),
    .wd     (length_c61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c61_qs)
  );


  // R[message_header_c61]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c61_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c61_message_id_we),
    .wd     (message_header_c61_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c61_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c61_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c61_message_type_we),
    .wd     (message_header_c61_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c61_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c61_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c61_protocol_id_we),
    .wd     (message_header_c61_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c61_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c61_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c61_token_we),
    .wd     (message_header_c61_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c61_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c61_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c61_field1_we),
    .wd     (message_header_c61_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c61_field1_qs)
  );


  // R[message_payload_1_c61]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c61_we),
    .wd     (message_payload_1_c61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c61_qs)
  );


  // R[doorbell_c61]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c61_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c61_intr_we),
    .wd     (doorbell_c61_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c61.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c61_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c61_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c61_preserve_mask_we),
    .wd     (doorbell_c61_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c61.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c61_preserve_mask_qs)
  );


  // R[completion_interrupt_c61]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c61_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c61_intr_we),
    .wd     (completion_interrupt_c61_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c61.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c61_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c61_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c61_preserve_mask_we),
    .wd     (completion_interrupt_c61_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c61.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c61_preserve_mask_qs)
  );


  // R[reserved_1_c62]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c62_we),
    .wd     (reserved_1_c62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c62_qs)
  );


  // R[channel_status_c62]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c62_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c62_channel_free_we),
    .wd     (channel_status_c62_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c62_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c62_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c62_channel_error_we),
    .wd     (channel_status_c62_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c62_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c62_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c62_field1_we),
    .wd     (channel_status_c62_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c62_field1_qs)
  );


  // R[reserved_2_c62]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c62_we),
    .wd     (reserved_2_c62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c62_qs)
  );


  // R[reserved_3_c62]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c62]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c62_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c62_intr_enable_we),
    .wd     (channel_flags_c62_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c62_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c62_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c62_field1_we),
    .wd     (channel_flags_c62_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c62_field1_qs)
  );


  // R[length_c62]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c62_we),
    .wd     (length_c62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c62_qs)
  );


  // R[message_header_c62]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c62_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c62_message_id_we),
    .wd     (message_header_c62_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c62_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c62_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c62_message_type_we),
    .wd     (message_header_c62_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c62_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c62_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c62_protocol_id_we),
    .wd     (message_header_c62_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c62_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c62_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c62_token_we),
    .wd     (message_header_c62_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c62_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c62_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c62_field1_we),
    .wd     (message_header_c62_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c62_field1_qs)
  );


  // R[message_payload_1_c62]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c62_we),
    .wd     (message_payload_1_c62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c62_qs)
  );


  // R[doorbell_c62]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c62_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c62_intr_we),
    .wd     (doorbell_c62_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c62.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c62_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c62_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c62_preserve_mask_we),
    .wd     (doorbell_c62_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c62.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c62_preserve_mask_qs)
  );


  // R[completion_interrupt_c62]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c62_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c62_intr_we),
    .wd     (completion_interrupt_c62_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c62.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c62_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c62_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c62_preserve_mask_we),
    .wd     (completion_interrupt_c62_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c62.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c62_preserve_mask_qs)
  );


  // R[reserved_1_c63]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c63_we),
    .wd     (reserved_1_c63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c63_qs)
  );


  // R[channel_status_c63]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c63_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c63_channel_free_we),
    .wd     (channel_status_c63_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c63_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c63_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c63_channel_error_we),
    .wd     (channel_status_c63_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c63_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c63_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c63_field1_we),
    .wd     (channel_status_c63_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c63_field1_qs)
  );


  // R[reserved_2_c63]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c63_we),
    .wd     (reserved_2_c63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c63_qs)
  );


  // R[reserved_3_c63]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c63]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c63_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c63_intr_enable_we),
    .wd     (channel_flags_c63_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c63_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c63_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c63_field1_we),
    .wd     (channel_flags_c63_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c63_field1_qs)
  );


  // R[length_c63]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c63_we),
    .wd     (length_c63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c63_qs)
  );


  // R[message_header_c63]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c63_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c63_message_id_we),
    .wd     (message_header_c63_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c63_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c63_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c63_message_type_we),
    .wd     (message_header_c63_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c63_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c63_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c63_protocol_id_we),
    .wd     (message_header_c63_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c63_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c63_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c63_token_we),
    .wd     (message_header_c63_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c63_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c63_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c63_field1_we),
    .wd     (message_header_c63_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c63_field1_qs)
  );


  // R[message_payload_1_c63]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c63_we),
    .wd     (message_payload_1_c63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c63_qs)
  );


  // R[doorbell_c63]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c63_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c63_intr_we),
    .wd     (doorbell_c63_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c63.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c63_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c63_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c63_preserve_mask_we),
    .wd     (doorbell_c63_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c63.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c63_preserve_mask_qs)
  );


  // R[completion_interrupt_c63]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c63_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c63_intr_we),
    .wd     (completion_interrupt_c63_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c63.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c63_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c63_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c63_preserve_mask_we),
    .wd     (completion_interrupt_c63_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c63.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c63_preserve_mask_qs)
  );


  // R[reserved_1_c64]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c64_we),
    .wd     (reserved_1_c64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c64_qs)
  );


  // R[channel_status_c64]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c64_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c64_channel_free_we),
    .wd     (channel_status_c64_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c64_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c64_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c64_channel_error_we),
    .wd     (channel_status_c64_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c64_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c64_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c64_field1_we),
    .wd     (channel_status_c64_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c64_field1_qs)
  );


  // R[reserved_2_c64]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c64_we),
    .wd     (reserved_2_c64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c64_qs)
  );


  // R[reserved_3_c64]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c64]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c64_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c64_intr_enable_we),
    .wd     (channel_flags_c64_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c64_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c64_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c64_field1_we),
    .wd     (channel_flags_c64_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c64_field1_qs)
  );


  // R[length_c64]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c64_we),
    .wd     (length_c64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c64_qs)
  );


  // R[message_header_c64]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c64_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c64_message_id_we),
    .wd     (message_header_c64_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c64_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c64_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c64_message_type_we),
    .wd     (message_header_c64_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c64_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c64_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c64_protocol_id_we),
    .wd     (message_header_c64_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c64_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c64_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c64_token_we),
    .wd     (message_header_c64_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c64_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c64_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c64_field1_we),
    .wd     (message_header_c64_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c64_field1_qs)
  );


  // R[message_payload_1_c64]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c64_we),
    .wd     (message_payload_1_c64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c64_qs)
  );


  // R[doorbell_c64]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c64_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c64_intr_we),
    .wd     (doorbell_c64_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c64.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c64_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c64_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c64_preserve_mask_we),
    .wd     (doorbell_c64_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c64.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c64_preserve_mask_qs)
  );


  // R[completion_interrupt_c64]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c64_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c64_intr_we),
    .wd     (completion_interrupt_c64_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c64.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c64_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c64_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c64_preserve_mask_we),
    .wd     (completion_interrupt_c64_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c64.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c64_preserve_mask_qs)
  );


  // R[reserved_1_c65]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c65_we),
    .wd     (reserved_1_c65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c65_qs)
  );


  // R[channel_status_c65]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c65_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c65_channel_free_we),
    .wd     (channel_status_c65_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c65_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c65_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c65_channel_error_we),
    .wd     (channel_status_c65_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c65_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c65_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c65_field1_we),
    .wd     (channel_status_c65_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c65_field1_qs)
  );


  // R[reserved_2_c65]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c65_we),
    .wd     (reserved_2_c65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c65_qs)
  );


  // R[reserved_3_c65]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c65]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c65_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c65_intr_enable_we),
    .wd     (channel_flags_c65_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c65_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c65_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c65_field1_we),
    .wd     (channel_flags_c65_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c65_field1_qs)
  );


  // R[length_c65]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c65_we),
    .wd     (length_c65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c65_qs)
  );


  // R[message_header_c65]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c65_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c65_message_id_we),
    .wd     (message_header_c65_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c65_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c65_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c65_message_type_we),
    .wd     (message_header_c65_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c65_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c65_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c65_protocol_id_we),
    .wd     (message_header_c65_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c65_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c65_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c65_token_we),
    .wd     (message_header_c65_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c65_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c65_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c65_field1_we),
    .wd     (message_header_c65_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c65_field1_qs)
  );


  // R[message_payload_1_c65]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c65_we),
    .wd     (message_payload_1_c65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c65_qs)
  );


  // R[doorbell_c65]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c65_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c65_intr_we),
    .wd     (doorbell_c65_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c65.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c65_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c65_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c65_preserve_mask_we),
    .wd     (doorbell_c65_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c65.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c65_preserve_mask_qs)
  );


  // R[completion_interrupt_c65]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c65_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c65_intr_we),
    .wd     (completion_interrupt_c65_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c65.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c65_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c65_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c65_preserve_mask_we),
    .wd     (completion_interrupt_c65_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c65.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c65_preserve_mask_qs)
  );


  // R[reserved_1_c66]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c66_we),
    .wd     (reserved_1_c66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c66_qs)
  );


  // R[channel_status_c66]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c66_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c66_channel_free_we),
    .wd     (channel_status_c66_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c66_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c66_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c66_channel_error_we),
    .wd     (channel_status_c66_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c66_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c66_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c66_field1_we),
    .wd     (channel_status_c66_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c66_field1_qs)
  );


  // R[reserved_2_c66]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c66_we),
    .wd     (reserved_2_c66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c66_qs)
  );


  // R[reserved_3_c66]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c66]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c66_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c66_intr_enable_we),
    .wd     (channel_flags_c66_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c66_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c66_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c66_field1_we),
    .wd     (channel_flags_c66_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c66_field1_qs)
  );


  // R[length_c66]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c66_we),
    .wd     (length_c66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c66_qs)
  );


  // R[message_header_c66]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c66_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c66_message_id_we),
    .wd     (message_header_c66_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c66_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c66_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c66_message_type_we),
    .wd     (message_header_c66_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c66_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c66_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c66_protocol_id_we),
    .wd     (message_header_c66_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c66_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c66_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c66_token_we),
    .wd     (message_header_c66_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c66_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c66_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c66_field1_we),
    .wd     (message_header_c66_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c66_field1_qs)
  );


  // R[message_payload_1_c66]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c66_we),
    .wd     (message_payload_1_c66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c66_qs)
  );


  // R[doorbell_c66]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c66_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c66_intr_we),
    .wd     (doorbell_c66_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c66.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c66_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c66_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c66_preserve_mask_we),
    .wd     (doorbell_c66_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c66.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c66_preserve_mask_qs)
  );


  // R[completion_interrupt_c66]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c66_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c66_intr_we),
    .wd     (completion_interrupt_c66_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c66.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c66_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c66_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c66_preserve_mask_we),
    .wd     (completion_interrupt_c66_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c66.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c66_preserve_mask_qs)
  );


  // R[reserved_1_c67]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c67_we),
    .wd     (reserved_1_c67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c67_qs)
  );


  // R[channel_status_c67]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c67_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c67_channel_free_we),
    .wd     (channel_status_c67_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c67_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c67_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c67_channel_error_we),
    .wd     (channel_status_c67_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c67_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c67_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c67_field1_we),
    .wd     (channel_status_c67_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c67_field1_qs)
  );


  // R[reserved_2_c67]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c67_we),
    .wd     (reserved_2_c67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c67_qs)
  );


  // R[reserved_3_c67]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c67]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c67_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c67_intr_enable_we),
    .wd     (channel_flags_c67_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c67_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c67_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c67_field1_we),
    .wd     (channel_flags_c67_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c67_field1_qs)
  );


  // R[length_c67]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c67_we),
    .wd     (length_c67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c67_qs)
  );


  // R[message_header_c67]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c67_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c67_message_id_we),
    .wd     (message_header_c67_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c67_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c67_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c67_message_type_we),
    .wd     (message_header_c67_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c67_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c67_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c67_protocol_id_we),
    .wd     (message_header_c67_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c67_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c67_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c67_token_we),
    .wd     (message_header_c67_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c67_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c67_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c67_field1_we),
    .wd     (message_header_c67_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c67_field1_qs)
  );


  // R[message_payload_1_c67]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c67_we),
    .wd     (message_payload_1_c67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c67_qs)
  );


  // R[doorbell_c67]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c67_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c67_intr_we),
    .wd     (doorbell_c67_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c67.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c67_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c67_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c67_preserve_mask_we),
    .wd     (doorbell_c67_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c67.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c67_preserve_mask_qs)
  );


  // R[completion_interrupt_c67]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c67_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c67_intr_we),
    .wd     (completion_interrupt_c67_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c67.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c67_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c67_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c67_preserve_mask_we),
    .wd     (completion_interrupt_c67_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c67.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c67_preserve_mask_qs)
  );


  // R[reserved_1_c68]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c68_we),
    .wd     (reserved_1_c68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c68_qs)
  );


  // R[channel_status_c68]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c68_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c68_channel_free_we),
    .wd     (channel_status_c68_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c68_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c68_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c68_channel_error_we),
    .wd     (channel_status_c68_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c68_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c68_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c68_field1_we),
    .wd     (channel_status_c68_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c68_field1_qs)
  );


  // R[reserved_2_c68]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c68_we),
    .wd     (reserved_2_c68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c68_qs)
  );


  // R[reserved_3_c68]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c68]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c68_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c68_intr_enable_we),
    .wd     (channel_flags_c68_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c68_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c68_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c68_field1_we),
    .wd     (channel_flags_c68_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c68_field1_qs)
  );


  // R[length_c68]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c68_we),
    .wd     (length_c68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c68_qs)
  );


  // R[message_header_c68]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c68_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c68_message_id_we),
    .wd     (message_header_c68_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c68_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c68_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c68_message_type_we),
    .wd     (message_header_c68_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c68_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c68_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c68_protocol_id_we),
    .wd     (message_header_c68_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c68_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c68_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c68_token_we),
    .wd     (message_header_c68_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c68_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c68_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c68_field1_we),
    .wd     (message_header_c68_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c68_field1_qs)
  );


  // R[message_payload_1_c68]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c68_we),
    .wd     (message_payload_1_c68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c68_qs)
  );


  // R[doorbell_c68]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c68_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c68_intr_we),
    .wd     (doorbell_c68_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c68.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c68_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c68_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c68_preserve_mask_we),
    .wd     (doorbell_c68_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c68.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c68_preserve_mask_qs)
  );


  // R[completion_interrupt_c68]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c68_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c68_intr_we),
    .wd     (completion_interrupt_c68_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c68.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c68_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c68_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c68_preserve_mask_we),
    .wd     (completion_interrupt_c68_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c68.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c68_preserve_mask_qs)
  );


  // R[reserved_1_c69]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c69_we),
    .wd     (reserved_1_c69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c69_qs)
  );


  // R[channel_status_c69]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c69_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c69_channel_free_we),
    .wd     (channel_status_c69_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c69_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c69_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c69_channel_error_we),
    .wd     (channel_status_c69_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c69_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c69_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c69_field1_we),
    .wd     (channel_status_c69_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c69_field1_qs)
  );


  // R[reserved_2_c69]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c69_we),
    .wd     (reserved_2_c69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c69_qs)
  );


  // R[reserved_3_c69]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c69]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c69_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c69_intr_enable_we),
    .wd     (channel_flags_c69_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c69_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c69_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c69_field1_we),
    .wd     (channel_flags_c69_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c69_field1_qs)
  );


  // R[length_c69]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c69_we),
    .wd     (length_c69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c69_qs)
  );


  // R[message_header_c69]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c69_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c69_message_id_we),
    .wd     (message_header_c69_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c69_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c69_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c69_message_type_we),
    .wd     (message_header_c69_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c69_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c69_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c69_protocol_id_we),
    .wd     (message_header_c69_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c69_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c69_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c69_token_we),
    .wd     (message_header_c69_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c69_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c69_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c69_field1_we),
    .wd     (message_header_c69_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c69_field1_qs)
  );


  // R[message_payload_1_c69]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c69_we),
    .wd     (message_payload_1_c69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c69_qs)
  );


  // R[doorbell_c69]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c69_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c69_intr_we),
    .wd     (doorbell_c69_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c69.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c69_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c69_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c69_preserve_mask_we),
    .wd     (doorbell_c69_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c69.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c69_preserve_mask_qs)
  );


  // R[completion_interrupt_c69]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c69_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c69_intr_we),
    .wd     (completion_interrupt_c69_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c69.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c69_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c69_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c69_preserve_mask_we),
    .wd     (completion_interrupt_c69_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c69.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c69_preserve_mask_qs)
  );


  // R[reserved_1_c70]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c70_we),
    .wd     (reserved_1_c70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c70_qs)
  );


  // R[channel_status_c70]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c70_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c70_channel_free_we),
    .wd     (channel_status_c70_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c70_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c70_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c70_channel_error_we),
    .wd     (channel_status_c70_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c70_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c70_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c70_field1_we),
    .wd     (channel_status_c70_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c70_field1_qs)
  );


  // R[reserved_2_c70]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c70_we),
    .wd     (reserved_2_c70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c70_qs)
  );


  // R[reserved_3_c70]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c70]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c70_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c70_intr_enable_we),
    .wd     (channel_flags_c70_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c70_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c70_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c70_field1_we),
    .wd     (channel_flags_c70_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c70_field1_qs)
  );


  // R[length_c70]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c70_we),
    .wd     (length_c70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c70_qs)
  );


  // R[message_header_c70]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c70_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c70_message_id_we),
    .wd     (message_header_c70_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c70_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c70_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c70_message_type_we),
    .wd     (message_header_c70_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c70_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c70_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c70_protocol_id_we),
    .wd     (message_header_c70_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c70_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c70_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c70_token_we),
    .wd     (message_header_c70_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c70_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c70_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c70_field1_we),
    .wd     (message_header_c70_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c70_field1_qs)
  );


  // R[message_payload_1_c70]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c70_we),
    .wd     (message_payload_1_c70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c70_qs)
  );


  // R[doorbell_c70]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c70_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c70_intr_we),
    .wd     (doorbell_c70_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c70.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c70_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c70_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c70_preserve_mask_we),
    .wd     (doorbell_c70_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c70.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c70_preserve_mask_qs)
  );


  // R[completion_interrupt_c70]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c70_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c70_intr_we),
    .wd     (completion_interrupt_c70_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c70.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c70_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c70_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c70_preserve_mask_we),
    .wd     (completion_interrupt_c70_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c70.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c70_preserve_mask_qs)
  );


  // R[reserved_1_c71]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c71_we),
    .wd     (reserved_1_c71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c71_qs)
  );


  // R[channel_status_c71]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c71_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c71_channel_free_we),
    .wd     (channel_status_c71_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c71_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c71_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c71_channel_error_we),
    .wd     (channel_status_c71_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c71_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c71_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c71_field1_we),
    .wd     (channel_status_c71_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c71_field1_qs)
  );


  // R[reserved_2_c71]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c71_we),
    .wd     (reserved_2_c71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c71_qs)
  );


  // R[reserved_3_c71]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c71]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c71_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c71_intr_enable_we),
    .wd     (channel_flags_c71_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c71_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c71_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c71_field1_we),
    .wd     (channel_flags_c71_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c71_field1_qs)
  );


  // R[length_c71]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c71_we),
    .wd     (length_c71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c71_qs)
  );


  // R[message_header_c71]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c71_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c71_message_id_we),
    .wd     (message_header_c71_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c71_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c71_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c71_message_type_we),
    .wd     (message_header_c71_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c71_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c71_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c71_protocol_id_we),
    .wd     (message_header_c71_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c71_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c71_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c71_token_we),
    .wd     (message_header_c71_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c71_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c71_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c71_field1_we),
    .wd     (message_header_c71_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c71_field1_qs)
  );


  // R[message_payload_1_c71]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c71_we),
    .wd     (message_payload_1_c71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c71_qs)
  );


  // R[doorbell_c71]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c71_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c71_intr_we),
    .wd     (doorbell_c71_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c71.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c71_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c71_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c71_preserve_mask_we),
    .wd     (doorbell_c71_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c71.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c71_preserve_mask_qs)
  );


  // R[completion_interrupt_c71]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c71_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c71_intr_we),
    .wd     (completion_interrupt_c71_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c71.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c71_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c71_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c71_preserve_mask_we),
    .wd     (completion_interrupt_c71_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c71.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c71_preserve_mask_qs)
  );


  // R[reserved_1_c72]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c72_we),
    .wd     (reserved_1_c72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c72_qs)
  );


  // R[channel_status_c72]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c72_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c72_channel_free_we),
    .wd     (channel_status_c72_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c72_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c72_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c72_channel_error_we),
    .wd     (channel_status_c72_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c72_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c72_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c72_field1_we),
    .wd     (channel_status_c72_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c72_field1_qs)
  );


  // R[reserved_2_c72]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c72_we),
    .wd     (reserved_2_c72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c72_qs)
  );


  // R[reserved_3_c72]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c72]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c72_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c72_intr_enable_we),
    .wd     (channel_flags_c72_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c72_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c72_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c72_field1_we),
    .wd     (channel_flags_c72_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c72_field1_qs)
  );


  // R[length_c72]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c72_we),
    .wd     (length_c72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c72_qs)
  );


  // R[message_header_c72]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c72_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c72_message_id_we),
    .wd     (message_header_c72_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c72_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c72_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c72_message_type_we),
    .wd     (message_header_c72_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c72_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c72_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c72_protocol_id_we),
    .wd     (message_header_c72_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c72_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c72_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c72_token_we),
    .wd     (message_header_c72_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c72_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c72_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c72_field1_we),
    .wd     (message_header_c72_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c72_field1_qs)
  );


  // R[message_payload_1_c72]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c72_we),
    .wd     (message_payload_1_c72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c72_qs)
  );


  // R[doorbell_c72]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c72_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c72_intr_we),
    .wd     (doorbell_c72_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c72.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c72_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c72_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c72_preserve_mask_we),
    .wd     (doorbell_c72_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c72.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c72_preserve_mask_qs)
  );


  // R[completion_interrupt_c72]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c72_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c72_intr_we),
    .wd     (completion_interrupt_c72_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c72.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c72_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c72_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c72_preserve_mask_we),
    .wd     (completion_interrupt_c72_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c72.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c72_preserve_mask_qs)
  );


  // R[reserved_1_c73]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c73_we),
    .wd     (reserved_1_c73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c73_qs)
  );


  // R[channel_status_c73]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c73_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c73_channel_free_we),
    .wd     (channel_status_c73_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c73_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c73_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c73_channel_error_we),
    .wd     (channel_status_c73_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c73_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c73_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c73_field1_we),
    .wd     (channel_status_c73_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c73_field1_qs)
  );


  // R[reserved_2_c73]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c73_we),
    .wd     (reserved_2_c73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c73_qs)
  );


  // R[reserved_3_c73]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c73]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c73_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c73_intr_enable_we),
    .wd     (channel_flags_c73_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c73_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c73_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c73_field1_we),
    .wd     (channel_flags_c73_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c73_field1_qs)
  );


  // R[length_c73]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c73_we),
    .wd     (length_c73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c73_qs)
  );


  // R[message_header_c73]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c73_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c73_message_id_we),
    .wd     (message_header_c73_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c73_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c73_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c73_message_type_we),
    .wd     (message_header_c73_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c73_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c73_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c73_protocol_id_we),
    .wd     (message_header_c73_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c73_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c73_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c73_token_we),
    .wd     (message_header_c73_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c73_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c73_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c73_field1_we),
    .wd     (message_header_c73_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c73_field1_qs)
  );


  // R[message_payload_1_c73]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c73_we),
    .wd     (message_payload_1_c73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c73_qs)
  );


  // R[doorbell_c73]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c73_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c73_intr_we),
    .wd     (doorbell_c73_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c73.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c73_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c73_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c73_preserve_mask_we),
    .wd     (doorbell_c73_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c73.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c73_preserve_mask_qs)
  );


  // R[completion_interrupt_c73]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c73_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c73_intr_we),
    .wd     (completion_interrupt_c73_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c73.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c73_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c73_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c73_preserve_mask_we),
    .wd     (completion_interrupt_c73_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c73.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c73_preserve_mask_qs)
  );


  // R[reserved_1_c74]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c74_we),
    .wd     (reserved_1_c74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c74_qs)
  );


  // R[channel_status_c74]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c74_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c74_channel_free_we),
    .wd     (channel_status_c74_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c74_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c74_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c74_channel_error_we),
    .wd     (channel_status_c74_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c74_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c74_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c74_field1_we),
    .wd     (channel_status_c74_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c74_field1_qs)
  );


  // R[reserved_2_c74]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c74_we),
    .wd     (reserved_2_c74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c74_qs)
  );


  // R[reserved_3_c74]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c74]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c74_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c74_intr_enable_we),
    .wd     (channel_flags_c74_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c74_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c74_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c74_field1_we),
    .wd     (channel_flags_c74_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c74_field1_qs)
  );


  // R[length_c74]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c74_we),
    .wd     (length_c74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c74_qs)
  );


  // R[message_header_c74]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c74_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c74_message_id_we),
    .wd     (message_header_c74_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c74_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c74_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c74_message_type_we),
    .wd     (message_header_c74_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c74_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c74_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c74_protocol_id_we),
    .wd     (message_header_c74_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c74_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c74_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c74_token_we),
    .wd     (message_header_c74_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c74_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c74_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c74_field1_we),
    .wd     (message_header_c74_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c74_field1_qs)
  );


  // R[message_payload_1_c74]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c74_we),
    .wd     (message_payload_1_c74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c74_qs)
  );


  // R[doorbell_c74]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c74_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c74_intr_we),
    .wd     (doorbell_c74_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c74.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c74_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c74_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c74_preserve_mask_we),
    .wd     (doorbell_c74_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c74.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c74_preserve_mask_qs)
  );


  // R[completion_interrupt_c74]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c74_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c74_intr_we),
    .wd     (completion_interrupt_c74_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c74.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c74_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c74_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c74_preserve_mask_we),
    .wd     (completion_interrupt_c74_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c74.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c74_preserve_mask_qs)
  );


  // R[reserved_1_c75]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c75_we),
    .wd     (reserved_1_c75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c75_qs)
  );


  // R[channel_status_c75]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c75_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c75_channel_free_we),
    .wd     (channel_status_c75_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c75_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c75_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c75_channel_error_we),
    .wd     (channel_status_c75_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c75_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c75_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c75_field1_we),
    .wd     (channel_status_c75_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c75_field1_qs)
  );


  // R[reserved_2_c75]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c75_we),
    .wd     (reserved_2_c75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c75_qs)
  );


  // R[reserved_3_c75]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c75]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c75_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c75_intr_enable_we),
    .wd     (channel_flags_c75_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c75_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c75_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c75_field1_we),
    .wd     (channel_flags_c75_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c75_field1_qs)
  );


  // R[length_c75]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c75_we),
    .wd     (length_c75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c75_qs)
  );


  // R[message_header_c75]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c75_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c75_message_id_we),
    .wd     (message_header_c75_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c75_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c75_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c75_message_type_we),
    .wd     (message_header_c75_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c75_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c75_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c75_protocol_id_we),
    .wd     (message_header_c75_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c75_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c75_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c75_token_we),
    .wd     (message_header_c75_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c75_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c75_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c75_field1_we),
    .wd     (message_header_c75_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c75_field1_qs)
  );


  // R[message_payload_1_c75]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c75_we),
    .wd     (message_payload_1_c75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c75_qs)
  );


  // R[doorbell_c75]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c75_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c75_intr_we),
    .wd     (doorbell_c75_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c75.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c75_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c75_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c75_preserve_mask_we),
    .wd     (doorbell_c75_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c75.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c75_preserve_mask_qs)
  );


  // R[completion_interrupt_c75]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c75_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c75_intr_we),
    .wd     (completion_interrupt_c75_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c75.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c75_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c75_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c75_preserve_mask_we),
    .wd     (completion_interrupt_c75_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c75.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c75_preserve_mask_qs)
  );


  // R[reserved_1_c76]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c76_we),
    .wd     (reserved_1_c76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c76_qs)
  );


  // R[channel_status_c76]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c76_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c76_channel_free_we),
    .wd     (channel_status_c76_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c76_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c76_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c76_channel_error_we),
    .wd     (channel_status_c76_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c76_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c76_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c76_field1_we),
    .wd     (channel_status_c76_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c76_field1_qs)
  );


  // R[reserved_2_c76]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c76_we),
    .wd     (reserved_2_c76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c76_qs)
  );


  // R[reserved_3_c76]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c76]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c76_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c76_intr_enable_we),
    .wd     (channel_flags_c76_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c76_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c76_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c76_field1_we),
    .wd     (channel_flags_c76_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c76_field1_qs)
  );


  // R[length_c76]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c76_we),
    .wd     (length_c76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c76_qs)
  );


  // R[message_header_c76]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c76_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c76_message_id_we),
    .wd     (message_header_c76_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c76_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c76_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c76_message_type_we),
    .wd     (message_header_c76_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c76_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c76_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c76_protocol_id_we),
    .wd     (message_header_c76_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c76_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c76_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c76_token_we),
    .wd     (message_header_c76_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c76_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c76_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c76_field1_we),
    .wd     (message_header_c76_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c76_field1_qs)
  );


  // R[message_payload_1_c76]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c76_we),
    .wd     (message_payload_1_c76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c76_qs)
  );


  // R[doorbell_c76]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c76_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c76_intr_we),
    .wd     (doorbell_c76_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c76.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c76_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c76_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c76_preserve_mask_we),
    .wd     (doorbell_c76_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c76.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c76_preserve_mask_qs)
  );


  // R[completion_interrupt_c76]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c76_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c76_intr_we),
    .wd     (completion_interrupt_c76_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c76.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c76_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c76_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c76_preserve_mask_we),
    .wd     (completion_interrupt_c76_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c76.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c76_preserve_mask_qs)
  );


  // R[reserved_1_c77]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c77_we),
    .wd     (reserved_1_c77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c77_qs)
  );


  // R[channel_status_c77]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c77_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c77_channel_free_we),
    .wd     (channel_status_c77_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c77_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c77_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c77_channel_error_we),
    .wd     (channel_status_c77_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c77_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c77_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c77_field1_we),
    .wd     (channel_status_c77_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c77_field1_qs)
  );


  // R[reserved_2_c77]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c77_we),
    .wd     (reserved_2_c77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c77_qs)
  );


  // R[reserved_3_c77]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c77]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c77_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c77_intr_enable_we),
    .wd     (channel_flags_c77_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c77_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c77_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c77_field1_we),
    .wd     (channel_flags_c77_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c77_field1_qs)
  );


  // R[length_c77]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c77_we),
    .wd     (length_c77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c77_qs)
  );


  // R[message_header_c77]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c77_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c77_message_id_we),
    .wd     (message_header_c77_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c77_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c77_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c77_message_type_we),
    .wd     (message_header_c77_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c77_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c77_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c77_protocol_id_we),
    .wd     (message_header_c77_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c77_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c77_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c77_token_we),
    .wd     (message_header_c77_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c77_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c77_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c77_field1_we),
    .wd     (message_header_c77_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c77_field1_qs)
  );


  // R[message_payload_1_c77]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c77_we),
    .wd     (message_payload_1_c77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c77_qs)
  );


  // R[doorbell_c77]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c77_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c77_intr_we),
    .wd     (doorbell_c77_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c77.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c77_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c77_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c77_preserve_mask_we),
    .wd     (doorbell_c77_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c77.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c77_preserve_mask_qs)
  );


  // R[completion_interrupt_c77]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c77_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c77_intr_we),
    .wd     (completion_interrupt_c77_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c77.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c77_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c77_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c77_preserve_mask_we),
    .wd     (completion_interrupt_c77_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c77.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c77_preserve_mask_qs)
  );


  // R[reserved_1_c78]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c78_we),
    .wd     (reserved_1_c78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c78_qs)
  );


  // R[channel_status_c78]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c78_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c78_channel_free_we),
    .wd     (channel_status_c78_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c78_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c78_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c78_channel_error_we),
    .wd     (channel_status_c78_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c78_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c78_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c78_field1_we),
    .wd     (channel_status_c78_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c78_field1_qs)
  );


  // R[reserved_2_c78]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c78_we),
    .wd     (reserved_2_c78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c78_qs)
  );


  // R[reserved_3_c78]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c78]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c78_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c78_intr_enable_we),
    .wd     (channel_flags_c78_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c78_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c78_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c78_field1_we),
    .wd     (channel_flags_c78_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c78_field1_qs)
  );


  // R[length_c78]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c78_we),
    .wd     (length_c78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c78_qs)
  );


  // R[message_header_c78]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c78_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c78_message_id_we),
    .wd     (message_header_c78_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c78_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c78_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c78_message_type_we),
    .wd     (message_header_c78_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c78_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c78_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c78_protocol_id_we),
    .wd     (message_header_c78_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c78_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c78_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c78_token_we),
    .wd     (message_header_c78_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c78_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c78_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c78_field1_we),
    .wd     (message_header_c78_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c78_field1_qs)
  );


  // R[message_payload_1_c78]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c78_we),
    .wd     (message_payload_1_c78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c78_qs)
  );


  // R[doorbell_c78]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c78_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c78_intr_we),
    .wd     (doorbell_c78_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c78.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c78_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c78_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c78_preserve_mask_we),
    .wd     (doorbell_c78_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c78.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c78_preserve_mask_qs)
  );


  // R[completion_interrupt_c78]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c78_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c78_intr_we),
    .wd     (completion_interrupt_c78_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c78.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c78_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c78_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c78_preserve_mask_we),
    .wd     (completion_interrupt_c78_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c78.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c78_preserve_mask_qs)
  );


  // R[reserved_1_c79]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c79_we),
    .wd     (reserved_1_c79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c79_qs)
  );


  // R[channel_status_c79]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c79_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c79_channel_free_we),
    .wd     (channel_status_c79_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c79_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c79_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c79_channel_error_we),
    .wd     (channel_status_c79_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c79_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c79_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c79_field1_we),
    .wd     (channel_status_c79_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c79_field1_qs)
  );


  // R[reserved_2_c79]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c79_we),
    .wd     (reserved_2_c79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c79_qs)
  );


  // R[reserved_3_c79]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c79]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c79_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c79_intr_enable_we),
    .wd     (channel_flags_c79_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c79_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c79_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c79_field1_we),
    .wd     (channel_flags_c79_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c79_field1_qs)
  );


  // R[length_c79]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c79_we),
    .wd     (length_c79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c79_qs)
  );


  // R[message_header_c79]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c79_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c79_message_id_we),
    .wd     (message_header_c79_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c79_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c79_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c79_message_type_we),
    .wd     (message_header_c79_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c79_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c79_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c79_protocol_id_we),
    .wd     (message_header_c79_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c79_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c79_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c79_token_we),
    .wd     (message_header_c79_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c79_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c79_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c79_field1_we),
    .wd     (message_header_c79_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c79_field1_qs)
  );


  // R[message_payload_1_c79]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c79_we),
    .wd     (message_payload_1_c79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c79_qs)
  );


  // R[doorbell_c79]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c79_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c79_intr_we),
    .wd     (doorbell_c79_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c79.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c79_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c79_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c79_preserve_mask_we),
    .wd     (doorbell_c79_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c79.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c79_preserve_mask_qs)
  );


  // R[completion_interrupt_c79]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c79_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c79_intr_we),
    .wd     (completion_interrupt_c79_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c79.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c79_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c79_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c79_preserve_mask_we),
    .wd     (completion_interrupt_c79_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c79.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c79_preserve_mask_qs)
  );


  // R[reserved_1_c80]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c80_we),
    .wd     (reserved_1_c80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c80_qs)
  );


  // R[channel_status_c80]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c80_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c80_channel_free_we),
    .wd     (channel_status_c80_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c80_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c80_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c80_channel_error_we),
    .wd     (channel_status_c80_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c80_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c80_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c80_field1_we),
    .wd     (channel_status_c80_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c80_field1_qs)
  );


  // R[reserved_2_c80]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c80_we),
    .wd     (reserved_2_c80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c80_qs)
  );


  // R[reserved_3_c80]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c80]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c80_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c80_intr_enable_we),
    .wd     (channel_flags_c80_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c80_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c80_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c80_field1_we),
    .wd     (channel_flags_c80_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c80_field1_qs)
  );


  // R[length_c80]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c80_we),
    .wd     (length_c80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c80_qs)
  );


  // R[message_header_c80]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c80_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c80_message_id_we),
    .wd     (message_header_c80_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c80_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c80_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c80_message_type_we),
    .wd     (message_header_c80_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c80_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c80_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c80_protocol_id_we),
    .wd     (message_header_c80_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c80_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c80_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c80_token_we),
    .wd     (message_header_c80_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c80_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c80_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c80_field1_we),
    .wd     (message_header_c80_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c80_field1_qs)
  );


  // R[message_payload_1_c80]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c80_we),
    .wd     (message_payload_1_c80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c80_qs)
  );


  // R[doorbell_c80]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c80_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c80_intr_we),
    .wd     (doorbell_c80_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c80.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c80_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c80_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c80_preserve_mask_we),
    .wd     (doorbell_c80_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c80.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c80_preserve_mask_qs)
  );


  // R[completion_interrupt_c80]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c80_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c80_intr_we),
    .wd     (completion_interrupt_c80_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c80.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c80_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c80_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c80_preserve_mask_we),
    .wd     (completion_interrupt_c80_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c80.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c80_preserve_mask_qs)
  );


  // R[reserved_1_c81]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c81_we),
    .wd     (reserved_1_c81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c81_qs)
  );


  // R[channel_status_c81]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c81_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c81_channel_free_we),
    .wd     (channel_status_c81_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c81_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c81_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c81_channel_error_we),
    .wd     (channel_status_c81_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c81_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c81_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c81_field1_we),
    .wd     (channel_status_c81_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c81_field1_qs)
  );


  // R[reserved_2_c81]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c81_we),
    .wd     (reserved_2_c81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c81_qs)
  );


  // R[reserved_3_c81]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c81]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c81_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c81_intr_enable_we),
    .wd     (channel_flags_c81_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c81_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c81_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c81_field1_we),
    .wd     (channel_flags_c81_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c81_field1_qs)
  );


  // R[length_c81]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c81_we),
    .wd     (length_c81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c81_qs)
  );


  // R[message_header_c81]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c81_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c81_message_id_we),
    .wd     (message_header_c81_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c81_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c81_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c81_message_type_we),
    .wd     (message_header_c81_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c81_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c81_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c81_protocol_id_we),
    .wd     (message_header_c81_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c81_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c81_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c81_token_we),
    .wd     (message_header_c81_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c81_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c81_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c81_field1_we),
    .wd     (message_header_c81_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c81_field1_qs)
  );


  // R[message_payload_1_c81]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c81_we),
    .wd     (message_payload_1_c81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c81_qs)
  );


  // R[doorbell_c81]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c81_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c81_intr_we),
    .wd     (doorbell_c81_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c81.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c81_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c81_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c81_preserve_mask_we),
    .wd     (doorbell_c81_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c81.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c81_preserve_mask_qs)
  );


  // R[completion_interrupt_c81]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c81_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c81_intr_we),
    .wd     (completion_interrupt_c81_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c81.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c81_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c81_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c81_preserve_mask_we),
    .wd     (completion_interrupt_c81_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c81.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c81_preserve_mask_qs)
  );


  // R[reserved_1_c82]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c82_we),
    .wd     (reserved_1_c82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c82_qs)
  );


  // R[channel_status_c82]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c82_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c82_channel_free_we),
    .wd     (channel_status_c82_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c82_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c82_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c82_channel_error_we),
    .wd     (channel_status_c82_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c82_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c82_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c82_field1_we),
    .wd     (channel_status_c82_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c82_field1_qs)
  );


  // R[reserved_2_c82]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c82_we),
    .wd     (reserved_2_c82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c82_qs)
  );


  // R[reserved_3_c82]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c82]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c82_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c82_intr_enable_we),
    .wd     (channel_flags_c82_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c82_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c82_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c82_field1_we),
    .wd     (channel_flags_c82_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c82_field1_qs)
  );


  // R[length_c82]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c82_we),
    .wd     (length_c82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c82_qs)
  );


  // R[message_header_c82]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c82_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c82_message_id_we),
    .wd     (message_header_c82_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c82_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c82_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c82_message_type_we),
    .wd     (message_header_c82_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c82_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c82_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c82_protocol_id_we),
    .wd     (message_header_c82_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c82_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c82_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c82_token_we),
    .wd     (message_header_c82_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c82_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c82_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c82_field1_we),
    .wd     (message_header_c82_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c82_field1_qs)
  );


  // R[message_payload_1_c82]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c82_we),
    .wd     (message_payload_1_c82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c82_qs)
  );


  // R[doorbell_c82]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c82_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c82_intr_we),
    .wd     (doorbell_c82_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c82.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c82_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c82_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c82_preserve_mask_we),
    .wd     (doorbell_c82_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c82.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c82_preserve_mask_qs)
  );


  // R[completion_interrupt_c82]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c82_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c82_intr_we),
    .wd     (completion_interrupt_c82_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c82.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c82_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c82_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c82_preserve_mask_we),
    .wd     (completion_interrupt_c82_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c82.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c82_preserve_mask_qs)
  );


  // R[reserved_1_c83]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c83_we),
    .wd     (reserved_1_c83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c83_qs)
  );


  // R[channel_status_c83]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c83_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c83_channel_free_we),
    .wd     (channel_status_c83_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c83_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c83_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c83_channel_error_we),
    .wd     (channel_status_c83_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c83_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c83_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c83_field1_we),
    .wd     (channel_status_c83_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c83_field1_qs)
  );


  // R[reserved_2_c83]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c83_we),
    .wd     (reserved_2_c83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c83_qs)
  );


  // R[reserved_3_c83]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c83]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c83_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c83_intr_enable_we),
    .wd     (channel_flags_c83_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c83_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c83_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c83_field1_we),
    .wd     (channel_flags_c83_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c83_field1_qs)
  );


  // R[length_c83]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c83_we),
    .wd     (length_c83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c83_qs)
  );


  // R[message_header_c83]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c83_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c83_message_id_we),
    .wd     (message_header_c83_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c83_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c83_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c83_message_type_we),
    .wd     (message_header_c83_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c83_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c83_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c83_protocol_id_we),
    .wd     (message_header_c83_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c83_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c83_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c83_token_we),
    .wd     (message_header_c83_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c83_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c83_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c83_field1_we),
    .wd     (message_header_c83_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c83_field1_qs)
  );


  // R[message_payload_1_c83]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c83 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c83_we),
    .wd     (message_payload_1_c83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c83_qs)
  );


  // R[doorbell_c83]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c83_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c83_intr_we),
    .wd     (doorbell_c83_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c83.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c83_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c83_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c83_preserve_mask_we),
    .wd     (doorbell_c83_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c83.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c83_preserve_mask_qs)
  );


  // R[completion_interrupt_c83]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c83_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c83_intr_we),
    .wd     (completion_interrupt_c83_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c83.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c83_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c83_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c83_preserve_mask_we),
    .wd     (completion_interrupt_c83_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c83.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c83_preserve_mask_qs)
  );


  // R[reserved_1_c84]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c84_we),
    .wd     (reserved_1_c84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c84_qs)
  );


  // R[channel_status_c84]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c84_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c84_channel_free_we),
    .wd     (channel_status_c84_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c84_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c84_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c84_channel_error_we),
    .wd     (channel_status_c84_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c84_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c84_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c84_field1_we),
    .wd     (channel_status_c84_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c84_field1_qs)
  );


  // R[reserved_2_c84]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c84_we),
    .wd     (reserved_2_c84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c84_qs)
  );


  // R[reserved_3_c84]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c84]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c84_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c84_intr_enable_we),
    .wd     (channel_flags_c84_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c84_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c84_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c84_field1_we),
    .wd     (channel_flags_c84_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c84_field1_qs)
  );


  // R[length_c84]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c84_we),
    .wd     (length_c84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c84_qs)
  );


  // R[message_header_c84]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c84_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c84_message_id_we),
    .wd     (message_header_c84_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c84_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c84_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c84_message_type_we),
    .wd     (message_header_c84_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c84_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c84_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c84_protocol_id_we),
    .wd     (message_header_c84_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c84_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c84_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c84_token_we),
    .wd     (message_header_c84_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c84_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c84_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c84_field1_we),
    .wd     (message_header_c84_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c84_field1_qs)
  );


  // R[message_payload_1_c84]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c84 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c84_we),
    .wd     (message_payload_1_c84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c84_qs)
  );


  // R[doorbell_c84]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c84_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c84_intr_we),
    .wd     (doorbell_c84_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c84.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c84_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c84_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c84_preserve_mask_we),
    .wd     (doorbell_c84_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c84.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c84_preserve_mask_qs)
  );


  // R[completion_interrupt_c84]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c84_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c84_intr_we),
    .wd     (completion_interrupt_c84_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c84.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c84_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c84_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c84_preserve_mask_we),
    .wd     (completion_interrupt_c84_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c84.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c84_preserve_mask_qs)
  );


  // R[reserved_1_c85]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c85_we),
    .wd     (reserved_1_c85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c85_qs)
  );


  // R[channel_status_c85]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c85_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c85_channel_free_we),
    .wd     (channel_status_c85_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c85_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c85_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c85_channel_error_we),
    .wd     (channel_status_c85_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c85_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c85_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c85_field1_we),
    .wd     (channel_status_c85_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c85_field1_qs)
  );


  // R[reserved_2_c85]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c85_we),
    .wd     (reserved_2_c85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c85_qs)
  );


  // R[reserved_3_c85]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c85]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c85_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c85_intr_enable_we),
    .wd     (channel_flags_c85_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c85_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c85_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c85_field1_we),
    .wd     (channel_flags_c85_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c85_field1_qs)
  );


  // R[length_c85]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c85_we),
    .wd     (length_c85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c85_qs)
  );


  // R[message_header_c85]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c85_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c85_message_id_we),
    .wd     (message_header_c85_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c85_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c85_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c85_message_type_we),
    .wd     (message_header_c85_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c85_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c85_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c85_protocol_id_we),
    .wd     (message_header_c85_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c85_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c85_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c85_token_we),
    .wd     (message_header_c85_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c85_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c85_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c85_field1_we),
    .wd     (message_header_c85_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c85_field1_qs)
  );


  // R[message_payload_1_c85]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c85 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c85_we),
    .wd     (message_payload_1_c85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c85_qs)
  );


  // R[doorbell_c85]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c85_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c85_intr_we),
    .wd     (doorbell_c85_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c85.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c85_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c85_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c85_preserve_mask_we),
    .wd     (doorbell_c85_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c85.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c85_preserve_mask_qs)
  );


  // R[completion_interrupt_c85]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c85_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c85_intr_we),
    .wd     (completion_interrupt_c85_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c85.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c85_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c85_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c85_preserve_mask_we),
    .wd     (completion_interrupt_c85_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c85.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c85_preserve_mask_qs)
  );


  // R[reserved_1_c86]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c86_we),
    .wd     (reserved_1_c86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c86_qs)
  );


  // R[channel_status_c86]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c86_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c86_channel_free_we),
    .wd     (channel_status_c86_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c86_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c86_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c86_channel_error_we),
    .wd     (channel_status_c86_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c86_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c86_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c86_field1_we),
    .wd     (channel_status_c86_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c86_field1_qs)
  );


  // R[reserved_2_c86]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c86_we),
    .wd     (reserved_2_c86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c86_qs)
  );


  // R[reserved_3_c86]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c86]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c86_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c86_intr_enable_we),
    .wd     (channel_flags_c86_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c86_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c86_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c86_field1_we),
    .wd     (channel_flags_c86_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c86_field1_qs)
  );


  // R[length_c86]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c86_we),
    .wd     (length_c86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c86_qs)
  );


  // R[message_header_c86]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c86_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c86_message_id_we),
    .wd     (message_header_c86_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c86_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c86_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c86_message_type_we),
    .wd     (message_header_c86_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c86_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c86_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c86_protocol_id_we),
    .wd     (message_header_c86_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c86_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c86_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c86_token_we),
    .wd     (message_header_c86_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c86_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c86_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c86_field1_we),
    .wd     (message_header_c86_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c86_field1_qs)
  );


  // R[message_payload_1_c86]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c86 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c86_we),
    .wd     (message_payload_1_c86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c86_qs)
  );


  // R[doorbell_c86]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c86_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c86_intr_we),
    .wd     (doorbell_c86_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c86.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c86_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c86_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c86_preserve_mask_we),
    .wd     (doorbell_c86_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c86.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c86_preserve_mask_qs)
  );


  // R[completion_interrupt_c86]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c86_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c86_intr_we),
    .wd     (completion_interrupt_c86_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c86.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c86_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c86_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c86_preserve_mask_we),
    .wd     (completion_interrupt_c86_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c86.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c86_preserve_mask_qs)
  );


  // R[reserved_1_c87]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c87_we),
    .wd     (reserved_1_c87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c87_qs)
  );


  // R[channel_status_c87]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c87_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c87_channel_free_we),
    .wd     (channel_status_c87_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c87_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c87_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c87_channel_error_we),
    .wd     (channel_status_c87_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c87_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c87_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c87_field1_we),
    .wd     (channel_status_c87_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c87_field1_qs)
  );


  // R[reserved_2_c87]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c87_we),
    .wd     (reserved_2_c87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c87_qs)
  );


  // R[reserved_3_c87]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c87]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c87_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c87_intr_enable_we),
    .wd     (channel_flags_c87_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c87_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c87_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c87_field1_we),
    .wd     (channel_flags_c87_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c87_field1_qs)
  );


  // R[length_c87]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c87_we),
    .wd     (length_c87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c87_qs)
  );


  // R[message_header_c87]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c87_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c87_message_id_we),
    .wd     (message_header_c87_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c87_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c87_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c87_message_type_we),
    .wd     (message_header_c87_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c87_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c87_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c87_protocol_id_we),
    .wd     (message_header_c87_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c87_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c87_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c87_token_we),
    .wd     (message_header_c87_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c87_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c87_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c87_field1_we),
    .wd     (message_header_c87_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c87_field1_qs)
  );


  // R[message_payload_1_c87]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c87 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c87_we),
    .wd     (message_payload_1_c87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c87_qs)
  );


  // R[doorbell_c87]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c87_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c87_intr_we),
    .wd     (doorbell_c87_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c87.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c87_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c87_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c87_preserve_mask_we),
    .wd     (doorbell_c87_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c87.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c87_preserve_mask_qs)
  );


  // R[completion_interrupt_c87]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c87_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c87_intr_we),
    .wd     (completion_interrupt_c87_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c87.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c87_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c87_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c87_preserve_mask_we),
    .wd     (completion_interrupt_c87_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c87.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c87_preserve_mask_qs)
  );


  // R[reserved_1_c88]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c88_we),
    .wd     (reserved_1_c88_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c88_qs)
  );


  // R[channel_status_c88]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c88_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c88_channel_free_we),
    .wd     (channel_status_c88_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c88_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c88_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c88_channel_error_we),
    .wd     (channel_status_c88_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c88_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c88_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c88_field1_we),
    .wd     (channel_status_c88_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c88_field1_qs)
  );


  // R[reserved_2_c88]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c88_we),
    .wd     (reserved_2_c88_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c88_qs)
  );


  // R[reserved_3_c88]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c88]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c88_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c88_intr_enable_we),
    .wd     (channel_flags_c88_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c88_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c88_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c88_field1_we),
    .wd     (channel_flags_c88_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c88_field1_qs)
  );


  // R[length_c88]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c88_we),
    .wd     (length_c88_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c88_qs)
  );


  // R[message_header_c88]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c88_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c88_message_id_we),
    .wd     (message_header_c88_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c88_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c88_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c88_message_type_we),
    .wd     (message_header_c88_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c88_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c88_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c88_protocol_id_we),
    .wd     (message_header_c88_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c88_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c88_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c88_token_we),
    .wd     (message_header_c88_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c88_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c88_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c88_field1_we),
    .wd     (message_header_c88_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c88_field1_qs)
  );


  // R[message_payload_1_c88]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c88 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c88_we),
    .wd     (message_payload_1_c88_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c88_qs)
  );


  // R[doorbell_c88]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c88_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c88_intr_we),
    .wd     (doorbell_c88_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c88.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c88_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c88_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c88_preserve_mask_we),
    .wd     (doorbell_c88_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c88.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c88_preserve_mask_qs)
  );


  // R[completion_interrupt_c88]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c88_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c88_intr_we),
    .wd     (completion_interrupt_c88_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c88.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c88_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c88_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c88_preserve_mask_we),
    .wd     (completion_interrupt_c88_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c88.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c88_preserve_mask_qs)
  );


  // R[reserved_1_c89]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c89_we),
    .wd     (reserved_1_c89_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c89_qs)
  );


  // R[channel_status_c89]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c89_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c89_channel_free_we),
    .wd     (channel_status_c89_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c89_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c89_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c89_channel_error_we),
    .wd     (channel_status_c89_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c89_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c89_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c89_field1_we),
    .wd     (channel_status_c89_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c89_field1_qs)
  );


  // R[reserved_2_c89]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c89_we),
    .wd     (reserved_2_c89_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c89_qs)
  );


  // R[reserved_3_c89]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c89]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c89_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c89_intr_enable_we),
    .wd     (channel_flags_c89_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c89_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c89_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c89_field1_we),
    .wd     (channel_flags_c89_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c89_field1_qs)
  );


  // R[length_c89]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c89_we),
    .wd     (length_c89_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c89_qs)
  );


  // R[message_header_c89]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c89_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c89_message_id_we),
    .wd     (message_header_c89_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c89_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c89_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c89_message_type_we),
    .wd     (message_header_c89_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c89_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c89_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c89_protocol_id_we),
    .wd     (message_header_c89_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c89_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c89_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c89_token_we),
    .wd     (message_header_c89_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c89_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c89_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c89_field1_we),
    .wd     (message_header_c89_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c89_field1_qs)
  );


  // R[message_payload_1_c89]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c89 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c89_we),
    .wd     (message_payload_1_c89_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c89_qs)
  );


  // R[doorbell_c89]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c89_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c89_intr_we),
    .wd     (doorbell_c89_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c89.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c89_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c89_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c89_preserve_mask_we),
    .wd     (doorbell_c89_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c89.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c89_preserve_mask_qs)
  );


  // R[completion_interrupt_c89]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c89_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c89_intr_we),
    .wd     (completion_interrupt_c89_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c89.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c89_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c89_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c89_preserve_mask_we),
    .wd     (completion_interrupt_c89_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c89.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c89_preserve_mask_qs)
  );


  // R[reserved_1_c90]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c90_we),
    .wd     (reserved_1_c90_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c90_qs)
  );


  // R[channel_status_c90]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c90_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c90_channel_free_we),
    .wd     (channel_status_c90_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c90_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c90_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c90_channel_error_we),
    .wd     (channel_status_c90_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c90_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c90_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c90_field1_we),
    .wd     (channel_status_c90_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c90_field1_qs)
  );


  // R[reserved_2_c90]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c90_we),
    .wd     (reserved_2_c90_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c90_qs)
  );


  // R[reserved_3_c90]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c90]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c90_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c90_intr_enable_we),
    .wd     (channel_flags_c90_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c90_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c90_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c90_field1_we),
    .wd     (channel_flags_c90_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c90_field1_qs)
  );


  // R[length_c90]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c90_we),
    .wd     (length_c90_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c90_qs)
  );


  // R[message_header_c90]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c90_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c90_message_id_we),
    .wd     (message_header_c90_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c90_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c90_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c90_message_type_we),
    .wd     (message_header_c90_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c90_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c90_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c90_protocol_id_we),
    .wd     (message_header_c90_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c90_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c90_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c90_token_we),
    .wd     (message_header_c90_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c90_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c90_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c90_field1_we),
    .wd     (message_header_c90_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c90_field1_qs)
  );


  // R[message_payload_1_c90]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c90 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c90_we),
    .wd     (message_payload_1_c90_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c90_qs)
  );


  // R[doorbell_c90]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c90_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c90_intr_we),
    .wd     (doorbell_c90_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c90.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c90_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c90_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c90_preserve_mask_we),
    .wd     (doorbell_c90_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c90.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c90_preserve_mask_qs)
  );


  // R[completion_interrupt_c90]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c90_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c90_intr_we),
    .wd     (completion_interrupt_c90_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c90.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c90_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c90_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c90_preserve_mask_we),
    .wd     (completion_interrupt_c90_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c90.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c90_preserve_mask_qs)
  );


  // R[reserved_1_c91]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c91_we),
    .wd     (reserved_1_c91_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c91_qs)
  );


  // R[channel_status_c91]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c91_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c91_channel_free_we),
    .wd     (channel_status_c91_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c91_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c91_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c91_channel_error_we),
    .wd     (channel_status_c91_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c91_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c91_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c91_field1_we),
    .wd     (channel_status_c91_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c91_field1_qs)
  );


  // R[reserved_2_c91]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c91_we),
    .wd     (reserved_2_c91_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c91_qs)
  );


  // R[reserved_3_c91]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c91]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c91_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c91_intr_enable_we),
    .wd     (channel_flags_c91_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c91_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c91_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c91_field1_we),
    .wd     (channel_flags_c91_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c91_field1_qs)
  );


  // R[length_c91]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c91_we),
    .wd     (length_c91_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c91_qs)
  );


  // R[message_header_c91]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c91_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c91_message_id_we),
    .wd     (message_header_c91_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c91_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c91_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c91_message_type_we),
    .wd     (message_header_c91_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c91_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c91_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c91_protocol_id_we),
    .wd     (message_header_c91_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c91_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c91_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c91_token_we),
    .wd     (message_header_c91_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c91_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c91_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c91_field1_we),
    .wd     (message_header_c91_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c91_field1_qs)
  );


  // R[message_payload_1_c91]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c91 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c91_we),
    .wd     (message_payload_1_c91_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c91_qs)
  );


  // R[doorbell_c91]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c91_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c91_intr_we),
    .wd     (doorbell_c91_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c91.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c91_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c91_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c91_preserve_mask_we),
    .wd     (doorbell_c91_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c91.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c91_preserve_mask_qs)
  );


  // R[completion_interrupt_c91]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c91_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c91_intr_we),
    .wd     (completion_interrupt_c91_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c91.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c91_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c91_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c91_preserve_mask_we),
    .wd     (completion_interrupt_c91_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c91.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c91_preserve_mask_qs)
  );


  // R[reserved_1_c92]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c92_we),
    .wd     (reserved_1_c92_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c92_qs)
  );


  // R[channel_status_c92]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c92_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c92_channel_free_we),
    .wd     (channel_status_c92_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c92_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c92_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c92_channel_error_we),
    .wd     (channel_status_c92_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c92_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c92_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c92_field1_we),
    .wd     (channel_status_c92_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c92_field1_qs)
  );


  // R[reserved_2_c92]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c92_we),
    .wd     (reserved_2_c92_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c92_qs)
  );


  // R[reserved_3_c92]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c92]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c92_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c92_intr_enable_we),
    .wd     (channel_flags_c92_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c92_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c92_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c92_field1_we),
    .wd     (channel_flags_c92_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c92_field1_qs)
  );


  // R[length_c92]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c92_we),
    .wd     (length_c92_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c92_qs)
  );


  // R[message_header_c92]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c92_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c92_message_id_we),
    .wd     (message_header_c92_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c92_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c92_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c92_message_type_we),
    .wd     (message_header_c92_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c92_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c92_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c92_protocol_id_we),
    .wd     (message_header_c92_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c92_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c92_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c92_token_we),
    .wd     (message_header_c92_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c92_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c92_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c92_field1_we),
    .wd     (message_header_c92_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c92_field1_qs)
  );


  // R[message_payload_1_c92]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c92 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c92_we),
    .wd     (message_payload_1_c92_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c92_qs)
  );


  // R[doorbell_c92]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c92_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c92_intr_we),
    .wd     (doorbell_c92_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c92.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c92_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c92_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c92_preserve_mask_we),
    .wd     (doorbell_c92_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c92.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c92_preserve_mask_qs)
  );


  // R[completion_interrupt_c92]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c92_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c92_intr_we),
    .wd     (completion_interrupt_c92_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c92.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c92_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c92_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c92_preserve_mask_we),
    .wd     (completion_interrupt_c92_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c92.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c92_preserve_mask_qs)
  );


  // R[reserved_1_c93]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c93_we),
    .wd     (reserved_1_c93_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c93_qs)
  );


  // R[channel_status_c93]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c93_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c93_channel_free_we),
    .wd     (channel_status_c93_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c93_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c93_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c93_channel_error_we),
    .wd     (channel_status_c93_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c93_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c93_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c93_field1_we),
    .wd     (channel_status_c93_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c93_field1_qs)
  );


  // R[reserved_2_c93]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c93_we),
    .wd     (reserved_2_c93_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c93_qs)
  );


  // R[reserved_3_c93]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c93]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c93_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c93_intr_enable_we),
    .wd     (channel_flags_c93_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c93_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c93_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c93_field1_we),
    .wd     (channel_flags_c93_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c93_field1_qs)
  );


  // R[length_c93]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c93_we),
    .wd     (length_c93_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c93_qs)
  );


  // R[message_header_c93]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c93_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c93_message_id_we),
    .wd     (message_header_c93_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c93_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c93_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c93_message_type_we),
    .wd     (message_header_c93_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c93_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c93_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c93_protocol_id_we),
    .wd     (message_header_c93_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c93_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c93_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c93_token_we),
    .wd     (message_header_c93_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c93_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c93_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c93_field1_we),
    .wd     (message_header_c93_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c93_field1_qs)
  );


  // R[message_payload_1_c93]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c93 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c93_we),
    .wd     (message_payload_1_c93_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c93_qs)
  );


  // R[doorbell_c93]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c93_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c93_intr_we),
    .wd     (doorbell_c93_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c93.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c93_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c93_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c93_preserve_mask_we),
    .wd     (doorbell_c93_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c93.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c93_preserve_mask_qs)
  );


  // R[completion_interrupt_c93]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c93_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c93_intr_we),
    .wd     (completion_interrupt_c93_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c93.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c93_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c93_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c93_preserve_mask_we),
    .wd     (completion_interrupt_c93_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c93.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c93_preserve_mask_qs)
  );


  // R[reserved_1_c94]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c94_we),
    .wd     (reserved_1_c94_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c94_qs)
  );


  // R[channel_status_c94]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c94_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c94_channel_free_we),
    .wd     (channel_status_c94_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c94_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c94_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c94_channel_error_we),
    .wd     (channel_status_c94_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c94_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c94_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c94_field1_we),
    .wd     (channel_status_c94_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c94_field1_qs)
  );


  // R[reserved_2_c94]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c94_we),
    .wd     (reserved_2_c94_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c94_qs)
  );


  // R[reserved_3_c94]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c94]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c94_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c94_intr_enable_we),
    .wd     (channel_flags_c94_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c94_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c94_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c94_field1_we),
    .wd     (channel_flags_c94_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c94_field1_qs)
  );


  // R[length_c94]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c94_we),
    .wd     (length_c94_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c94_qs)
  );


  // R[message_header_c94]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c94_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c94_message_id_we),
    .wd     (message_header_c94_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c94_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c94_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c94_message_type_we),
    .wd     (message_header_c94_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c94_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c94_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c94_protocol_id_we),
    .wd     (message_header_c94_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c94_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c94_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c94_token_we),
    .wd     (message_header_c94_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c94_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c94_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c94_field1_we),
    .wd     (message_header_c94_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c94_field1_qs)
  );


  // R[message_payload_1_c94]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c94 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c94_we),
    .wd     (message_payload_1_c94_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c94_qs)
  );


  // R[doorbell_c94]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c94_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c94_intr_we),
    .wd     (doorbell_c94_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c94.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c94_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c94_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c94_preserve_mask_we),
    .wd     (doorbell_c94_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c94.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c94_preserve_mask_qs)
  );


  // R[completion_interrupt_c94]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c94_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c94_intr_we),
    .wd     (completion_interrupt_c94_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c94.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c94_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c94_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c94_preserve_mask_we),
    .wd     (completion_interrupt_c94_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c94.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c94_preserve_mask_qs)
  );


  // R[reserved_1_c95]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c95_we),
    .wd     (reserved_1_c95_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c95_qs)
  );


  // R[channel_status_c95]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c95_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c95_channel_free_we),
    .wd     (channel_status_c95_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c95_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c95_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c95_channel_error_we),
    .wd     (channel_status_c95_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c95_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c95_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c95_field1_we),
    .wd     (channel_status_c95_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c95_field1_qs)
  );


  // R[reserved_2_c95]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c95_we),
    .wd     (reserved_2_c95_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c95_qs)
  );


  // R[reserved_3_c95]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c95]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c95_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c95_intr_enable_we),
    .wd     (channel_flags_c95_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c95_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c95_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c95_field1_we),
    .wd     (channel_flags_c95_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c95_field1_qs)
  );


  // R[length_c95]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c95_we),
    .wd     (length_c95_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c95_qs)
  );


  // R[message_header_c95]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c95_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c95_message_id_we),
    .wd     (message_header_c95_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c95_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c95_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c95_message_type_we),
    .wd     (message_header_c95_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c95_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c95_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c95_protocol_id_we),
    .wd     (message_header_c95_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c95_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c95_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c95_token_we),
    .wd     (message_header_c95_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c95_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c95_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c95_field1_we),
    .wd     (message_header_c95_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c95_field1_qs)
  );


  // R[message_payload_1_c95]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c95 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c95_we),
    .wd     (message_payload_1_c95_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c95_qs)
  );


  // R[doorbell_c95]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c95_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c95_intr_we),
    .wd     (doorbell_c95_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c95.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c95_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c95_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c95_preserve_mask_we),
    .wd     (doorbell_c95_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c95.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c95_preserve_mask_qs)
  );


  // R[completion_interrupt_c95]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c95_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c95_intr_we),
    .wd     (completion_interrupt_c95_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c95.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c95_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c95_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c95_preserve_mask_we),
    .wd     (completion_interrupt_c95_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c95.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c95_preserve_mask_qs)
  );


  // R[reserved_1_c96]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c96_we),
    .wd     (reserved_1_c96_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c96_qs)
  );


  // R[channel_status_c96]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c96_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c96_channel_free_we),
    .wd     (channel_status_c96_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c96_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c96_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c96_channel_error_we),
    .wd     (channel_status_c96_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c96_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c96_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c96_field1_we),
    .wd     (channel_status_c96_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c96_field1_qs)
  );


  // R[reserved_2_c96]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c96_we),
    .wd     (reserved_2_c96_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c96_qs)
  );


  // R[reserved_3_c96]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c96]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c96_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c96_intr_enable_we),
    .wd     (channel_flags_c96_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c96_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c96_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c96_field1_we),
    .wd     (channel_flags_c96_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c96_field1_qs)
  );


  // R[length_c96]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c96_we),
    .wd     (length_c96_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c96_qs)
  );


  // R[message_header_c96]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c96_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c96_message_id_we),
    .wd     (message_header_c96_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c96_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c96_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c96_message_type_we),
    .wd     (message_header_c96_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c96_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c96_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c96_protocol_id_we),
    .wd     (message_header_c96_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c96_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c96_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c96_token_we),
    .wd     (message_header_c96_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c96_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c96_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c96_field1_we),
    .wd     (message_header_c96_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c96_field1_qs)
  );


  // R[message_payload_1_c96]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c96 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c96_we),
    .wd     (message_payload_1_c96_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c96_qs)
  );


  // R[doorbell_c96]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c96_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c96_intr_we),
    .wd     (doorbell_c96_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c96.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c96_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c96_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c96_preserve_mask_we),
    .wd     (doorbell_c96_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c96.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c96_preserve_mask_qs)
  );


  // R[completion_interrupt_c96]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c96_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c96_intr_we),
    .wd     (completion_interrupt_c96_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c96.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c96_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c96_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c96_preserve_mask_we),
    .wd     (completion_interrupt_c96_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c96.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c96_preserve_mask_qs)
  );


  // R[reserved_1_c97]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c97_we),
    .wd     (reserved_1_c97_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c97_qs)
  );


  // R[channel_status_c97]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c97_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c97_channel_free_we),
    .wd     (channel_status_c97_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c97_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c97_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c97_channel_error_we),
    .wd     (channel_status_c97_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c97_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c97_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c97_field1_we),
    .wd     (channel_status_c97_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c97_field1_qs)
  );


  // R[reserved_2_c97]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c97_we),
    .wd     (reserved_2_c97_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c97_qs)
  );


  // R[reserved_3_c97]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c97]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c97_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c97_intr_enable_we),
    .wd     (channel_flags_c97_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c97_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c97_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c97_field1_we),
    .wd     (channel_flags_c97_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c97_field1_qs)
  );


  // R[length_c97]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c97_we),
    .wd     (length_c97_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c97_qs)
  );


  // R[message_header_c97]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c97_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c97_message_id_we),
    .wd     (message_header_c97_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c97_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c97_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c97_message_type_we),
    .wd     (message_header_c97_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c97_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c97_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c97_protocol_id_we),
    .wd     (message_header_c97_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c97_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c97_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c97_token_we),
    .wd     (message_header_c97_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c97_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c97_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c97_field1_we),
    .wd     (message_header_c97_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c97_field1_qs)
  );


  // R[message_payload_1_c97]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c97 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c97_we),
    .wd     (message_payload_1_c97_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c97_qs)
  );


  // R[doorbell_c97]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c97_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c97_intr_we),
    .wd     (doorbell_c97_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c97.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c97_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c97_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c97_preserve_mask_we),
    .wd     (doorbell_c97_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c97.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c97_preserve_mask_qs)
  );


  // R[completion_interrupt_c97]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c97_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c97_intr_we),
    .wd     (completion_interrupt_c97_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c97.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c97_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c97_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c97_preserve_mask_we),
    .wd     (completion_interrupt_c97_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c97.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c97_preserve_mask_qs)
  );


  // R[reserved_1_c98]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c98_we),
    .wd     (reserved_1_c98_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c98_qs)
  );


  // R[channel_status_c98]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c98_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c98_channel_free_we),
    .wd     (channel_status_c98_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c98_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c98_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c98_channel_error_we),
    .wd     (channel_status_c98_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c98_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c98_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c98_field1_we),
    .wd     (channel_status_c98_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c98_field1_qs)
  );


  // R[reserved_2_c98]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c98_we),
    .wd     (reserved_2_c98_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c98_qs)
  );


  // R[reserved_3_c98]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c98]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c98_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c98_intr_enable_we),
    .wd     (channel_flags_c98_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c98_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c98_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c98_field1_we),
    .wd     (channel_flags_c98_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c98_field1_qs)
  );


  // R[length_c98]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c98_we),
    .wd     (length_c98_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c98_qs)
  );


  // R[message_header_c98]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c98_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c98_message_id_we),
    .wd     (message_header_c98_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c98_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c98_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c98_message_type_we),
    .wd     (message_header_c98_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c98_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c98_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c98_protocol_id_we),
    .wd     (message_header_c98_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c98_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c98_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c98_token_we),
    .wd     (message_header_c98_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c98_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c98_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c98_field1_we),
    .wd     (message_header_c98_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c98_field1_qs)
  );


  // R[message_payload_1_c98]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c98 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c98_we),
    .wd     (message_payload_1_c98_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c98_qs)
  );


  // R[doorbell_c98]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c98_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c98_intr_we),
    .wd     (doorbell_c98_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c98.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c98_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c98_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c98_preserve_mask_we),
    .wd     (doorbell_c98_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c98.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c98_preserve_mask_qs)
  );


  // R[completion_interrupt_c98]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c98_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c98_intr_we),
    .wd     (completion_interrupt_c98_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c98.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c98_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c98_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c98_preserve_mask_we),
    .wd     (completion_interrupt_c98_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c98.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c98_preserve_mask_qs)
  );


  // R[reserved_1_c99]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c99_we),
    .wd     (reserved_1_c99_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c99_qs)
  );


  // R[channel_status_c99]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c99_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c99_channel_free_we),
    .wd     (channel_status_c99_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c99_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c99_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c99_channel_error_we),
    .wd     (channel_status_c99_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c99_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c99_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c99_field1_we),
    .wd     (channel_status_c99_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c99_field1_qs)
  );


  // R[reserved_2_c99]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c99_we),
    .wd     (reserved_2_c99_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c99_qs)
  );


  // R[reserved_3_c99]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c99]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c99_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c99_intr_enable_we),
    .wd     (channel_flags_c99_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c99_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c99_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c99_field1_we),
    .wd     (channel_flags_c99_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c99_field1_qs)
  );


  // R[length_c99]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c99_we),
    .wd     (length_c99_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c99_qs)
  );


  // R[message_header_c99]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c99_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c99_message_id_we),
    .wd     (message_header_c99_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c99_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c99_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c99_message_type_we),
    .wd     (message_header_c99_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c99_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c99_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c99_protocol_id_we),
    .wd     (message_header_c99_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c99_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c99_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c99_token_we),
    .wd     (message_header_c99_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c99_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c99_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c99_field1_we),
    .wd     (message_header_c99_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c99_field1_qs)
  );


  // R[message_payload_1_c99]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c99 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c99_we),
    .wd     (message_payload_1_c99_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c99_qs)
  );


  // R[doorbell_c99]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c99_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c99_intr_we),
    .wd     (doorbell_c99_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c99.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c99_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c99_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c99_preserve_mask_we),
    .wd     (doorbell_c99_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c99.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c99_preserve_mask_qs)
  );


  // R[completion_interrupt_c99]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c99_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c99_intr_we),
    .wd     (completion_interrupt_c99_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c99.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c99_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c99_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c99_preserve_mask_we),
    .wd     (completion_interrupt_c99_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c99.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c99_preserve_mask_qs)
  );


  // R[reserved_1_c100]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c100_we),
    .wd     (reserved_1_c100_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c100_qs)
  );


  // R[channel_status_c100]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c100_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c100_channel_free_we),
    .wd     (channel_status_c100_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c100_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c100_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c100_channel_error_we),
    .wd     (channel_status_c100_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c100_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c100_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c100_field1_we),
    .wd     (channel_status_c100_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c100_field1_qs)
  );


  // R[reserved_2_c100]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c100_we),
    .wd     (reserved_2_c100_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c100_qs)
  );


  // R[reserved_3_c100]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c100]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c100_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c100_intr_enable_we),
    .wd     (channel_flags_c100_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c100_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c100_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c100_field1_we),
    .wd     (channel_flags_c100_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c100_field1_qs)
  );


  // R[length_c100]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c100_we),
    .wd     (length_c100_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c100_qs)
  );


  // R[message_header_c100]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c100_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c100_message_id_we),
    .wd     (message_header_c100_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c100_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c100_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c100_message_type_we),
    .wd     (message_header_c100_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c100_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c100_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c100_protocol_id_we),
    .wd     (message_header_c100_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c100_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c100_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c100_token_we),
    .wd     (message_header_c100_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c100_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c100_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c100_field1_we),
    .wd     (message_header_c100_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c100_field1_qs)
  );


  // R[message_payload_1_c100]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c100 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c100_we),
    .wd     (message_payload_1_c100_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c100_qs)
  );


  // R[doorbell_c100]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c100_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c100_intr_we),
    .wd     (doorbell_c100_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c100.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c100_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c100_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c100_preserve_mask_we),
    .wd     (doorbell_c100_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c100.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c100_preserve_mask_qs)
  );


  // R[completion_interrupt_c100]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c100_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c100_intr_we),
    .wd     (completion_interrupt_c100_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c100.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c100_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c100_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c100_preserve_mask_we),
    .wd     (completion_interrupt_c100_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c100.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c100_preserve_mask_qs)
  );


  // R[reserved_1_c101]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c101_we),
    .wd     (reserved_1_c101_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c101_qs)
  );


  // R[channel_status_c101]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c101_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c101_channel_free_we),
    .wd     (channel_status_c101_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c101_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c101_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c101_channel_error_we),
    .wd     (channel_status_c101_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c101_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c101_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c101_field1_we),
    .wd     (channel_status_c101_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c101_field1_qs)
  );


  // R[reserved_2_c101]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c101_we),
    .wd     (reserved_2_c101_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c101_qs)
  );


  // R[reserved_3_c101]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c101]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c101_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c101_intr_enable_we),
    .wd     (channel_flags_c101_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c101_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c101_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c101_field1_we),
    .wd     (channel_flags_c101_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c101_field1_qs)
  );


  // R[length_c101]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c101_we),
    .wd     (length_c101_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c101_qs)
  );


  // R[message_header_c101]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c101_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c101_message_id_we),
    .wd     (message_header_c101_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c101_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c101_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c101_message_type_we),
    .wd     (message_header_c101_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c101_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c101_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c101_protocol_id_we),
    .wd     (message_header_c101_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c101_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c101_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c101_token_we),
    .wd     (message_header_c101_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c101_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c101_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c101_field1_we),
    .wd     (message_header_c101_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c101_field1_qs)
  );


  // R[message_payload_1_c101]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c101 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c101_we),
    .wd     (message_payload_1_c101_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c101_qs)
  );


  // R[doorbell_c101]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c101_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c101_intr_we),
    .wd     (doorbell_c101_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c101.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c101_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c101_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c101_preserve_mask_we),
    .wd     (doorbell_c101_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c101.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c101_preserve_mask_qs)
  );


  // R[completion_interrupt_c101]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c101_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c101_intr_we),
    .wd     (completion_interrupt_c101_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c101.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c101_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c101_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c101_preserve_mask_we),
    .wd     (completion_interrupt_c101_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c101.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c101_preserve_mask_qs)
  );


  // R[reserved_1_c102]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c102_we),
    .wd     (reserved_1_c102_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c102_qs)
  );


  // R[channel_status_c102]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c102_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c102_channel_free_we),
    .wd     (channel_status_c102_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c102_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c102_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c102_channel_error_we),
    .wd     (channel_status_c102_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c102_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c102_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c102_field1_we),
    .wd     (channel_status_c102_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c102_field1_qs)
  );


  // R[reserved_2_c102]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c102_we),
    .wd     (reserved_2_c102_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c102_qs)
  );


  // R[reserved_3_c102]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c102]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c102_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c102_intr_enable_we),
    .wd     (channel_flags_c102_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c102_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c102_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c102_field1_we),
    .wd     (channel_flags_c102_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c102_field1_qs)
  );


  // R[length_c102]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c102_we),
    .wd     (length_c102_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c102_qs)
  );


  // R[message_header_c102]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c102_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c102_message_id_we),
    .wd     (message_header_c102_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c102_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c102_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c102_message_type_we),
    .wd     (message_header_c102_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c102_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c102_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c102_protocol_id_we),
    .wd     (message_header_c102_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c102_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c102_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c102_token_we),
    .wd     (message_header_c102_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c102_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c102_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c102_field1_we),
    .wd     (message_header_c102_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c102_field1_qs)
  );


  // R[message_payload_1_c102]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c102 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c102_we),
    .wd     (message_payload_1_c102_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c102_qs)
  );


  // R[doorbell_c102]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c102_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c102_intr_we),
    .wd     (doorbell_c102_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c102.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c102_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c102_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c102_preserve_mask_we),
    .wd     (doorbell_c102_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c102.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c102_preserve_mask_qs)
  );


  // R[completion_interrupt_c102]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c102_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c102_intr_we),
    .wd     (completion_interrupt_c102_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c102.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c102_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c102_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c102_preserve_mask_we),
    .wd     (completion_interrupt_c102_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c102.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c102_preserve_mask_qs)
  );


  // R[reserved_1_c103]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c103_we),
    .wd     (reserved_1_c103_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c103_qs)
  );


  // R[channel_status_c103]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c103_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c103_channel_free_we),
    .wd     (channel_status_c103_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c103_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c103_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c103_channel_error_we),
    .wd     (channel_status_c103_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c103_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c103_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c103_field1_we),
    .wd     (channel_status_c103_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c103_field1_qs)
  );


  // R[reserved_2_c103]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c103_we),
    .wd     (reserved_2_c103_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c103_qs)
  );


  // R[reserved_3_c103]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c103]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c103_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c103_intr_enable_we),
    .wd     (channel_flags_c103_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c103_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c103_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c103_field1_we),
    .wd     (channel_flags_c103_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c103_field1_qs)
  );


  // R[length_c103]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c103_we),
    .wd     (length_c103_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c103_qs)
  );


  // R[message_header_c103]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c103_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c103_message_id_we),
    .wd     (message_header_c103_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c103_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c103_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c103_message_type_we),
    .wd     (message_header_c103_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c103_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c103_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c103_protocol_id_we),
    .wd     (message_header_c103_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c103_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c103_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c103_token_we),
    .wd     (message_header_c103_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c103_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c103_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c103_field1_we),
    .wd     (message_header_c103_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c103_field1_qs)
  );


  // R[message_payload_1_c103]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c103 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c103_we),
    .wd     (message_payload_1_c103_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c103_qs)
  );


  // R[doorbell_c103]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c103_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c103_intr_we),
    .wd     (doorbell_c103_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c103.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c103_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c103_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c103_preserve_mask_we),
    .wd     (doorbell_c103_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c103.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c103_preserve_mask_qs)
  );


  // R[completion_interrupt_c103]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c103_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c103_intr_we),
    .wd     (completion_interrupt_c103_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c103.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c103_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c103_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c103_preserve_mask_we),
    .wd     (completion_interrupt_c103_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c103.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c103_preserve_mask_qs)
  );


  // R[reserved_1_c104]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c104_we),
    .wd     (reserved_1_c104_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c104_qs)
  );


  // R[channel_status_c104]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c104_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c104_channel_free_we),
    .wd     (channel_status_c104_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c104_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c104_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c104_channel_error_we),
    .wd     (channel_status_c104_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c104_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c104_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c104_field1_we),
    .wd     (channel_status_c104_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c104_field1_qs)
  );


  // R[reserved_2_c104]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c104_we),
    .wd     (reserved_2_c104_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c104_qs)
  );


  // R[reserved_3_c104]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c104]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c104_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c104_intr_enable_we),
    .wd     (channel_flags_c104_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c104_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c104_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c104_field1_we),
    .wd     (channel_flags_c104_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c104_field1_qs)
  );


  // R[length_c104]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c104_we),
    .wd     (length_c104_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c104_qs)
  );


  // R[message_header_c104]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c104_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c104_message_id_we),
    .wd     (message_header_c104_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c104_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c104_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c104_message_type_we),
    .wd     (message_header_c104_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c104_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c104_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c104_protocol_id_we),
    .wd     (message_header_c104_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c104_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c104_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c104_token_we),
    .wd     (message_header_c104_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c104_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c104_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c104_field1_we),
    .wd     (message_header_c104_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c104_field1_qs)
  );


  // R[message_payload_1_c104]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c104 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c104_we),
    .wd     (message_payload_1_c104_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c104_qs)
  );


  // R[doorbell_c104]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c104_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c104_intr_we),
    .wd     (doorbell_c104_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c104.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c104_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c104_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c104_preserve_mask_we),
    .wd     (doorbell_c104_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c104.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c104_preserve_mask_qs)
  );


  // R[completion_interrupt_c104]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c104_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c104_intr_we),
    .wd     (completion_interrupt_c104_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c104.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c104_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c104_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c104_preserve_mask_we),
    .wd     (completion_interrupt_c104_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c104.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c104_preserve_mask_qs)
  );


  // R[reserved_1_c105]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c105_we),
    .wd     (reserved_1_c105_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c105_qs)
  );


  // R[channel_status_c105]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c105_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c105_channel_free_we),
    .wd     (channel_status_c105_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c105_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c105_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c105_channel_error_we),
    .wd     (channel_status_c105_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c105_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c105_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c105_field1_we),
    .wd     (channel_status_c105_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c105_field1_qs)
  );


  // R[reserved_2_c105]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c105_we),
    .wd     (reserved_2_c105_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c105_qs)
  );


  // R[reserved_3_c105]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c105]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c105_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c105_intr_enable_we),
    .wd     (channel_flags_c105_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c105_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c105_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c105_field1_we),
    .wd     (channel_flags_c105_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c105_field1_qs)
  );


  // R[length_c105]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c105_we),
    .wd     (length_c105_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c105_qs)
  );


  // R[message_header_c105]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c105_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c105_message_id_we),
    .wd     (message_header_c105_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c105_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c105_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c105_message_type_we),
    .wd     (message_header_c105_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c105_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c105_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c105_protocol_id_we),
    .wd     (message_header_c105_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c105_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c105_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c105_token_we),
    .wd     (message_header_c105_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c105_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c105_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c105_field1_we),
    .wd     (message_header_c105_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c105_field1_qs)
  );


  // R[message_payload_1_c105]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c105 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c105_we),
    .wd     (message_payload_1_c105_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c105_qs)
  );


  // R[doorbell_c105]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c105_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c105_intr_we),
    .wd     (doorbell_c105_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c105.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c105_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c105_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c105_preserve_mask_we),
    .wd     (doorbell_c105_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c105.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c105_preserve_mask_qs)
  );


  // R[completion_interrupt_c105]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c105_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c105_intr_we),
    .wd     (completion_interrupt_c105_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c105.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c105_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c105_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c105_preserve_mask_we),
    .wd     (completion_interrupt_c105_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c105.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c105_preserve_mask_qs)
  );


  // R[reserved_1_c106]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c106_we),
    .wd     (reserved_1_c106_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c106_qs)
  );


  // R[channel_status_c106]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c106_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c106_channel_free_we),
    .wd     (channel_status_c106_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c106_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c106_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c106_channel_error_we),
    .wd     (channel_status_c106_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c106_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c106_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c106_field1_we),
    .wd     (channel_status_c106_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c106_field1_qs)
  );


  // R[reserved_2_c106]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c106_we),
    .wd     (reserved_2_c106_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c106_qs)
  );


  // R[reserved_3_c106]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c106]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c106_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c106_intr_enable_we),
    .wd     (channel_flags_c106_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c106_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c106_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c106_field1_we),
    .wd     (channel_flags_c106_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c106_field1_qs)
  );


  // R[length_c106]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c106_we),
    .wd     (length_c106_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c106_qs)
  );


  // R[message_header_c106]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c106_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c106_message_id_we),
    .wd     (message_header_c106_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c106_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c106_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c106_message_type_we),
    .wd     (message_header_c106_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c106_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c106_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c106_protocol_id_we),
    .wd     (message_header_c106_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c106_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c106_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c106_token_we),
    .wd     (message_header_c106_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c106_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c106_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c106_field1_we),
    .wd     (message_header_c106_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c106_field1_qs)
  );


  // R[message_payload_1_c106]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c106 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c106_we),
    .wd     (message_payload_1_c106_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c106_qs)
  );


  // R[doorbell_c106]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c106_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c106_intr_we),
    .wd     (doorbell_c106_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c106.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c106_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c106_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c106_preserve_mask_we),
    .wd     (doorbell_c106_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c106.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c106_preserve_mask_qs)
  );


  // R[completion_interrupt_c106]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c106_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c106_intr_we),
    .wd     (completion_interrupt_c106_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c106.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c106_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c106_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c106_preserve_mask_we),
    .wd     (completion_interrupt_c106_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c106.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c106_preserve_mask_qs)
  );


  // R[reserved_1_c107]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c107_we),
    .wd     (reserved_1_c107_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c107_qs)
  );


  // R[channel_status_c107]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c107_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c107_channel_free_we),
    .wd     (channel_status_c107_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c107_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c107_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c107_channel_error_we),
    .wd     (channel_status_c107_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c107_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c107_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c107_field1_we),
    .wd     (channel_status_c107_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c107_field1_qs)
  );


  // R[reserved_2_c107]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c107_we),
    .wd     (reserved_2_c107_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c107_qs)
  );


  // R[reserved_3_c107]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c107]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c107_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c107_intr_enable_we),
    .wd     (channel_flags_c107_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c107_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c107_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c107_field1_we),
    .wd     (channel_flags_c107_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c107_field1_qs)
  );


  // R[length_c107]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c107_we),
    .wd     (length_c107_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c107_qs)
  );


  // R[message_header_c107]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c107_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c107_message_id_we),
    .wd     (message_header_c107_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c107_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c107_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c107_message_type_we),
    .wd     (message_header_c107_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c107_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c107_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c107_protocol_id_we),
    .wd     (message_header_c107_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c107_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c107_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c107_token_we),
    .wd     (message_header_c107_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c107_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c107_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c107_field1_we),
    .wd     (message_header_c107_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c107_field1_qs)
  );


  // R[message_payload_1_c107]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c107 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c107_we),
    .wd     (message_payload_1_c107_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c107_qs)
  );


  // R[doorbell_c107]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c107_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c107_intr_we),
    .wd     (doorbell_c107_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c107.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c107_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c107_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c107_preserve_mask_we),
    .wd     (doorbell_c107_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c107.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c107_preserve_mask_qs)
  );


  // R[completion_interrupt_c107]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c107_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c107_intr_we),
    .wd     (completion_interrupt_c107_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c107.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c107_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c107_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c107_preserve_mask_we),
    .wd     (completion_interrupt_c107_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c107.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c107_preserve_mask_qs)
  );


  // R[reserved_1_c108]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c108_we),
    .wd     (reserved_1_c108_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c108_qs)
  );


  // R[channel_status_c108]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c108_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c108_channel_free_we),
    .wd     (channel_status_c108_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c108_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c108_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c108_channel_error_we),
    .wd     (channel_status_c108_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c108_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c108_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c108_field1_we),
    .wd     (channel_status_c108_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c108_field1_qs)
  );


  // R[reserved_2_c108]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c108_we),
    .wd     (reserved_2_c108_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c108_qs)
  );


  // R[reserved_3_c108]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c108]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c108_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c108_intr_enable_we),
    .wd     (channel_flags_c108_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c108_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c108_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c108_field1_we),
    .wd     (channel_flags_c108_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c108_field1_qs)
  );


  // R[length_c108]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c108_we),
    .wd     (length_c108_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c108_qs)
  );


  // R[message_header_c108]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c108_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c108_message_id_we),
    .wd     (message_header_c108_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c108_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c108_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c108_message_type_we),
    .wd     (message_header_c108_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c108_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c108_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c108_protocol_id_we),
    .wd     (message_header_c108_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c108_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c108_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c108_token_we),
    .wd     (message_header_c108_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c108_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c108_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c108_field1_we),
    .wd     (message_header_c108_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c108_field1_qs)
  );


  // R[message_payload_1_c108]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c108 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c108_we),
    .wd     (message_payload_1_c108_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c108_qs)
  );


  // R[doorbell_c108]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c108_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c108_intr_we),
    .wd     (doorbell_c108_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c108.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c108_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c108_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c108_preserve_mask_we),
    .wd     (doorbell_c108_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c108.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c108_preserve_mask_qs)
  );


  // R[completion_interrupt_c108]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c108_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c108_intr_we),
    .wd     (completion_interrupt_c108_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c108.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c108_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c108_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c108_preserve_mask_we),
    .wd     (completion_interrupt_c108_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c108.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c108_preserve_mask_qs)
  );


  // R[reserved_1_c109]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c109_we),
    .wd     (reserved_1_c109_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c109_qs)
  );


  // R[channel_status_c109]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c109_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c109_channel_free_we),
    .wd     (channel_status_c109_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c109_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c109_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c109_channel_error_we),
    .wd     (channel_status_c109_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c109_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c109_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c109_field1_we),
    .wd     (channel_status_c109_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c109_field1_qs)
  );


  // R[reserved_2_c109]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c109_we),
    .wd     (reserved_2_c109_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c109_qs)
  );


  // R[reserved_3_c109]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c109]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c109_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c109_intr_enable_we),
    .wd     (channel_flags_c109_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c109_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c109_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c109_field1_we),
    .wd     (channel_flags_c109_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c109_field1_qs)
  );


  // R[length_c109]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c109_we),
    .wd     (length_c109_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c109_qs)
  );


  // R[message_header_c109]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c109_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c109_message_id_we),
    .wd     (message_header_c109_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c109_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c109_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c109_message_type_we),
    .wd     (message_header_c109_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c109_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c109_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c109_protocol_id_we),
    .wd     (message_header_c109_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c109_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c109_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c109_token_we),
    .wd     (message_header_c109_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c109_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c109_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c109_field1_we),
    .wd     (message_header_c109_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c109_field1_qs)
  );


  // R[message_payload_1_c109]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c109 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c109_we),
    .wd     (message_payload_1_c109_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c109_qs)
  );


  // R[doorbell_c109]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c109_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c109_intr_we),
    .wd     (doorbell_c109_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c109.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c109_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c109_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c109_preserve_mask_we),
    .wd     (doorbell_c109_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c109.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c109_preserve_mask_qs)
  );


  // R[completion_interrupt_c109]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c109_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c109_intr_we),
    .wd     (completion_interrupt_c109_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c109.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c109_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c109_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c109_preserve_mask_we),
    .wd     (completion_interrupt_c109_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c109.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c109_preserve_mask_qs)
  );


  // R[reserved_1_c110]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c110_we),
    .wd     (reserved_1_c110_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c110_qs)
  );


  // R[channel_status_c110]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c110_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c110_channel_free_we),
    .wd     (channel_status_c110_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c110_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c110_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c110_channel_error_we),
    .wd     (channel_status_c110_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c110_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c110_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c110_field1_we),
    .wd     (channel_status_c110_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c110_field1_qs)
  );


  // R[reserved_2_c110]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c110_we),
    .wd     (reserved_2_c110_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c110_qs)
  );


  // R[reserved_3_c110]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c110]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c110_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c110_intr_enable_we),
    .wd     (channel_flags_c110_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c110_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c110_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c110_field1_we),
    .wd     (channel_flags_c110_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c110_field1_qs)
  );


  // R[length_c110]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c110_we),
    .wd     (length_c110_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c110_qs)
  );


  // R[message_header_c110]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c110_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c110_message_id_we),
    .wd     (message_header_c110_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c110_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c110_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c110_message_type_we),
    .wd     (message_header_c110_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c110_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c110_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c110_protocol_id_we),
    .wd     (message_header_c110_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c110_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c110_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c110_token_we),
    .wd     (message_header_c110_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c110_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c110_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c110_field1_we),
    .wd     (message_header_c110_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c110_field1_qs)
  );


  // R[message_payload_1_c110]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c110 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c110_we),
    .wd     (message_payload_1_c110_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c110_qs)
  );


  // R[doorbell_c110]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c110_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c110_intr_we),
    .wd     (doorbell_c110_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c110.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c110_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c110_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c110_preserve_mask_we),
    .wd     (doorbell_c110_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c110.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c110_preserve_mask_qs)
  );


  // R[completion_interrupt_c110]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c110_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c110_intr_we),
    .wd     (completion_interrupt_c110_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c110.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c110_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c110_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c110_preserve_mask_we),
    .wd     (completion_interrupt_c110_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c110.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c110_preserve_mask_qs)
  );


  // R[reserved_1_c111]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c111_we),
    .wd     (reserved_1_c111_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c111_qs)
  );


  // R[channel_status_c111]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c111_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c111_channel_free_we),
    .wd     (channel_status_c111_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c111_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c111_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c111_channel_error_we),
    .wd     (channel_status_c111_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c111_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c111_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c111_field1_we),
    .wd     (channel_status_c111_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c111_field1_qs)
  );


  // R[reserved_2_c111]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c111_we),
    .wd     (reserved_2_c111_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c111_qs)
  );


  // R[reserved_3_c111]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c111]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c111_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c111_intr_enable_we),
    .wd     (channel_flags_c111_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c111_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c111_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c111_field1_we),
    .wd     (channel_flags_c111_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c111_field1_qs)
  );


  // R[length_c111]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c111_we),
    .wd     (length_c111_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c111_qs)
  );


  // R[message_header_c111]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c111_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c111_message_id_we),
    .wd     (message_header_c111_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c111_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c111_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c111_message_type_we),
    .wd     (message_header_c111_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c111_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c111_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c111_protocol_id_we),
    .wd     (message_header_c111_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c111_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c111_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c111_token_we),
    .wd     (message_header_c111_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c111_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c111_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c111_field1_we),
    .wd     (message_header_c111_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c111_field1_qs)
  );


  // R[message_payload_1_c111]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c111 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c111_we),
    .wd     (message_payload_1_c111_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c111_qs)
  );


  // R[doorbell_c111]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c111_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c111_intr_we),
    .wd     (doorbell_c111_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c111.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c111_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c111_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c111_preserve_mask_we),
    .wd     (doorbell_c111_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c111.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c111_preserve_mask_qs)
  );


  // R[completion_interrupt_c111]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c111_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c111_intr_we),
    .wd     (completion_interrupt_c111_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c111.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c111_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c111_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c111_preserve_mask_we),
    .wd     (completion_interrupt_c111_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c111.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c111_preserve_mask_qs)
  );


  // R[reserved_1_c112]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c112_we),
    .wd     (reserved_1_c112_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c112_qs)
  );


  // R[channel_status_c112]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c112_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c112_channel_free_we),
    .wd     (channel_status_c112_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c112_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c112_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c112_channel_error_we),
    .wd     (channel_status_c112_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c112_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c112_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c112_field1_we),
    .wd     (channel_status_c112_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c112_field1_qs)
  );


  // R[reserved_2_c112]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c112_we),
    .wd     (reserved_2_c112_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c112_qs)
  );


  // R[reserved_3_c112]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c112]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c112_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c112_intr_enable_we),
    .wd     (channel_flags_c112_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c112_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c112_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c112_field1_we),
    .wd     (channel_flags_c112_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c112_field1_qs)
  );


  // R[length_c112]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c112_we),
    .wd     (length_c112_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c112_qs)
  );


  // R[message_header_c112]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c112_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c112_message_id_we),
    .wd     (message_header_c112_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c112_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c112_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c112_message_type_we),
    .wd     (message_header_c112_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c112_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c112_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c112_protocol_id_we),
    .wd     (message_header_c112_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c112_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c112_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c112_token_we),
    .wd     (message_header_c112_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c112_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c112_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c112_field1_we),
    .wd     (message_header_c112_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c112_field1_qs)
  );


  // R[message_payload_1_c112]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c112 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c112_we),
    .wd     (message_payload_1_c112_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c112_qs)
  );


  // R[doorbell_c112]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c112_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c112_intr_we),
    .wd     (doorbell_c112_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c112.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c112_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c112_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c112_preserve_mask_we),
    .wd     (doorbell_c112_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c112.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c112_preserve_mask_qs)
  );


  // R[completion_interrupt_c112]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c112_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c112_intr_we),
    .wd     (completion_interrupt_c112_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c112.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c112_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c112_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c112_preserve_mask_we),
    .wd     (completion_interrupt_c112_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c112.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c112_preserve_mask_qs)
  );


  // R[reserved_1_c113]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c113_we),
    .wd     (reserved_1_c113_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c113_qs)
  );


  // R[channel_status_c113]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c113_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c113_channel_free_we),
    .wd     (channel_status_c113_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c113_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c113_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c113_channel_error_we),
    .wd     (channel_status_c113_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c113_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c113_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c113_field1_we),
    .wd     (channel_status_c113_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c113_field1_qs)
  );


  // R[reserved_2_c113]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c113_we),
    .wd     (reserved_2_c113_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c113_qs)
  );


  // R[reserved_3_c113]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c113]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c113_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c113_intr_enable_we),
    .wd     (channel_flags_c113_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c113_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c113_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c113_field1_we),
    .wd     (channel_flags_c113_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c113_field1_qs)
  );


  // R[length_c113]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c113_we),
    .wd     (length_c113_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c113_qs)
  );


  // R[message_header_c113]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c113_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c113_message_id_we),
    .wd     (message_header_c113_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c113_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c113_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c113_message_type_we),
    .wd     (message_header_c113_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c113_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c113_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c113_protocol_id_we),
    .wd     (message_header_c113_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c113_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c113_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c113_token_we),
    .wd     (message_header_c113_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c113_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c113_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c113_field1_we),
    .wd     (message_header_c113_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c113_field1_qs)
  );


  // R[message_payload_1_c113]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c113 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c113_we),
    .wd     (message_payload_1_c113_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c113_qs)
  );


  // R[doorbell_c113]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c113_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c113_intr_we),
    .wd     (doorbell_c113_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c113.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c113_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c113_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c113_preserve_mask_we),
    .wd     (doorbell_c113_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c113.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c113_preserve_mask_qs)
  );


  // R[completion_interrupt_c113]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c113_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c113_intr_we),
    .wd     (completion_interrupt_c113_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c113.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c113_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c113_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c113_preserve_mask_we),
    .wd     (completion_interrupt_c113_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c113.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c113_preserve_mask_qs)
  );


  // R[reserved_1_c114]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c114_we),
    .wd     (reserved_1_c114_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c114_qs)
  );


  // R[channel_status_c114]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c114_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c114_channel_free_we),
    .wd     (channel_status_c114_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c114_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c114_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c114_channel_error_we),
    .wd     (channel_status_c114_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c114_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c114_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c114_field1_we),
    .wd     (channel_status_c114_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c114_field1_qs)
  );


  // R[reserved_2_c114]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c114_we),
    .wd     (reserved_2_c114_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c114_qs)
  );


  // R[reserved_3_c114]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c114]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c114_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c114_intr_enable_we),
    .wd     (channel_flags_c114_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c114_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c114_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c114_field1_we),
    .wd     (channel_flags_c114_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c114_field1_qs)
  );


  // R[length_c114]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c114_we),
    .wd     (length_c114_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c114_qs)
  );


  // R[message_header_c114]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c114_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c114_message_id_we),
    .wd     (message_header_c114_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c114_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c114_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c114_message_type_we),
    .wd     (message_header_c114_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c114_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c114_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c114_protocol_id_we),
    .wd     (message_header_c114_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c114_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c114_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c114_token_we),
    .wd     (message_header_c114_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c114_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c114_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c114_field1_we),
    .wd     (message_header_c114_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c114_field1_qs)
  );


  // R[message_payload_1_c114]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c114 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c114_we),
    .wd     (message_payload_1_c114_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c114_qs)
  );


  // R[doorbell_c114]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c114_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c114_intr_we),
    .wd     (doorbell_c114_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c114.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c114_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c114_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c114_preserve_mask_we),
    .wd     (doorbell_c114_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c114.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c114_preserve_mask_qs)
  );


  // R[completion_interrupt_c114]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c114_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c114_intr_we),
    .wd     (completion_interrupt_c114_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c114.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c114_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c114_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c114_preserve_mask_we),
    .wd     (completion_interrupt_c114_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c114.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c114_preserve_mask_qs)
  );


  // R[reserved_1_c115]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c115_we),
    .wd     (reserved_1_c115_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c115_qs)
  );


  // R[channel_status_c115]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c115_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c115_channel_free_we),
    .wd     (channel_status_c115_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c115_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c115_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c115_channel_error_we),
    .wd     (channel_status_c115_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c115_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c115_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c115_field1_we),
    .wd     (channel_status_c115_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c115_field1_qs)
  );


  // R[reserved_2_c115]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c115_we),
    .wd     (reserved_2_c115_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c115_qs)
  );


  // R[reserved_3_c115]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c115]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c115_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c115_intr_enable_we),
    .wd     (channel_flags_c115_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c115_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c115_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c115_field1_we),
    .wd     (channel_flags_c115_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c115_field1_qs)
  );


  // R[length_c115]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c115_we),
    .wd     (length_c115_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c115_qs)
  );


  // R[message_header_c115]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c115_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c115_message_id_we),
    .wd     (message_header_c115_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c115_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c115_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c115_message_type_we),
    .wd     (message_header_c115_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c115_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c115_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c115_protocol_id_we),
    .wd     (message_header_c115_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c115_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c115_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c115_token_we),
    .wd     (message_header_c115_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c115_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c115_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c115_field1_we),
    .wd     (message_header_c115_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c115_field1_qs)
  );


  // R[message_payload_1_c115]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c115 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c115_we),
    .wd     (message_payload_1_c115_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c115_qs)
  );


  // R[doorbell_c115]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c115_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c115_intr_we),
    .wd     (doorbell_c115_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c115.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c115_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c115_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c115_preserve_mask_we),
    .wd     (doorbell_c115_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c115.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c115_preserve_mask_qs)
  );


  // R[completion_interrupt_c115]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c115_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c115_intr_we),
    .wd     (completion_interrupt_c115_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c115.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c115_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c115_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c115_preserve_mask_we),
    .wd     (completion_interrupt_c115_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c115.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c115_preserve_mask_qs)
  );


  // R[reserved_1_c116]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c116_we),
    .wd     (reserved_1_c116_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c116_qs)
  );


  // R[channel_status_c116]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c116_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c116_channel_free_we),
    .wd     (channel_status_c116_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c116_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c116_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c116_channel_error_we),
    .wd     (channel_status_c116_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c116_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c116_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c116_field1_we),
    .wd     (channel_status_c116_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c116_field1_qs)
  );


  // R[reserved_2_c116]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c116_we),
    .wd     (reserved_2_c116_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c116_qs)
  );


  // R[reserved_3_c116]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c116]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c116_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c116_intr_enable_we),
    .wd     (channel_flags_c116_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c116_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c116_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c116_field1_we),
    .wd     (channel_flags_c116_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c116_field1_qs)
  );


  // R[length_c116]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c116_we),
    .wd     (length_c116_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c116_qs)
  );


  // R[message_header_c116]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c116_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c116_message_id_we),
    .wd     (message_header_c116_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c116_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c116_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c116_message_type_we),
    .wd     (message_header_c116_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c116_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c116_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c116_protocol_id_we),
    .wd     (message_header_c116_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c116_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c116_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c116_token_we),
    .wd     (message_header_c116_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c116_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c116_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c116_field1_we),
    .wd     (message_header_c116_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c116_field1_qs)
  );


  // R[message_payload_1_c116]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c116 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c116_we),
    .wd     (message_payload_1_c116_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c116_qs)
  );


  // R[doorbell_c116]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c116_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c116_intr_we),
    .wd     (doorbell_c116_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c116.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c116_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c116_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c116_preserve_mask_we),
    .wd     (doorbell_c116_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c116.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c116_preserve_mask_qs)
  );


  // R[completion_interrupt_c116]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c116_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c116_intr_we),
    .wd     (completion_interrupt_c116_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c116.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c116_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c116_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c116_preserve_mask_we),
    .wd     (completion_interrupt_c116_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c116.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c116_preserve_mask_qs)
  );


  // R[reserved_1_c117]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c117_we),
    .wd     (reserved_1_c117_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c117_qs)
  );


  // R[channel_status_c117]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c117_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c117_channel_free_we),
    .wd     (channel_status_c117_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c117_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c117_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c117_channel_error_we),
    .wd     (channel_status_c117_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c117_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c117_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c117_field1_we),
    .wd     (channel_status_c117_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c117_field1_qs)
  );


  // R[reserved_2_c117]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c117_we),
    .wd     (reserved_2_c117_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c117_qs)
  );


  // R[reserved_3_c117]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c117]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c117_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c117_intr_enable_we),
    .wd     (channel_flags_c117_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c117_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c117_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c117_field1_we),
    .wd     (channel_flags_c117_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c117_field1_qs)
  );


  // R[length_c117]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c117_we),
    .wd     (length_c117_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c117_qs)
  );


  // R[message_header_c117]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c117_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c117_message_id_we),
    .wd     (message_header_c117_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c117_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c117_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c117_message_type_we),
    .wd     (message_header_c117_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c117_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c117_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c117_protocol_id_we),
    .wd     (message_header_c117_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c117_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c117_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c117_token_we),
    .wd     (message_header_c117_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c117_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c117_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c117_field1_we),
    .wd     (message_header_c117_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c117_field1_qs)
  );


  // R[message_payload_1_c117]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c117 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c117_we),
    .wd     (message_payload_1_c117_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c117_qs)
  );


  // R[doorbell_c117]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c117_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c117_intr_we),
    .wd     (doorbell_c117_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c117.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c117_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c117_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c117_preserve_mask_we),
    .wd     (doorbell_c117_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c117.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c117_preserve_mask_qs)
  );


  // R[completion_interrupt_c117]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c117_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c117_intr_we),
    .wd     (completion_interrupt_c117_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c117.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c117_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c117_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c117_preserve_mask_we),
    .wd     (completion_interrupt_c117_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c117.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c117_preserve_mask_qs)
  );


  // R[reserved_1_c118]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c118_we),
    .wd     (reserved_1_c118_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c118_qs)
  );


  // R[channel_status_c118]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c118_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c118_channel_free_we),
    .wd     (channel_status_c118_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c118_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c118_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c118_channel_error_we),
    .wd     (channel_status_c118_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c118_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c118_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c118_field1_we),
    .wd     (channel_status_c118_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c118_field1_qs)
  );


  // R[reserved_2_c118]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c118_we),
    .wd     (reserved_2_c118_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c118_qs)
  );


  // R[reserved_3_c118]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c118]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c118_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c118_intr_enable_we),
    .wd     (channel_flags_c118_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c118_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c118_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c118_field1_we),
    .wd     (channel_flags_c118_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c118_field1_qs)
  );


  // R[length_c118]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c118_we),
    .wd     (length_c118_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c118_qs)
  );


  // R[message_header_c118]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c118_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c118_message_id_we),
    .wd     (message_header_c118_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c118_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c118_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c118_message_type_we),
    .wd     (message_header_c118_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c118_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c118_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c118_protocol_id_we),
    .wd     (message_header_c118_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c118_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c118_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c118_token_we),
    .wd     (message_header_c118_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c118_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c118_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c118_field1_we),
    .wd     (message_header_c118_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c118_field1_qs)
  );


  // R[message_payload_1_c118]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c118 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c118_we),
    .wd     (message_payload_1_c118_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c118_qs)
  );


  // R[doorbell_c118]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c118_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c118_intr_we),
    .wd     (doorbell_c118_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c118.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c118_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c118_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c118_preserve_mask_we),
    .wd     (doorbell_c118_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c118.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c118_preserve_mask_qs)
  );


  // R[completion_interrupt_c118]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c118_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c118_intr_we),
    .wd     (completion_interrupt_c118_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c118.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c118_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c118_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c118_preserve_mask_we),
    .wd     (completion_interrupt_c118_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c118.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c118_preserve_mask_qs)
  );


  // R[reserved_1_c119]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c119_we),
    .wd     (reserved_1_c119_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c119_qs)
  );


  // R[channel_status_c119]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c119_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c119_channel_free_we),
    .wd     (channel_status_c119_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c119_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c119_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c119_channel_error_we),
    .wd     (channel_status_c119_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c119_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c119_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c119_field1_we),
    .wd     (channel_status_c119_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c119_field1_qs)
  );


  // R[reserved_2_c119]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c119_we),
    .wd     (reserved_2_c119_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c119_qs)
  );


  // R[reserved_3_c119]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c119]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c119_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c119_intr_enable_we),
    .wd     (channel_flags_c119_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c119_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c119_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c119_field1_we),
    .wd     (channel_flags_c119_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c119_field1_qs)
  );


  // R[length_c119]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c119_we),
    .wd     (length_c119_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c119_qs)
  );


  // R[message_header_c119]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c119_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c119_message_id_we),
    .wd     (message_header_c119_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c119_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c119_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c119_message_type_we),
    .wd     (message_header_c119_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c119_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c119_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c119_protocol_id_we),
    .wd     (message_header_c119_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c119_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c119_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c119_token_we),
    .wd     (message_header_c119_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c119_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c119_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c119_field1_we),
    .wd     (message_header_c119_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c119_field1_qs)
  );


  // R[message_payload_1_c119]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c119 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c119_we),
    .wd     (message_payload_1_c119_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c119_qs)
  );


  // R[doorbell_c119]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c119_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c119_intr_we),
    .wd     (doorbell_c119_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c119.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c119_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c119_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c119_preserve_mask_we),
    .wd     (doorbell_c119_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c119.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c119_preserve_mask_qs)
  );


  // R[completion_interrupt_c119]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c119_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c119_intr_we),
    .wd     (completion_interrupt_c119_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c119.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c119_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c119_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c119_preserve_mask_we),
    .wd     (completion_interrupt_c119_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c119.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c119_preserve_mask_qs)
  );


  // R[reserved_1_c120]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c120_we),
    .wd     (reserved_1_c120_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c120_qs)
  );


  // R[channel_status_c120]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c120_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c120_channel_free_we),
    .wd     (channel_status_c120_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c120_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c120_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c120_channel_error_we),
    .wd     (channel_status_c120_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c120_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c120_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c120_field1_we),
    .wd     (channel_status_c120_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c120_field1_qs)
  );


  // R[reserved_2_c120]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c120_we),
    .wd     (reserved_2_c120_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c120_qs)
  );


  // R[reserved_3_c120]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c120]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c120_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c120_intr_enable_we),
    .wd     (channel_flags_c120_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c120_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c120_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c120_field1_we),
    .wd     (channel_flags_c120_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c120_field1_qs)
  );


  // R[length_c120]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c120_we),
    .wd     (length_c120_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c120_qs)
  );


  // R[message_header_c120]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c120_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c120_message_id_we),
    .wd     (message_header_c120_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c120_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c120_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c120_message_type_we),
    .wd     (message_header_c120_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c120_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c120_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c120_protocol_id_we),
    .wd     (message_header_c120_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c120_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c120_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c120_token_we),
    .wd     (message_header_c120_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c120_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c120_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c120_field1_we),
    .wd     (message_header_c120_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c120_field1_qs)
  );


  // R[message_payload_1_c120]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c120 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c120_we),
    .wd     (message_payload_1_c120_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c120_qs)
  );


  // R[doorbell_c120]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c120_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c120_intr_we),
    .wd     (doorbell_c120_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c120.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c120_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c120_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c120_preserve_mask_we),
    .wd     (doorbell_c120_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c120.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c120_preserve_mask_qs)
  );


  // R[completion_interrupt_c120]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c120_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c120_intr_we),
    .wd     (completion_interrupt_c120_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c120.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c120_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c120_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c120_preserve_mask_we),
    .wd     (completion_interrupt_c120_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c120.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c120_preserve_mask_qs)
  );


  // R[reserved_1_c121]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c121_we),
    .wd     (reserved_1_c121_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c121_qs)
  );


  // R[channel_status_c121]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c121_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c121_channel_free_we),
    .wd     (channel_status_c121_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c121_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c121_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c121_channel_error_we),
    .wd     (channel_status_c121_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c121_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c121_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c121_field1_we),
    .wd     (channel_status_c121_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c121_field1_qs)
  );


  // R[reserved_2_c121]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c121_we),
    .wd     (reserved_2_c121_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c121_qs)
  );


  // R[reserved_3_c121]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c121]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c121_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c121_intr_enable_we),
    .wd     (channel_flags_c121_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c121_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c121_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c121_field1_we),
    .wd     (channel_flags_c121_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c121_field1_qs)
  );


  // R[length_c121]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c121_we),
    .wd     (length_c121_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c121_qs)
  );


  // R[message_header_c121]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c121_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c121_message_id_we),
    .wd     (message_header_c121_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c121_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c121_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c121_message_type_we),
    .wd     (message_header_c121_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c121_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c121_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c121_protocol_id_we),
    .wd     (message_header_c121_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c121_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c121_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c121_token_we),
    .wd     (message_header_c121_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c121_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c121_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c121_field1_we),
    .wd     (message_header_c121_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c121_field1_qs)
  );


  // R[message_payload_1_c121]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c121 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c121_we),
    .wd     (message_payload_1_c121_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c121_qs)
  );


  // R[doorbell_c121]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c121_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c121_intr_we),
    .wd     (doorbell_c121_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c121.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c121_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c121_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c121_preserve_mask_we),
    .wd     (doorbell_c121_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c121.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c121_preserve_mask_qs)
  );


  // R[completion_interrupt_c121]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c121_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c121_intr_we),
    .wd     (completion_interrupt_c121_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c121.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c121_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c121_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c121_preserve_mask_we),
    .wd     (completion_interrupt_c121_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c121.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c121_preserve_mask_qs)
  );


  // R[reserved_1_c122]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c122_we),
    .wd     (reserved_1_c122_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c122_qs)
  );


  // R[channel_status_c122]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c122_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c122_channel_free_we),
    .wd     (channel_status_c122_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c122_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c122_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c122_channel_error_we),
    .wd     (channel_status_c122_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c122_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c122_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c122_field1_we),
    .wd     (channel_status_c122_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c122_field1_qs)
  );


  // R[reserved_2_c122]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c122_we),
    .wd     (reserved_2_c122_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c122_qs)
  );


  // R[reserved_3_c122]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c122]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c122_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c122_intr_enable_we),
    .wd     (channel_flags_c122_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c122_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c122_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c122_field1_we),
    .wd     (channel_flags_c122_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c122_field1_qs)
  );


  // R[length_c122]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c122_we),
    .wd     (length_c122_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c122_qs)
  );


  // R[message_header_c122]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c122_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c122_message_id_we),
    .wd     (message_header_c122_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c122_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c122_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c122_message_type_we),
    .wd     (message_header_c122_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c122_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c122_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c122_protocol_id_we),
    .wd     (message_header_c122_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c122_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c122_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c122_token_we),
    .wd     (message_header_c122_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c122_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c122_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c122_field1_we),
    .wd     (message_header_c122_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c122_field1_qs)
  );


  // R[message_payload_1_c122]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c122 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c122_we),
    .wd     (message_payload_1_c122_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c122_qs)
  );


  // R[doorbell_c122]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c122_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c122_intr_we),
    .wd     (doorbell_c122_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c122.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c122_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c122_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c122_preserve_mask_we),
    .wd     (doorbell_c122_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c122.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c122_preserve_mask_qs)
  );


  // R[completion_interrupt_c122]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c122_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c122_intr_we),
    .wd     (completion_interrupt_c122_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c122.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c122_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c122_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c122_preserve_mask_we),
    .wd     (completion_interrupt_c122_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c122.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c122_preserve_mask_qs)
  );


  // R[reserved_1_c123]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c123_we),
    .wd     (reserved_1_c123_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c123_qs)
  );


  // R[channel_status_c123]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c123_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c123_channel_free_we),
    .wd     (channel_status_c123_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c123_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c123_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c123_channel_error_we),
    .wd     (channel_status_c123_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c123_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c123_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c123_field1_we),
    .wd     (channel_status_c123_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c123_field1_qs)
  );


  // R[reserved_2_c123]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c123_we),
    .wd     (reserved_2_c123_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c123_qs)
  );


  // R[reserved_3_c123]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c123]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c123_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c123_intr_enable_we),
    .wd     (channel_flags_c123_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c123_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c123_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c123_field1_we),
    .wd     (channel_flags_c123_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c123_field1_qs)
  );


  // R[length_c123]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c123_we),
    .wd     (length_c123_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c123_qs)
  );


  // R[message_header_c123]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c123_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c123_message_id_we),
    .wd     (message_header_c123_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c123_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c123_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c123_message_type_we),
    .wd     (message_header_c123_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c123_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c123_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c123_protocol_id_we),
    .wd     (message_header_c123_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c123_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c123_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c123_token_we),
    .wd     (message_header_c123_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c123_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c123_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c123_field1_we),
    .wd     (message_header_c123_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c123_field1_qs)
  );


  // R[message_payload_1_c123]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c123 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c123_we),
    .wd     (message_payload_1_c123_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c123_qs)
  );


  // R[doorbell_c123]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c123_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c123_intr_we),
    .wd     (doorbell_c123_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c123.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c123_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c123_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c123_preserve_mask_we),
    .wd     (doorbell_c123_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c123.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c123_preserve_mask_qs)
  );


  // R[completion_interrupt_c123]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c123_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c123_intr_we),
    .wd     (completion_interrupt_c123_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c123.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c123_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c123_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c123_preserve_mask_we),
    .wd     (completion_interrupt_c123_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c123.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c123_preserve_mask_qs)
  );


  // R[reserved_1_c124]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c124_we),
    .wd     (reserved_1_c124_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c124_qs)
  );


  // R[channel_status_c124]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c124_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c124_channel_free_we),
    .wd     (channel_status_c124_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c124_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c124_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c124_channel_error_we),
    .wd     (channel_status_c124_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c124_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c124_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c124_field1_we),
    .wd     (channel_status_c124_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c124_field1_qs)
  );


  // R[reserved_2_c124]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c124_we),
    .wd     (reserved_2_c124_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c124_qs)
  );


  // R[reserved_3_c124]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c124]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c124_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c124_intr_enable_we),
    .wd     (channel_flags_c124_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c124_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c124_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c124_field1_we),
    .wd     (channel_flags_c124_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c124_field1_qs)
  );


  // R[length_c124]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c124_we),
    .wd     (length_c124_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c124_qs)
  );


  // R[message_header_c124]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c124_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c124_message_id_we),
    .wd     (message_header_c124_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c124_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c124_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c124_message_type_we),
    .wd     (message_header_c124_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c124_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c124_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c124_protocol_id_we),
    .wd     (message_header_c124_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c124_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c124_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c124_token_we),
    .wd     (message_header_c124_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c124_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c124_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c124_field1_we),
    .wd     (message_header_c124_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c124_field1_qs)
  );


  // R[message_payload_1_c124]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c124 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c124_we),
    .wd     (message_payload_1_c124_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c124_qs)
  );


  // R[doorbell_c124]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c124_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c124_intr_we),
    .wd     (doorbell_c124_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c124.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c124_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c124_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c124_preserve_mask_we),
    .wd     (doorbell_c124_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c124.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c124_preserve_mask_qs)
  );


  // R[completion_interrupt_c124]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c124_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c124_intr_we),
    .wd     (completion_interrupt_c124_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c124.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c124_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c124_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c124_preserve_mask_we),
    .wd     (completion_interrupt_c124_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c124.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c124_preserve_mask_qs)
  );


  // R[reserved_1_c125]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c125_we),
    .wd     (reserved_1_c125_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c125_qs)
  );


  // R[channel_status_c125]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c125_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c125_channel_free_we),
    .wd     (channel_status_c125_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c125_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c125_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c125_channel_error_we),
    .wd     (channel_status_c125_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c125_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c125_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c125_field1_we),
    .wd     (channel_status_c125_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c125_field1_qs)
  );


  // R[reserved_2_c125]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c125_we),
    .wd     (reserved_2_c125_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c125_qs)
  );


  // R[reserved_3_c125]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c125]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c125_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c125_intr_enable_we),
    .wd     (channel_flags_c125_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c125_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c125_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c125_field1_we),
    .wd     (channel_flags_c125_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c125_field1_qs)
  );


  // R[length_c125]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c125_we),
    .wd     (length_c125_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c125_qs)
  );


  // R[message_header_c125]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c125_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c125_message_id_we),
    .wd     (message_header_c125_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c125_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c125_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c125_message_type_we),
    .wd     (message_header_c125_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c125_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c125_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c125_protocol_id_we),
    .wd     (message_header_c125_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c125_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c125_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c125_token_we),
    .wd     (message_header_c125_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c125_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c125_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c125_field1_we),
    .wd     (message_header_c125_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c125_field1_qs)
  );


  // R[message_payload_1_c125]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c125 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c125_we),
    .wd     (message_payload_1_c125_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c125_qs)
  );


  // R[doorbell_c125]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c125_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c125_intr_we),
    .wd     (doorbell_c125_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c125.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c125_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c125_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c125_preserve_mask_we),
    .wd     (doorbell_c125_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c125.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c125_preserve_mask_qs)
  );


  // R[completion_interrupt_c125]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c125_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c125_intr_we),
    .wd     (completion_interrupt_c125_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c125.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c125_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c125_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c125_preserve_mask_we),
    .wd     (completion_interrupt_c125_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c125.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c125_preserve_mask_qs)
  );


  // R[reserved_1_c126]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c126_we),
    .wd     (reserved_1_c126_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c126_qs)
  );


  // R[channel_status_c126]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c126_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c126_channel_free_we),
    .wd     (channel_status_c126_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c126_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c126_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c126_channel_error_we),
    .wd     (channel_status_c126_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c126_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c126_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c126_field1_we),
    .wd     (channel_status_c126_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c126_field1_qs)
  );


  // R[reserved_2_c126]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c126_we),
    .wd     (reserved_2_c126_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c126_qs)
  );


  // R[reserved_3_c126]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c126]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c126_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c126_intr_enable_we),
    .wd     (channel_flags_c126_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c126_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c126_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c126_field1_we),
    .wd     (channel_flags_c126_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c126_field1_qs)
  );


  // R[length_c126]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c126_we),
    .wd     (length_c126_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c126_qs)
  );


  // R[message_header_c126]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c126_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c126_message_id_we),
    .wd     (message_header_c126_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c126_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c126_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c126_message_type_we),
    .wd     (message_header_c126_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c126_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c126_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c126_protocol_id_we),
    .wd     (message_header_c126_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c126_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c126_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c126_token_we),
    .wd     (message_header_c126_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c126_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c126_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c126_field1_we),
    .wd     (message_header_c126_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c126_field1_qs)
  );


  // R[message_payload_1_c126]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c126 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c126_we),
    .wd     (message_payload_1_c126_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c126_qs)
  );


  // R[doorbell_c126]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c126_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c126_intr_we),
    .wd     (doorbell_c126_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c126.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c126_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c126_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c126_preserve_mask_we),
    .wd     (doorbell_c126_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c126.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c126_preserve_mask_qs)
  );


  // R[completion_interrupt_c126]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c126_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c126_intr_we),
    .wd     (completion_interrupt_c126_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c126.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c126_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c126_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c126_preserve_mask_we),
    .wd     (completion_interrupt_c126_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c126.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c126_preserve_mask_qs)
  );


  // R[reserved_1_c127]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c127_we),
    .wd     (reserved_1_c127_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c127_qs)
  );


  // R[channel_status_c127]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c127_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c127_channel_free_we),
    .wd     (channel_status_c127_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c127_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c127_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c127_channel_error_we),
    .wd     (channel_status_c127_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c127_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c127_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c127_field1_we),
    .wd     (channel_status_c127_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c127_field1_qs)
  );


  // R[reserved_2_c127]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c127_we),
    .wd     (reserved_2_c127_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c127_qs)
  );


  // R[reserved_3_c127]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c127]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c127_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c127_intr_enable_we),
    .wd     (channel_flags_c127_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c127_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c127_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c127_field1_we),
    .wd     (channel_flags_c127_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c127_field1_qs)
  );


  // R[length_c127]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c127_we),
    .wd     (length_c127_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c127_qs)
  );


  // R[message_header_c127]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c127_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c127_message_id_we),
    .wd     (message_header_c127_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c127_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c127_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c127_message_type_we),
    .wd     (message_header_c127_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c127_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c127_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c127_protocol_id_we),
    .wd     (message_header_c127_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c127_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c127_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c127_token_we),
    .wd     (message_header_c127_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c127_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c127_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c127_field1_we),
    .wd     (message_header_c127_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c127_field1_qs)
  );


  // R[message_payload_1_c127]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c127 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c127_we),
    .wd     (message_payload_1_c127_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c127_qs)
  );


  // R[doorbell_c127]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c127_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c127_intr_we),
    .wd     (doorbell_c127_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c127.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c127_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c127_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c127_preserve_mask_we),
    .wd     (doorbell_c127_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c127.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c127_preserve_mask_qs)
  );


  // R[completion_interrupt_c127]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c127_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c127_intr_we),
    .wd     (completion_interrupt_c127_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c127.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c127_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c127_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c127_preserve_mask_we),
    .wd     (completion_interrupt_c127_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c127.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c127_preserve_mask_qs)
  );


  // R[reserved_1_c128]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c128_we),
    .wd     (reserved_1_c128_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c128_qs)
  );


  // R[channel_status_c128]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c128_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c128_channel_free_we),
    .wd     (channel_status_c128_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c128_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c128_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c128_channel_error_we),
    .wd     (channel_status_c128_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c128_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c128_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c128_field1_we),
    .wd     (channel_status_c128_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c128_field1_qs)
  );


  // R[reserved_2_c128]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c128_we),
    .wd     (reserved_2_c128_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c128_qs)
  );


  // R[reserved_3_c128]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c128]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c128_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c128_intr_enable_we),
    .wd     (channel_flags_c128_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c128_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c128_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c128_field1_we),
    .wd     (channel_flags_c128_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c128_field1_qs)
  );


  // R[length_c128]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c128_we),
    .wd     (length_c128_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c128_qs)
  );


  // R[message_header_c128]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c128_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c128_message_id_we),
    .wd     (message_header_c128_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c128_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c128_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c128_message_type_we),
    .wd     (message_header_c128_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c128_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c128_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c128_protocol_id_we),
    .wd     (message_header_c128_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c128_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c128_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c128_token_we),
    .wd     (message_header_c128_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c128_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c128_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c128_field1_we),
    .wd     (message_header_c128_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c128_field1_qs)
  );


  // R[message_payload_1_c128]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c128 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c128_we),
    .wd     (message_payload_1_c128_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c128_qs)
  );


  // R[doorbell_c128]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c128_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c128_intr_we),
    .wd     (doorbell_c128_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c128.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c128_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c128_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c128_preserve_mask_we),
    .wd     (doorbell_c128_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c128.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c128_preserve_mask_qs)
  );


  // R[completion_interrupt_c128]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c128_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c128_intr_we),
    .wd     (completion_interrupt_c128_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c128.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c128_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c128_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c128_preserve_mask_we),
    .wd     (completion_interrupt_c128_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c128.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c128_preserve_mask_qs)
  );


  // R[reserved_1_c129]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c129_we),
    .wd     (reserved_1_c129_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c129_qs)
  );


  // R[channel_status_c129]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c129_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c129_channel_free_we),
    .wd     (channel_status_c129_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c129_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c129_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c129_channel_error_we),
    .wd     (channel_status_c129_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c129_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c129_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c129_field1_we),
    .wd     (channel_status_c129_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c129_field1_qs)
  );


  // R[reserved_2_c129]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c129_we),
    .wd     (reserved_2_c129_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c129_qs)
  );


  // R[reserved_3_c129]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c129]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c129_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c129_intr_enable_we),
    .wd     (channel_flags_c129_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c129_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c129_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c129_field1_we),
    .wd     (channel_flags_c129_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c129_field1_qs)
  );


  // R[length_c129]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c129_we),
    .wd     (length_c129_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c129_qs)
  );


  // R[message_header_c129]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c129_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c129_message_id_we),
    .wd     (message_header_c129_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c129_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c129_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c129_message_type_we),
    .wd     (message_header_c129_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c129_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c129_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c129_protocol_id_we),
    .wd     (message_header_c129_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c129_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c129_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c129_token_we),
    .wd     (message_header_c129_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c129_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c129_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c129_field1_we),
    .wd     (message_header_c129_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c129_field1_qs)
  );


  // R[message_payload_1_c129]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c129 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c129_we),
    .wd     (message_payload_1_c129_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c129_qs)
  );


  // R[doorbell_c129]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c129_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c129_intr_we),
    .wd     (doorbell_c129_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c129.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c129_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c129_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c129_preserve_mask_we),
    .wd     (doorbell_c129_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c129.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c129_preserve_mask_qs)
  );


  // R[completion_interrupt_c129]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c129_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c129_intr_we),
    .wd     (completion_interrupt_c129_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c129.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c129_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c129_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c129_preserve_mask_we),
    .wd     (completion_interrupt_c129_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c129.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c129_preserve_mask_qs)
  );


  // R[reserved_1_c130]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c130_we),
    .wd     (reserved_1_c130_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c130_qs)
  );


  // R[channel_status_c130]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c130_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c130_channel_free_we),
    .wd     (channel_status_c130_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c130_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c130_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c130_channel_error_we),
    .wd     (channel_status_c130_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c130_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c130_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c130_field1_we),
    .wd     (channel_status_c130_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c130_field1_qs)
  );


  // R[reserved_2_c130]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c130_we),
    .wd     (reserved_2_c130_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c130_qs)
  );


  // R[reserved_3_c130]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c130]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c130_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c130_intr_enable_we),
    .wd     (channel_flags_c130_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c130_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c130_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c130_field1_we),
    .wd     (channel_flags_c130_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c130_field1_qs)
  );


  // R[length_c130]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c130_we),
    .wd     (length_c130_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c130_qs)
  );


  // R[message_header_c130]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c130_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c130_message_id_we),
    .wd     (message_header_c130_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c130_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c130_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c130_message_type_we),
    .wd     (message_header_c130_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c130_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c130_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c130_protocol_id_we),
    .wd     (message_header_c130_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c130_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c130_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c130_token_we),
    .wd     (message_header_c130_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c130_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c130_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c130_field1_we),
    .wd     (message_header_c130_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c130_field1_qs)
  );


  // R[message_payload_1_c130]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c130 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c130_we),
    .wd     (message_payload_1_c130_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c130_qs)
  );


  // R[doorbell_c130]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c130_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c130_intr_we),
    .wd     (doorbell_c130_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c130.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c130_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c130_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c130_preserve_mask_we),
    .wd     (doorbell_c130_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c130.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c130_preserve_mask_qs)
  );


  // R[completion_interrupt_c130]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c130_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c130_intr_we),
    .wd     (completion_interrupt_c130_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c130.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c130_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c130_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c130_preserve_mask_we),
    .wd     (completion_interrupt_c130_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c130.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c130_preserve_mask_qs)
  );


  // R[reserved_1_c131]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c131_we),
    .wd     (reserved_1_c131_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c131_qs)
  );


  // R[channel_status_c131]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c131_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c131_channel_free_we),
    .wd     (channel_status_c131_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c131_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c131_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c131_channel_error_we),
    .wd     (channel_status_c131_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c131_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c131_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c131_field1_we),
    .wd     (channel_status_c131_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c131_field1_qs)
  );


  // R[reserved_2_c131]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c131_we),
    .wd     (reserved_2_c131_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c131_qs)
  );


  // R[reserved_3_c131]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c131]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c131_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c131_intr_enable_we),
    .wd     (channel_flags_c131_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c131_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c131_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c131_field1_we),
    .wd     (channel_flags_c131_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c131_field1_qs)
  );


  // R[length_c131]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c131_we),
    .wd     (length_c131_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c131_qs)
  );


  // R[message_header_c131]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c131_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c131_message_id_we),
    .wd     (message_header_c131_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c131_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c131_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c131_message_type_we),
    .wd     (message_header_c131_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c131_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c131_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c131_protocol_id_we),
    .wd     (message_header_c131_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c131_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c131_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c131_token_we),
    .wd     (message_header_c131_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c131_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c131_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c131_field1_we),
    .wd     (message_header_c131_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c131_field1_qs)
  );


  // R[message_payload_1_c131]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c131 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c131_we),
    .wd     (message_payload_1_c131_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c131_qs)
  );


  // R[doorbell_c131]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c131_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c131_intr_we),
    .wd     (doorbell_c131_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c131.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c131_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c131_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c131_preserve_mask_we),
    .wd     (doorbell_c131_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c131.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c131_preserve_mask_qs)
  );


  // R[completion_interrupt_c131]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c131_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c131_intr_we),
    .wd     (completion_interrupt_c131_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c131.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c131_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c131_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c131_preserve_mask_we),
    .wd     (completion_interrupt_c131_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c131.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c131_preserve_mask_qs)
  );


  // R[reserved_1_c132]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c132_we),
    .wd     (reserved_1_c132_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c132_qs)
  );


  // R[channel_status_c132]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c132_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c132_channel_free_we),
    .wd     (channel_status_c132_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c132_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c132_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c132_channel_error_we),
    .wd     (channel_status_c132_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c132_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c132_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c132_field1_we),
    .wd     (channel_status_c132_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c132_field1_qs)
  );


  // R[reserved_2_c132]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c132_we),
    .wd     (reserved_2_c132_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c132_qs)
  );


  // R[reserved_3_c132]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c132]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c132_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c132_intr_enable_we),
    .wd     (channel_flags_c132_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c132_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c132_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c132_field1_we),
    .wd     (channel_flags_c132_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c132_field1_qs)
  );


  // R[length_c132]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c132_we),
    .wd     (length_c132_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c132_qs)
  );


  // R[message_header_c132]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c132_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c132_message_id_we),
    .wd     (message_header_c132_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c132_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c132_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c132_message_type_we),
    .wd     (message_header_c132_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c132_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c132_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c132_protocol_id_we),
    .wd     (message_header_c132_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c132_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c132_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c132_token_we),
    .wd     (message_header_c132_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c132_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c132_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c132_field1_we),
    .wd     (message_header_c132_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c132_field1_qs)
  );


  // R[message_payload_1_c132]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c132 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c132_we),
    .wd     (message_payload_1_c132_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c132_qs)
  );


  // R[doorbell_c132]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c132_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c132_intr_we),
    .wd     (doorbell_c132_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c132.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c132_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c132_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c132_preserve_mask_we),
    .wd     (doorbell_c132_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c132.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c132_preserve_mask_qs)
  );


  // R[completion_interrupt_c132]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c132_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c132_intr_we),
    .wd     (completion_interrupt_c132_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c132.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c132_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c132_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c132_preserve_mask_we),
    .wd     (completion_interrupt_c132_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c132.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c132_preserve_mask_qs)
  );


  // R[reserved_1_c133]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c133_we),
    .wd     (reserved_1_c133_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c133_qs)
  );


  // R[channel_status_c133]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c133_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c133_channel_free_we),
    .wd     (channel_status_c133_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c133_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c133_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c133_channel_error_we),
    .wd     (channel_status_c133_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c133_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c133_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c133_field1_we),
    .wd     (channel_status_c133_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c133_field1_qs)
  );


  // R[reserved_2_c133]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c133_we),
    .wd     (reserved_2_c133_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c133_qs)
  );


  // R[reserved_3_c133]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c133]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c133_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c133_intr_enable_we),
    .wd     (channel_flags_c133_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c133_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c133_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c133_field1_we),
    .wd     (channel_flags_c133_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c133_field1_qs)
  );


  // R[length_c133]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c133_we),
    .wd     (length_c133_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c133_qs)
  );


  // R[message_header_c133]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c133_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c133_message_id_we),
    .wd     (message_header_c133_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c133_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c133_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c133_message_type_we),
    .wd     (message_header_c133_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c133_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c133_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c133_protocol_id_we),
    .wd     (message_header_c133_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c133_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c133_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c133_token_we),
    .wd     (message_header_c133_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c133_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c133_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c133_field1_we),
    .wd     (message_header_c133_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c133_field1_qs)
  );


  // R[message_payload_1_c133]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c133 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c133_we),
    .wd     (message_payload_1_c133_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c133_qs)
  );


  // R[doorbell_c133]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c133_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c133_intr_we),
    .wd     (doorbell_c133_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c133.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c133_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c133_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c133_preserve_mask_we),
    .wd     (doorbell_c133_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c133.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c133_preserve_mask_qs)
  );


  // R[completion_interrupt_c133]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c133_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c133_intr_we),
    .wd     (completion_interrupt_c133_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c133.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c133_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c133_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c133_preserve_mask_we),
    .wd     (completion_interrupt_c133_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c133.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c133_preserve_mask_qs)
  );


  // R[reserved_1_c134]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c134_we),
    .wd     (reserved_1_c134_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c134_qs)
  );


  // R[channel_status_c134]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c134_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c134_channel_free_we),
    .wd     (channel_status_c134_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c134_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c134_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c134_channel_error_we),
    .wd     (channel_status_c134_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c134_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c134_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c134_field1_we),
    .wd     (channel_status_c134_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c134_field1_qs)
  );


  // R[reserved_2_c134]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c134_we),
    .wd     (reserved_2_c134_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c134_qs)
  );


  // R[reserved_3_c134]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c134]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c134_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c134_intr_enable_we),
    .wd     (channel_flags_c134_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c134_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c134_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c134_field1_we),
    .wd     (channel_flags_c134_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c134_field1_qs)
  );


  // R[length_c134]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c134_we),
    .wd     (length_c134_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c134_qs)
  );


  // R[message_header_c134]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c134_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c134_message_id_we),
    .wd     (message_header_c134_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c134_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c134_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c134_message_type_we),
    .wd     (message_header_c134_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c134_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c134_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c134_protocol_id_we),
    .wd     (message_header_c134_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c134_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c134_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c134_token_we),
    .wd     (message_header_c134_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c134_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c134_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c134_field1_we),
    .wd     (message_header_c134_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c134_field1_qs)
  );


  // R[message_payload_1_c134]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c134 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c134_we),
    .wd     (message_payload_1_c134_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c134_qs)
  );


  // R[doorbell_c134]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c134_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c134_intr_we),
    .wd     (doorbell_c134_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c134.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c134_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c134_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c134_preserve_mask_we),
    .wd     (doorbell_c134_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c134.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c134_preserve_mask_qs)
  );


  // R[completion_interrupt_c134]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c134_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c134_intr_we),
    .wd     (completion_interrupt_c134_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c134.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c134_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c134_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c134_preserve_mask_we),
    .wd     (completion_interrupt_c134_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c134.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c134_preserve_mask_qs)
  );


  // R[reserved_1_c135]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c135_we),
    .wd     (reserved_1_c135_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c135_qs)
  );


  // R[channel_status_c135]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c135_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c135_channel_free_we),
    .wd     (channel_status_c135_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c135_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c135_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c135_channel_error_we),
    .wd     (channel_status_c135_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c135_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c135_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c135_field1_we),
    .wd     (channel_status_c135_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c135_field1_qs)
  );


  // R[reserved_2_c135]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c135_we),
    .wd     (reserved_2_c135_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c135_qs)
  );


  // R[reserved_3_c135]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c135]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c135_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c135_intr_enable_we),
    .wd     (channel_flags_c135_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c135_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c135_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c135_field1_we),
    .wd     (channel_flags_c135_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c135_field1_qs)
  );


  // R[length_c135]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c135_we),
    .wd     (length_c135_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c135_qs)
  );


  // R[message_header_c135]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c135_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c135_message_id_we),
    .wd     (message_header_c135_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c135_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c135_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c135_message_type_we),
    .wd     (message_header_c135_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c135_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c135_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c135_protocol_id_we),
    .wd     (message_header_c135_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c135_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c135_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c135_token_we),
    .wd     (message_header_c135_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c135_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c135_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c135_field1_we),
    .wd     (message_header_c135_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c135_field1_qs)
  );


  // R[message_payload_1_c135]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c135 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c135_we),
    .wd     (message_payload_1_c135_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c135_qs)
  );


  // R[doorbell_c135]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c135_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c135_intr_we),
    .wd     (doorbell_c135_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c135.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c135_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c135_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c135_preserve_mask_we),
    .wd     (doorbell_c135_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c135.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c135_preserve_mask_qs)
  );


  // R[completion_interrupt_c135]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c135_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c135_intr_we),
    .wd     (completion_interrupt_c135_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c135.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c135_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c135_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c135_preserve_mask_we),
    .wd     (completion_interrupt_c135_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c135.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c135_preserve_mask_qs)
  );


  // R[reserved_1_c136]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c136_we),
    .wd     (reserved_1_c136_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c136_qs)
  );


  // R[channel_status_c136]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c136_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c136_channel_free_we),
    .wd     (channel_status_c136_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c136_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c136_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c136_channel_error_we),
    .wd     (channel_status_c136_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c136_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c136_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c136_field1_we),
    .wd     (channel_status_c136_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c136_field1_qs)
  );


  // R[reserved_2_c136]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c136_we),
    .wd     (reserved_2_c136_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c136_qs)
  );


  // R[reserved_3_c136]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c136]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c136_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c136_intr_enable_we),
    .wd     (channel_flags_c136_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c136_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c136_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c136_field1_we),
    .wd     (channel_flags_c136_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c136_field1_qs)
  );


  // R[length_c136]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c136_we),
    .wd     (length_c136_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c136_qs)
  );


  // R[message_header_c136]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c136_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c136_message_id_we),
    .wd     (message_header_c136_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c136_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c136_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c136_message_type_we),
    .wd     (message_header_c136_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c136_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c136_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c136_protocol_id_we),
    .wd     (message_header_c136_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c136_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c136_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c136_token_we),
    .wd     (message_header_c136_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c136_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c136_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c136_field1_we),
    .wd     (message_header_c136_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c136_field1_qs)
  );


  // R[message_payload_1_c136]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c136 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c136_we),
    .wd     (message_payload_1_c136_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c136_qs)
  );


  // R[doorbell_c136]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c136_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c136_intr_we),
    .wd     (doorbell_c136_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c136.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c136_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c136_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c136_preserve_mask_we),
    .wd     (doorbell_c136_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c136.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c136_preserve_mask_qs)
  );


  // R[completion_interrupt_c136]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c136_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c136_intr_we),
    .wd     (completion_interrupt_c136_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c136.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c136_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c136_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c136_preserve_mask_we),
    .wd     (completion_interrupt_c136_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c136.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c136_preserve_mask_qs)
  );


  // R[reserved_1_c137]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c137_we),
    .wd     (reserved_1_c137_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c137_qs)
  );


  // R[channel_status_c137]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c137_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c137_channel_free_we),
    .wd     (channel_status_c137_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c137_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c137_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c137_channel_error_we),
    .wd     (channel_status_c137_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c137_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c137_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c137_field1_we),
    .wd     (channel_status_c137_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c137_field1_qs)
  );


  // R[reserved_2_c137]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c137_we),
    .wd     (reserved_2_c137_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c137_qs)
  );


  // R[reserved_3_c137]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c137]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c137_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c137_intr_enable_we),
    .wd     (channel_flags_c137_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c137_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c137_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c137_field1_we),
    .wd     (channel_flags_c137_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c137_field1_qs)
  );


  // R[length_c137]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c137_we),
    .wd     (length_c137_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c137_qs)
  );


  // R[message_header_c137]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c137_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c137_message_id_we),
    .wd     (message_header_c137_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c137_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c137_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c137_message_type_we),
    .wd     (message_header_c137_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c137_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c137_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c137_protocol_id_we),
    .wd     (message_header_c137_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c137_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c137_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c137_token_we),
    .wd     (message_header_c137_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c137_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c137_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c137_field1_we),
    .wd     (message_header_c137_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c137_field1_qs)
  );


  // R[message_payload_1_c137]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c137 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c137_we),
    .wd     (message_payload_1_c137_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c137_qs)
  );


  // R[doorbell_c137]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c137_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c137_intr_we),
    .wd     (doorbell_c137_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c137.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c137_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c137_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c137_preserve_mask_we),
    .wd     (doorbell_c137_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c137.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c137_preserve_mask_qs)
  );


  // R[completion_interrupt_c137]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c137_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c137_intr_we),
    .wd     (completion_interrupt_c137_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c137.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c137_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c137_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c137_preserve_mask_we),
    .wd     (completion_interrupt_c137_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c137.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c137_preserve_mask_qs)
  );


  // R[reserved_1_c138]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c138_we),
    .wd     (reserved_1_c138_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c138_qs)
  );


  // R[channel_status_c138]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c138_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c138_channel_free_we),
    .wd     (channel_status_c138_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c138_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c138_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c138_channel_error_we),
    .wd     (channel_status_c138_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c138_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c138_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c138_field1_we),
    .wd     (channel_status_c138_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c138_field1_qs)
  );


  // R[reserved_2_c138]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c138_we),
    .wd     (reserved_2_c138_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c138_qs)
  );


  // R[reserved_3_c138]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c138]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c138_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c138_intr_enable_we),
    .wd     (channel_flags_c138_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c138_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c138_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c138_field1_we),
    .wd     (channel_flags_c138_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c138_field1_qs)
  );


  // R[length_c138]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c138_we),
    .wd     (length_c138_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c138_qs)
  );


  // R[message_header_c138]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c138_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c138_message_id_we),
    .wd     (message_header_c138_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c138_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c138_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c138_message_type_we),
    .wd     (message_header_c138_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c138_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c138_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c138_protocol_id_we),
    .wd     (message_header_c138_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c138_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c138_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c138_token_we),
    .wd     (message_header_c138_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c138_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c138_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c138_field1_we),
    .wd     (message_header_c138_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c138_field1_qs)
  );


  // R[message_payload_1_c138]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c138 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c138_we),
    .wd     (message_payload_1_c138_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c138_qs)
  );


  // R[doorbell_c138]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c138_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c138_intr_we),
    .wd     (doorbell_c138_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c138.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c138_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c138_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c138_preserve_mask_we),
    .wd     (doorbell_c138_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c138.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c138_preserve_mask_qs)
  );


  // R[completion_interrupt_c138]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c138_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c138_intr_we),
    .wd     (completion_interrupt_c138_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c138.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c138_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c138_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c138_preserve_mask_we),
    .wd     (completion_interrupt_c138_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c138.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c138_preserve_mask_qs)
  );


  // R[reserved_1_c139]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c139_we),
    .wd     (reserved_1_c139_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c139_qs)
  );


  // R[channel_status_c139]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c139_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c139_channel_free_we),
    .wd     (channel_status_c139_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c139_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c139_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c139_channel_error_we),
    .wd     (channel_status_c139_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c139_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c139_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c139_field1_we),
    .wd     (channel_status_c139_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c139_field1_qs)
  );


  // R[reserved_2_c139]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c139_we),
    .wd     (reserved_2_c139_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c139_qs)
  );


  // R[reserved_3_c139]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c139]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c139_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c139_intr_enable_we),
    .wd     (channel_flags_c139_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c139_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c139_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c139_field1_we),
    .wd     (channel_flags_c139_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c139_field1_qs)
  );


  // R[length_c139]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c139_we),
    .wd     (length_c139_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c139_qs)
  );


  // R[message_header_c139]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c139_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c139_message_id_we),
    .wd     (message_header_c139_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c139_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c139_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c139_message_type_we),
    .wd     (message_header_c139_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c139_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c139_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c139_protocol_id_we),
    .wd     (message_header_c139_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c139_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c139_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c139_token_we),
    .wd     (message_header_c139_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c139_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c139_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c139_field1_we),
    .wd     (message_header_c139_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c139_field1_qs)
  );


  // R[message_payload_1_c139]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c139 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c139_we),
    .wd     (message_payload_1_c139_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c139_qs)
  );


  // R[doorbell_c139]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c139_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c139_intr_we),
    .wd     (doorbell_c139_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c139.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c139_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c139_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c139_preserve_mask_we),
    .wd     (doorbell_c139_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c139.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c139_preserve_mask_qs)
  );


  // R[completion_interrupt_c139]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c139_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c139_intr_we),
    .wd     (completion_interrupt_c139_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c139.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c139_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c139_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c139_preserve_mask_we),
    .wd     (completion_interrupt_c139_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c139.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c139_preserve_mask_qs)
  );


  // R[reserved_1_c140]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c140_we),
    .wd     (reserved_1_c140_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c140_qs)
  );


  // R[channel_status_c140]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c140_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c140_channel_free_we),
    .wd     (channel_status_c140_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c140_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c140_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c140_channel_error_we),
    .wd     (channel_status_c140_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c140_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c140_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c140_field1_we),
    .wd     (channel_status_c140_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c140_field1_qs)
  );


  // R[reserved_2_c140]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c140_we),
    .wd     (reserved_2_c140_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c140_qs)
  );


  // R[reserved_3_c140]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c140]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c140_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c140_intr_enable_we),
    .wd     (channel_flags_c140_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c140_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c140_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c140_field1_we),
    .wd     (channel_flags_c140_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c140_field1_qs)
  );


  // R[length_c140]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c140_we),
    .wd     (length_c140_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c140_qs)
  );


  // R[message_header_c140]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c140_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c140_message_id_we),
    .wd     (message_header_c140_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c140_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c140_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c140_message_type_we),
    .wd     (message_header_c140_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c140_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c140_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c140_protocol_id_we),
    .wd     (message_header_c140_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c140_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c140_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c140_token_we),
    .wd     (message_header_c140_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c140_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c140_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c140_field1_we),
    .wd     (message_header_c140_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c140_field1_qs)
  );


  // R[message_payload_1_c140]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c140 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c140_we),
    .wd     (message_payload_1_c140_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c140_qs)
  );


  // R[doorbell_c140]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c140_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c140_intr_we),
    .wd     (doorbell_c140_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c140.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c140_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c140_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c140_preserve_mask_we),
    .wd     (doorbell_c140_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c140.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c140_preserve_mask_qs)
  );


  // R[completion_interrupt_c140]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c140_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c140_intr_we),
    .wd     (completion_interrupt_c140_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c140.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c140_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c140_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c140_preserve_mask_we),
    .wd     (completion_interrupt_c140_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c140.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c140_preserve_mask_qs)
  );


  // R[reserved_1_c141]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c141_we),
    .wd     (reserved_1_c141_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c141_qs)
  );


  // R[channel_status_c141]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c141_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c141_channel_free_we),
    .wd     (channel_status_c141_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c141_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c141_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c141_channel_error_we),
    .wd     (channel_status_c141_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c141_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c141_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c141_field1_we),
    .wd     (channel_status_c141_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c141_field1_qs)
  );


  // R[reserved_2_c141]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c141_we),
    .wd     (reserved_2_c141_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c141_qs)
  );


  // R[reserved_3_c141]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c141]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c141_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c141_intr_enable_we),
    .wd     (channel_flags_c141_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c141_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c141_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c141_field1_we),
    .wd     (channel_flags_c141_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c141_field1_qs)
  );


  // R[length_c141]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c141_we),
    .wd     (length_c141_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c141_qs)
  );


  // R[message_header_c141]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c141_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c141_message_id_we),
    .wd     (message_header_c141_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c141_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c141_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c141_message_type_we),
    .wd     (message_header_c141_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c141_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c141_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c141_protocol_id_we),
    .wd     (message_header_c141_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c141_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c141_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c141_token_we),
    .wd     (message_header_c141_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c141_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c141_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c141_field1_we),
    .wd     (message_header_c141_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c141_field1_qs)
  );


  // R[message_payload_1_c141]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c141 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c141_we),
    .wd     (message_payload_1_c141_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c141_qs)
  );


  // R[doorbell_c141]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c141_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c141_intr_we),
    .wd     (doorbell_c141_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c141.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c141_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c141_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c141_preserve_mask_we),
    .wd     (doorbell_c141_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c141.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c141_preserve_mask_qs)
  );


  // R[completion_interrupt_c141]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c141_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c141_intr_we),
    .wd     (completion_interrupt_c141_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c141.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c141_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c141_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c141_preserve_mask_we),
    .wd     (completion_interrupt_c141_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c141.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c141_preserve_mask_qs)
  );


  // R[reserved_1_c142]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c142_we),
    .wd     (reserved_1_c142_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c142_qs)
  );


  // R[channel_status_c142]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c142_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c142_channel_free_we),
    .wd     (channel_status_c142_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c142_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c142_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c142_channel_error_we),
    .wd     (channel_status_c142_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c142_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c142_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c142_field1_we),
    .wd     (channel_status_c142_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c142_field1_qs)
  );


  // R[reserved_2_c142]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c142_we),
    .wd     (reserved_2_c142_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c142_qs)
  );


  // R[reserved_3_c142]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c142]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c142_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c142_intr_enable_we),
    .wd     (channel_flags_c142_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c142_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c142_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c142_field1_we),
    .wd     (channel_flags_c142_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c142_field1_qs)
  );


  // R[length_c142]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c142_we),
    .wd     (length_c142_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c142_qs)
  );


  // R[message_header_c142]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c142_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c142_message_id_we),
    .wd     (message_header_c142_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c142_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c142_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c142_message_type_we),
    .wd     (message_header_c142_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c142_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c142_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c142_protocol_id_we),
    .wd     (message_header_c142_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c142_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c142_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c142_token_we),
    .wd     (message_header_c142_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c142_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c142_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c142_field1_we),
    .wd     (message_header_c142_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c142_field1_qs)
  );


  // R[message_payload_1_c142]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c142 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c142_we),
    .wd     (message_payload_1_c142_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c142_qs)
  );


  // R[doorbell_c142]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c142_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c142_intr_we),
    .wd     (doorbell_c142_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c142.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c142_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c142_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c142_preserve_mask_we),
    .wd     (doorbell_c142_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c142.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c142_preserve_mask_qs)
  );


  // R[completion_interrupt_c142]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c142_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c142_intr_we),
    .wd     (completion_interrupt_c142_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c142.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c142_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c142_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c142_preserve_mask_we),
    .wd     (completion_interrupt_c142_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c142.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c142_preserve_mask_qs)
  );


  // R[reserved_1_c143]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c143_we),
    .wd     (reserved_1_c143_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c143_qs)
  );


  // R[channel_status_c143]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c143_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c143_channel_free_we),
    .wd     (channel_status_c143_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c143_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c143_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c143_channel_error_we),
    .wd     (channel_status_c143_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c143_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c143_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c143_field1_we),
    .wd     (channel_status_c143_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c143_field1_qs)
  );


  // R[reserved_2_c143]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c143_we),
    .wd     (reserved_2_c143_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c143_qs)
  );


  // R[reserved_3_c143]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c143]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c143_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c143_intr_enable_we),
    .wd     (channel_flags_c143_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c143_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c143_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c143_field1_we),
    .wd     (channel_flags_c143_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c143_field1_qs)
  );


  // R[length_c143]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c143_we),
    .wd     (length_c143_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c143_qs)
  );


  // R[message_header_c143]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c143_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c143_message_id_we),
    .wd     (message_header_c143_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c143_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c143_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c143_message_type_we),
    .wd     (message_header_c143_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c143_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c143_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c143_protocol_id_we),
    .wd     (message_header_c143_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c143_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c143_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c143_token_we),
    .wd     (message_header_c143_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c143_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c143_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c143_field1_we),
    .wd     (message_header_c143_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c143_field1_qs)
  );


  // R[message_payload_1_c143]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c143 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c143_we),
    .wd     (message_payload_1_c143_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c143_qs)
  );


  // R[doorbell_c143]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c143_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c143_intr_we),
    .wd     (doorbell_c143_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c143.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c143_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c143_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c143_preserve_mask_we),
    .wd     (doorbell_c143_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c143.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c143_preserve_mask_qs)
  );


  // R[completion_interrupt_c143]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c143_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c143_intr_we),
    .wd     (completion_interrupt_c143_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c143.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c143_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c143_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c143_preserve_mask_we),
    .wd     (completion_interrupt_c143_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c143.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c143_preserve_mask_qs)
  );


  // R[reserved_1_c144]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c144_we),
    .wd     (reserved_1_c144_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c144_qs)
  );


  // R[channel_status_c144]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c144_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c144_channel_free_we),
    .wd     (channel_status_c144_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c144_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c144_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c144_channel_error_we),
    .wd     (channel_status_c144_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c144_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c144_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c144_field1_we),
    .wd     (channel_status_c144_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c144_field1_qs)
  );


  // R[reserved_2_c144]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c144_we),
    .wd     (reserved_2_c144_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c144_qs)
  );


  // R[reserved_3_c144]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c144]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c144_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c144_intr_enable_we),
    .wd     (channel_flags_c144_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c144_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c144_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c144_field1_we),
    .wd     (channel_flags_c144_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c144_field1_qs)
  );


  // R[length_c144]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c144_we),
    .wd     (length_c144_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c144_qs)
  );


  // R[message_header_c144]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c144_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c144_message_id_we),
    .wd     (message_header_c144_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c144_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c144_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c144_message_type_we),
    .wd     (message_header_c144_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c144_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c144_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c144_protocol_id_we),
    .wd     (message_header_c144_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c144_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c144_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c144_token_we),
    .wd     (message_header_c144_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c144_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c144_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c144_field1_we),
    .wd     (message_header_c144_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c144_field1_qs)
  );


  // R[message_payload_1_c144]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c144 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c144_we),
    .wd     (message_payload_1_c144_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c144_qs)
  );


  // R[doorbell_c144]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c144_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c144_intr_we),
    .wd     (doorbell_c144_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c144.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c144_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c144_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c144_preserve_mask_we),
    .wd     (doorbell_c144_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c144.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c144_preserve_mask_qs)
  );


  // R[completion_interrupt_c144]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c144_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c144_intr_we),
    .wd     (completion_interrupt_c144_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c144.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c144_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c144_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c144_preserve_mask_we),
    .wd     (completion_interrupt_c144_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c144.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c144_preserve_mask_qs)
  );


  // R[reserved_1_c145]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c145_we),
    .wd     (reserved_1_c145_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c145_qs)
  );


  // R[channel_status_c145]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c145_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c145_channel_free_we),
    .wd     (channel_status_c145_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c145_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c145_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c145_channel_error_we),
    .wd     (channel_status_c145_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c145_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c145_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c145_field1_we),
    .wd     (channel_status_c145_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c145_field1_qs)
  );


  // R[reserved_2_c145]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c145_we),
    .wd     (reserved_2_c145_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c145_qs)
  );


  // R[reserved_3_c145]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c145]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c145_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c145_intr_enable_we),
    .wd     (channel_flags_c145_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c145_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c145_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c145_field1_we),
    .wd     (channel_flags_c145_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c145_field1_qs)
  );


  // R[length_c145]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c145_we),
    .wd     (length_c145_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c145_qs)
  );


  // R[message_header_c145]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c145_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c145_message_id_we),
    .wd     (message_header_c145_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c145_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c145_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c145_message_type_we),
    .wd     (message_header_c145_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c145_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c145_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c145_protocol_id_we),
    .wd     (message_header_c145_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c145_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c145_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c145_token_we),
    .wd     (message_header_c145_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c145_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c145_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c145_field1_we),
    .wd     (message_header_c145_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c145_field1_qs)
  );


  // R[message_payload_1_c145]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c145 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c145_we),
    .wd     (message_payload_1_c145_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c145_qs)
  );


  // R[doorbell_c145]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c145_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c145_intr_we),
    .wd     (doorbell_c145_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c145.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c145_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c145_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c145_preserve_mask_we),
    .wd     (doorbell_c145_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c145.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c145_preserve_mask_qs)
  );


  // R[completion_interrupt_c145]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c145_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c145_intr_we),
    .wd     (completion_interrupt_c145_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c145.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c145_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c145_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c145_preserve_mask_we),
    .wd     (completion_interrupt_c145_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c145.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c145_preserve_mask_qs)
  );


  // R[reserved_1_c146]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c146_we),
    .wd     (reserved_1_c146_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c146_qs)
  );


  // R[channel_status_c146]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c146_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c146_channel_free_we),
    .wd     (channel_status_c146_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c146_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c146_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c146_channel_error_we),
    .wd     (channel_status_c146_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c146_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c146_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c146_field1_we),
    .wd     (channel_status_c146_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c146_field1_qs)
  );


  // R[reserved_2_c146]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c146_we),
    .wd     (reserved_2_c146_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c146_qs)
  );


  // R[reserved_3_c146]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  // R[channel_flags_c146]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c146_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c146_intr_enable_we),
    .wd     (channel_flags_c146_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c146_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c146_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c146_field1_we),
    .wd     (channel_flags_c146_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c146_field1_qs)
  );


  // R[length_c146]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c146_we),
    .wd     (length_c146_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c146_qs)
  );


  // R[message_header_c146]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c146_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c146_message_id_we),
    .wd     (message_header_c146_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c146_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c146_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c146_message_type_we),
    .wd     (message_header_c146_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c146_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c146_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c146_protocol_id_we),
    .wd     (message_header_c146_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c146_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c146_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c146_token_we),
    .wd     (message_header_c146_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c146_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c146_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c146_field1_we),
    .wd     (message_header_c146_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c146_field1_qs)
  );


  // R[message_payload_1_c146]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c146 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c146_we),
    .wd     (message_payload_1_c146_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c146_qs)
  );


  // R[doorbell_c146]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_doorbell_c146_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c146_intr_we),
    .wd     (doorbell_c146_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c146.intr.q ),

    // to register interface (read)
    .qs     (doorbell_c146_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_doorbell_c146_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c146_preserve_mask_we),
    .wd     (doorbell_c146_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c146.preserve_mask.q ),

    // to register interface (read)
    .qs     (doorbell_c146_preserve_mask_qs)
  );


  // R[completion_interrupt_c146]: V(False)

  //   F[intr]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_completion_interrupt_c146_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c146_intr_we),
    .wd     (completion_interrupt_c146_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c146.intr.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c146_intr_qs)
  );


  //   F[preserve_mask]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_completion_interrupt_c146_preserve_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c146_preserve_mask_we),
    .wd     (completion_interrupt_c146_preserve_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c146.preserve_mask.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c146_preserve_mask_qs)
  );




  logic [1469:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[   0] = (reg_addr == SCMI_RESERVED_1_C0_OFFSET);
    addr_hit[   1] = (reg_addr == SCMI_CHANNEL_STATUS_C0_OFFSET);
    addr_hit[   2] = (reg_addr == SCMI_RESERVED_2_C0_OFFSET);
    addr_hit[   3] = (reg_addr == SCMI_RESERVED_3_C0_OFFSET);
    addr_hit[   4] = (reg_addr == SCMI_CHANNEL_FLAGS_C0_OFFSET);
    addr_hit[   5] = (reg_addr == SCMI_LENGTH_C0_OFFSET);
    addr_hit[   6] = (reg_addr == SCMI_MESSAGE_HEADER_C0_OFFSET);
    addr_hit[   7] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C0_OFFSET);
    addr_hit[   8] = (reg_addr == SCMI_DOORBELL_C0_OFFSET);
    addr_hit[   9] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C0_OFFSET);
    addr_hit[  10] = (reg_addr == SCMI_RESERVED_1_C1_OFFSET);
    addr_hit[  11] = (reg_addr == SCMI_CHANNEL_STATUS_C1_OFFSET);
    addr_hit[  12] = (reg_addr == SCMI_RESERVED_2_C1_OFFSET);
    addr_hit[  13] = (reg_addr == SCMI_RESERVED_3_C1_OFFSET);
    addr_hit[  14] = (reg_addr == SCMI_CHANNEL_FLAGS_C1_OFFSET);
    addr_hit[  15] = (reg_addr == SCMI_LENGTH_C1_OFFSET);
    addr_hit[  16] = (reg_addr == SCMI_MESSAGE_HEADER_C1_OFFSET);
    addr_hit[  17] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C1_OFFSET);
    addr_hit[  18] = (reg_addr == SCMI_DOORBELL_C1_OFFSET);
    addr_hit[  19] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C1_OFFSET);
    addr_hit[  20] = (reg_addr == SCMI_RESERVED_1_C2_OFFSET);
    addr_hit[  21] = (reg_addr == SCMI_CHANNEL_STATUS_C2_OFFSET);
    addr_hit[  22] = (reg_addr == SCMI_RESERVED_2_C2_OFFSET);
    addr_hit[  23] = (reg_addr == SCMI_RESERVED_3_C2_OFFSET);
    addr_hit[  24] = (reg_addr == SCMI_CHANNEL_FLAGS_C2_OFFSET);
    addr_hit[  25] = (reg_addr == SCMI_LENGTH_C2_OFFSET);
    addr_hit[  26] = (reg_addr == SCMI_MESSAGE_HEADER_C2_OFFSET);
    addr_hit[  27] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C2_OFFSET);
    addr_hit[  28] = (reg_addr == SCMI_DOORBELL_C2_OFFSET);
    addr_hit[  29] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C2_OFFSET);
    addr_hit[  30] = (reg_addr == SCMI_RESERVED_1_C3_OFFSET);
    addr_hit[  31] = (reg_addr == SCMI_CHANNEL_STATUS_C3_OFFSET);
    addr_hit[  32] = (reg_addr == SCMI_RESERVED_2_C3_OFFSET);
    addr_hit[  33] = (reg_addr == SCMI_RESERVED_3_C3_OFFSET);
    addr_hit[  34] = (reg_addr == SCMI_CHANNEL_FLAGS_C3_OFFSET);
    addr_hit[  35] = (reg_addr == SCMI_LENGTH_C3_OFFSET);
    addr_hit[  36] = (reg_addr == SCMI_MESSAGE_HEADER_C3_OFFSET);
    addr_hit[  37] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C3_OFFSET);
    addr_hit[  38] = (reg_addr == SCMI_DOORBELL_C3_OFFSET);
    addr_hit[  39] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C3_OFFSET);
    addr_hit[  40] = (reg_addr == SCMI_RESERVED_1_C4_OFFSET);
    addr_hit[  41] = (reg_addr == SCMI_CHANNEL_STATUS_C4_OFFSET);
    addr_hit[  42] = (reg_addr == SCMI_RESERVED_2_C4_OFFSET);
    addr_hit[  43] = (reg_addr == SCMI_RESERVED_3_C4_OFFSET);
    addr_hit[  44] = (reg_addr == SCMI_CHANNEL_FLAGS_C4_OFFSET);
    addr_hit[  45] = (reg_addr == SCMI_LENGTH_C4_OFFSET);
    addr_hit[  46] = (reg_addr == SCMI_MESSAGE_HEADER_C4_OFFSET);
    addr_hit[  47] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C4_OFFSET);
    addr_hit[  48] = (reg_addr == SCMI_DOORBELL_C4_OFFSET);
    addr_hit[  49] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C4_OFFSET);
    addr_hit[  50] = (reg_addr == SCMI_RESERVED_1_C5_OFFSET);
    addr_hit[  51] = (reg_addr == SCMI_CHANNEL_STATUS_C5_OFFSET);
    addr_hit[  52] = (reg_addr == SCMI_RESERVED_2_C5_OFFSET);
    addr_hit[  53] = (reg_addr == SCMI_RESERVED_3_C5_OFFSET);
    addr_hit[  54] = (reg_addr == SCMI_CHANNEL_FLAGS_C5_OFFSET);
    addr_hit[  55] = (reg_addr == SCMI_LENGTH_C5_OFFSET);
    addr_hit[  56] = (reg_addr == SCMI_MESSAGE_HEADER_C5_OFFSET);
    addr_hit[  57] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C5_OFFSET);
    addr_hit[  58] = (reg_addr == SCMI_DOORBELL_C5_OFFSET);
    addr_hit[  59] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C5_OFFSET);
    addr_hit[  60] = (reg_addr == SCMI_RESERVED_1_C6_OFFSET);
    addr_hit[  61] = (reg_addr == SCMI_CHANNEL_STATUS_C6_OFFSET);
    addr_hit[  62] = (reg_addr == SCMI_RESERVED_2_C6_OFFSET);
    addr_hit[  63] = (reg_addr == SCMI_RESERVED_3_C6_OFFSET);
    addr_hit[  64] = (reg_addr == SCMI_CHANNEL_FLAGS_C6_OFFSET);
    addr_hit[  65] = (reg_addr == SCMI_LENGTH_C6_OFFSET);
    addr_hit[  66] = (reg_addr == SCMI_MESSAGE_HEADER_C6_OFFSET);
    addr_hit[  67] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C6_OFFSET);
    addr_hit[  68] = (reg_addr == SCMI_DOORBELL_C6_OFFSET);
    addr_hit[  69] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C6_OFFSET);
    addr_hit[  70] = (reg_addr == SCMI_RESERVED_1_C7_OFFSET);
    addr_hit[  71] = (reg_addr == SCMI_CHANNEL_STATUS_C7_OFFSET);
    addr_hit[  72] = (reg_addr == SCMI_RESERVED_2_C7_OFFSET);
    addr_hit[  73] = (reg_addr == SCMI_RESERVED_3_C7_OFFSET);
    addr_hit[  74] = (reg_addr == SCMI_CHANNEL_FLAGS_C7_OFFSET);
    addr_hit[  75] = (reg_addr == SCMI_LENGTH_C7_OFFSET);
    addr_hit[  76] = (reg_addr == SCMI_MESSAGE_HEADER_C7_OFFSET);
    addr_hit[  77] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C7_OFFSET);
    addr_hit[  78] = (reg_addr == SCMI_DOORBELL_C7_OFFSET);
    addr_hit[  79] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C7_OFFSET);
    addr_hit[  80] = (reg_addr == SCMI_RESERVED_1_C8_OFFSET);
    addr_hit[  81] = (reg_addr == SCMI_CHANNEL_STATUS_C8_OFFSET);
    addr_hit[  82] = (reg_addr == SCMI_RESERVED_2_C8_OFFSET);
    addr_hit[  83] = (reg_addr == SCMI_RESERVED_3_C8_OFFSET);
    addr_hit[  84] = (reg_addr == SCMI_CHANNEL_FLAGS_C8_OFFSET);
    addr_hit[  85] = (reg_addr == SCMI_LENGTH_C8_OFFSET);
    addr_hit[  86] = (reg_addr == SCMI_MESSAGE_HEADER_C8_OFFSET);
    addr_hit[  87] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C8_OFFSET);
    addr_hit[  88] = (reg_addr == SCMI_DOORBELL_C8_OFFSET);
    addr_hit[  89] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C8_OFFSET);
    addr_hit[  90] = (reg_addr == SCMI_RESERVED_1_C9_OFFSET);
    addr_hit[  91] = (reg_addr == SCMI_CHANNEL_STATUS_C9_OFFSET);
    addr_hit[  92] = (reg_addr == SCMI_RESERVED_2_C9_OFFSET);
    addr_hit[  93] = (reg_addr == SCMI_RESERVED_3_C9_OFFSET);
    addr_hit[  94] = (reg_addr == SCMI_CHANNEL_FLAGS_C9_OFFSET);
    addr_hit[  95] = (reg_addr == SCMI_LENGTH_C9_OFFSET);
    addr_hit[  96] = (reg_addr == SCMI_MESSAGE_HEADER_C9_OFFSET);
    addr_hit[  97] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C9_OFFSET);
    addr_hit[  98] = (reg_addr == SCMI_DOORBELL_C9_OFFSET);
    addr_hit[  99] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C9_OFFSET);
    addr_hit[ 100] = (reg_addr == SCMI_RESERVED_1_C10_OFFSET);
    addr_hit[ 101] = (reg_addr == SCMI_CHANNEL_STATUS_C10_OFFSET);
    addr_hit[ 102] = (reg_addr == SCMI_RESERVED_2_C10_OFFSET);
    addr_hit[ 103] = (reg_addr == SCMI_RESERVED_3_C10_OFFSET);
    addr_hit[ 104] = (reg_addr == SCMI_CHANNEL_FLAGS_C10_OFFSET);
    addr_hit[ 105] = (reg_addr == SCMI_LENGTH_C10_OFFSET);
    addr_hit[ 106] = (reg_addr == SCMI_MESSAGE_HEADER_C10_OFFSET);
    addr_hit[ 107] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C10_OFFSET);
    addr_hit[ 108] = (reg_addr == SCMI_DOORBELL_C10_OFFSET);
    addr_hit[ 109] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C10_OFFSET);
    addr_hit[ 110] = (reg_addr == SCMI_RESERVED_1_C11_OFFSET);
    addr_hit[ 111] = (reg_addr == SCMI_CHANNEL_STATUS_C11_OFFSET);
    addr_hit[ 112] = (reg_addr == SCMI_RESERVED_2_C11_OFFSET);
    addr_hit[ 113] = (reg_addr == SCMI_RESERVED_3_C11_OFFSET);
    addr_hit[ 114] = (reg_addr == SCMI_CHANNEL_FLAGS_C11_OFFSET);
    addr_hit[ 115] = (reg_addr == SCMI_LENGTH_C11_OFFSET);
    addr_hit[ 116] = (reg_addr == SCMI_MESSAGE_HEADER_C11_OFFSET);
    addr_hit[ 117] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C11_OFFSET);
    addr_hit[ 118] = (reg_addr == SCMI_DOORBELL_C11_OFFSET);
    addr_hit[ 119] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C11_OFFSET);
    addr_hit[ 120] = (reg_addr == SCMI_RESERVED_1_C12_OFFSET);
    addr_hit[ 121] = (reg_addr == SCMI_CHANNEL_STATUS_C12_OFFSET);
    addr_hit[ 122] = (reg_addr == SCMI_RESERVED_2_C12_OFFSET);
    addr_hit[ 123] = (reg_addr == SCMI_RESERVED_3_C12_OFFSET);
    addr_hit[ 124] = (reg_addr == SCMI_CHANNEL_FLAGS_C12_OFFSET);
    addr_hit[ 125] = (reg_addr == SCMI_LENGTH_C12_OFFSET);
    addr_hit[ 126] = (reg_addr == SCMI_MESSAGE_HEADER_C12_OFFSET);
    addr_hit[ 127] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C12_OFFSET);
    addr_hit[ 128] = (reg_addr == SCMI_DOORBELL_C12_OFFSET);
    addr_hit[ 129] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C12_OFFSET);
    addr_hit[ 130] = (reg_addr == SCMI_RESERVED_1_C13_OFFSET);
    addr_hit[ 131] = (reg_addr == SCMI_CHANNEL_STATUS_C13_OFFSET);
    addr_hit[ 132] = (reg_addr == SCMI_RESERVED_2_C13_OFFSET);
    addr_hit[ 133] = (reg_addr == SCMI_RESERVED_3_C13_OFFSET);
    addr_hit[ 134] = (reg_addr == SCMI_CHANNEL_FLAGS_C13_OFFSET);
    addr_hit[ 135] = (reg_addr == SCMI_LENGTH_C13_OFFSET);
    addr_hit[ 136] = (reg_addr == SCMI_MESSAGE_HEADER_C13_OFFSET);
    addr_hit[ 137] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C13_OFFSET);
    addr_hit[ 138] = (reg_addr == SCMI_DOORBELL_C13_OFFSET);
    addr_hit[ 139] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C13_OFFSET);
    addr_hit[ 140] = (reg_addr == SCMI_RESERVED_1_C14_OFFSET);
    addr_hit[ 141] = (reg_addr == SCMI_CHANNEL_STATUS_C14_OFFSET);
    addr_hit[ 142] = (reg_addr == SCMI_RESERVED_2_C14_OFFSET);
    addr_hit[ 143] = (reg_addr == SCMI_RESERVED_3_C14_OFFSET);
    addr_hit[ 144] = (reg_addr == SCMI_CHANNEL_FLAGS_C14_OFFSET);
    addr_hit[ 145] = (reg_addr == SCMI_LENGTH_C14_OFFSET);
    addr_hit[ 146] = (reg_addr == SCMI_MESSAGE_HEADER_C14_OFFSET);
    addr_hit[ 147] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C14_OFFSET);
    addr_hit[ 148] = (reg_addr == SCMI_DOORBELL_C14_OFFSET);
    addr_hit[ 149] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C14_OFFSET);
    addr_hit[ 150] = (reg_addr == SCMI_RESERVED_1_C15_OFFSET);
    addr_hit[ 151] = (reg_addr == SCMI_CHANNEL_STATUS_C15_OFFSET);
    addr_hit[ 152] = (reg_addr == SCMI_RESERVED_2_C15_OFFSET);
    addr_hit[ 153] = (reg_addr == SCMI_RESERVED_3_C15_OFFSET);
    addr_hit[ 154] = (reg_addr == SCMI_CHANNEL_FLAGS_C15_OFFSET);
    addr_hit[ 155] = (reg_addr == SCMI_LENGTH_C15_OFFSET);
    addr_hit[ 156] = (reg_addr == SCMI_MESSAGE_HEADER_C15_OFFSET);
    addr_hit[ 157] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C15_OFFSET);
    addr_hit[ 158] = (reg_addr == SCMI_DOORBELL_C15_OFFSET);
    addr_hit[ 159] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C15_OFFSET);
    addr_hit[ 160] = (reg_addr == SCMI_RESERVED_1_C16_OFFSET);
    addr_hit[ 161] = (reg_addr == SCMI_CHANNEL_STATUS_C16_OFFSET);
    addr_hit[ 162] = (reg_addr == SCMI_RESERVED_2_C16_OFFSET);
    addr_hit[ 163] = (reg_addr == SCMI_RESERVED_3_C16_OFFSET);
    addr_hit[ 164] = (reg_addr == SCMI_CHANNEL_FLAGS_C16_OFFSET);
    addr_hit[ 165] = (reg_addr == SCMI_LENGTH_C16_OFFSET);
    addr_hit[ 166] = (reg_addr == SCMI_MESSAGE_HEADER_C16_OFFSET);
    addr_hit[ 167] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C16_OFFSET);
    addr_hit[ 168] = (reg_addr == SCMI_DOORBELL_C16_OFFSET);
    addr_hit[ 169] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C16_OFFSET);
    addr_hit[ 170] = (reg_addr == SCMI_RESERVED_1_C17_OFFSET);
    addr_hit[ 171] = (reg_addr == SCMI_CHANNEL_STATUS_C17_OFFSET);
    addr_hit[ 172] = (reg_addr == SCMI_RESERVED_2_C17_OFFSET);
    addr_hit[ 173] = (reg_addr == SCMI_RESERVED_3_C17_OFFSET);
    addr_hit[ 174] = (reg_addr == SCMI_CHANNEL_FLAGS_C17_OFFSET);
    addr_hit[ 175] = (reg_addr == SCMI_LENGTH_C17_OFFSET);
    addr_hit[ 176] = (reg_addr == SCMI_MESSAGE_HEADER_C17_OFFSET);
    addr_hit[ 177] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C17_OFFSET);
    addr_hit[ 178] = (reg_addr == SCMI_DOORBELL_C17_OFFSET);
    addr_hit[ 179] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C17_OFFSET);
    addr_hit[ 180] = (reg_addr == SCMI_RESERVED_1_C18_OFFSET);
    addr_hit[ 181] = (reg_addr == SCMI_CHANNEL_STATUS_C18_OFFSET);
    addr_hit[ 182] = (reg_addr == SCMI_RESERVED_2_C18_OFFSET);
    addr_hit[ 183] = (reg_addr == SCMI_RESERVED_3_C18_OFFSET);
    addr_hit[ 184] = (reg_addr == SCMI_CHANNEL_FLAGS_C18_OFFSET);
    addr_hit[ 185] = (reg_addr == SCMI_LENGTH_C18_OFFSET);
    addr_hit[ 186] = (reg_addr == SCMI_MESSAGE_HEADER_C18_OFFSET);
    addr_hit[ 187] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C18_OFFSET);
    addr_hit[ 188] = (reg_addr == SCMI_DOORBELL_C18_OFFSET);
    addr_hit[ 189] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C18_OFFSET);
    addr_hit[ 190] = (reg_addr == SCMI_RESERVED_1_C19_OFFSET);
    addr_hit[ 191] = (reg_addr == SCMI_CHANNEL_STATUS_C19_OFFSET);
    addr_hit[ 192] = (reg_addr == SCMI_RESERVED_2_C19_OFFSET);
    addr_hit[ 193] = (reg_addr == SCMI_RESERVED_3_C19_OFFSET);
    addr_hit[ 194] = (reg_addr == SCMI_CHANNEL_FLAGS_C19_OFFSET);
    addr_hit[ 195] = (reg_addr == SCMI_LENGTH_C19_OFFSET);
    addr_hit[ 196] = (reg_addr == SCMI_MESSAGE_HEADER_C19_OFFSET);
    addr_hit[ 197] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C19_OFFSET);
    addr_hit[ 198] = (reg_addr == SCMI_DOORBELL_C19_OFFSET);
    addr_hit[ 199] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C19_OFFSET);
    addr_hit[ 200] = (reg_addr == SCMI_RESERVED_1_C20_OFFSET);
    addr_hit[ 201] = (reg_addr == SCMI_CHANNEL_STATUS_C20_OFFSET);
    addr_hit[ 202] = (reg_addr == SCMI_RESERVED_2_C20_OFFSET);
    addr_hit[ 203] = (reg_addr == SCMI_RESERVED_3_C20_OFFSET);
    addr_hit[ 204] = (reg_addr == SCMI_CHANNEL_FLAGS_C20_OFFSET);
    addr_hit[ 205] = (reg_addr == SCMI_LENGTH_C20_OFFSET);
    addr_hit[ 206] = (reg_addr == SCMI_MESSAGE_HEADER_C20_OFFSET);
    addr_hit[ 207] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C20_OFFSET);
    addr_hit[ 208] = (reg_addr == SCMI_DOORBELL_C20_OFFSET);
    addr_hit[ 209] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C20_OFFSET);
    addr_hit[ 210] = (reg_addr == SCMI_RESERVED_1_C21_OFFSET);
    addr_hit[ 211] = (reg_addr == SCMI_CHANNEL_STATUS_C21_OFFSET);
    addr_hit[ 212] = (reg_addr == SCMI_RESERVED_2_C21_OFFSET);
    addr_hit[ 213] = (reg_addr == SCMI_RESERVED_3_C21_OFFSET);
    addr_hit[ 214] = (reg_addr == SCMI_CHANNEL_FLAGS_C21_OFFSET);
    addr_hit[ 215] = (reg_addr == SCMI_LENGTH_C21_OFFSET);
    addr_hit[ 216] = (reg_addr == SCMI_MESSAGE_HEADER_C21_OFFSET);
    addr_hit[ 217] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C21_OFFSET);
    addr_hit[ 218] = (reg_addr == SCMI_DOORBELL_C21_OFFSET);
    addr_hit[ 219] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C21_OFFSET);
    addr_hit[ 220] = (reg_addr == SCMI_RESERVED_1_C22_OFFSET);
    addr_hit[ 221] = (reg_addr == SCMI_CHANNEL_STATUS_C22_OFFSET);
    addr_hit[ 222] = (reg_addr == SCMI_RESERVED_2_C22_OFFSET);
    addr_hit[ 223] = (reg_addr == SCMI_RESERVED_3_C22_OFFSET);
    addr_hit[ 224] = (reg_addr == SCMI_CHANNEL_FLAGS_C22_OFFSET);
    addr_hit[ 225] = (reg_addr == SCMI_LENGTH_C22_OFFSET);
    addr_hit[ 226] = (reg_addr == SCMI_MESSAGE_HEADER_C22_OFFSET);
    addr_hit[ 227] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C22_OFFSET);
    addr_hit[ 228] = (reg_addr == SCMI_DOORBELL_C22_OFFSET);
    addr_hit[ 229] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C22_OFFSET);
    addr_hit[ 230] = (reg_addr == SCMI_RESERVED_1_C23_OFFSET);
    addr_hit[ 231] = (reg_addr == SCMI_CHANNEL_STATUS_C23_OFFSET);
    addr_hit[ 232] = (reg_addr == SCMI_RESERVED_2_C23_OFFSET);
    addr_hit[ 233] = (reg_addr == SCMI_RESERVED_3_C23_OFFSET);
    addr_hit[ 234] = (reg_addr == SCMI_CHANNEL_FLAGS_C23_OFFSET);
    addr_hit[ 235] = (reg_addr == SCMI_LENGTH_C23_OFFSET);
    addr_hit[ 236] = (reg_addr == SCMI_MESSAGE_HEADER_C23_OFFSET);
    addr_hit[ 237] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C23_OFFSET);
    addr_hit[ 238] = (reg_addr == SCMI_DOORBELL_C23_OFFSET);
    addr_hit[ 239] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C23_OFFSET);
    addr_hit[ 240] = (reg_addr == SCMI_RESERVED_1_C24_OFFSET);
    addr_hit[ 241] = (reg_addr == SCMI_CHANNEL_STATUS_C24_OFFSET);
    addr_hit[ 242] = (reg_addr == SCMI_RESERVED_2_C24_OFFSET);
    addr_hit[ 243] = (reg_addr == SCMI_RESERVED_3_C24_OFFSET);
    addr_hit[ 244] = (reg_addr == SCMI_CHANNEL_FLAGS_C24_OFFSET);
    addr_hit[ 245] = (reg_addr == SCMI_LENGTH_C24_OFFSET);
    addr_hit[ 246] = (reg_addr == SCMI_MESSAGE_HEADER_C24_OFFSET);
    addr_hit[ 247] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C24_OFFSET);
    addr_hit[ 248] = (reg_addr == SCMI_DOORBELL_C24_OFFSET);
    addr_hit[ 249] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C24_OFFSET);
    addr_hit[ 250] = (reg_addr == SCMI_RESERVED_1_C25_OFFSET);
    addr_hit[ 251] = (reg_addr == SCMI_CHANNEL_STATUS_C25_OFFSET);
    addr_hit[ 252] = (reg_addr == SCMI_RESERVED_2_C25_OFFSET);
    addr_hit[ 253] = (reg_addr == SCMI_RESERVED_3_C25_OFFSET);
    addr_hit[ 254] = (reg_addr == SCMI_CHANNEL_FLAGS_C25_OFFSET);
    addr_hit[ 255] = (reg_addr == SCMI_LENGTH_C25_OFFSET);
    addr_hit[ 256] = (reg_addr == SCMI_MESSAGE_HEADER_C25_OFFSET);
    addr_hit[ 257] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C25_OFFSET);
    addr_hit[ 258] = (reg_addr == SCMI_DOORBELL_C25_OFFSET);
    addr_hit[ 259] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C25_OFFSET);
    addr_hit[ 260] = (reg_addr == SCMI_RESERVED_1_C26_OFFSET);
    addr_hit[ 261] = (reg_addr == SCMI_CHANNEL_STATUS_C26_OFFSET);
    addr_hit[ 262] = (reg_addr == SCMI_RESERVED_2_C26_OFFSET);
    addr_hit[ 263] = (reg_addr == SCMI_RESERVED_3_C26_OFFSET);
    addr_hit[ 264] = (reg_addr == SCMI_CHANNEL_FLAGS_C26_OFFSET);
    addr_hit[ 265] = (reg_addr == SCMI_LENGTH_C26_OFFSET);
    addr_hit[ 266] = (reg_addr == SCMI_MESSAGE_HEADER_C26_OFFSET);
    addr_hit[ 267] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C26_OFFSET);
    addr_hit[ 268] = (reg_addr == SCMI_DOORBELL_C26_OFFSET);
    addr_hit[ 269] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C26_OFFSET);
    addr_hit[ 270] = (reg_addr == SCMI_RESERVED_1_C27_OFFSET);
    addr_hit[ 271] = (reg_addr == SCMI_CHANNEL_STATUS_C27_OFFSET);
    addr_hit[ 272] = (reg_addr == SCMI_RESERVED_2_C27_OFFSET);
    addr_hit[ 273] = (reg_addr == SCMI_RESERVED_3_C27_OFFSET);
    addr_hit[ 274] = (reg_addr == SCMI_CHANNEL_FLAGS_C27_OFFSET);
    addr_hit[ 275] = (reg_addr == SCMI_LENGTH_C27_OFFSET);
    addr_hit[ 276] = (reg_addr == SCMI_MESSAGE_HEADER_C27_OFFSET);
    addr_hit[ 277] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C27_OFFSET);
    addr_hit[ 278] = (reg_addr == SCMI_DOORBELL_C27_OFFSET);
    addr_hit[ 279] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C27_OFFSET);
    addr_hit[ 280] = (reg_addr == SCMI_RESERVED_1_C28_OFFSET);
    addr_hit[ 281] = (reg_addr == SCMI_CHANNEL_STATUS_C28_OFFSET);
    addr_hit[ 282] = (reg_addr == SCMI_RESERVED_2_C28_OFFSET);
    addr_hit[ 283] = (reg_addr == SCMI_RESERVED_3_C28_OFFSET);
    addr_hit[ 284] = (reg_addr == SCMI_CHANNEL_FLAGS_C28_OFFSET);
    addr_hit[ 285] = (reg_addr == SCMI_LENGTH_C28_OFFSET);
    addr_hit[ 286] = (reg_addr == SCMI_MESSAGE_HEADER_C28_OFFSET);
    addr_hit[ 287] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C28_OFFSET);
    addr_hit[ 288] = (reg_addr == SCMI_DOORBELL_C28_OFFSET);
    addr_hit[ 289] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C28_OFFSET);
    addr_hit[ 290] = (reg_addr == SCMI_RESERVED_1_C29_OFFSET);
    addr_hit[ 291] = (reg_addr == SCMI_CHANNEL_STATUS_C29_OFFSET);
    addr_hit[ 292] = (reg_addr == SCMI_RESERVED_2_C29_OFFSET);
    addr_hit[ 293] = (reg_addr == SCMI_RESERVED_3_C29_OFFSET);
    addr_hit[ 294] = (reg_addr == SCMI_CHANNEL_FLAGS_C29_OFFSET);
    addr_hit[ 295] = (reg_addr == SCMI_LENGTH_C29_OFFSET);
    addr_hit[ 296] = (reg_addr == SCMI_MESSAGE_HEADER_C29_OFFSET);
    addr_hit[ 297] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C29_OFFSET);
    addr_hit[ 298] = (reg_addr == SCMI_DOORBELL_C29_OFFSET);
    addr_hit[ 299] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C29_OFFSET);
    addr_hit[ 300] = (reg_addr == SCMI_RESERVED_1_C30_OFFSET);
    addr_hit[ 301] = (reg_addr == SCMI_CHANNEL_STATUS_C30_OFFSET);
    addr_hit[ 302] = (reg_addr == SCMI_RESERVED_2_C30_OFFSET);
    addr_hit[ 303] = (reg_addr == SCMI_RESERVED_3_C30_OFFSET);
    addr_hit[ 304] = (reg_addr == SCMI_CHANNEL_FLAGS_C30_OFFSET);
    addr_hit[ 305] = (reg_addr == SCMI_LENGTH_C30_OFFSET);
    addr_hit[ 306] = (reg_addr == SCMI_MESSAGE_HEADER_C30_OFFSET);
    addr_hit[ 307] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C30_OFFSET);
    addr_hit[ 308] = (reg_addr == SCMI_DOORBELL_C30_OFFSET);
    addr_hit[ 309] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C30_OFFSET);
    addr_hit[ 310] = (reg_addr == SCMI_RESERVED_1_C31_OFFSET);
    addr_hit[ 311] = (reg_addr == SCMI_CHANNEL_STATUS_C31_OFFSET);
    addr_hit[ 312] = (reg_addr == SCMI_RESERVED_2_C31_OFFSET);
    addr_hit[ 313] = (reg_addr == SCMI_RESERVED_3_C31_OFFSET);
    addr_hit[ 314] = (reg_addr == SCMI_CHANNEL_FLAGS_C31_OFFSET);
    addr_hit[ 315] = (reg_addr == SCMI_LENGTH_C31_OFFSET);
    addr_hit[ 316] = (reg_addr == SCMI_MESSAGE_HEADER_C31_OFFSET);
    addr_hit[ 317] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C31_OFFSET);
    addr_hit[ 318] = (reg_addr == SCMI_DOORBELL_C31_OFFSET);
    addr_hit[ 319] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C31_OFFSET);
    addr_hit[ 320] = (reg_addr == SCMI_RESERVED_1_C32_OFFSET);
    addr_hit[ 321] = (reg_addr == SCMI_CHANNEL_STATUS_C32_OFFSET);
    addr_hit[ 322] = (reg_addr == SCMI_RESERVED_2_C32_OFFSET);
    addr_hit[ 323] = (reg_addr == SCMI_RESERVED_3_C32_OFFSET);
    addr_hit[ 324] = (reg_addr == SCMI_CHANNEL_FLAGS_C32_OFFSET);
    addr_hit[ 325] = (reg_addr == SCMI_LENGTH_C32_OFFSET);
    addr_hit[ 326] = (reg_addr == SCMI_MESSAGE_HEADER_C32_OFFSET);
    addr_hit[ 327] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C32_OFFSET);
    addr_hit[ 328] = (reg_addr == SCMI_DOORBELL_C32_OFFSET);
    addr_hit[ 329] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C32_OFFSET);
    addr_hit[ 330] = (reg_addr == SCMI_RESERVED_1_C33_OFFSET);
    addr_hit[ 331] = (reg_addr == SCMI_CHANNEL_STATUS_C33_OFFSET);
    addr_hit[ 332] = (reg_addr == SCMI_RESERVED_2_C33_OFFSET);
    addr_hit[ 333] = (reg_addr == SCMI_RESERVED_3_C33_OFFSET);
    addr_hit[ 334] = (reg_addr == SCMI_CHANNEL_FLAGS_C33_OFFSET);
    addr_hit[ 335] = (reg_addr == SCMI_LENGTH_C33_OFFSET);
    addr_hit[ 336] = (reg_addr == SCMI_MESSAGE_HEADER_C33_OFFSET);
    addr_hit[ 337] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C33_OFFSET);
    addr_hit[ 338] = (reg_addr == SCMI_DOORBELL_C33_OFFSET);
    addr_hit[ 339] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C33_OFFSET);
    addr_hit[ 340] = (reg_addr == SCMI_RESERVED_1_C34_OFFSET);
    addr_hit[ 341] = (reg_addr == SCMI_CHANNEL_STATUS_C34_OFFSET);
    addr_hit[ 342] = (reg_addr == SCMI_RESERVED_2_C34_OFFSET);
    addr_hit[ 343] = (reg_addr == SCMI_RESERVED_3_C34_OFFSET);
    addr_hit[ 344] = (reg_addr == SCMI_CHANNEL_FLAGS_C34_OFFSET);
    addr_hit[ 345] = (reg_addr == SCMI_LENGTH_C34_OFFSET);
    addr_hit[ 346] = (reg_addr == SCMI_MESSAGE_HEADER_C34_OFFSET);
    addr_hit[ 347] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C34_OFFSET);
    addr_hit[ 348] = (reg_addr == SCMI_DOORBELL_C34_OFFSET);
    addr_hit[ 349] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C34_OFFSET);
    addr_hit[ 350] = (reg_addr == SCMI_RESERVED_1_C35_OFFSET);
    addr_hit[ 351] = (reg_addr == SCMI_CHANNEL_STATUS_C35_OFFSET);
    addr_hit[ 352] = (reg_addr == SCMI_RESERVED_2_C35_OFFSET);
    addr_hit[ 353] = (reg_addr == SCMI_RESERVED_3_C35_OFFSET);
    addr_hit[ 354] = (reg_addr == SCMI_CHANNEL_FLAGS_C35_OFFSET);
    addr_hit[ 355] = (reg_addr == SCMI_LENGTH_C35_OFFSET);
    addr_hit[ 356] = (reg_addr == SCMI_MESSAGE_HEADER_C35_OFFSET);
    addr_hit[ 357] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C35_OFFSET);
    addr_hit[ 358] = (reg_addr == SCMI_DOORBELL_C35_OFFSET);
    addr_hit[ 359] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C35_OFFSET);
    addr_hit[ 360] = (reg_addr == SCMI_RESERVED_1_C36_OFFSET);
    addr_hit[ 361] = (reg_addr == SCMI_CHANNEL_STATUS_C36_OFFSET);
    addr_hit[ 362] = (reg_addr == SCMI_RESERVED_2_C36_OFFSET);
    addr_hit[ 363] = (reg_addr == SCMI_RESERVED_3_C36_OFFSET);
    addr_hit[ 364] = (reg_addr == SCMI_CHANNEL_FLAGS_C36_OFFSET);
    addr_hit[ 365] = (reg_addr == SCMI_LENGTH_C36_OFFSET);
    addr_hit[ 366] = (reg_addr == SCMI_MESSAGE_HEADER_C36_OFFSET);
    addr_hit[ 367] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C36_OFFSET);
    addr_hit[ 368] = (reg_addr == SCMI_DOORBELL_C36_OFFSET);
    addr_hit[ 369] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C36_OFFSET);
    addr_hit[ 370] = (reg_addr == SCMI_RESERVED_1_C37_OFFSET);
    addr_hit[ 371] = (reg_addr == SCMI_CHANNEL_STATUS_C37_OFFSET);
    addr_hit[ 372] = (reg_addr == SCMI_RESERVED_2_C37_OFFSET);
    addr_hit[ 373] = (reg_addr == SCMI_RESERVED_3_C37_OFFSET);
    addr_hit[ 374] = (reg_addr == SCMI_CHANNEL_FLAGS_C37_OFFSET);
    addr_hit[ 375] = (reg_addr == SCMI_LENGTH_C37_OFFSET);
    addr_hit[ 376] = (reg_addr == SCMI_MESSAGE_HEADER_C37_OFFSET);
    addr_hit[ 377] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C37_OFFSET);
    addr_hit[ 378] = (reg_addr == SCMI_DOORBELL_C37_OFFSET);
    addr_hit[ 379] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C37_OFFSET);
    addr_hit[ 380] = (reg_addr == SCMI_RESERVED_1_C38_OFFSET);
    addr_hit[ 381] = (reg_addr == SCMI_CHANNEL_STATUS_C38_OFFSET);
    addr_hit[ 382] = (reg_addr == SCMI_RESERVED_2_C38_OFFSET);
    addr_hit[ 383] = (reg_addr == SCMI_RESERVED_3_C38_OFFSET);
    addr_hit[ 384] = (reg_addr == SCMI_CHANNEL_FLAGS_C38_OFFSET);
    addr_hit[ 385] = (reg_addr == SCMI_LENGTH_C38_OFFSET);
    addr_hit[ 386] = (reg_addr == SCMI_MESSAGE_HEADER_C38_OFFSET);
    addr_hit[ 387] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C38_OFFSET);
    addr_hit[ 388] = (reg_addr == SCMI_DOORBELL_C38_OFFSET);
    addr_hit[ 389] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C38_OFFSET);
    addr_hit[ 390] = (reg_addr == SCMI_RESERVED_1_C39_OFFSET);
    addr_hit[ 391] = (reg_addr == SCMI_CHANNEL_STATUS_C39_OFFSET);
    addr_hit[ 392] = (reg_addr == SCMI_RESERVED_2_C39_OFFSET);
    addr_hit[ 393] = (reg_addr == SCMI_RESERVED_3_C39_OFFSET);
    addr_hit[ 394] = (reg_addr == SCMI_CHANNEL_FLAGS_C39_OFFSET);
    addr_hit[ 395] = (reg_addr == SCMI_LENGTH_C39_OFFSET);
    addr_hit[ 396] = (reg_addr == SCMI_MESSAGE_HEADER_C39_OFFSET);
    addr_hit[ 397] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C39_OFFSET);
    addr_hit[ 398] = (reg_addr == SCMI_DOORBELL_C39_OFFSET);
    addr_hit[ 399] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C39_OFFSET);
    addr_hit[ 400] = (reg_addr == SCMI_RESERVED_1_C40_OFFSET);
    addr_hit[ 401] = (reg_addr == SCMI_CHANNEL_STATUS_C40_OFFSET);
    addr_hit[ 402] = (reg_addr == SCMI_RESERVED_2_C40_OFFSET);
    addr_hit[ 403] = (reg_addr == SCMI_RESERVED_3_C40_OFFSET);
    addr_hit[ 404] = (reg_addr == SCMI_CHANNEL_FLAGS_C40_OFFSET);
    addr_hit[ 405] = (reg_addr == SCMI_LENGTH_C40_OFFSET);
    addr_hit[ 406] = (reg_addr == SCMI_MESSAGE_HEADER_C40_OFFSET);
    addr_hit[ 407] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C40_OFFSET);
    addr_hit[ 408] = (reg_addr == SCMI_DOORBELL_C40_OFFSET);
    addr_hit[ 409] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C40_OFFSET);
    addr_hit[ 410] = (reg_addr == SCMI_RESERVED_1_C41_OFFSET);
    addr_hit[ 411] = (reg_addr == SCMI_CHANNEL_STATUS_C41_OFFSET);
    addr_hit[ 412] = (reg_addr == SCMI_RESERVED_2_C41_OFFSET);
    addr_hit[ 413] = (reg_addr == SCMI_RESERVED_3_C41_OFFSET);
    addr_hit[ 414] = (reg_addr == SCMI_CHANNEL_FLAGS_C41_OFFSET);
    addr_hit[ 415] = (reg_addr == SCMI_LENGTH_C41_OFFSET);
    addr_hit[ 416] = (reg_addr == SCMI_MESSAGE_HEADER_C41_OFFSET);
    addr_hit[ 417] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C41_OFFSET);
    addr_hit[ 418] = (reg_addr == SCMI_DOORBELL_C41_OFFSET);
    addr_hit[ 419] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C41_OFFSET);
    addr_hit[ 420] = (reg_addr == SCMI_RESERVED_1_C42_OFFSET);
    addr_hit[ 421] = (reg_addr == SCMI_CHANNEL_STATUS_C42_OFFSET);
    addr_hit[ 422] = (reg_addr == SCMI_RESERVED_2_C42_OFFSET);
    addr_hit[ 423] = (reg_addr == SCMI_RESERVED_3_C42_OFFSET);
    addr_hit[ 424] = (reg_addr == SCMI_CHANNEL_FLAGS_C42_OFFSET);
    addr_hit[ 425] = (reg_addr == SCMI_LENGTH_C42_OFFSET);
    addr_hit[ 426] = (reg_addr == SCMI_MESSAGE_HEADER_C42_OFFSET);
    addr_hit[ 427] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C42_OFFSET);
    addr_hit[ 428] = (reg_addr == SCMI_DOORBELL_C42_OFFSET);
    addr_hit[ 429] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C42_OFFSET);
    addr_hit[ 430] = (reg_addr == SCMI_RESERVED_1_C43_OFFSET);
    addr_hit[ 431] = (reg_addr == SCMI_CHANNEL_STATUS_C43_OFFSET);
    addr_hit[ 432] = (reg_addr == SCMI_RESERVED_2_C43_OFFSET);
    addr_hit[ 433] = (reg_addr == SCMI_RESERVED_3_C43_OFFSET);
    addr_hit[ 434] = (reg_addr == SCMI_CHANNEL_FLAGS_C43_OFFSET);
    addr_hit[ 435] = (reg_addr == SCMI_LENGTH_C43_OFFSET);
    addr_hit[ 436] = (reg_addr == SCMI_MESSAGE_HEADER_C43_OFFSET);
    addr_hit[ 437] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C43_OFFSET);
    addr_hit[ 438] = (reg_addr == SCMI_DOORBELL_C43_OFFSET);
    addr_hit[ 439] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C43_OFFSET);
    addr_hit[ 440] = (reg_addr == SCMI_RESERVED_1_C44_OFFSET);
    addr_hit[ 441] = (reg_addr == SCMI_CHANNEL_STATUS_C44_OFFSET);
    addr_hit[ 442] = (reg_addr == SCMI_RESERVED_2_C44_OFFSET);
    addr_hit[ 443] = (reg_addr == SCMI_RESERVED_3_C44_OFFSET);
    addr_hit[ 444] = (reg_addr == SCMI_CHANNEL_FLAGS_C44_OFFSET);
    addr_hit[ 445] = (reg_addr == SCMI_LENGTH_C44_OFFSET);
    addr_hit[ 446] = (reg_addr == SCMI_MESSAGE_HEADER_C44_OFFSET);
    addr_hit[ 447] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C44_OFFSET);
    addr_hit[ 448] = (reg_addr == SCMI_DOORBELL_C44_OFFSET);
    addr_hit[ 449] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C44_OFFSET);
    addr_hit[ 450] = (reg_addr == SCMI_RESERVED_1_C45_OFFSET);
    addr_hit[ 451] = (reg_addr == SCMI_CHANNEL_STATUS_C45_OFFSET);
    addr_hit[ 452] = (reg_addr == SCMI_RESERVED_2_C45_OFFSET);
    addr_hit[ 453] = (reg_addr == SCMI_RESERVED_3_C45_OFFSET);
    addr_hit[ 454] = (reg_addr == SCMI_CHANNEL_FLAGS_C45_OFFSET);
    addr_hit[ 455] = (reg_addr == SCMI_LENGTH_C45_OFFSET);
    addr_hit[ 456] = (reg_addr == SCMI_MESSAGE_HEADER_C45_OFFSET);
    addr_hit[ 457] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C45_OFFSET);
    addr_hit[ 458] = (reg_addr == SCMI_DOORBELL_C45_OFFSET);
    addr_hit[ 459] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C45_OFFSET);
    addr_hit[ 460] = (reg_addr == SCMI_RESERVED_1_C46_OFFSET);
    addr_hit[ 461] = (reg_addr == SCMI_CHANNEL_STATUS_C46_OFFSET);
    addr_hit[ 462] = (reg_addr == SCMI_RESERVED_2_C46_OFFSET);
    addr_hit[ 463] = (reg_addr == SCMI_RESERVED_3_C46_OFFSET);
    addr_hit[ 464] = (reg_addr == SCMI_CHANNEL_FLAGS_C46_OFFSET);
    addr_hit[ 465] = (reg_addr == SCMI_LENGTH_C46_OFFSET);
    addr_hit[ 466] = (reg_addr == SCMI_MESSAGE_HEADER_C46_OFFSET);
    addr_hit[ 467] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C46_OFFSET);
    addr_hit[ 468] = (reg_addr == SCMI_DOORBELL_C46_OFFSET);
    addr_hit[ 469] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C46_OFFSET);
    addr_hit[ 470] = (reg_addr == SCMI_RESERVED_1_C47_OFFSET);
    addr_hit[ 471] = (reg_addr == SCMI_CHANNEL_STATUS_C47_OFFSET);
    addr_hit[ 472] = (reg_addr == SCMI_RESERVED_2_C47_OFFSET);
    addr_hit[ 473] = (reg_addr == SCMI_RESERVED_3_C47_OFFSET);
    addr_hit[ 474] = (reg_addr == SCMI_CHANNEL_FLAGS_C47_OFFSET);
    addr_hit[ 475] = (reg_addr == SCMI_LENGTH_C47_OFFSET);
    addr_hit[ 476] = (reg_addr == SCMI_MESSAGE_HEADER_C47_OFFSET);
    addr_hit[ 477] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C47_OFFSET);
    addr_hit[ 478] = (reg_addr == SCMI_DOORBELL_C47_OFFSET);
    addr_hit[ 479] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C47_OFFSET);
    addr_hit[ 480] = (reg_addr == SCMI_RESERVED_1_C48_OFFSET);
    addr_hit[ 481] = (reg_addr == SCMI_CHANNEL_STATUS_C48_OFFSET);
    addr_hit[ 482] = (reg_addr == SCMI_RESERVED_2_C48_OFFSET);
    addr_hit[ 483] = (reg_addr == SCMI_RESERVED_3_C48_OFFSET);
    addr_hit[ 484] = (reg_addr == SCMI_CHANNEL_FLAGS_C48_OFFSET);
    addr_hit[ 485] = (reg_addr == SCMI_LENGTH_C48_OFFSET);
    addr_hit[ 486] = (reg_addr == SCMI_MESSAGE_HEADER_C48_OFFSET);
    addr_hit[ 487] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C48_OFFSET);
    addr_hit[ 488] = (reg_addr == SCMI_DOORBELL_C48_OFFSET);
    addr_hit[ 489] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C48_OFFSET);
    addr_hit[ 490] = (reg_addr == SCMI_RESERVED_1_C49_OFFSET);
    addr_hit[ 491] = (reg_addr == SCMI_CHANNEL_STATUS_C49_OFFSET);
    addr_hit[ 492] = (reg_addr == SCMI_RESERVED_2_C49_OFFSET);
    addr_hit[ 493] = (reg_addr == SCMI_RESERVED_3_C49_OFFSET);
    addr_hit[ 494] = (reg_addr == SCMI_CHANNEL_FLAGS_C49_OFFSET);
    addr_hit[ 495] = (reg_addr == SCMI_LENGTH_C49_OFFSET);
    addr_hit[ 496] = (reg_addr == SCMI_MESSAGE_HEADER_C49_OFFSET);
    addr_hit[ 497] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C49_OFFSET);
    addr_hit[ 498] = (reg_addr == SCMI_DOORBELL_C49_OFFSET);
    addr_hit[ 499] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C49_OFFSET);
    addr_hit[ 500] = (reg_addr == SCMI_RESERVED_1_C50_OFFSET);
    addr_hit[ 501] = (reg_addr == SCMI_CHANNEL_STATUS_C50_OFFSET);
    addr_hit[ 502] = (reg_addr == SCMI_RESERVED_2_C50_OFFSET);
    addr_hit[ 503] = (reg_addr == SCMI_RESERVED_3_C50_OFFSET);
    addr_hit[ 504] = (reg_addr == SCMI_CHANNEL_FLAGS_C50_OFFSET);
    addr_hit[ 505] = (reg_addr == SCMI_LENGTH_C50_OFFSET);
    addr_hit[ 506] = (reg_addr == SCMI_MESSAGE_HEADER_C50_OFFSET);
    addr_hit[ 507] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C50_OFFSET);
    addr_hit[ 508] = (reg_addr == SCMI_DOORBELL_C50_OFFSET);
    addr_hit[ 509] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C50_OFFSET);
    addr_hit[ 510] = (reg_addr == SCMI_RESERVED_1_C51_OFFSET);
    addr_hit[ 511] = (reg_addr == SCMI_CHANNEL_STATUS_C51_OFFSET);
    addr_hit[ 512] = (reg_addr == SCMI_RESERVED_2_C51_OFFSET);
    addr_hit[ 513] = (reg_addr == SCMI_RESERVED_3_C51_OFFSET);
    addr_hit[ 514] = (reg_addr == SCMI_CHANNEL_FLAGS_C51_OFFSET);
    addr_hit[ 515] = (reg_addr == SCMI_LENGTH_C51_OFFSET);
    addr_hit[ 516] = (reg_addr == SCMI_MESSAGE_HEADER_C51_OFFSET);
    addr_hit[ 517] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C51_OFFSET);
    addr_hit[ 518] = (reg_addr == SCMI_DOORBELL_C51_OFFSET);
    addr_hit[ 519] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C51_OFFSET);
    addr_hit[ 520] = (reg_addr == SCMI_RESERVED_1_C52_OFFSET);
    addr_hit[ 521] = (reg_addr == SCMI_CHANNEL_STATUS_C52_OFFSET);
    addr_hit[ 522] = (reg_addr == SCMI_RESERVED_2_C52_OFFSET);
    addr_hit[ 523] = (reg_addr == SCMI_RESERVED_3_C52_OFFSET);
    addr_hit[ 524] = (reg_addr == SCMI_CHANNEL_FLAGS_C52_OFFSET);
    addr_hit[ 525] = (reg_addr == SCMI_LENGTH_C52_OFFSET);
    addr_hit[ 526] = (reg_addr == SCMI_MESSAGE_HEADER_C52_OFFSET);
    addr_hit[ 527] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C52_OFFSET);
    addr_hit[ 528] = (reg_addr == SCMI_DOORBELL_C52_OFFSET);
    addr_hit[ 529] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C52_OFFSET);
    addr_hit[ 530] = (reg_addr == SCMI_RESERVED_1_C53_OFFSET);
    addr_hit[ 531] = (reg_addr == SCMI_CHANNEL_STATUS_C53_OFFSET);
    addr_hit[ 532] = (reg_addr == SCMI_RESERVED_2_C53_OFFSET);
    addr_hit[ 533] = (reg_addr == SCMI_RESERVED_3_C53_OFFSET);
    addr_hit[ 534] = (reg_addr == SCMI_CHANNEL_FLAGS_C53_OFFSET);
    addr_hit[ 535] = (reg_addr == SCMI_LENGTH_C53_OFFSET);
    addr_hit[ 536] = (reg_addr == SCMI_MESSAGE_HEADER_C53_OFFSET);
    addr_hit[ 537] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C53_OFFSET);
    addr_hit[ 538] = (reg_addr == SCMI_DOORBELL_C53_OFFSET);
    addr_hit[ 539] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C53_OFFSET);
    addr_hit[ 540] = (reg_addr == SCMI_RESERVED_1_C54_OFFSET);
    addr_hit[ 541] = (reg_addr == SCMI_CHANNEL_STATUS_C54_OFFSET);
    addr_hit[ 542] = (reg_addr == SCMI_RESERVED_2_C54_OFFSET);
    addr_hit[ 543] = (reg_addr == SCMI_RESERVED_3_C54_OFFSET);
    addr_hit[ 544] = (reg_addr == SCMI_CHANNEL_FLAGS_C54_OFFSET);
    addr_hit[ 545] = (reg_addr == SCMI_LENGTH_C54_OFFSET);
    addr_hit[ 546] = (reg_addr == SCMI_MESSAGE_HEADER_C54_OFFSET);
    addr_hit[ 547] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C54_OFFSET);
    addr_hit[ 548] = (reg_addr == SCMI_DOORBELL_C54_OFFSET);
    addr_hit[ 549] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C54_OFFSET);
    addr_hit[ 550] = (reg_addr == SCMI_RESERVED_1_C55_OFFSET);
    addr_hit[ 551] = (reg_addr == SCMI_CHANNEL_STATUS_C55_OFFSET);
    addr_hit[ 552] = (reg_addr == SCMI_RESERVED_2_C55_OFFSET);
    addr_hit[ 553] = (reg_addr == SCMI_RESERVED_3_C55_OFFSET);
    addr_hit[ 554] = (reg_addr == SCMI_CHANNEL_FLAGS_C55_OFFSET);
    addr_hit[ 555] = (reg_addr == SCMI_LENGTH_C55_OFFSET);
    addr_hit[ 556] = (reg_addr == SCMI_MESSAGE_HEADER_C55_OFFSET);
    addr_hit[ 557] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C55_OFFSET);
    addr_hit[ 558] = (reg_addr == SCMI_DOORBELL_C55_OFFSET);
    addr_hit[ 559] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C55_OFFSET);
    addr_hit[ 560] = (reg_addr == SCMI_RESERVED_1_C56_OFFSET);
    addr_hit[ 561] = (reg_addr == SCMI_CHANNEL_STATUS_C56_OFFSET);
    addr_hit[ 562] = (reg_addr == SCMI_RESERVED_2_C56_OFFSET);
    addr_hit[ 563] = (reg_addr == SCMI_RESERVED_3_C56_OFFSET);
    addr_hit[ 564] = (reg_addr == SCMI_CHANNEL_FLAGS_C56_OFFSET);
    addr_hit[ 565] = (reg_addr == SCMI_LENGTH_C56_OFFSET);
    addr_hit[ 566] = (reg_addr == SCMI_MESSAGE_HEADER_C56_OFFSET);
    addr_hit[ 567] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C56_OFFSET);
    addr_hit[ 568] = (reg_addr == SCMI_DOORBELL_C56_OFFSET);
    addr_hit[ 569] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C56_OFFSET);
    addr_hit[ 570] = (reg_addr == SCMI_RESERVED_1_C57_OFFSET);
    addr_hit[ 571] = (reg_addr == SCMI_CHANNEL_STATUS_C57_OFFSET);
    addr_hit[ 572] = (reg_addr == SCMI_RESERVED_2_C57_OFFSET);
    addr_hit[ 573] = (reg_addr == SCMI_RESERVED_3_C57_OFFSET);
    addr_hit[ 574] = (reg_addr == SCMI_CHANNEL_FLAGS_C57_OFFSET);
    addr_hit[ 575] = (reg_addr == SCMI_LENGTH_C57_OFFSET);
    addr_hit[ 576] = (reg_addr == SCMI_MESSAGE_HEADER_C57_OFFSET);
    addr_hit[ 577] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C57_OFFSET);
    addr_hit[ 578] = (reg_addr == SCMI_DOORBELL_C57_OFFSET);
    addr_hit[ 579] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C57_OFFSET);
    addr_hit[ 580] = (reg_addr == SCMI_RESERVED_1_C58_OFFSET);
    addr_hit[ 581] = (reg_addr == SCMI_CHANNEL_STATUS_C58_OFFSET);
    addr_hit[ 582] = (reg_addr == SCMI_RESERVED_2_C58_OFFSET);
    addr_hit[ 583] = (reg_addr == SCMI_RESERVED_3_C58_OFFSET);
    addr_hit[ 584] = (reg_addr == SCMI_CHANNEL_FLAGS_C58_OFFSET);
    addr_hit[ 585] = (reg_addr == SCMI_LENGTH_C58_OFFSET);
    addr_hit[ 586] = (reg_addr == SCMI_MESSAGE_HEADER_C58_OFFSET);
    addr_hit[ 587] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C58_OFFSET);
    addr_hit[ 588] = (reg_addr == SCMI_DOORBELL_C58_OFFSET);
    addr_hit[ 589] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C58_OFFSET);
    addr_hit[ 590] = (reg_addr == SCMI_RESERVED_1_C59_OFFSET);
    addr_hit[ 591] = (reg_addr == SCMI_CHANNEL_STATUS_C59_OFFSET);
    addr_hit[ 592] = (reg_addr == SCMI_RESERVED_2_C59_OFFSET);
    addr_hit[ 593] = (reg_addr == SCMI_RESERVED_3_C59_OFFSET);
    addr_hit[ 594] = (reg_addr == SCMI_CHANNEL_FLAGS_C59_OFFSET);
    addr_hit[ 595] = (reg_addr == SCMI_LENGTH_C59_OFFSET);
    addr_hit[ 596] = (reg_addr == SCMI_MESSAGE_HEADER_C59_OFFSET);
    addr_hit[ 597] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C59_OFFSET);
    addr_hit[ 598] = (reg_addr == SCMI_DOORBELL_C59_OFFSET);
    addr_hit[ 599] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C59_OFFSET);
    addr_hit[ 600] = (reg_addr == SCMI_RESERVED_1_C60_OFFSET);
    addr_hit[ 601] = (reg_addr == SCMI_CHANNEL_STATUS_C60_OFFSET);
    addr_hit[ 602] = (reg_addr == SCMI_RESERVED_2_C60_OFFSET);
    addr_hit[ 603] = (reg_addr == SCMI_RESERVED_3_C60_OFFSET);
    addr_hit[ 604] = (reg_addr == SCMI_CHANNEL_FLAGS_C60_OFFSET);
    addr_hit[ 605] = (reg_addr == SCMI_LENGTH_C60_OFFSET);
    addr_hit[ 606] = (reg_addr == SCMI_MESSAGE_HEADER_C60_OFFSET);
    addr_hit[ 607] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C60_OFFSET);
    addr_hit[ 608] = (reg_addr == SCMI_DOORBELL_C60_OFFSET);
    addr_hit[ 609] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C60_OFFSET);
    addr_hit[ 610] = (reg_addr == SCMI_RESERVED_1_C61_OFFSET);
    addr_hit[ 611] = (reg_addr == SCMI_CHANNEL_STATUS_C61_OFFSET);
    addr_hit[ 612] = (reg_addr == SCMI_RESERVED_2_C61_OFFSET);
    addr_hit[ 613] = (reg_addr == SCMI_RESERVED_3_C61_OFFSET);
    addr_hit[ 614] = (reg_addr == SCMI_CHANNEL_FLAGS_C61_OFFSET);
    addr_hit[ 615] = (reg_addr == SCMI_LENGTH_C61_OFFSET);
    addr_hit[ 616] = (reg_addr == SCMI_MESSAGE_HEADER_C61_OFFSET);
    addr_hit[ 617] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C61_OFFSET);
    addr_hit[ 618] = (reg_addr == SCMI_DOORBELL_C61_OFFSET);
    addr_hit[ 619] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C61_OFFSET);
    addr_hit[ 620] = (reg_addr == SCMI_RESERVED_1_C62_OFFSET);
    addr_hit[ 621] = (reg_addr == SCMI_CHANNEL_STATUS_C62_OFFSET);
    addr_hit[ 622] = (reg_addr == SCMI_RESERVED_2_C62_OFFSET);
    addr_hit[ 623] = (reg_addr == SCMI_RESERVED_3_C62_OFFSET);
    addr_hit[ 624] = (reg_addr == SCMI_CHANNEL_FLAGS_C62_OFFSET);
    addr_hit[ 625] = (reg_addr == SCMI_LENGTH_C62_OFFSET);
    addr_hit[ 626] = (reg_addr == SCMI_MESSAGE_HEADER_C62_OFFSET);
    addr_hit[ 627] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C62_OFFSET);
    addr_hit[ 628] = (reg_addr == SCMI_DOORBELL_C62_OFFSET);
    addr_hit[ 629] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C62_OFFSET);
    addr_hit[ 630] = (reg_addr == SCMI_RESERVED_1_C63_OFFSET);
    addr_hit[ 631] = (reg_addr == SCMI_CHANNEL_STATUS_C63_OFFSET);
    addr_hit[ 632] = (reg_addr == SCMI_RESERVED_2_C63_OFFSET);
    addr_hit[ 633] = (reg_addr == SCMI_RESERVED_3_C63_OFFSET);
    addr_hit[ 634] = (reg_addr == SCMI_CHANNEL_FLAGS_C63_OFFSET);
    addr_hit[ 635] = (reg_addr == SCMI_LENGTH_C63_OFFSET);
    addr_hit[ 636] = (reg_addr == SCMI_MESSAGE_HEADER_C63_OFFSET);
    addr_hit[ 637] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C63_OFFSET);
    addr_hit[ 638] = (reg_addr == SCMI_DOORBELL_C63_OFFSET);
    addr_hit[ 639] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C63_OFFSET);
    addr_hit[ 640] = (reg_addr == SCMI_RESERVED_1_C64_OFFSET);
    addr_hit[ 641] = (reg_addr == SCMI_CHANNEL_STATUS_C64_OFFSET);
    addr_hit[ 642] = (reg_addr == SCMI_RESERVED_2_C64_OFFSET);
    addr_hit[ 643] = (reg_addr == SCMI_RESERVED_3_C64_OFFSET);
    addr_hit[ 644] = (reg_addr == SCMI_CHANNEL_FLAGS_C64_OFFSET);
    addr_hit[ 645] = (reg_addr == SCMI_LENGTH_C64_OFFSET);
    addr_hit[ 646] = (reg_addr == SCMI_MESSAGE_HEADER_C64_OFFSET);
    addr_hit[ 647] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C64_OFFSET);
    addr_hit[ 648] = (reg_addr == SCMI_DOORBELL_C64_OFFSET);
    addr_hit[ 649] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C64_OFFSET);
    addr_hit[ 650] = (reg_addr == SCMI_RESERVED_1_C65_OFFSET);
    addr_hit[ 651] = (reg_addr == SCMI_CHANNEL_STATUS_C65_OFFSET);
    addr_hit[ 652] = (reg_addr == SCMI_RESERVED_2_C65_OFFSET);
    addr_hit[ 653] = (reg_addr == SCMI_RESERVED_3_C65_OFFSET);
    addr_hit[ 654] = (reg_addr == SCMI_CHANNEL_FLAGS_C65_OFFSET);
    addr_hit[ 655] = (reg_addr == SCMI_LENGTH_C65_OFFSET);
    addr_hit[ 656] = (reg_addr == SCMI_MESSAGE_HEADER_C65_OFFSET);
    addr_hit[ 657] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C65_OFFSET);
    addr_hit[ 658] = (reg_addr == SCMI_DOORBELL_C65_OFFSET);
    addr_hit[ 659] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C65_OFFSET);
    addr_hit[ 660] = (reg_addr == SCMI_RESERVED_1_C66_OFFSET);
    addr_hit[ 661] = (reg_addr == SCMI_CHANNEL_STATUS_C66_OFFSET);
    addr_hit[ 662] = (reg_addr == SCMI_RESERVED_2_C66_OFFSET);
    addr_hit[ 663] = (reg_addr == SCMI_RESERVED_3_C66_OFFSET);
    addr_hit[ 664] = (reg_addr == SCMI_CHANNEL_FLAGS_C66_OFFSET);
    addr_hit[ 665] = (reg_addr == SCMI_LENGTH_C66_OFFSET);
    addr_hit[ 666] = (reg_addr == SCMI_MESSAGE_HEADER_C66_OFFSET);
    addr_hit[ 667] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C66_OFFSET);
    addr_hit[ 668] = (reg_addr == SCMI_DOORBELL_C66_OFFSET);
    addr_hit[ 669] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C66_OFFSET);
    addr_hit[ 670] = (reg_addr == SCMI_RESERVED_1_C67_OFFSET);
    addr_hit[ 671] = (reg_addr == SCMI_CHANNEL_STATUS_C67_OFFSET);
    addr_hit[ 672] = (reg_addr == SCMI_RESERVED_2_C67_OFFSET);
    addr_hit[ 673] = (reg_addr == SCMI_RESERVED_3_C67_OFFSET);
    addr_hit[ 674] = (reg_addr == SCMI_CHANNEL_FLAGS_C67_OFFSET);
    addr_hit[ 675] = (reg_addr == SCMI_LENGTH_C67_OFFSET);
    addr_hit[ 676] = (reg_addr == SCMI_MESSAGE_HEADER_C67_OFFSET);
    addr_hit[ 677] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C67_OFFSET);
    addr_hit[ 678] = (reg_addr == SCMI_DOORBELL_C67_OFFSET);
    addr_hit[ 679] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C67_OFFSET);
    addr_hit[ 680] = (reg_addr == SCMI_RESERVED_1_C68_OFFSET);
    addr_hit[ 681] = (reg_addr == SCMI_CHANNEL_STATUS_C68_OFFSET);
    addr_hit[ 682] = (reg_addr == SCMI_RESERVED_2_C68_OFFSET);
    addr_hit[ 683] = (reg_addr == SCMI_RESERVED_3_C68_OFFSET);
    addr_hit[ 684] = (reg_addr == SCMI_CHANNEL_FLAGS_C68_OFFSET);
    addr_hit[ 685] = (reg_addr == SCMI_LENGTH_C68_OFFSET);
    addr_hit[ 686] = (reg_addr == SCMI_MESSAGE_HEADER_C68_OFFSET);
    addr_hit[ 687] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C68_OFFSET);
    addr_hit[ 688] = (reg_addr == SCMI_DOORBELL_C68_OFFSET);
    addr_hit[ 689] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C68_OFFSET);
    addr_hit[ 690] = (reg_addr == SCMI_RESERVED_1_C69_OFFSET);
    addr_hit[ 691] = (reg_addr == SCMI_CHANNEL_STATUS_C69_OFFSET);
    addr_hit[ 692] = (reg_addr == SCMI_RESERVED_2_C69_OFFSET);
    addr_hit[ 693] = (reg_addr == SCMI_RESERVED_3_C69_OFFSET);
    addr_hit[ 694] = (reg_addr == SCMI_CHANNEL_FLAGS_C69_OFFSET);
    addr_hit[ 695] = (reg_addr == SCMI_LENGTH_C69_OFFSET);
    addr_hit[ 696] = (reg_addr == SCMI_MESSAGE_HEADER_C69_OFFSET);
    addr_hit[ 697] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C69_OFFSET);
    addr_hit[ 698] = (reg_addr == SCMI_DOORBELL_C69_OFFSET);
    addr_hit[ 699] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C69_OFFSET);
    addr_hit[ 700] = (reg_addr == SCMI_RESERVED_1_C70_OFFSET);
    addr_hit[ 701] = (reg_addr == SCMI_CHANNEL_STATUS_C70_OFFSET);
    addr_hit[ 702] = (reg_addr == SCMI_RESERVED_2_C70_OFFSET);
    addr_hit[ 703] = (reg_addr == SCMI_RESERVED_3_C70_OFFSET);
    addr_hit[ 704] = (reg_addr == SCMI_CHANNEL_FLAGS_C70_OFFSET);
    addr_hit[ 705] = (reg_addr == SCMI_LENGTH_C70_OFFSET);
    addr_hit[ 706] = (reg_addr == SCMI_MESSAGE_HEADER_C70_OFFSET);
    addr_hit[ 707] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C70_OFFSET);
    addr_hit[ 708] = (reg_addr == SCMI_DOORBELL_C70_OFFSET);
    addr_hit[ 709] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C70_OFFSET);
    addr_hit[ 710] = (reg_addr == SCMI_RESERVED_1_C71_OFFSET);
    addr_hit[ 711] = (reg_addr == SCMI_CHANNEL_STATUS_C71_OFFSET);
    addr_hit[ 712] = (reg_addr == SCMI_RESERVED_2_C71_OFFSET);
    addr_hit[ 713] = (reg_addr == SCMI_RESERVED_3_C71_OFFSET);
    addr_hit[ 714] = (reg_addr == SCMI_CHANNEL_FLAGS_C71_OFFSET);
    addr_hit[ 715] = (reg_addr == SCMI_LENGTH_C71_OFFSET);
    addr_hit[ 716] = (reg_addr == SCMI_MESSAGE_HEADER_C71_OFFSET);
    addr_hit[ 717] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C71_OFFSET);
    addr_hit[ 718] = (reg_addr == SCMI_DOORBELL_C71_OFFSET);
    addr_hit[ 719] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C71_OFFSET);
    addr_hit[ 720] = (reg_addr == SCMI_RESERVED_1_C72_OFFSET);
    addr_hit[ 721] = (reg_addr == SCMI_CHANNEL_STATUS_C72_OFFSET);
    addr_hit[ 722] = (reg_addr == SCMI_RESERVED_2_C72_OFFSET);
    addr_hit[ 723] = (reg_addr == SCMI_RESERVED_3_C72_OFFSET);
    addr_hit[ 724] = (reg_addr == SCMI_CHANNEL_FLAGS_C72_OFFSET);
    addr_hit[ 725] = (reg_addr == SCMI_LENGTH_C72_OFFSET);
    addr_hit[ 726] = (reg_addr == SCMI_MESSAGE_HEADER_C72_OFFSET);
    addr_hit[ 727] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C72_OFFSET);
    addr_hit[ 728] = (reg_addr == SCMI_DOORBELL_C72_OFFSET);
    addr_hit[ 729] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C72_OFFSET);
    addr_hit[ 730] = (reg_addr == SCMI_RESERVED_1_C73_OFFSET);
    addr_hit[ 731] = (reg_addr == SCMI_CHANNEL_STATUS_C73_OFFSET);
    addr_hit[ 732] = (reg_addr == SCMI_RESERVED_2_C73_OFFSET);
    addr_hit[ 733] = (reg_addr == SCMI_RESERVED_3_C73_OFFSET);
    addr_hit[ 734] = (reg_addr == SCMI_CHANNEL_FLAGS_C73_OFFSET);
    addr_hit[ 735] = (reg_addr == SCMI_LENGTH_C73_OFFSET);
    addr_hit[ 736] = (reg_addr == SCMI_MESSAGE_HEADER_C73_OFFSET);
    addr_hit[ 737] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C73_OFFSET);
    addr_hit[ 738] = (reg_addr == SCMI_DOORBELL_C73_OFFSET);
    addr_hit[ 739] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C73_OFFSET);
    addr_hit[ 740] = (reg_addr == SCMI_RESERVED_1_C74_OFFSET);
    addr_hit[ 741] = (reg_addr == SCMI_CHANNEL_STATUS_C74_OFFSET);
    addr_hit[ 742] = (reg_addr == SCMI_RESERVED_2_C74_OFFSET);
    addr_hit[ 743] = (reg_addr == SCMI_RESERVED_3_C74_OFFSET);
    addr_hit[ 744] = (reg_addr == SCMI_CHANNEL_FLAGS_C74_OFFSET);
    addr_hit[ 745] = (reg_addr == SCMI_LENGTH_C74_OFFSET);
    addr_hit[ 746] = (reg_addr == SCMI_MESSAGE_HEADER_C74_OFFSET);
    addr_hit[ 747] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C74_OFFSET);
    addr_hit[ 748] = (reg_addr == SCMI_DOORBELL_C74_OFFSET);
    addr_hit[ 749] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C74_OFFSET);
    addr_hit[ 750] = (reg_addr == SCMI_RESERVED_1_C75_OFFSET);
    addr_hit[ 751] = (reg_addr == SCMI_CHANNEL_STATUS_C75_OFFSET);
    addr_hit[ 752] = (reg_addr == SCMI_RESERVED_2_C75_OFFSET);
    addr_hit[ 753] = (reg_addr == SCMI_RESERVED_3_C75_OFFSET);
    addr_hit[ 754] = (reg_addr == SCMI_CHANNEL_FLAGS_C75_OFFSET);
    addr_hit[ 755] = (reg_addr == SCMI_LENGTH_C75_OFFSET);
    addr_hit[ 756] = (reg_addr == SCMI_MESSAGE_HEADER_C75_OFFSET);
    addr_hit[ 757] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C75_OFFSET);
    addr_hit[ 758] = (reg_addr == SCMI_DOORBELL_C75_OFFSET);
    addr_hit[ 759] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C75_OFFSET);
    addr_hit[ 760] = (reg_addr == SCMI_RESERVED_1_C76_OFFSET);
    addr_hit[ 761] = (reg_addr == SCMI_CHANNEL_STATUS_C76_OFFSET);
    addr_hit[ 762] = (reg_addr == SCMI_RESERVED_2_C76_OFFSET);
    addr_hit[ 763] = (reg_addr == SCMI_RESERVED_3_C76_OFFSET);
    addr_hit[ 764] = (reg_addr == SCMI_CHANNEL_FLAGS_C76_OFFSET);
    addr_hit[ 765] = (reg_addr == SCMI_LENGTH_C76_OFFSET);
    addr_hit[ 766] = (reg_addr == SCMI_MESSAGE_HEADER_C76_OFFSET);
    addr_hit[ 767] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C76_OFFSET);
    addr_hit[ 768] = (reg_addr == SCMI_DOORBELL_C76_OFFSET);
    addr_hit[ 769] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C76_OFFSET);
    addr_hit[ 770] = (reg_addr == SCMI_RESERVED_1_C77_OFFSET);
    addr_hit[ 771] = (reg_addr == SCMI_CHANNEL_STATUS_C77_OFFSET);
    addr_hit[ 772] = (reg_addr == SCMI_RESERVED_2_C77_OFFSET);
    addr_hit[ 773] = (reg_addr == SCMI_RESERVED_3_C77_OFFSET);
    addr_hit[ 774] = (reg_addr == SCMI_CHANNEL_FLAGS_C77_OFFSET);
    addr_hit[ 775] = (reg_addr == SCMI_LENGTH_C77_OFFSET);
    addr_hit[ 776] = (reg_addr == SCMI_MESSAGE_HEADER_C77_OFFSET);
    addr_hit[ 777] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C77_OFFSET);
    addr_hit[ 778] = (reg_addr == SCMI_DOORBELL_C77_OFFSET);
    addr_hit[ 779] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C77_OFFSET);
    addr_hit[ 780] = (reg_addr == SCMI_RESERVED_1_C78_OFFSET);
    addr_hit[ 781] = (reg_addr == SCMI_CHANNEL_STATUS_C78_OFFSET);
    addr_hit[ 782] = (reg_addr == SCMI_RESERVED_2_C78_OFFSET);
    addr_hit[ 783] = (reg_addr == SCMI_RESERVED_3_C78_OFFSET);
    addr_hit[ 784] = (reg_addr == SCMI_CHANNEL_FLAGS_C78_OFFSET);
    addr_hit[ 785] = (reg_addr == SCMI_LENGTH_C78_OFFSET);
    addr_hit[ 786] = (reg_addr == SCMI_MESSAGE_HEADER_C78_OFFSET);
    addr_hit[ 787] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C78_OFFSET);
    addr_hit[ 788] = (reg_addr == SCMI_DOORBELL_C78_OFFSET);
    addr_hit[ 789] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C78_OFFSET);
    addr_hit[ 790] = (reg_addr == SCMI_RESERVED_1_C79_OFFSET);
    addr_hit[ 791] = (reg_addr == SCMI_CHANNEL_STATUS_C79_OFFSET);
    addr_hit[ 792] = (reg_addr == SCMI_RESERVED_2_C79_OFFSET);
    addr_hit[ 793] = (reg_addr == SCMI_RESERVED_3_C79_OFFSET);
    addr_hit[ 794] = (reg_addr == SCMI_CHANNEL_FLAGS_C79_OFFSET);
    addr_hit[ 795] = (reg_addr == SCMI_LENGTH_C79_OFFSET);
    addr_hit[ 796] = (reg_addr == SCMI_MESSAGE_HEADER_C79_OFFSET);
    addr_hit[ 797] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C79_OFFSET);
    addr_hit[ 798] = (reg_addr == SCMI_DOORBELL_C79_OFFSET);
    addr_hit[ 799] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C79_OFFSET);
    addr_hit[ 800] = (reg_addr == SCMI_RESERVED_1_C80_OFFSET);
    addr_hit[ 801] = (reg_addr == SCMI_CHANNEL_STATUS_C80_OFFSET);
    addr_hit[ 802] = (reg_addr == SCMI_RESERVED_2_C80_OFFSET);
    addr_hit[ 803] = (reg_addr == SCMI_RESERVED_3_C80_OFFSET);
    addr_hit[ 804] = (reg_addr == SCMI_CHANNEL_FLAGS_C80_OFFSET);
    addr_hit[ 805] = (reg_addr == SCMI_LENGTH_C80_OFFSET);
    addr_hit[ 806] = (reg_addr == SCMI_MESSAGE_HEADER_C80_OFFSET);
    addr_hit[ 807] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C80_OFFSET);
    addr_hit[ 808] = (reg_addr == SCMI_DOORBELL_C80_OFFSET);
    addr_hit[ 809] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C80_OFFSET);
    addr_hit[ 810] = (reg_addr == SCMI_RESERVED_1_C81_OFFSET);
    addr_hit[ 811] = (reg_addr == SCMI_CHANNEL_STATUS_C81_OFFSET);
    addr_hit[ 812] = (reg_addr == SCMI_RESERVED_2_C81_OFFSET);
    addr_hit[ 813] = (reg_addr == SCMI_RESERVED_3_C81_OFFSET);
    addr_hit[ 814] = (reg_addr == SCMI_CHANNEL_FLAGS_C81_OFFSET);
    addr_hit[ 815] = (reg_addr == SCMI_LENGTH_C81_OFFSET);
    addr_hit[ 816] = (reg_addr == SCMI_MESSAGE_HEADER_C81_OFFSET);
    addr_hit[ 817] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C81_OFFSET);
    addr_hit[ 818] = (reg_addr == SCMI_DOORBELL_C81_OFFSET);
    addr_hit[ 819] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C81_OFFSET);
    addr_hit[ 820] = (reg_addr == SCMI_RESERVED_1_C82_OFFSET);
    addr_hit[ 821] = (reg_addr == SCMI_CHANNEL_STATUS_C82_OFFSET);
    addr_hit[ 822] = (reg_addr == SCMI_RESERVED_2_C82_OFFSET);
    addr_hit[ 823] = (reg_addr == SCMI_RESERVED_3_C82_OFFSET);
    addr_hit[ 824] = (reg_addr == SCMI_CHANNEL_FLAGS_C82_OFFSET);
    addr_hit[ 825] = (reg_addr == SCMI_LENGTH_C82_OFFSET);
    addr_hit[ 826] = (reg_addr == SCMI_MESSAGE_HEADER_C82_OFFSET);
    addr_hit[ 827] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C82_OFFSET);
    addr_hit[ 828] = (reg_addr == SCMI_DOORBELL_C82_OFFSET);
    addr_hit[ 829] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C82_OFFSET);
    addr_hit[ 830] = (reg_addr == SCMI_RESERVED_1_C83_OFFSET);
    addr_hit[ 831] = (reg_addr == SCMI_CHANNEL_STATUS_C83_OFFSET);
    addr_hit[ 832] = (reg_addr == SCMI_RESERVED_2_C83_OFFSET);
    addr_hit[ 833] = (reg_addr == SCMI_RESERVED_3_C83_OFFSET);
    addr_hit[ 834] = (reg_addr == SCMI_CHANNEL_FLAGS_C83_OFFSET);
    addr_hit[ 835] = (reg_addr == SCMI_LENGTH_C83_OFFSET);
    addr_hit[ 836] = (reg_addr == SCMI_MESSAGE_HEADER_C83_OFFSET);
    addr_hit[ 837] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C83_OFFSET);
    addr_hit[ 838] = (reg_addr == SCMI_DOORBELL_C83_OFFSET);
    addr_hit[ 839] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C83_OFFSET);
    addr_hit[ 840] = (reg_addr == SCMI_RESERVED_1_C84_OFFSET);
    addr_hit[ 841] = (reg_addr == SCMI_CHANNEL_STATUS_C84_OFFSET);
    addr_hit[ 842] = (reg_addr == SCMI_RESERVED_2_C84_OFFSET);
    addr_hit[ 843] = (reg_addr == SCMI_RESERVED_3_C84_OFFSET);
    addr_hit[ 844] = (reg_addr == SCMI_CHANNEL_FLAGS_C84_OFFSET);
    addr_hit[ 845] = (reg_addr == SCMI_LENGTH_C84_OFFSET);
    addr_hit[ 846] = (reg_addr == SCMI_MESSAGE_HEADER_C84_OFFSET);
    addr_hit[ 847] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C84_OFFSET);
    addr_hit[ 848] = (reg_addr == SCMI_DOORBELL_C84_OFFSET);
    addr_hit[ 849] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C84_OFFSET);
    addr_hit[ 850] = (reg_addr == SCMI_RESERVED_1_C85_OFFSET);
    addr_hit[ 851] = (reg_addr == SCMI_CHANNEL_STATUS_C85_OFFSET);
    addr_hit[ 852] = (reg_addr == SCMI_RESERVED_2_C85_OFFSET);
    addr_hit[ 853] = (reg_addr == SCMI_RESERVED_3_C85_OFFSET);
    addr_hit[ 854] = (reg_addr == SCMI_CHANNEL_FLAGS_C85_OFFSET);
    addr_hit[ 855] = (reg_addr == SCMI_LENGTH_C85_OFFSET);
    addr_hit[ 856] = (reg_addr == SCMI_MESSAGE_HEADER_C85_OFFSET);
    addr_hit[ 857] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C85_OFFSET);
    addr_hit[ 858] = (reg_addr == SCMI_DOORBELL_C85_OFFSET);
    addr_hit[ 859] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C85_OFFSET);
    addr_hit[ 860] = (reg_addr == SCMI_RESERVED_1_C86_OFFSET);
    addr_hit[ 861] = (reg_addr == SCMI_CHANNEL_STATUS_C86_OFFSET);
    addr_hit[ 862] = (reg_addr == SCMI_RESERVED_2_C86_OFFSET);
    addr_hit[ 863] = (reg_addr == SCMI_RESERVED_3_C86_OFFSET);
    addr_hit[ 864] = (reg_addr == SCMI_CHANNEL_FLAGS_C86_OFFSET);
    addr_hit[ 865] = (reg_addr == SCMI_LENGTH_C86_OFFSET);
    addr_hit[ 866] = (reg_addr == SCMI_MESSAGE_HEADER_C86_OFFSET);
    addr_hit[ 867] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C86_OFFSET);
    addr_hit[ 868] = (reg_addr == SCMI_DOORBELL_C86_OFFSET);
    addr_hit[ 869] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C86_OFFSET);
    addr_hit[ 870] = (reg_addr == SCMI_RESERVED_1_C87_OFFSET);
    addr_hit[ 871] = (reg_addr == SCMI_CHANNEL_STATUS_C87_OFFSET);
    addr_hit[ 872] = (reg_addr == SCMI_RESERVED_2_C87_OFFSET);
    addr_hit[ 873] = (reg_addr == SCMI_RESERVED_3_C87_OFFSET);
    addr_hit[ 874] = (reg_addr == SCMI_CHANNEL_FLAGS_C87_OFFSET);
    addr_hit[ 875] = (reg_addr == SCMI_LENGTH_C87_OFFSET);
    addr_hit[ 876] = (reg_addr == SCMI_MESSAGE_HEADER_C87_OFFSET);
    addr_hit[ 877] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C87_OFFSET);
    addr_hit[ 878] = (reg_addr == SCMI_DOORBELL_C87_OFFSET);
    addr_hit[ 879] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C87_OFFSET);
    addr_hit[ 880] = (reg_addr == SCMI_RESERVED_1_C88_OFFSET);
    addr_hit[ 881] = (reg_addr == SCMI_CHANNEL_STATUS_C88_OFFSET);
    addr_hit[ 882] = (reg_addr == SCMI_RESERVED_2_C88_OFFSET);
    addr_hit[ 883] = (reg_addr == SCMI_RESERVED_3_C88_OFFSET);
    addr_hit[ 884] = (reg_addr == SCMI_CHANNEL_FLAGS_C88_OFFSET);
    addr_hit[ 885] = (reg_addr == SCMI_LENGTH_C88_OFFSET);
    addr_hit[ 886] = (reg_addr == SCMI_MESSAGE_HEADER_C88_OFFSET);
    addr_hit[ 887] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C88_OFFSET);
    addr_hit[ 888] = (reg_addr == SCMI_DOORBELL_C88_OFFSET);
    addr_hit[ 889] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C88_OFFSET);
    addr_hit[ 890] = (reg_addr == SCMI_RESERVED_1_C89_OFFSET);
    addr_hit[ 891] = (reg_addr == SCMI_CHANNEL_STATUS_C89_OFFSET);
    addr_hit[ 892] = (reg_addr == SCMI_RESERVED_2_C89_OFFSET);
    addr_hit[ 893] = (reg_addr == SCMI_RESERVED_3_C89_OFFSET);
    addr_hit[ 894] = (reg_addr == SCMI_CHANNEL_FLAGS_C89_OFFSET);
    addr_hit[ 895] = (reg_addr == SCMI_LENGTH_C89_OFFSET);
    addr_hit[ 896] = (reg_addr == SCMI_MESSAGE_HEADER_C89_OFFSET);
    addr_hit[ 897] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C89_OFFSET);
    addr_hit[ 898] = (reg_addr == SCMI_DOORBELL_C89_OFFSET);
    addr_hit[ 899] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C89_OFFSET);
    addr_hit[ 900] = (reg_addr == SCMI_RESERVED_1_C90_OFFSET);
    addr_hit[ 901] = (reg_addr == SCMI_CHANNEL_STATUS_C90_OFFSET);
    addr_hit[ 902] = (reg_addr == SCMI_RESERVED_2_C90_OFFSET);
    addr_hit[ 903] = (reg_addr == SCMI_RESERVED_3_C90_OFFSET);
    addr_hit[ 904] = (reg_addr == SCMI_CHANNEL_FLAGS_C90_OFFSET);
    addr_hit[ 905] = (reg_addr == SCMI_LENGTH_C90_OFFSET);
    addr_hit[ 906] = (reg_addr == SCMI_MESSAGE_HEADER_C90_OFFSET);
    addr_hit[ 907] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C90_OFFSET);
    addr_hit[ 908] = (reg_addr == SCMI_DOORBELL_C90_OFFSET);
    addr_hit[ 909] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C90_OFFSET);
    addr_hit[ 910] = (reg_addr == SCMI_RESERVED_1_C91_OFFSET);
    addr_hit[ 911] = (reg_addr == SCMI_CHANNEL_STATUS_C91_OFFSET);
    addr_hit[ 912] = (reg_addr == SCMI_RESERVED_2_C91_OFFSET);
    addr_hit[ 913] = (reg_addr == SCMI_RESERVED_3_C91_OFFSET);
    addr_hit[ 914] = (reg_addr == SCMI_CHANNEL_FLAGS_C91_OFFSET);
    addr_hit[ 915] = (reg_addr == SCMI_LENGTH_C91_OFFSET);
    addr_hit[ 916] = (reg_addr == SCMI_MESSAGE_HEADER_C91_OFFSET);
    addr_hit[ 917] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C91_OFFSET);
    addr_hit[ 918] = (reg_addr == SCMI_DOORBELL_C91_OFFSET);
    addr_hit[ 919] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C91_OFFSET);
    addr_hit[ 920] = (reg_addr == SCMI_RESERVED_1_C92_OFFSET);
    addr_hit[ 921] = (reg_addr == SCMI_CHANNEL_STATUS_C92_OFFSET);
    addr_hit[ 922] = (reg_addr == SCMI_RESERVED_2_C92_OFFSET);
    addr_hit[ 923] = (reg_addr == SCMI_RESERVED_3_C92_OFFSET);
    addr_hit[ 924] = (reg_addr == SCMI_CHANNEL_FLAGS_C92_OFFSET);
    addr_hit[ 925] = (reg_addr == SCMI_LENGTH_C92_OFFSET);
    addr_hit[ 926] = (reg_addr == SCMI_MESSAGE_HEADER_C92_OFFSET);
    addr_hit[ 927] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C92_OFFSET);
    addr_hit[ 928] = (reg_addr == SCMI_DOORBELL_C92_OFFSET);
    addr_hit[ 929] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C92_OFFSET);
    addr_hit[ 930] = (reg_addr == SCMI_RESERVED_1_C93_OFFSET);
    addr_hit[ 931] = (reg_addr == SCMI_CHANNEL_STATUS_C93_OFFSET);
    addr_hit[ 932] = (reg_addr == SCMI_RESERVED_2_C93_OFFSET);
    addr_hit[ 933] = (reg_addr == SCMI_RESERVED_3_C93_OFFSET);
    addr_hit[ 934] = (reg_addr == SCMI_CHANNEL_FLAGS_C93_OFFSET);
    addr_hit[ 935] = (reg_addr == SCMI_LENGTH_C93_OFFSET);
    addr_hit[ 936] = (reg_addr == SCMI_MESSAGE_HEADER_C93_OFFSET);
    addr_hit[ 937] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C93_OFFSET);
    addr_hit[ 938] = (reg_addr == SCMI_DOORBELL_C93_OFFSET);
    addr_hit[ 939] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C93_OFFSET);
    addr_hit[ 940] = (reg_addr == SCMI_RESERVED_1_C94_OFFSET);
    addr_hit[ 941] = (reg_addr == SCMI_CHANNEL_STATUS_C94_OFFSET);
    addr_hit[ 942] = (reg_addr == SCMI_RESERVED_2_C94_OFFSET);
    addr_hit[ 943] = (reg_addr == SCMI_RESERVED_3_C94_OFFSET);
    addr_hit[ 944] = (reg_addr == SCMI_CHANNEL_FLAGS_C94_OFFSET);
    addr_hit[ 945] = (reg_addr == SCMI_LENGTH_C94_OFFSET);
    addr_hit[ 946] = (reg_addr == SCMI_MESSAGE_HEADER_C94_OFFSET);
    addr_hit[ 947] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C94_OFFSET);
    addr_hit[ 948] = (reg_addr == SCMI_DOORBELL_C94_OFFSET);
    addr_hit[ 949] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C94_OFFSET);
    addr_hit[ 950] = (reg_addr == SCMI_RESERVED_1_C95_OFFSET);
    addr_hit[ 951] = (reg_addr == SCMI_CHANNEL_STATUS_C95_OFFSET);
    addr_hit[ 952] = (reg_addr == SCMI_RESERVED_2_C95_OFFSET);
    addr_hit[ 953] = (reg_addr == SCMI_RESERVED_3_C95_OFFSET);
    addr_hit[ 954] = (reg_addr == SCMI_CHANNEL_FLAGS_C95_OFFSET);
    addr_hit[ 955] = (reg_addr == SCMI_LENGTH_C95_OFFSET);
    addr_hit[ 956] = (reg_addr == SCMI_MESSAGE_HEADER_C95_OFFSET);
    addr_hit[ 957] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C95_OFFSET);
    addr_hit[ 958] = (reg_addr == SCMI_DOORBELL_C95_OFFSET);
    addr_hit[ 959] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C95_OFFSET);
    addr_hit[ 960] = (reg_addr == SCMI_RESERVED_1_C96_OFFSET);
    addr_hit[ 961] = (reg_addr == SCMI_CHANNEL_STATUS_C96_OFFSET);
    addr_hit[ 962] = (reg_addr == SCMI_RESERVED_2_C96_OFFSET);
    addr_hit[ 963] = (reg_addr == SCMI_RESERVED_3_C96_OFFSET);
    addr_hit[ 964] = (reg_addr == SCMI_CHANNEL_FLAGS_C96_OFFSET);
    addr_hit[ 965] = (reg_addr == SCMI_LENGTH_C96_OFFSET);
    addr_hit[ 966] = (reg_addr == SCMI_MESSAGE_HEADER_C96_OFFSET);
    addr_hit[ 967] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C96_OFFSET);
    addr_hit[ 968] = (reg_addr == SCMI_DOORBELL_C96_OFFSET);
    addr_hit[ 969] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C96_OFFSET);
    addr_hit[ 970] = (reg_addr == SCMI_RESERVED_1_C97_OFFSET);
    addr_hit[ 971] = (reg_addr == SCMI_CHANNEL_STATUS_C97_OFFSET);
    addr_hit[ 972] = (reg_addr == SCMI_RESERVED_2_C97_OFFSET);
    addr_hit[ 973] = (reg_addr == SCMI_RESERVED_3_C97_OFFSET);
    addr_hit[ 974] = (reg_addr == SCMI_CHANNEL_FLAGS_C97_OFFSET);
    addr_hit[ 975] = (reg_addr == SCMI_LENGTH_C97_OFFSET);
    addr_hit[ 976] = (reg_addr == SCMI_MESSAGE_HEADER_C97_OFFSET);
    addr_hit[ 977] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C97_OFFSET);
    addr_hit[ 978] = (reg_addr == SCMI_DOORBELL_C97_OFFSET);
    addr_hit[ 979] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C97_OFFSET);
    addr_hit[ 980] = (reg_addr == SCMI_RESERVED_1_C98_OFFSET);
    addr_hit[ 981] = (reg_addr == SCMI_CHANNEL_STATUS_C98_OFFSET);
    addr_hit[ 982] = (reg_addr == SCMI_RESERVED_2_C98_OFFSET);
    addr_hit[ 983] = (reg_addr == SCMI_RESERVED_3_C98_OFFSET);
    addr_hit[ 984] = (reg_addr == SCMI_CHANNEL_FLAGS_C98_OFFSET);
    addr_hit[ 985] = (reg_addr == SCMI_LENGTH_C98_OFFSET);
    addr_hit[ 986] = (reg_addr == SCMI_MESSAGE_HEADER_C98_OFFSET);
    addr_hit[ 987] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C98_OFFSET);
    addr_hit[ 988] = (reg_addr == SCMI_DOORBELL_C98_OFFSET);
    addr_hit[ 989] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C98_OFFSET);
    addr_hit[ 990] = (reg_addr == SCMI_RESERVED_1_C99_OFFSET);
    addr_hit[ 991] = (reg_addr == SCMI_CHANNEL_STATUS_C99_OFFSET);
    addr_hit[ 992] = (reg_addr == SCMI_RESERVED_2_C99_OFFSET);
    addr_hit[ 993] = (reg_addr == SCMI_RESERVED_3_C99_OFFSET);
    addr_hit[ 994] = (reg_addr == SCMI_CHANNEL_FLAGS_C99_OFFSET);
    addr_hit[ 995] = (reg_addr == SCMI_LENGTH_C99_OFFSET);
    addr_hit[ 996] = (reg_addr == SCMI_MESSAGE_HEADER_C99_OFFSET);
    addr_hit[ 997] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C99_OFFSET);
    addr_hit[ 998] = (reg_addr == SCMI_DOORBELL_C99_OFFSET);
    addr_hit[ 999] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C99_OFFSET);
    addr_hit[1000] = (reg_addr == SCMI_RESERVED_1_C100_OFFSET);
    addr_hit[1001] = (reg_addr == SCMI_CHANNEL_STATUS_C100_OFFSET);
    addr_hit[1002] = (reg_addr == SCMI_RESERVED_2_C100_OFFSET);
    addr_hit[1003] = (reg_addr == SCMI_RESERVED_3_C100_OFFSET);
    addr_hit[1004] = (reg_addr == SCMI_CHANNEL_FLAGS_C100_OFFSET);
    addr_hit[1005] = (reg_addr == SCMI_LENGTH_C100_OFFSET);
    addr_hit[1006] = (reg_addr == SCMI_MESSAGE_HEADER_C100_OFFSET);
    addr_hit[1007] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C100_OFFSET);
    addr_hit[1008] = (reg_addr == SCMI_DOORBELL_C100_OFFSET);
    addr_hit[1009] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C100_OFFSET);
    addr_hit[1010] = (reg_addr == SCMI_RESERVED_1_C101_OFFSET);
    addr_hit[1011] = (reg_addr == SCMI_CHANNEL_STATUS_C101_OFFSET);
    addr_hit[1012] = (reg_addr == SCMI_RESERVED_2_C101_OFFSET);
    addr_hit[1013] = (reg_addr == SCMI_RESERVED_3_C101_OFFSET);
    addr_hit[1014] = (reg_addr == SCMI_CHANNEL_FLAGS_C101_OFFSET);
    addr_hit[1015] = (reg_addr == SCMI_LENGTH_C101_OFFSET);
    addr_hit[1016] = (reg_addr == SCMI_MESSAGE_HEADER_C101_OFFSET);
    addr_hit[1017] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C101_OFFSET);
    addr_hit[1018] = (reg_addr == SCMI_DOORBELL_C101_OFFSET);
    addr_hit[1019] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C101_OFFSET);
    addr_hit[1020] = (reg_addr == SCMI_RESERVED_1_C102_OFFSET);
    addr_hit[1021] = (reg_addr == SCMI_CHANNEL_STATUS_C102_OFFSET);
    addr_hit[1022] = (reg_addr == SCMI_RESERVED_2_C102_OFFSET);
    addr_hit[1023] = (reg_addr == SCMI_RESERVED_3_C102_OFFSET);
    addr_hit[1024] = (reg_addr == SCMI_CHANNEL_FLAGS_C102_OFFSET);
    addr_hit[1025] = (reg_addr == SCMI_LENGTH_C102_OFFSET);
    addr_hit[1026] = (reg_addr == SCMI_MESSAGE_HEADER_C102_OFFSET);
    addr_hit[1027] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C102_OFFSET);
    addr_hit[1028] = (reg_addr == SCMI_DOORBELL_C102_OFFSET);
    addr_hit[1029] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C102_OFFSET);
    addr_hit[1030] = (reg_addr == SCMI_RESERVED_1_C103_OFFSET);
    addr_hit[1031] = (reg_addr == SCMI_CHANNEL_STATUS_C103_OFFSET);
    addr_hit[1032] = (reg_addr == SCMI_RESERVED_2_C103_OFFSET);
    addr_hit[1033] = (reg_addr == SCMI_RESERVED_3_C103_OFFSET);
    addr_hit[1034] = (reg_addr == SCMI_CHANNEL_FLAGS_C103_OFFSET);
    addr_hit[1035] = (reg_addr == SCMI_LENGTH_C103_OFFSET);
    addr_hit[1036] = (reg_addr == SCMI_MESSAGE_HEADER_C103_OFFSET);
    addr_hit[1037] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C103_OFFSET);
    addr_hit[1038] = (reg_addr == SCMI_DOORBELL_C103_OFFSET);
    addr_hit[1039] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C103_OFFSET);
    addr_hit[1040] = (reg_addr == SCMI_RESERVED_1_C104_OFFSET);
    addr_hit[1041] = (reg_addr == SCMI_CHANNEL_STATUS_C104_OFFSET);
    addr_hit[1042] = (reg_addr == SCMI_RESERVED_2_C104_OFFSET);
    addr_hit[1043] = (reg_addr == SCMI_RESERVED_3_C104_OFFSET);
    addr_hit[1044] = (reg_addr == SCMI_CHANNEL_FLAGS_C104_OFFSET);
    addr_hit[1045] = (reg_addr == SCMI_LENGTH_C104_OFFSET);
    addr_hit[1046] = (reg_addr == SCMI_MESSAGE_HEADER_C104_OFFSET);
    addr_hit[1047] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C104_OFFSET);
    addr_hit[1048] = (reg_addr == SCMI_DOORBELL_C104_OFFSET);
    addr_hit[1049] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C104_OFFSET);
    addr_hit[1050] = (reg_addr == SCMI_RESERVED_1_C105_OFFSET);
    addr_hit[1051] = (reg_addr == SCMI_CHANNEL_STATUS_C105_OFFSET);
    addr_hit[1052] = (reg_addr == SCMI_RESERVED_2_C105_OFFSET);
    addr_hit[1053] = (reg_addr == SCMI_RESERVED_3_C105_OFFSET);
    addr_hit[1054] = (reg_addr == SCMI_CHANNEL_FLAGS_C105_OFFSET);
    addr_hit[1055] = (reg_addr == SCMI_LENGTH_C105_OFFSET);
    addr_hit[1056] = (reg_addr == SCMI_MESSAGE_HEADER_C105_OFFSET);
    addr_hit[1057] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C105_OFFSET);
    addr_hit[1058] = (reg_addr == SCMI_DOORBELL_C105_OFFSET);
    addr_hit[1059] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C105_OFFSET);
    addr_hit[1060] = (reg_addr == SCMI_RESERVED_1_C106_OFFSET);
    addr_hit[1061] = (reg_addr == SCMI_CHANNEL_STATUS_C106_OFFSET);
    addr_hit[1062] = (reg_addr == SCMI_RESERVED_2_C106_OFFSET);
    addr_hit[1063] = (reg_addr == SCMI_RESERVED_3_C106_OFFSET);
    addr_hit[1064] = (reg_addr == SCMI_CHANNEL_FLAGS_C106_OFFSET);
    addr_hit[1065] = (reg_addr == SCMI_LENGTH_C106_OFFSET);
    addr_hit[1066] = (reg_addr == SCMI_MESSAGE_HEADER_C106_OFFSET);
    addr_hit[1067] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C106_OFFSET);
    addr_hit[1068] = (reg_addr == SCMI_DOORBELL_C106_OFFSET);
    addr_hit[1069] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C106_OFFSET);
    addr_hit[1070] = (reg_addr == SCMI_RESERVED_1_C107_OFFSET);
    addr_hit[1071] = (reg_addr == SCMI_CHANNEL_STATUS_C107_OFFSET);
    addr_hit[1072] = (reg_addr == SCMI_RESERVED_2_C107_OFFSET);
    addr_hit[1073] = (reg_addr == SCMI_RESERVED_3_C107_OFFSET);
    addr_hit[1074] = (reg_addr == SCMI_CHANNEL_FLAGS_C107_OFFSET);
    addr_hit[1075] = (reg_addr == SCMI_LENGTH_C107_OFFSET);
    addr_hit[1076] = (reg_addr == SCMI_MESSAGE_HEADER_C107_OFFSET);
    addr_hit[1077] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C107_OFFSET);
    addr_hit[1078] = (reg_addr == SCMI_DOORBELL_C107_OFFSET);
    addr_hit[1079] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C107_OFFSET);
    addr_hit[1080] = (reg_addr == SCMI_RESERVED_1_C108_OFFSET);
    addr_hit[1081] = (reg_addr == SCMI_CHANNEL_STATUS_C108_OFFSET);
    addr_hit[1082] = (reg_addr == SCMI_RESERVED_2_C108_OFFSET);
    addr_hit[1083] = (reg_addr == SCMI_RESERVED_3_C108_OFFSET);
    addr_hit[1084] = (reg_addr == SCMI_CHANNEL_FLAGS_C108_OFFSET);
    addr_hit[1085] = (reg_addr == SCMI_LENGTH_C108_OFFSET);
    addr_hit[1086] = (reg_addr == SCMI_MESSAGE_HEADER_C108_OFFSET);
    addr_hit[1087] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C108_OFFSET);
    addr_hit[1088] = (reg_addr == SCMI_DOORBELL_C108_OFFSET);
    addr_hit[1089] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C108_OFFSET);
    addr_hit[1090] = (reg_addr == SCMI_RESERVED_1_C109_OFFSET);
    addr_hit[1091] = (reg_addr == SCMI_CHANNEL_STATUS_C109_OFFSET);
    addr_hit[1092] = (reg_addr == SCMI_RESERVED_2_C109_OFFSET);
    addr_hit[1093] = (reg_addr == SCMI_RESERVED_3_C109_OFFSET);
    addr_hit[1094] = (reg_addr == SCMI_CHANNEL_FLAGS_C109_OFFSET);
    addr_hit[1095] = (reg_addr == SCMI_LENGTH_C109_OFFSET);
    addr_hit[1096] = (reg_addr == SCMI_MESSAGE_HEADER_C109_OFFSET);
    addr_hit[1097] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C109_OFFSET);
    addr_hit[1098] = (reg_addr == SCMI_DOORBELL_C109_OFFSET);
    addr_hit[1099] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C109_OFFSET);
    addr_hit[1100] = (reg_addr == SCMI_RESERVED_1_C110_OFFSET);
    addr_hit[1101] = (reg_addr == SCMI_CHANNEL_STATUS_C110_OFFSET);
    addr_hit[1102] = (reg_addr == SCMI_RESERVED_2_C110_OFFSET);
    addr_hit[1103] = (reg_addr == SCMI_RESERVED_3_C110_OFFSET);
    addr_hit[1104] = (reg_addr == SCMI_CHANNEL_FLAGS_C110_OFFSET);
    addr_hit[1105] = (reg_addr == SCMI_LENGTH_C110_OFFSET);
    addr_hit[1106] = (reg_addr == SCMI_MESSAGE_HEADER_C110_OFFSET);
    addr_hit[1107] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C110_OFFSET);
    addr_hit[1108] = (reg_addr == SCMI_DOORBELL_C110_OFFSET);
    addr_hit[1109] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C110_OFFSET);
    addr_hit[1110] = (reg_addr == SCMI_RESERVED_1_C111_OFFSET);
    addr_hit[1111] = (reg_addr == SCMI_CHANNEL_STATUS_C111_OFFSET);
    addr_hit[1112] = (reg_addr == SCMI_RESERVED_2_C111_OFFSET);
    addr_hit[1113] = (reg_addr == SCMI_RESERVED_3_C111_OFFSET);
    addr_hit[1114] = (reg_addr == SCMI_CHANNEL_FLAGS_C111_OFFSET);
    addr_hit[1115] = (reg_addr == SCMI_LENGTH_C111_OFFSET);
    addr_hit[1116] = (reg_addr == SCMI_MESSAGE_HEADER_C111_OFFSET);
    addr_hit[1117] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C111_OFFSET);
    addr_hit[1118] = (reg_addr == SCMI_DOORBELL_C111_OFFSET);
    addr_hit[1119] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C111_OFFSET);
    addr_hit[1120] = (reg_addr == SCMI_RESERVED_1_C112_OFFSET);
    addr_hit[1121] = (reg_addr == SCMI_CHANNEL_STATUS_C112_OFFSET);
    addr_hit[1122] = (reg_addr == SCMI_RESERVED_2_C112_OFFSET);
    addr_hit[1123] = (reg_addr == SCMI_RESERVED_3_C112_OFFSET);
    addr_hit[1124] = (reg_addr == SCMI_CHANNEL_FLAGS_C112_OFFSET);
    addr_hit[1125] = (reg_addr == SCMI_LENGTH_C112_OFFSET);
    addr_hit[1126] = (reg_addr == SCMI_MESSAGE_HEADER_C112_OFFSET);
    addr_hit[1127] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C112_OFFSET);
    addr_hit[1128] = (reg_addr == SCMI_DOORBELL_C112_OFFSET);
    addr_hit[1129] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C112_OFFSET);
    addr_hit[1130] = (reg_addr == SCMI_RESERVED_1_C113_OFFSET);
    addr_hit[1131] = (reg_addr == SCMI_CHANNEL_STATUS_C113_OFFSET);
    addr_hit[1132] = (reg_addr == SCMI_RESERVED_2_C113_OFFSET);
    addr_hit[1133] = (reg_addr == SCMI_RESERVED_3_C113_OFFSET);
    addr_hit[1134] = (reg_addr == SCMI_CHANNEL_FLAGS_C113_OFFSET);
    addr_hit[1135] = (reg_addr == SCMI_LENGTH_C113_OFFSET);
    addr_hit[1136] = (reg_addr == SCMI_MESSAGE_HEADER_C113_OFFSET);
    addr_hit[1137] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C113_OFFSET);
    addr_hit[1138] = (reg_addr == SCMI_DOORBELL_C113_OFFSET);
    addr_hit[1139] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C113_OFFSET);
    addr_hit[1140] = (reg_addr == SCMI_RESERVED_1_C114_OFFSET);
    addr_hit[1141] = (reg_addr == SCMI_CHANNEL_STATUS_C114_OFFSET);
    addr_hit[1142] = (reg_addr == SCMI_RESERVED_2_C114_OFFSET);
    addr_hit[1143] = (reg_addr == SCMI_RESERVED_3_C114_OFFSET);
    addr_hit[1144] = (reg_addr == SCMI_CHANNEL_FLAGS_C114_OFFSET);
    addr_hit[1145] = (reg_addr == SCMI_LENGTH_C114_OFFSET);
    addr_hit[1146] = (reg_addr == SCMI_MESSAGE_HEADER_C114_OFFSET);
    addr_hit[1147] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C114_OFFSET);
    addr_hit[1148] = (reg_addr == SCMI_DOORBELL_C114_OFFSET);
    addr_hit[1149] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C114_OFFSET);
    addr_hit[1150] = (reg_addr == SCMI_RESERVED_1_C115_OFFSET);
    addr_hit[1151] = (reg_addr == SCMI_CHANNEL_STATUS_C115_OFFSET);
    addr_hit[1152] = (reg_addr == SCMI_RESERVED_2_C115_OFFSET);
    addr_hit[1153] = (reg_addr == SCMI_RESERVED_3_C115_OFFSET);
    addr_hit[1154] = (reg_addr == SCMI_CHANNEL_FLAGS_C115_OFFSET);
    addr_hit[1155] = (reg_addr == SCMI_LENGTH_C115_OFFSET);
    addr_hit[1156] = (reg_addr == SCMI_MESSAGE_HEADER_C115_OFFSET);
    addr_hit[1157] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C115_OFFSET);
    addr_hit[1158] = (reg_addr == SCMI_DOORBELL_C115_OFFSET);
    addr_hit[1159] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C115_OFFSET);
    addr_hit[1160] = (reg_addr == SCMI_RESERVED_1_C116_OFFSET);
    addr_hit[1161] = (reg_addr == SCMI_CHANNEL_STATUS_C116_OFFSET);
    addr_hit[1162] = (reg_addr == SCMI_RESERVED_2_C116_OFFSET);
    addr_hit[1163] = (reg_addr == SCMI_RESERVED_3_C116_OFFSET);
    addr_hit[1164] = (reg_addr == SCMI_CHANNEL_FLAGS_C116_OFFSET);
    addr_hit[1165] = (reg_addr == SCMI_LENGTH_C116_OFFSET);
    addr_hit[1166] = (reg_addr == SCMI_MESSAGE_HEADER_C116_OFFSET);
    addr_hit[1167] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C116_OFFSET);
    addr_hit[1168] = (reg_addr == SCMI_DOORBELL_C116_OFFSET);
    addr_hit[1169] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C116_OFFSET);
    addr_hit[1170] = (reg_addr == SCMI_RESERVED_1_C117_OFFSET);
    addr_hit[1171] = (reg_addr == SCMI_CHANNEL_STATUS_C117_OFFSET);
    addr_hit[1172] = (reg_addr == SCMI_RESERVED_2_C117_OFFSET);
    addr_hit[1173] = (reg_addr == SCMI_RESERVED_3_C117_OFFSET);
    addr_hit[1174] = (reg_addr == SCMI_CHANNEL_FLAGS_C117_OFFSET);
    addr_hit[1175] = (reg_addr == SCMI_LENGTH_C117_OFFSET);
    addr_hit[1176] = (reg_addr == SCMI_MESSAGE_HEADER_C117_OFFSET);
    addr_hit[1177] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C117_OFFSET);
    addr_hit[1178] = (reg_addr == SCMI_DOORBELL_C117_OFFSET);
    addr_hit[1179] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C117_OFFSET);
    addr_hit[1180] = (reg_addr == SCMI_RESERVED_1_C118_OFFSET);
    addr_hit[1181] = (reg_addr == SCMI_CHANNEL_STATUS_C118_OFFSET);
    addr_hit[1182] = (reg_addr == SCMI_RESERVED_2_C118_OFFSET);
    addr_hit[1183] = (reg_addr == SCMI_RESERVED_3_C118_OFFSET);
    addr_hit[1184] = (reg_addr == SCMI_CHANNEL_FLAGS_C118_OFFSET);
    addr_hit[1185] = (reg_addr == SCMI_LENGTH_C118_OFFSET);
    addr_hit[1186] = (reg_addr == SCMI_MESSAGE_HEADER_C118_OFFSET);
    addr_hit[1187] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C118_OFFSET);
    addr_hit[1188] = (reg_addr == SCMI_DOORBELL_C118_OFFSET);
    addr_hit[1189] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C118_OFFSET);
    addr_hit[1190] = (reg_addr == SCMI_RESERVED_1_C119_OFFSET);
    addr_hit[1191] = (reg_addr == SCMI_CHANNEL_STATUS_C119_OFFSET);
    addr_hit[1192] = (reg_addr == SCMI_RESERVED_2_C119_OFFSET);
    addr_hit[1193] = (reg_addr == SCMI_RESERVED_3_C119_OFFSET);
    addr_hit[1194] = (reg_addr == SCMI_CHANNEL_FLAGS_C119_OFFSET);
    addr_hit[1195] = (reg_addr == SCMI_LENGTH_C119_OFFSET);
    addr_hit[1196] = (reg_addr == SCMI_MESSAGE_HEADER_C119_OFFSET);
    addr_hit[1197] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C119_OFFSET);
    addr_hit[1198] = (reg_addr == SCMI_DOORBELL_C119_OFFSET);
    addr_hit[1199] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C119_OFFSET);
    addr_hit[1200] = (reg_addr == SCMI_RESERVED_1_C120_OFFSET);
    addr_hit[1201] = (reg_addr == SCMI_CHANNEL_STATUS_C120_OFFSET);
    addr_hit[1202] = (reg_addr == SCMI_RESERVED_2_C120_OFFSET);
    addr_hit[1203] = (reg_addr == SCMI_RESERVED_3_C120_OFFSET);
    addr_hit[1204] = (reg_addr == SCMI_CHANNEL_FLAGS_C120_OFFSET);
    addr_hit[1205] = (reg_addr == SCMI_LENGTH_C120_OFFSET);
    addr_hit[1206] = (reg_addr == SCMI_MESSAGE_HEADER_C120_OFFSET);
    addr_hit[1207] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C120_OFFSET);
    addr_hit[1208] = (reg_addr == SCMI_DOORBELL_C120_OFFSET);
    addr_hit[1209] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C120_OFFSET);
    addr_hit[1210] = (reg_addr == SCMI_RESERVED_1_C121_OFFSET);
    addr_hit[1211] = (reg_addr == SCMI_CHANNEL_STATUS_C121_OFFSET);
    addr_hit[1212] = (reg_addr == SCMI_RESERVED_2_C121_OFFSET);
    addr_hit[1213] = (reg_addr == SCMI_RESERVED_3_C121_OFFSET);
    addr_hit[1214] = (reg_addr == SCMI_CHANNEL_FLAGS_C121_OFFSET);
    addr_hit[1215] = (reg_addr == SCMI_LENGTH_C121_OFFSET);
    addr_hit[1216] = (reg_addr == SCMI_MESSAGE_HEADER_C121_OFFSET);
    addr_hit[1217] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C121_OFFSET);
    addr_hit[1218] = (reg_addr == SCMI_DOORBELL_C121_OFFSET);
    addr_hit[1219] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C121_OFFSET);
    addr_hit[1220] = (reg_addr == SCMI_RESERVED_1_C122_OFFSET);
    addr_hit[1221] = (reg_addr == SCMI_CHANNEL_STATUS_C122_OFFSET);
    addr_hit[1222] = (reg_addr == SCMI_RESERVED_2_C122_OFFSET);
    addr_hit[1223] = (reg_addr == SCMI_RESERVED_3_C122_OFFSET);
    addr_hit[1224] = (reg_addr == SCMI_CHANNEL_FLAGS_C122_OFFSET);
    addr_hit[1225] = (reg_addr == SCMI_LENGTH_C122_OFFSET);
    addr_hit[1226] = (reg_addr == SCMI_MESSAGE_HEADER_C122_OFFSET);
    addr_hit[1227] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C122_OFFSET);
    addr_hit[1228] = (reg_addr == SCMI_DOORBELL_C122_OFFSET);
    addr_hit[1229] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C122_OFFSET);
    addr_hit[1230] = (reg_addr == SCMI_RESERVED_1_C123_OFFSET);
    addr_hit[1231] = (reg_addr == SCMI_CHANNEL_STATUS_C123_OFFSET);
    addr_hit[1232] = (reg_addr == SCMI_RESERVED_2_C123_OFFSET);
    addr_hit[1233] = (reg_addr == SCMI_RESERVED_3_C123_OFFSET);
    addr_hit[1234] = (reg_addr == SCMI_CHANNEL_FLAGS_C123_OFFSET);
    addr_hit[1235] = (reg_addr == SCMI_LENGTH_C123_OFFSET);
    addr_hit[1236] = (reg_addr == SCMI_MESSAGE_HEADER_C123_OFFSET);
    addr_hit[1237] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C123_OFFSET);
    addr_hit[1238] = (reg_addr == SCMI_DOORBELL_C123_OFFSET);
    addr_hit[1239] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C123_OFFSET);
    addr_hit[1240] = (reg_addr == SCMI_RESERVED_1_C124_OFFSET);
    addr_hit[1241] = (reg_addr == SCMI_CHANNEL_STATUS_C124_OFFSET);
    addr_hit[1242] = (reg_addr == SCMI_RESERVED_2_C124_OFFSET);
    addr_hit[1243] = (reg_addr == SCMI_RESERVED_3_C124_OFFSET);
    addr_hit[1244] = (reg_addr == SCMI_CHANNEL_FLAGS_C124_OFFSET);
    addr_hit[1245] = (reg_addr == SCMI_LENGTH_C124_OFFSET);
    addr_hit[1246] = (reg_addr == SCMI_MESSAGE_HEADER_C124_OFFSET);
    addr_hit[1247] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C124_OFFSET);
    addr_hit[1248] = (reg_addr == SCMI_DOORBELL_C124_OFFSET);
    addr_hit[1249] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C124_OFFSET);
    addr_hit[1250] = (reg_addr == SCMI_RESERVED_1_C125_OFFSET);
    addr_hit[1251] = (reg_addr == SCMI_CHANNEL_STATUS_C125_OFFSET);
    addr_hit[1252] = (reg_addr == SCMI_RESERVED_2_C125_OFFSET);
    addr_hit[1253] = (reg_addr == SCMI_RESERVED_3_C125_OFFSET);
    addr_hit[1254] = (reg_addr == SCMI_CHANNEL_FLAGS_C125_OFFSET);
    addr_hit[1255] = (reg_addr == SCMI_LENGTH_C125_OFFSET);
    addr_hit[1256] = (reg_addr == SCMI_MESSAGE_HEADER_C125_OFFSET);
    addr_hit[1257] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C125_OFFSET);
    addr_hit[1258] = (reg_addr == SCMI_DOORBELL_C125_OFFSET);
    addr_hit[1259] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C125_OFFSET);
    addr_hit[1260] = (reg_addr == SCMI_RESERVED_1_C126_OFFSET);
    addr_hit[1261] = (reg_addr == SCMI_CHANNEL_STATUS_C126_OFFSET);
    addr_hit[1262] = (reg_addr == SCMI_RESERVED_2_C126_OFFSET);
    addr_hit[1263] = (reg_addr == SCMI_RESERVED_3_C126_OFFSET);
    addr_hit[1264] = (reg_addr == SCMI_CHANNEL_FLAGS_C126_OFFSET);
    addr_hit[1265] = (reg_addr == SCMI_LENGTH_C126_OFFSET);
    addr_hit[1266] = (reg_addr == SCMI_MESSAGE_HEADER_C126_OFFSET);
    addr_hit[1267] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C126_OFFSET);
    addr_hit[1268] = (reg_addr == SCMI_DOORBELL_C126_OFFSET);
    addr_hit[1269] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C126_OFFSET);
    addr_hit[1270] = (reg_addr == SCMI_RESERVED_1_C127_OFFSET);
    addr_hit[1271] = (reg_addr == SCMI_CHANNEL_STATUS_C127_OFFSET);
    addr_hit[1272] = (reg_addr == SCMI_RESERVED_2_C127_OFFSET);
    addr_hit[1273] = (reg_addr == SCMI_RESERVED_3_C127_OFFSET);
    addr_hit[1274] = (reg_addr == SCMI_CHANNEL_FLAGS_C127_OFFSET);
    addr_hit[1275] = (reg_addr == SCMI_LENGTH_C127_OFFSET);
    addr_hit[1276] = (reg_addr == SCMI_MESSAGE_HEADER_C127_OFFSET);
    addr_hit[1277] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C127_OFFSET);
    addr_hit[1278] = (reg_addr == SCMI_DOORBELL_C127_OFFSET);
    addr_hit[1279] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C127_OFFSET);
    addr_hit[1280] = (reg_addr == SCMI_RESERVED_1_C128_OFFSET);
    addr_hit[1281] = (reg_addr == SCMI_CHANNEL_STATUS_C128_OFFSET);
    addr_hit[1282] = (reg_addr == SCMI_RESERVED_2_C128_OFFSET);
    addr_hit[1283] = (reg_addr == SCMI_RESERVED_3_C128_OFFSET);
    addr_hit[1284] = (reg_addr == SCMI_CHANNEL_FLAGS_C128_OFFSET);
    addr_hit[1285] = (reg_addr == SCMI_LENGTH_C128_OFFSET);
    addr_hit[1286] = (reg_addr == SCMI_MESSAGE_HEADER_C128_OFFSET);
    addr_hit[1287] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C128_OFFSET);
    addr_hit[1288] = (reg_addr == SCMI_DOORBELL_C128_OFFSET);
    addr_hit[1289] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C128_OFFSET);
    addr_hit[1290] = (reg_addr == SCMI_RESERVED_1_C129_OFFSET);
    addr_hit[1291] = (reg_addr == SCMI_CHANNEL_STATUS_C129_OFFSET);
    addr_hit[1292] = (reg_addr == SCMI_RESERVED_2_C129_OFFSET);
    addr_hit[1293] = (reg_addr == SCMI_RESERVED_3_C129_OFFSET);
    addr_hit[1294] = (reg_addr == SCMI_CHANNEL_FLAGS_C129_OFFSET);
    addr_hit[1295] = (reg_addr == SCMI_LENGTH_C129_OFFSET);
    addr_hit[1296] = (reg_addr == SCMI_MESSAGE_HEADER_C129_OFFSET);
    addr_hit[1297] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C129_OFFSET);
    addr_hit[1298] = (reg_addr == SCMI_DOORBELL_C129_OFFSET);
    addr_hit[1299] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C129_OFFSET);
    addr_hit[1300] = (reg_addr == SCMI_RESERVED_1_C130_OFFSET);
    addr_hit[1301] = (reg_addr == SCMI_CHANNEL_STATUS_C130_OFFSET);
    addr_hit[1302] = (reg_addr == SCMI_RESERVED_2_C130_OFFSET);
    addr_hit[1303] = (reg_addr == SCMI_RESERVED_3_C130_OFFSET);
    addr_hit[1304] = (reg_addr == SCMI_CHANNEL_FLAGS_C130_OFFSET);
    addr_hit[1305] = (reg_addr == SCMI_LENGTH_C130_OFFSET);
    addr_hit[1306] = (reg_addr == SCMI_MESSAGE_HEADER_C130_OFFSET);
    addr_hit[1307] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C130_OFFSET);
    addr_hit[1308] = (reg_addr == SCMI_DOORBELL_C130_OFFSET);
    addr_hit[1309] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C130_OFFSET);
    addr_hit[1310] = (reg_addr == SCMI_RESERVED_1_C131_OFFSET);
    addr_hit[1311] = (reg_addr == SCMI_CHANNEL_STATUS_C131_OFFSET);
    addr_hit[1312] = (reg_addr == SCMI_RESERVED_2_C131_OFFSET);
    addr_hit[1313] = (reg_addr == SCMI_RESERVED_3_C131_OFFSET);
    addr_hit[1314] = (reg_addr == SCMI_CHANNEL_FLAGS_C131_OFFSET);
    addr_hit[1315] = (reg_addr == SCMI_LENGTH_C131_OFFSET);
    addr_hit[1316] = (reg_addr == SCMI_MESSAGE_HEADER_C131_OFFSET);
    addr_hit[1317] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C131_OFFSET);
    addr_hit[1318] = (reg_addr == SCMI_DOORBELL_C131_OFFSET);
    addr_hit[1319] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C131_OFFSET);
    addr_hit[1320] = (reg_addr == SCMI_RESERVED_1_C132_OFFSET);
    addr_hit[1321] = (reg_addr == SCMI_CHANNEL_STATUS_C132_OFFSET);
    addr_hit[1322] = (reg_addr == SCMI_RESERVED_2_C132_OFFSET);
    addr_hit[1323] = (reg_addr == SCMI_RESERVED_3_C132_OFFSET);
    addr_hit[1324] = (reg_addr == SCMI_CHANNEL_FLAGS_C132_OFFSET);
    addr_hit[1325] = (reg_addr == SCMI_LENGTH_C132_OFFSET);
    addr_hit[1326] = (reg_addr == SCMI_MESSAGE_HEADER_C132_OFFSET);
    addr_hit[1327] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C132_OFFSET);
    addr_hit[1328] = (reg_addr == SCMI_DOORBELL_C132_OFFSET);
    addr_hit[1329] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C132_OFFSET);
    addr_hit[1330] = (reg_addr == SCMI_RESERVED_1_C133_OFFSET);
    addr_hit[1331] = (reg_addr == SCMI_CHANNEL_STATUS_C133_OFFSET);
    addr_hit[1332] = (reg_addr == SCMI_RESERVED_2_C133_OFFSET);
    addr_hit[1333] = (reg_addr == SCMI_RESERVED_3_C133_OFFSET);
    addr_hit[1334] = (reg_addr == SCMI_CHANNEL_FLAGS_C133_OFFSET);
    addr_hit[1335] = (reg_addr == SCMI_LENGTH_C133_OFFSET);
    addr_hit[1336] = (reg_addr == SCMI_MESSAGE_HEADER_C133_OFFSET);
    addr_hit[1337] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C133_OFFSET);
    addr_hit[1338] = (reg_addr == SCMI_DOORBELL_C133_OFFSET);
    addr_hit[1339] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C133_OFFSET);
    addr_hit[1340] = (reg_addr == SCMI_RESERVED_1_C134_OFFSET);
    addr_hit[1341] = (reg_addr == SCMI_CHANNEL_STATUS_C134_OFFSET);
    addr_hit[1342] = (reg_addr == SCMI_RESERVED_2_C134_OFFSET);
    addr_hit[1343] = (reg_addr == SCMI_RESERVED_3_C134_OFFSET);
    addr_hit[1344] = (reg_addr == SCMI_CHANNEL_FLAGS_C134_OFFSET);
    addr_hit[1345] = (reg_addr == SCMI_LENGTH_C134_OFFSET);
    addr_hit[1346] = (reg_addr == SCMI_MESSAGE_HEADER_C134_OFFSET);
    addr_hit[1347] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C134_OFFSET);
    addr_hit[1348] = (reg_addr == SCMI_DOORBELL_C134_OFFSET);
    addr_hit[1349] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C134_OFFSET);
    addr_hit[1350] = (reg_addr == SCMI_RESERVED_1_C135_OFFSET);
    addr_hit[1351] = (reg_addr == SCMI_CHANNEL_STATUS_C135_OFFSET);
    addr_hit[1352] = (reg_addr == SCMI_RESERVED_2_C135_OFFSET);
    addr_hit[1353] = (reg_addr == SCMI_RESERVED_3_C135_OFFSET);
    addr_hit[1354] = (reg_addr == SCMI_CHANNEL_FLAGS_C135_OFFSET);
    addr_hit[1355] = (reg_addr == SCMI_LENGTH_C135_OFFSET);
    addr_hit[1356] = (reg_addr == SCMI_MESSAGE_HEADER_C135_OFFSET);
    addr_hit[1357] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C135_OFFSET);
    addr_hit[1358] = (reg_addr == SCMI_DOORBELL_C135_OFFSET);
    addr_hit[1359] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C135_OFFSET);
    addr_hit[1360] = (reg_addr == SCMI_RESERVED_1_C136_OFFSET);
    addr_hit[1361] = (reg_addr == SCMI_CHANNEL_STATUS_C136_OFFSET);
    addr_hit[1362] = (reg_addr == SCMI_RESERVED_2_C136_OFFSET);
    addr_hit[1363] = (reg_addr == SCMI_RESERVED_3_C136_OFFSET);
    addr_hit[1364] = (reg_addr == SCMI_CHANNEL_FLAGS_C136_OFFSET);
    addr_hit[1365] = (reg_addr == SCMI_LENGTH_C136_OFFSET);
    addr_hit[1366] = (reg_addr == SCMI_MESSAGE_HEADER_C136_OFFSET);
    addr_hit[1367] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C136_OFFSET);
    addr_hit[1368] = (reg_addr == SCMI_DOORBELL_C136_OFFSET);
    addr_hit[1369] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C136_OFFSET);
    addr_hit[1370] = (reg_addr == SCMI_RESERVED_1_C137_OFFSET);
    addr_hit[1371] = (reg_addr == SCMI_CHANNEL_STATUS_C137_OFFSET);
    addr_hit[1372] = (reg_addr == SCMI_RESERVED_2_C137_OFFSET);
    addr_hit[1373] = (reg_addr == SCMI_RESERVED_3_C137_OFFSET);
    addr_hit[1374] = (reg_addr == SCMI_CHANNEL_FLAGS_C137_OFFSET);
    addr_hit[1375] = (reg_addr == SCMI_LENGTH_C137_OFFSET);
    addr_hit[1376] = (reg_addr == SCMI_MESSAGE_HEADER_C137_OFFSET);
    addr_hit[1377] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C137_OFFSET);
    addr_hit[1378] = (reg_addr == SCMI_DOORBELL_C137_OFFSET);
    addr_hit[1379] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C137_OFFSET);
    addr_hit[1380] = (reg_addr == SCMI_RESERVED_1_C138_OFFSET);
    addr_hit[1381] = (reg_addr == SCMI_CHANNEL_STATUS_C138_OFFSET);
    addr_hit[1382] = (reg_addr == SCMI_RESERVED_2_C138_OFFSET);
    addr_hit[1383] = (reg_addr == SCMI_RESERVED_3_C138_OFFSET);
    addr_hit[1384] = (reg_addr == SCMI_CHANNEL_FLAGS_C138_OFFSET);
    addr_hit[1385] = (reg_addr == SCMI_LENGTH_C138_OFFSET);
    addr_hit[1386] = (reg_addr == SCMI_MESSAGE_HEADER_C138_OFFSET);
    addr_hit[1387] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C138_OFFSET);
    addr_hit[1388] = (reg_addr == SCMI_DOORBELL_C138_OFFSET);
    addr_hit[1389] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C138_OFFSET);
    addr_hit[1390] = (reg_addr == SCMI_RESERVED_1_C139_OFFSET);
    addr_hit[1391] = (reg_addr == SCMI_CHANNEL_STATUS_C139_OFFSET);
    addr_hit[1392] = (reg_addr == SCMI_RESERVED_2_C139_OFFSET);
    addr_hit[1393] = (reg_addr == SCMI_RESERVED_3_C139_OFFSET);
    addr_hit[1394] = (reg_addr == SCMI_CHANNEL_FLAGS_C139_OFFSET);
    addr_hit[1395] = (reg_addr == SCMI_LENGTH_C139_OFFSET);
    addr_hit[1396] = (reg_addr == SCMI_MESSAGE_HEADER_C139_OFFSET);
    addr_hit[1397] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C139_OFFSET);
    addr_hit[1398] = (reg_addr == SCMI_DOORBELL_C139_OFFSET);
    addr_hit[1399] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C139_OFFSET);
    addr_hit[1400] = (reg_addr == SCMI_RESERVED_1_C140_OFFSET);
    addr_hit[1401] = (reg_addr == SCMI_CHANNEL_STATUS_C140_OFFSET);
    addr_hit[1402] = (reg_addr == SCMI_RESERVED_2_C140_OFFSET);
    addr_hit[1403] = (reg_addr == SCMI_RESERVED_3_C140_OFFSET);
    addr_hit[1404] = (reg_addr == SCMI_CHANNEL_FLAGS_C140_OFFSET);
    addr_hit[1405] = (reg_addr == SCMI_LENGTH_C140_OFFSET);
    addr_hit[1406] = (reg_addr == SCMI_MESSAGE_HEADER_C140_OFFSET);
    addr_hit[1407] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C140_OFFSET);
    addr_hit[1408] = (reg_addr == SCMI_DOORBELL_C140_OFFSET);
    addr_hit[1409] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C140_OFFSET);
    addr_hit[1410] = (reg_addr == SCMI_RESERVED_1_C141_OFFSET);
    addr_hit[1411] = (reg_addr == SCMI_CHANNEL_STATUS_C141_OFFSET);
    addr_hit[1412] = (reg_addr == SCMI_RESERVED_2_C141_OFFSET);
    addr_hit[1413] = (reg_addr == SCMI_RESERVED_3_C141_OFFSET);
    addr_hit[1414] = (reg_addr == SCMI_CHANNEL_FLAGS_C141_OFFSET);
    addr_hit[1415] = (reg_addr == SCMI_LENGTH_C141_OFFSET);
    addr_hit[1416] = (reg_addr == SCMI_MESSAGE_HEADER_C141_OFFSET);
    addr_hit[1417] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C141_OFFSET);
    addr_hit[1418] = (reg_addr == SCMI_DOORBELL_C141_OFFSET);
    addr_hit[1419] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C141_OFFSET);
    addr_hit[1420] = (reg_addr == SCMI_RESERVED_1_C142_OFFSET);
    addr_hit[1421] = (reg_addr == SCMI_CHANNEL_STATUS_C142_OFFSET);
    addr_hit[1422] = (reg_addr == SCMI_RESERVED_2_C142_OFFSET);
    addr_hit[1423] = (reg_addr == SCMI_RESERVED_3_C142_OFFSET);
    addr_hit[1424] = (reg_addr == SCMI_CHANNEL_FLAGS_C142_OFFSET);
    addr_hit[1425] = (reg_addr == SCMI_LENGTH_C142_OFFSET);
    addr_hit[1426] = (reg_addr == SCMI_MESSAGE_HEADER_C142_OFFSET);
    addr_hit[1427] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C142_OFFSET);
    addr_hit[1428] = (reg_addr == SCMI_DOORBELL_C142_OFFSET);
    addr_hit[1429] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C142_OFFSET);
    addr_hit[1430] = (reg_addr == SCMI_RESERVED_1_C143_OFFSET);
    addr_hit[1431] = (reg_addr == SCMI_CHANNEL_STATUS_C143_OFFSET);
    addr_hit[1432] = (reg_addr == SCMI_RESERVED_2_C143_OFFSET);
    addr_hit[1433] = (reg_addr == SCMI_RESERVED_3_C143_OFFSET);
    addr_hit[1434] = (reg_addr == SCMI_CHANNEL_FLAGS_C143_OFFSET);
    addr_hit[1435] = (reg_addr == SCMI_LENGTH_C143_OFFSET);
    addr_hit[1436] = (reg_addr == SCMI_MESSAGE_HEADER_C143_OFFSET);
    addr_hit[1437] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C143_OFFSET);
    addr_hit[1438] = (reg_addr == SCMI_DOORBELL_C143_OFFSET);
    addr_hit[1439] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C143_OFFSET);
    addr_hit[1440] = (reg_addr == SCMI_RESERVED_1_C144_OFFSET);
    addr_hit[1441] = (reg_addr == SCMI_CHANNEL_STATUS_C144_OFFSET);
    addr_hit[1442] = (reg_addr == SCMI_RESERVED_2_C144_OFFSET);
    addr_hit[1443] = (reg_addr == SCMI_RESERVED_3_C144_OFFSET);
    addr_hit[1444] = (reg_addr == SCMI_CHANNEL_FLAGS_C144_OFFSET);
    addr_hit[1445] = (reg_addr == SCMI_LENGTH_C144_OFFSET);
    addr_hit[1446] = (reg_addr == SCMI_MESSAGE_HEADER_C144_OFFSET);
    addr_hit[1447] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C144_OFFSET);
    addr_hit[1448] = (reg_addr == SCMI_DOORBELL_C144_OFFSET);
    addr_hit[1449] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C144_OFFSET);
    addr_hit[1450] = (reg_addr == SCMI_RESERVED_1_C145_OFFSET);
    addr_hit[1451] = (reg_addr == SCMI_CHANNEL_STATUS_C145_OFFSET);
    addr_hit[1452] = (reg_addr == SCMI_RESERVED_2_C145_OFFSET);
    addr_hit[1453] = (reg_addr == SCMI_RESERVED_3_C145_OFFSET);
    addr_hit[1454] = (reg_addr == SCMI_CHANNEL_FLAGS_C145_OFFSET);
    addr_hit[1455] = (reg_addr == SCMI_LENGTH_C145_OFFSET);
    addr_hit[1456] = (reg_addr == SCMI_MESSAGE_HEADER_C145_OFFSET);
    addr_hit[1457] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C145_OFFSET);
    addr_hit[1458] = (reg_addr == SCMI_DOORBELL_C145_OFFSET);
    addr_hit[1459] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C145_OFFSET);
    addr_hit[1460] = (reg_addr == SCMI_RESERVED_1_C146_OFFSET);
    addr_hit[1461] = (reg_addr == SCMI_CHANNEL_STATUS_C146_OFFSET);
    addr_hit[1462] = (reg_addr == SCMI_RESERVED_2_C146_OFFSET);
    addr_hit[1463] = (reg_addr == SCMI_RESERVED_3_C146_OFFSET);
    addr_hit[1464] = (reg_addr == SCMI_CHANNEL_FLAGS_C146_OFFSET);
    addr_hit[1465] = (reg_addr == SCMI_LENGTH_C146_OFFSET);
    addr_hit[1466] = (reg_addr == SCMI_MESSAGE_HEADER_C146_OFFSET);
    addr_hit[1467] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C146_OFFSET);
    addr_hit[1468] = (reg_addr == SCMI_DOORBELL_C146_OFFSET);
    addr_hit[1469] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C146_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[   0] & (|(SCMI_PERMIT[   0] & ~reg_be))) |
               (addr_hit[   1] & (|(SCMI_PERMIT[   1] & ~reg_be))) |
               (addr_hit[   2] & (|(SCMI_PERMIT[   2] & ~reg_be))) |
               (addr_hit[   3] & (|(SCMI_PERMIT[   3] & ~reg_be))) |
               (addr_hit[   4] & (|(SCMI_PERMIT[   4] & ~reg_be))) |
               (addr_hit[   5] & (|(SCMI_PERMIT[   5] & ~reg_be))) |
               (addr_hit[   6] & (|(SCMI_PERMIT[   6] & ~reg_be))) |
               (addr_hit[   7] & (|(SCMI_PERMIT[   7] & ~reg_be))) |
               (addr_hit[   8] & (|(SCMI_PERMIT[   8] & ~reg_be))) |
               (addr_hit[   9] & (|(SCMI_PERMIT[   9] & ~reg_be))) |
               (addr_hit[  10] & (|(SCMI_PERMIT[  10] & ~reg_be))) |
               (addr_hit[  11] & (|(SCMI_PERMIT[  11] & ~reg_be))) |
               (addr_hit[  12] & (|(SCMI_PERMIT[  12] & ~reg_be))) |
               (addr_hit[  13] & (|(SCMI_PERMIT[  13] & ~reg_be))) |
               (addr_hit[  14] & (|(SCMI_PERMIT[  14] & ~reg_be))) |
               (addr_hit[  15] & (|(SCMI_PERMIT[  15] & ~reg_be))) |
               (addr_hit[  16] & (|(SCMI_PERMIT[  16] & ~reg_be))) |
               (addr_hit[  17] & (|(SCMI_PERMIT[  17] & ~reg_be))) |
               (addr_hit[  18] & (|(SCMI_PERMIT[  18] & ~reg_be))) |
               (addr_hit[  19] & (|(SCMI_PERMIT[  19] & ~reg_be))) |
               (addr_hit[  20] & (|(SCMI_PERMIT[  20] & ~reg_be))) |
               (addr_hit[  21] & (|(SCMI_PERMIT[  21] & ~reg_be))) |
               (addr_hit[  22] & (|(SCMI_PERMIT[  22] & ~reg_be))) |
               (addr_hit[  23] & (|(SCMI_PERMIT[  23] & ~reg_be))) |
               (addr_hit[  24] & (|(SCMI_PERMIT[  24] & ~reg_be))) |
               (addr_hit[  25] & (|(SCMI_PERMIT[  25] & ~reg_be))) |
               (addr_hit[  26] & (|(SCMI_PERMIT[  26] & ~reg_be))) |
               (addr_hit[  27] & (|(SCMI_PERMIT[  27] & ~reg_be))) |
               (addr_hit[  28] & (|(SCMI_PERMIT[  28] & ~reg_be))) |
               (addr_hit[  29] & (|(SCMI_PERMIT[  29] & ~reg_be))) |
               (addr_hit[  30] & (|(SCMI_PERMIT[  30] & ~reg_be))) |
               (addr_hit[  31] & (|(SCMI_PERMIT[  31] & ~reg_be))) |
               (addr_hit[  32] & (|(SCMI_PERMIT[  32] & ~reg_be))) |
               (addr_hit[  33] & (|(SCMI_PERMIT[  33] & ~reg_be))) |
               (addr_hit[  34] & (|(SCMI_PERMIT[  34] & ~reg_be))) |
               (addr_hit[  35] & (|(SCMI_PERMIT[  35] & ~reg_be))) |
               (addr_hit[  36] & (|(SCMI_PERMIT[  36] & ~reg_be))) |
               (addr_hit[  37] & (|(SCMI_PERMIT[  37] & ~reg_be))) |
               (addr_hit[  38] & (|(SCMI_PERMIT[  38] & ~reg_be))) |
               (addr_hit[  39] & (|(SCMI_PERMIT[  39] & ~reg_be))) |
               (addr_hit[  40] & (|(SCMI_PERMIT[  40] & ~reg_be))) |
               (addr_hit[  41] & (|(SCMI_PERMIT[  41] & ~reg_be))) |
               (addr_hit[  42] & (|(SCMI_PERMIT[  42] & ~reg_be))) |
               (addr_hit[  43] & (|(SCMI_PERMIT[  43] & ~reg_be))) |
               (addr_hit[  44] & (|(SCMI_PERMIT[  44] & ~reg_be))) |
               (addr_hit[  45] & (|(SCMI_PERMIT[  45] & ~reg_be))) |
               (addr_hit[  46] & (|(SCMI_PERMIT[  46] & ~reg_be))) |
               (addr_hit[  47] & (|(SCMI_PERMIT[  47] & ~reg_be))) |
               (addr_hit[  48] & (|(SCMI_PERMIT[  48] & ~reg_be))) |
               (addr_hit[  49] & (|(SCMI_PERMIT[  49] & ~reg_be))) |
               (addr_hit[  50] & (|(SCMI_PERMIT[  50] & ~reg_be))) |
               (addr_hit[  51] & (|(SCMI_PERMIT[  51] & ~reg_be))) |
               (addr_hit[  52] & (|(SCMI_PERMIT[  52] & ~reg_be))) |
               (addr_hit[  53] & (|(SCMI_PERMIT[  53] & ~reg_be))) |
               (addr_hit[  54] & (|(SCMI_PERMIT[  54] & ~reg_be))) |
               (addr_hit[  55] & (|(SCMI_PERMIT[  55] & ~reg_be))) |
               (addr_hit[  56] & (|(SCMI_PERMIT[  56] & ~reg_be))) |
               (addr_hit[  57] & (|(SCMI_PERMIT[  57] & ~reg_be))) |
               (addr_hit[  58] & (|(SCMI_PERMIT[  58] & ~reg_be))) |
               (addr_hit[  59] & (|(SCMI_PERMIT[  59] & ~reg_be))) |
               (addr_hit[  60] & (|(SCMI_PERMIT[  60] & ~reg_be))) |
               (addr_hit[  61] & (|(SCMI_PERMIT[  61] & ~reg_be))) |
               (addr_hit[  62] & (|(SCMI_PERMIT[  62] & ~reg_be))) |
               (addr_hit[  63] & (|(SCMI_PERMIT[  63] & ~reg_be))) |
               (addr_hit[  64] & (|(SCMI_PERMIT[  64] & ~reg_be))) |
               (addr_hit[  65] & (|(SCMI_PERMIT[  65] & ~reg_be))) |
               (addr_hit[  66] & (|(SCMI_PERMIT[  66] & ~reg_be))) |
               (addr_hit[  67] & (|(SCMI_PERMIT[  67] & ~reg_be))) |
               (addr_hit[  68] & (|(SCMI_PERMIT[  68] & ~reg_be))) |
               (addr_hit[  69] & (|(SCMI_PERMIT[  69] & ~reg_be))) |
               (addr_hit[  70] & (|(SCMI_PERMIT[  70] & ~reg_be))) |
               (addr_hit[  71] & (|(SCMI_PERMIT[  71] & ~reg_be))) |
               (addr_hit[  72] & (|(SCMI_PERMIT[  72] & ~reg_be))) |
               (addr_hit[  73] & (|(SCMI_PERMIT[  73] & ~reg_be))) |
               (addr_hit[  74] & (|(SCMI_PERMIT[  74] & ~reg_be))) |
               (addr_hit[  75] & (|(SCMI_PERMIT[  75] & ~reg_be))) |
               (addr_hit[  76] & (|(SCMI_PERMIT[  76] & ~reg_be))) |
               (addr_hit[  77] & (|(SCMI_PERMIT[  77] & ~reg_be))) |
               (addr_hit[  78] & (|(SCMI_PERMIT[  78] & ~reg_be))) |
               (addr_hit[  79] & (|(SCMI_PERMIT[  79] & ~reg_be))) |
               (addr_hit[  80] & (|(SCMI_PERMIT[  80] & ~reg_be))) |
               (addr_hit[  81] & (|(SCMI_PERMIT[  81] & ~reg_be))) |
               (addr_hit[  82] & (|(SCMI_PERMIT[  82] & ~reg_be))) |
               (addr_hit[  83] & (|(SCMI_PERMIT[  83] & ~reg_be))) |
               (addr_hit[  84] & (|(SCMI_PERMIT[  84] & ~reg_be))) |
               (addr_hit[  85] & (|(SCMI_PERMIT[  85] & ~reg_be))) |
               (addr_hit[  86] & (|(SCMI_PERMIT[  86] & ~reg_be))) |
               (addr_hit[  87] & (|(SCMI_PERMIT[  87] & ~reg_be))) |
               (addr_hit[  88] & (|(SCMI_PERMIT[  88] & ~reg_be))) |
               (addr_hit[  89] & (|(SCMI_PERMIT[  89] & ~reg_be))) |
               (addr_hit[  90] & (|(SCMI_PERMIT[  90] & ~reg_be))) |
               (addr_hit[  91] & (|(SCMI_PERMIT[  91] & ~reg_be))) |
               (addr_hit[  92] & (|(SCMI_PERMIT[  92] & ~reg_be))) |
               (addr_hit[  93] & (|(SCMI_PERMIT[  93] & ~reg_be))) |
               (addr_hit[  94] & (|(SCMI_PERMIT[  94] & ~reg_be))) |
               (addr_hit[  95] & (|(SCMI_PERMIT[  95] & ~reg_be))) |
               (addr_hit[  96] & (|(SCMI_PERMIT[  96] & ~reg_be))) |
               (addr_hit[  97] & (|(SCMI_PERMIT[  97] & ~reg_be))) |
               (addr_hit[  98] & (|(SCMI_PERMIT[  98] & ~reg_be))) |
               (addr_hit[  99] & (|(SCMI_PERMIT[  99] & ~reg_be))) |
               (addr_hit[ 100] & (|(SCMI_PERMIT[ 100] & ~reg_be))) |
               (addr_hit[ 101] & (|(SCMI_PERMIT[ 101] & ~reg_be))) |
               (addr_hit[ 102] & (|(SCMI_PERMIT[ 102] & ~reg_be))) |
               (addr_hit[ 103] & (|(SCMI_PERMIT[ 103] & ~reg_be))) |
               (addr_hit[ 104] & (|(SCMI_PERMIT[ 104] & ~reg_be))) |
               (addr_hit[ 105] & (|(SCMI_PERMIT[ 105] & ~reg_be))) |
               (addr_hit[ 106] & (|(SCMI_PERMIT[ 106] & ~reg_be))) |
               (addr_hit[ 107] & (|(SCMI_PERMIT[ 107] & ~reg_be))) |
               (addr_hit[ 108] & (|(SCMI_PERMIT[ 108] & ~reg_be))) |
               (addr_hit[ 109] & (|(SCMI_PERMIT[ 109] & ~reg_be))) |
               (addr_hit[ 110] & (|(SCMI_PERMIT[ 110] & ~reg_be))) |
               (addr_hit[ 111] & (|(SCMI_PERMIT[ 111] & ~reg_be))) |
               (addr_hit[ 112] & (|(SCMI_PERMIT[ 112] & ~reg_be))) |
               (addr_hit[ 113] & (|(SCMI_PERMIT[ 113] & ~reg_be))) |
               (addr_hit[ 114] & (|(SCMI_PERMIT[ 114] & ~reg_be))) |
               (addr_hit[ 115] & (|(SCMI_PERMIT[ 115] & ~reg_be))) |
               (addr_hit[ 116] & (|(SCMI_PERMIT[ 116] & ~reg_be))) |
               (addr_hit[ 117] & (|(SCMI_PERMIT[ 117] & ~reg_be))) |
               (addr_hit[ 118] & (|(SCMI_PERMIT[ 118] & ~reg_be))) |
               (addr_hit[ 119] & (|(SCMI_PERMIT[ 119] & ~reg_be))) |
               (addr_hit[ 120] & (|(SCMI_PERMIT[ 120] & ~reg_be))) |
               (addr_hit[ 121] & (|(SCMI_PERMIT[ 121] & ~reg_be))) |
               (addr_hit[ 122] & (|(SCMI_PERMIT[ 122] & ~reg_be))) |
               (addr_hit[ 123] & (|(SCMI_PERMIT[ 123] & ~reg_be))) |
               (addr_hit[ 124] & (|(SCMI_PERMIT[ 124] & ~reg_be))) |
               (addr_hit[ 125] & (|(SCMI_PERMIT[ 125] & ~reg_be))) |
               (addr_hit[ 126] & (|(SCMI_PERMIT[ 126] & ~reg_be))) |
               (addr_hit[ 127] & (|(SCMI_PERMIT[ 127] & ~reg_be))) |
               (addr_hit[ 128] & (|(SCMI_PERMIT[ 128] & ~reg_be))) |
               (addr_hit[ 129] & (|(SCMI_PERMIT[ 129] & ~reg_be))) |
               (addr_hit[ 130] & (|(SCMI_PERMIT[ 130] & ~reg_be))) |
               (addr_hit[ 131] & (|(SCMI_PERMIT[ 131] & ~reg_be))) |
               (addr_hit[ 132] & (|(SCMI_PERMIT[ 132] & ~reg_be))) |
               (addr_hit[ 133] & (|(SCMI_PERMIT[ 133] & ~reg_be))) |
               (addr_hit[ 134] & (|(SCMI_PERMIT[ 134] & ~reg_be))) |
               (addr_hit[ 135] & (|(SCMI_PERMIT[ 135] & ~reg_be))) |
               (addr_hit[ 136] & (|(SCMI_PERMIT[ 136] & ~reg_be))) |
               (addr_hit[ 137] & (|(SCMI_PERMIT[ 137] & ~reg_be))) |
               (addr_hit[ 138] & (|(SCMI_PERMIT[ 138] & ~reg_be))) |
               (addr_hit[ 139] & (|(SCMI_PERMIT[ 139] & ~reg_be))) |
               (addr_hit[ 140] & (|(SCMI_PERMIT[ 140] & ~reg_be))) |
               (addr_hit[ 141] & (|(SCMI_PERMIT[ 141] & ~reg_be))) |
               (addr_hit[ 142] & (|(SCMI_PERMIT[ 142] & ~reg_be))) |
               (addr_hit[ 143] & (|(SCMI_PERMIT[ 143] & ~reg_be))) |
               (addr_hit[ 144] & (|(SCMI_PERMIT[ 144] & ~reg_be))) |
               (addr_hit[ 145] & (|(SCMI_PERMIT[ 145] & ~reg_be))) |
               (addr_hit[ 146] & (|(SCMI_PERMIT[ 146] & ~reg_be))) |
               (addr_hit[ 147] & (|(SCMI_PERMIT[ 147] & ~reg_be))) |
               (addr_hit[ 148] & (|(SCMI_PERMIT[ 148] & ~reg_be))) |
               (addr_hit[ 149] & (|(SCMI_PERMIT[ 149] & ~reg_be))) |
               (addr_hit[ 150] & (|(SCMI_PERMIT[ 150] & ~reg_be))) |
               (addr_hit[ 151] & (|(SCMI_PERMIT[ 151] & ~reg_be))) |
               (addr_hit[ 152] & (|(SCMI_PERMIT[ 152] & ~reg_be))) |
               (addr_hit[ 153] & (|(SCMI_PERMIT[ 153] & ~reg_be))) |
               (addr_hit[ 154] & (|(SCMI_PERMIT[ 154] & ~reg_be))) |
               (addr_hit[ 155] & (|(SCMI_PERMIT[ 155] & ~reg_be))) |
               (addr_hit[ 156] & (|(SCMI_PERMIT[ 156] & ~reg_be))) |
               (addr_hit[ 157] & (|(SCMI_PERMIT[ 157] & ~reg_be))) |
               (addr_hit[ 158] & (|(SCMI_PERMIT[ 158] & ~reg_be))) |
               (addr_hit[ 159] & (|(SCMI_PERMIT[ 159] & ~reg_be))) |
               (addr_hit[ 160] & (|(SCMI_PERMIT[ 160] & ~reg_be))) |
               (addr_hit[ 161] & (|(SCMI_PERMIT[ 161] & ~reg_be))) |
               (addr_hit[ 162] & (|(SCMI_PERMIT[ 162] & ~reg_be))) |
               (addr_hit[ 163] & (|(SCMI_PERMIT[ 163] & ~reg_be))) |
               (addr_hit[ 164] & (|(SCMI_PERMIT[ 164] & ~reg_be))) |
               (addr_hit[ 165] & (|(SCMI_PERMIT[ 165] & ~reg_be))) |
               (addr_hit[ 166] & (|(SCMI_PERMIT[ 166] & ~reg_be))) |
               (addr_hit[ 167] & (|(SCMI_PERMIT[ 167] & ~reg_be))) |
               (addr_hit[ 168] & (|(SCMI_PERMIT[ 168] & ~reg_be))) |
               (addr_hit[ 169] & (|(SCMI_PERMIT[ 169] & ~reg_be))) |
               (addr_hit[ 170] & (|(SCMI_PERMIT[ 170] & ~reg_be))) |
               (addr_hit[ 171] & (|(SCMI_PERMIT[ 171] & ~reg_be))) |
               (addr_hit[ 172] & (|(SCMI_PERMIT[ 172] & ~reg_be))) |
               (addr_hit[ 173] & (|(SCMI_PERMIT[ 173] & ~reg_be))) |
               (addr_hit[ 174] & (|(SCMI_PERMIT[ 174] & ~reg_be))) |
               (addr_hit[ 175] & (|(SCMI_PERMIT[ 175] & ~reg_be))) |
               (addr_hit[ 176] & (|(SCMI_PERMIT[ 176] & ~reg_be))) |
               (addr_hit[ 177] & (|(SCMI_PERMIT[ 177] & ~reg_be))) |
               (addr_hit[ 178] & (|(SCMI_PERMIT[ 178] & ~reg_be))) |
               (addr_hit[ 179] & (|(SCMI_PERMIT[ 179] & ~reg_be))) |
               (addr_hit[ 180] & (|(SCMI_PERMIT[ 180] & ~reg_be))) |
               (addr_hit[ 181] & (|(SCMI_PERMIT[ 181] & ~reg_be))) |
               (addr_hit[ 182] & (|(SCMI_PERMIT[ 182] & ~reg_be))) |
               (addr_hit[ 183] & (|(SCMI_PERMIT[ 183] & ~reg_be))) |
               (addr_hit[ 184] & (|(SCMI_PERMIT[ 184] & ~reg_be))) |
               (addr_hit[ 185] & (|(SCMI_PERMIT[ 185] & ~reg_be))) |
               (addr_hit[ 186] & (|(SCMI_PERMIT[ 186] & ~reg_be))) |
               (addr_hit[ 187] & (|(SCMI_PERMIT[ 187] & ~reg_be))) |
               (addr_hit[ 188] & (|(SCMI_PERMIT[ 188] & ~reg_be))) |
               (addr_hit[ 189] & (|(SCMI_PERMIT[ 189] & ~reg_be))) |
               (addr_hit[ 190] & (|(SCMI_PERMIT[ 190] & ~reg_be))) |
               (addr_hit[ 191] & (|(SCMI_PERMIT[ 191] & ~reg_be))) |
               (addr_hit[ 192] & (|(SCMI_PERMIT[ 192] & ~reg_be))) |
               (addr_hit[ 193] & (|(SCMI_PERMIT[ 193] & ~reg_be))) |
               (addr_hit[ 194] & (|(SCMI_PERMIT[ 194] & ~reg_be))) |
               (addr_hit[ 195] & (|(SCMI_PERMIT[ 195] & ~reg_be))) |
               (addr_hit[ 196] & (|(SCMI_PERMIT[ 196] & ~reg_be))) |
               (addr_hit[ 197] & (|(SCMI_PERMIT[ 197] & ~reg_be))) |
               (addr_hit[ 198] & (|(SCMI_PERMIT[ 198] & ~reg_be))) |
               (addr_hit[ 199] & (|(SCMI_PERMIT[ 199] & ~reg_be))) |
               (addr_hit[ 200] & (|(SCMI_PERMIT[ 200] & ~reg_be))) |
               (addr_hit[ 201] & (|(SCMI_PERMIT[ 201] & ~reg_be))) |
               (addr_hit[ 202] & (|(SCMI_PERMIT[ 202] & ~reg_be))) |
               (addr_hit[ 203] & (|(SCMI_PERMIT[ 203] & ~reg_be))) |
               (addr_hit[ 204] & (|(SCMI_PERMIT[ 204] & ~reg_be))) |
               (addr_hit[ 205] & (|(SCMI_PERMIT[ 205] & ~reg_be))) |
               (addr_hit[ 206] & (|(SCMI_PERMIT[ 206] & ~reg_be))) |
               (addr_hit[ 207] & (|(SCMI_PERMIT[ 207] & ~reg_be))) |
               (addr_hit[ 208] & (|(SCMI_PERMIT[ 208] & ~reg_be))) |
               (addr_hit[ 209] & (|(SCMI_PERMIT[ 209] & ~reg_be))) |
               (addr_hit[ 210] & (|(SCMI_PERMIT[ 210] & ~reg_be))) |
               (addr_hit[ 211] & (|(SCMI_PERMIT[ 211] & ~reg_be))) |
               (addr_hit[ 212] & (|(SCMI_PERMIT[ 212] & ~reg_be))) |
               (addr_hit[ 213] & (|(SCMI_PERMIT[ 213] & ~reg_be))) |
               (addr_hit[ 214] & (|(SCMI_PERMIT[ 214] & ~reg_be))) |
               (addr_hit[ 215] & (|(SCMI_PERMIT[ 215] & ~reg_be))) |
               (addr_hit[ 216] & (|(SCMI_PERMIT[ 216] & ~reg_be))) |
               (addr_hit[ 217] & (|(SCMI_PERMIT[ 217] & ~reg_be))) |
               (addr_hit[ 218] & (|(SCMI_PERMIT[ 218] & ~reg_be))) |
               (addr_hit[ 219] & (|(SCMI_PERMIT[ 219] & ~reg_be))) |
               (addr_hit[ 220] & (|(SCMI_PERMIT[ 220] & ~reg_be))) |
               (addr_hit[ 221] & (|(SCMI_PERMIT[ 221] & ~reg_be))) |
               (addr_hit[ 222] & (|(SCMI_PERMIT[ 222] & ~reg_be))) |
               (addr_hit[ 223] & (|(SCMI_PERMIT[ 223] & ~reg_be))) |
               (addr_hit[ 224] & (|(SCMI_PERMIT[ 224] & ~reg_be))) |
               (addr_hit[ 225] & (|(SCMI_PERMIT[ 225] & ~reg_be))) |
               (addr_hit[ 226] & (|(SCMI_PERMIT[ 226] & ~reg_be))) |
               (addr_hit[ 227] & (|(SCMI_PERMIT[ 227] & ~reg_be))) |
               (addr_hit[ 228] & (|(SCMI_PERMIT[ 228] & ~reg_be))) |
               (addr_hit[ 229] & (|(SCMI_PERMIT[ 229] & ~reg_be))) |
               (addr_hit[ 230] & (|(SCMI_PERMIT[ 230] & ~reg_be))) |
               (addr_hit[ 231] & (|(SCMI_PERMIT[ 231] & ~reg_be))) |
               (addr_hit[ 232] & (|(SCMI_PERMIT[ 232] & ~reg_be))) |
               (addr_hit[ 233] & (|(SCMI_PERMIT[ 233] & ~reg_be))) |
               (addr_hit[ 234] & (|(SCMI_PERMIT[ 234] & ~reg_be))) |
               (addr_hit[ 235] & (|(SCMI_PERMIT[ 235] & ~reg_be))) |
               (addr_hit[ 236] & (|(SCMI_PERMIT[ 236] & ~reg_be))) |
               (addr_hit[ 237] & (|(SCMI_PERMIT[ 237] & ~reg_be))) |
               (addr_hit[ 238] & (|(SCMI_PERMIT[ 238] & ~reg_be))) |
               (addr_hit[ 239] & (|(SCMI_PERMIT[ 239] & ~reg_be))) |
               (addr_hit[ 240] & (|(SCMI_PERMIT[ 240] & ~reg_be))) |
               (addr_hit[ 241] & (|(SCMI_PERMIT[ 241] & ~reg_be))) |
               (addr_hit[ 242] & (|(SCMI_PERMIT[ 242] & ~reg_be))) |
               (addr_hit[ 243] & (|(SCMI_PERMIT[ 243] & ~reg_be))) |
               (addr_hit[ 244] & (|(SCMI_PERMIT[ 244] & ~reg_be))) |
               (addr_hit[ 245] & (|(SCMI_PERMIT[ 245] & ~reg_be))) |
               (addr_hit[ 246] & (|(SCMI_PERMIT[ 246] & ~reg_be))) |
               (addr_hit[ 247] & (|(SCMI_PERMIT[ 247] & ~reg_be))) |
               (addr_hit[ 248] & (|(SCMI_PERMIT[ 248] & ~reg_be))) |
               (addr_hit[ 249] & (|(SCMI_PERMIT[ 249] & ~reg_be))) |
               (addr_hit[ 250] & (|(SCMI_PERMIT[ 250] & ~reg_be))) |
               (addr_hit[ 251] & (|(SCMI_PERMIT[ 251] & ~reg_be))) |
               (addr_hit[ 252] & (|(SCMI_PERMIT[ 252] & ~reg_be))) |
               (addr_hit[ 253] & (|(SCMI_PERMIT[ 253] & ~reg_be))) |
               (addr_hit[ 254] & (|(SCMI_PERMIT[ 254] & ~reg_be))) |
               (addr_hit[ 255] & (|(SCMI_PERMIT[ 255] & ~reg_be))) |
               (addr_hit[ 256] & (|(SCMI_PERMIT[ 256] & ~reg_be))) |
               (addr_hit[ 257] & (|(SCMI_PERMIT[ 257] & ~reg_be))) |
               (addr_hit[ 258] & (|(SCMI_PERMIT[ 258] & ~reg_be))) |
               (addr_hit[ 259] & (|(SCMI_PERMIT[ 259] & ~reg_be))) |
               (addr_hit[ 260] & (|(SCMI_PERMIT[ 260] & ~reg_be))) |
               (addr_hit[ 261] & (|(SCMI_PERMIT[ 261] & ~reg_be))) |
               (addr_hit[ 262] & (|(SCMI_PERMIT[ 262] & ~reg_be))) |
               (addr_hit[ 263] & (|(SCMI_PERMIT[ 263] & ~reg_be))) |
               (addr_hit[ 264] & (|(SCMI_PERMIT[ 264] & ~reg_be))) |
               (addr_hit[ 265] & (|(SCMI_PERMIT[ 265] & ~reg_be))) |
               (addr_hit[ 266] & (|(SCMI_PERMIT[ 266] & ~reg_be))) |
               (addr_hit[ 267] & (|(SCMI_PERMIT[ 267] & ~reg_be))) |
               (addr_hit[ 268] & (|(SCMI_PERMIT[ 268] & ~reg_be))) |
               (addr_hit[ 269] & (|(SCMI_PERMIT[ 269] & ~reg_be))) |
               (addr_hit[ 270] & (|(SCMI_PERMIT[ 270] & ~reg_be))) |
               (addr_hit[ 271] & (|(SCMI_PERMIT[ 271] & ~reg_be))) |
               (addr_hit[ 272] & (|(SCMI_PERMIT[ 272] & ~reg_be))) |
               (addr_hit[ 273] & (|(SCMI_PERMIT[ 273] & ~reg_be))) |
               (addr_hit[ 274] & (|(SCMI_PERMIT[ 274] & ~reg_be))) |
               (addr_hit[ 275] & (|(SCMI_PERMIT[ 275] & ~reg_be))) |
               (addr_hit[ 276] & (|(SCMI_PERMIT[ 276] & ~reg_be))) |
               (addr_hit[ 277] & (|(SCMI_PERMIT[ 277] & ~reg_be))) |
               (addr_hit[ 278] & (|(SCMI_PERMIT[ 278] & ~reg_be))) |
               (addr_hit[ 279] & (|(SCMI_PERMIT[ 279] & ~reg_be))) |
               (addr_hit[ 280] & (|(SCMI_PERMIT[ 280] & ~reg_be))) |
               (addr_hit[ 281] & (|(SCMI_PERMIT[ 281] & ~reg_be))) |
               (addr_hit[ 282] & (|(SCMI_PERMIT[ 282] & ~reg_be))) |
               (addr_hit[ 283] & (|(SCMI_PERMIT[ 283] & ~reg_be))) |
               (addr_hit[ 284] & (|(SCMI_PERMIT[ 284] & ~reg_be))) |
               (addr_hit[ 285] & (|(SCMI_PERMIT[ 285] & ~reg_be))) |
               (addr_hit[ 286] & (|(SCMI_PERMIT[ 286] & ~reg_be))) |
               (addr_hit[ 287] & (|(SCMI_PERMIT[ 287] & ~reg_be))) |
               (addr_hit[ 288] & (|(SCMI_PERMIT[ 288] & ~reg_be))) |
               (addr_hit[ 289] & (|(SCMI_PERMIT[ 289] & ~reg_be))) |
               (addr_hit[ 290] & (|(SCMI_PERMIT[ 290] & ~reg_be))) |
               (addr_hit[ 291] & (|(SCMI_PERMIT[ 291] & ~reg_be))) |
               (addr_hit[ 292] & (|(SCMI_PERMIT[ 292] & ~reg_be))) |
               (addr_hit[ 293] & (|(SCMI_PERMIT[ 293] & ~reg_be))) |
               (addr_hit[ 294] & (|(SCMI_PERMIT[ 294] & ~reg_be))) |
               (addr_hit[ 295] & (|(SCMI_PERMIT[ 295] & ~reg_be))) |
               (addr_hit[ 296] & (|(SCMI_PERMIT[ 296] & ~reg_be))) |
               (addr_hit[ 297] & (|(SCMI_PERMIT[ 297] & ~reg_be))) |
               (addr_hit[ 298] & (|(SCMI_PERMIT[ 298] & ~reg_be))) |
               (addr_hit[ 299] & (|(SCMI_PERMIT[ 299] & ~reg_be))) |
               (addr_hit[ 300] & (|(SCMI_PERMIT[ 300] & ~reg_be))) |
               (addr_hit[ 301] & (|(SCMI_PERMIT[ 301] & ~reg_be))) |
               (addr_hit[ 302] & (|(SCMI_PERMIT[ 302] & ~reg_be))) |
               (addr_hit[ 303] & (|(SCMI_PERMIT[ 303] & ~reg_be))) |
               (addr_hit[ 304] & (|(SCMI_PERMIT[ 304] & ~reg_be))) |
               (addr_hit[ 305] & (|(SCMI_PERMIT[ 305] & ~reg_be))) |
               (addr_hit[ 306] & (|(SCMI_PERMIT[ 306] & ~reg_be))) |
               (addr_hit[ 307] & (|(SCMI_PERMIT[ 307] & ~reg_be))) |
               (addr_hit[ 308] & (|(SCMI_PERMIT[ 308] & ~reg_be))) |
               (addr_hit[ 309] & (|(SCMI_PERMIT[ 309] & ~reg_be))) |
               (addr_hit[ 310] & (|(SCMI_PERMIT[ 310] & ~reg_be))) |
               (addr_hit[ 311] & (|(SCMI_PERMIT[ 311] & ~reg_be))) |
               (addr_hit[ 312] & (|(SCMI_PERMIT[ 312] & ~reg_be))) |
               (addr_hit[ 313] & (|(SCMI_PERMIT[ 313] & ~reg_be))) |
               (addr_hit[ 314] & (|(SCMI_PERMIT[ 314] & ~reg_be))) |
               (addr_hit[ 315] & (|(SCMI_PERMIT[ 315] & ~reg_be))) |
               (addr_hit[ 316] & (|(SCMI_PERMIT[ 316] & ~reg_be))) |
               (addr_hit[ 317] & (|(SCMI_PERMIT[ 317] & ~reg_be))) |
               (addr_hit[ 318] & (|(SCMI_PERMIT[ 318] & ~reg_be))) |
               (addr_hit[ 319] & (|(SCMI_PERMIT[ 319] & ~reg_be))) |
               (addr_hit[ 320] & (|(SCMI_PERMIT[ 320] & ~reg_be))) |
               (addr_hit[ 321] & (|(SCMI_PERMIT[ 321] & ~reg_be))) |
               (addr_hit[ 322] & (|(SCMI_PERMIT[ 322] & ~reg_be))) |
               (addr_hit[ 323] & (|(SCMI_PERMIT[ 323] & ~reg_be))) |
               (addr_hit[ 324] & (|(SCMI_PERMIT[ 324] & ~reg_be))) |
               (addr_hit[ 325] & (|(SCMI_PERMIT[ 325] & ~reg_be))) |
               (addr_hit[ 326] & (|(SCMI_PERMIT[ 326] & ~reg_be))) |
               (addr_hit[ 327] & (|(SCMI_PERMIT[ 327] & ~reg_be))) |
               (addr_hit[ 328] & (|(SCMI_PERMIT[ 328] & ~reg_be))) |
               (addr_hit[ 329] & (|(SCMI_PERMIT[ 329] & ~reg_be))) |
               (addr_hit[ 330] & (|(SCMI_PERMIT[ 330] & ~reg_be))) |
               (addr_hit[ 331] & (|(SCMI_PERMIT[ 331] & ~reg_be))) |
               (addr_hit[ 332] & (|(SCMI_PERMIT[ 332] & ~reg_be))) |
               (addr_hit[ 333] & (|(SCMI_PERMIT[ 333] & ~reg_be))) |
               (addr_hit[ 334] & (|(SCMI_PERMIT[ 334] & ~reg_be))) |
               (addr_hit[ 335] & (|(SCMI_PERMIT[ 335] & ~reg_be))) |
               (addr_hit[ 336] & (|(SCMI_PERMIT[ 336] & ~reg_be))) |
               (addr_hit[ 337] & (|(SCMI_PERMIT[ 337] & ~reg_be))) |
               (addr_hit[ 338] & (|(SCMI_PERMIT[ 338] & ~reg_be))) |
               (addr_hit[ 339] & (|(SCMI_PERMIT[ 339] & ~reg_be))) |
               (addr_hit[ 340] & (|(SCMI_PERMIT[ 340] & ~reg_be))) |
               (addr_hit[ 341] & (|(SCMI_PERMIT[ 341] & ~reg_be))) |
               (addr_hit[ 342] & (|(SCMI_PERMIT[ 342] & ~reg_be))) |
               (addr_hit[ 343] & (|(SCMI_PERMIT[ 343] & ~reg_be))) |
               (addr_hit[ 344] & (|(SCMI_PERMIT[ 344] & ~reg_be))) |
               (addr_hit[ 345] & (|(SCMI_PERMIT[ 345] & ~reg_be))) |
               (addr_hit[ 346] & (|(SCMI_PERMIT[ 346] & ~reg_be))) |
               (addr_hit[ 347] & (|(SCMI_PERMIT[ 347] & ~reg_be))) |
               (addr_hit[ 348] & (|(SCMI_PERMIT[ 348] & ~reg_be))) |
               (addr_hit[ 349] & (|(SCMI_PERMIT[ 349] & ~reg_be))) |
               (addr_hit[ 350] & (|(SCMI_PERMIT[ 350] & ~reg_be))) |
               (addr_hit[ 351] & (|(SCMI_PERMIT[ 351] & ~reg_be))) |
               (addr_hit[ 352] & (|(SCMI_PERMIT[ 352] & ~reg_be))) |
               (addr_hit[ 353] & (|(SCMI_PERMIT[ 353] & ~reg_be))) |
               (addr_hit[ 354] & (|(SCMI_PERMIT[ 354] & ~reg_be))) |
               (addr_hit[ 355] & (|(SCMI_PERMIT[ 355] & ~reg_be))) |
               (addr_hit[ 356] & (|(SCMI_PERMIT[ 356] & ~reg_be))) |
               (addr_hit[ 357] & (|(SCMI_PERMIT[ 357] & ~reg_be))) |
               (addr_hit[ 358] & (|(SCMI_PERMIT[ 358] & ~reg_be))) |
               (addr_hit[ 359] & (|(SCMI_PERMIT[ 359] & ~reg_be))) |
               (addr_hit[ 360] & (|(SCMI_PERMIT[ 360] & ~reg_be))) |
               (addr_hit[ 361] & (|(SCMI_PERMIT[ 361] & ~reg_be))) |
               (addr_hit[ 362] & (|(SCMI_PERMIT[ 362] & ~reg_be))) |
               (addr_hit[ 363] & (|(SCMI_PERMIT[ 363] & ~reg_be))) |
               (addr_hit[ 364] & (|(SCMI_PERMIT[ 364] & ~reg_be))) |
               (addr_hit[ 365] & (|(SCMI_PERMIT[ 365] & ~reg_be))) |
               (addr_hit[ 366] & (|(SCMI_PERMIT[ 366] & ~reg_be))) |
               (addr_hit[ 367] & (|(SCMI_PERMIT[ 367] & ~reg_be))) |
               (addr_hit[ 368] & (|(SCMI_PERMIT[ 368] & ~reg_be))) |
               (addr_hit[ 369] & (|(SCMI_PERMIT[ 369] & ~reg_be))) |
               (addr_hit[ 370] & (|(SCMI_PERMIT[ 370] & ~reg_be))) |
               (addr_hit[ 371] & (|(SCMI_PERMIT[ 371] & ~reg_be))) |
               (addr_hit[ 372] & (|(SCMI_PERMIT[ 372] & ~reg_be))) |
               (addr_hit[ 373] & (|(SCMI_PERMIT[ 373] & ~reg_be))) |
               (addr_hit[ 374] & (|(SCMI_PERMIT[ 374] & ~reg_be))) |
               (addr_hit[ 375] & (|(SCMI_PERMIT[ 375] & ~reg_be))) |
               (addr_hit[ 376] & (|(SCMI_PERMIT[ 376] & ~reg_be))) |
               (addr_hit[ 377] & (|(SCMI_PERMIT[ 377] & ~reg_be))) |
               (addr_hit[ 378] & (|(SCMI_PERMIT[ 378] & ~reg_be))) |
               (addr_hit[ 379] & (|(SCMI_PERMIT[ 379] & ~reg_be))) |
               (addr_hit[ 380] & (|(SCMI_PERMIT[ 380] & ~reg_be))) |
               (addr_hit[ 381] & (|(SCMI_PERMIT[ 381] & ~reg_be))) |
               (addr_hit[ 382] & (|(SCMI_PERMIT[ 382] & ~reg_be))) |
               (addr_hit[ 383] & (|(SCMI_PERMIT[ 383] & ~reg_be))) |
               (addr_hit[ 384] & (|(SCMI_PERMIT[ 384] & ~reg_be))) |
               (addr_hit[ 385] & (|(SCMI_PERMIT[ 385] & ~reg_be))) |
               (addr_hit[ 386] & (|(SCMI_PERMIT[ 386] & ~reg_be))) |
               (addr_hit[ 387] & (|(SCMI_PERMIT[ 387] & ~reg_be))) |
               (addr_hit[ 388] & (|(SCMI_PERMIT[ 388] & ~reg_be))) |
               (addr_hit[ 389] & (|(SCMI_PERMIT[ 389] & ~reg_be))) |
               (addr_hit[ 390] & (|(SCMI_PERMIT[ 390] & ~reg_be))) |
               (addr_hit[ 391] & (|(SCMI_PERMIT[ 391] & ~reg_be))) |
               (addr_hit[ 392] & (|(SCMI_PERMIT[ 392] & ~reg_be))) |
               (addr_hit[ 393] & (|(SCMI_PERMIT[ 393] & ~reg_be))) |
               (addr_hit[ 394] & (|(SCMI_PERMIT[ 394] & ~reg_be))) |
               (addr_hit[ 395] & (|(SCMI_PERMIT[ 395] & ~reg_be))) |
               (addr_hit[ 396] & (|(SCMI_PERMIT[ 396] & ~reg_be))) |
               (addr_hit[ 397] & (|(SCMI_PERMIT[ 397] & ~reg_be))) |
               (addr_hit[ 398] & (|(SCMI_PERMIT[ 398] & ~reg_be))) |
               (addr_hit[ 399] & (|(SCMI_PERMIT[ 399] & ~reg_be))) |
               (addr_hit[ 400] & (|(SCMI_PERMIT[ 400] & ~reg_be))) |
               (addr_hit[ 401] & (|(SCMI_PERMIT[ 401] & ~reg_be))) |
               (addr_hit[ 402] & (|(SCMI_PERMIT[ 402] & ~reg_be))) |
               (addr_hit[ 403] & (|(SCMI_PERMIT[ 403] & ~reg_be))) |
               (addr_hit[ 404] & (|(SCMI_PERMIT[ 404] & ~reg_be))) |
               (addr_hit[ 405] & (|(SCMI_PERMIT[ 405] & ~reg_be))) |
               (addr_hit[ 406] & (|(SCMI_PERMIT[ 406] & ~reg_be))) |
               (addr_hit[ 407] & (|(SCMI_PERMIT[ 407] & ~reg_be))) |
               (addr_hit[ 408] & (|(SCMI_PERMIT[ 408] & ~reg_be))) |
               (addr_hit[ 409] & (|(SCMI_PERMIT[ 409] & ~reg_be))) |
               (addr_hit[ 410] & (|(SCMI_PERMIT[ 410] & ~reg_be))) |
               (addr_hit[ 411] & (|(SCMI_PERMIT[ 411] & ~reg_be))) |
               (addr_hit[ 412] & (|(SCMI_PERMIT[ 412] & ~reg_be))) |
               (addr_hit[ 413] & (|(SCMI_PERMIT[ 413] & ~reg_be))) |
               (addr_hit[ 414] & (|(SCMI_PERMIT[ 414] & ~reg_be))) |
               (addr_hit[ 415] & (|(SCMI_PERMIT[ 415] & ~reg_be))) |
               (addr_hit[ 416] & (|(SCMI_PERMIT[ 416] & ~reg_be))) |
               (addr_hit[ 417] & (|(SCMI_PERMIT[ 417] & ~reg_be))) |
               (addr_hit[ 418] & (|(SCMI_PERMIT[ 418] & ~reg_be))) |
               (addr_hit[ 419] & (|(SCMI_PERMIT[ 419] & ~reg_be))) |
               (addr_hit[ 420] & (|(SCMI_PERMIT[ 420] & ~reg_be))) |
               (addr_hit[ 421] & (|(SCMI_PERMIT[ 421] & ~reg_be))) |
               (addr_hit[ 422] & (|(SCMI_PERMIT[ 422] & ~reg_be))) |
               (addr_hit[ 423] & (|(SCMI_PERMIT[ 423] & ~reg_be))) |
               (addr_hit[ 424] & (|(SCMI_PERMIT[ 424] & ~reg_be))) |
               (addr_hit[ 425] & (|(SCMI_PERMIT[ 425] & ~reg_be))) |
               (addr_hit[ 426] & (|(SCMI_PERMIT[ 426] & ~reg_be))) |
               (addr_hit[ 427] & (|(SCMI_PERMIT[ 427] & ~reg_be))) |
               (addr_hit[ 428] & (|(SCMI_PERMIT[ 428] & ~reg_be))) |
               (addr_hit[ 429] & (|(SCMI_PERMIT[ 429] & ~reg_be))) |
               (addr_hit[ 430] & (|(SCMI_PERMIT[ 430] & ~reg_be))) |
               (addr_hit[ 431] & (|(SCMI_PERMIT[ 431] & ~reg_be))) |
               (addr_hit[ 432] & (|(SCMI_PERMIT[ 432] & ~reg_be))) |
               (addr_hit[ 433] & (|(SCMI_PERMIT[ 433] & ~reg_be))) |
               (addr_hit[ 434] & (|(SCMI_PERMIT[ 434] & ~reg_be))) |
               (addr_hit[ 435] & (|(SCMI_PERMIT[ 435] & ~reg_be))) |
               (addr_hit[ 436] & (|(SCMI_PERMIT[ 436] & ~reg_be))) |
               (addr_hit[ 437] & (|(SCMI_PERMIT[ 437] & ~reg_be))) |
               (addr_hit[ 438] & (|(SCMI_PERMIT[ 438] & ~reg_be))) |
               (addr_hit[ 439] & (|(SCMI_PERMIT[ 439] & ~reg_be))) |
               (addr_hit[ 440] & (|(SCMI_PERMIT[ 440] & ~reg_be))) |
               (addr_hit[ 441] & (|(SCMI_PERMIT[ 441] & ~reg_be))) |
               (addr_hit[ 442] & (|(SCMI_PERMIT[ 442] & ~reg_be))) |
               (addr_hit[ 443] & (|(SCMI_PERMIT[ 443] & ~reg_be))) |
               (addr_hit[ 444] & (|(SCMI_PERMIT[ 444] & ~reg_be))) |
               (addr_hit[ 445] & (|(SCMI_PERMIT[ 445] & ~reg_be))) |
               (addr_hit[ 446] & (|(SCMI_PERMIT[ 446] & ~reg_be))) |
               (addr_hit[ 447] & (|(SCMI_PERMIT[ 447] & ~reg_be))) |
               (addr_hit[ 448] & (|(SCMI_PERMIT[ 448] & ~reg_be))) |
               (addr_hit[ 449] & (|(SCMI_PERMIT[ 449] & ~reg_be))) |
               (addr_hit[ 450] & (|(SCMI_PERMIT[ 450] & ~reg_be))) |
               (addr_hit[ 451] & (|(SCMI_PERMIT[ 451] & ~reg_be))) |
               (addr_hit[ 452] & (|(SCMI_PERMIT[ 452] & ~reg_be))) |
               (addr_hit[ 453] & (|(SCMI_PERMIT[ 453] & ~reg_be))) |
               (addr_hit[ 454] & (|(SCMI_PERMIT[ 454] & ~reg_be))) |
               (addr_hit[ 455] & (|(SCMI_PERMIT[ 455] & ~reg_be))) |
               (addr_hit[ 456] & (|(SCMI_PERMIT[ 456] & ~reg_be))) |
               (addr_hit[ 457] & (|(SCMI_PERMIT[ 457] & ~reg_be))) |
               (addr_hit[ 458] & (|(SCMI_PERMIT[ 458] & ~reg_be))) |
               (addr_hit[ 459] & (|(SCMI_PERMIT[ 459] & ~reg_be))) |
               (addr_hit[ 460] & (|(SCMI_PERMIT[ 460] & ~reg_be))) |
               (addr_hit[ 461] & (|(SCMI_PERMIT[ 461] & ~reg_be))) |
               (addr_hit[ 462] & (|(SCMI_PERMIT[ 462] & ~reg_be))) |
               (addr_hit[ 463] & (|(SCMI_PERMIT[ 463] & ~reg_be))) |
               (addr_hit[ 464] & (|(SCMI_PERMIT[ 464] & ~reg_be))) |
               (addr_hit[ 465] & (|(SCMI_PERMIT[ 465] & ~reg_be))) |
               (addr_hit[ 466] & (|(SCMI_PERMIT[ 466] & ~reg_be))) |
               (addr_hit[ 467] & (|(SCMI_PERMIT[ 467] & ~reg_be))) |
               (addr_hit[ 468] & (|(SCMI_PERMIT[ 468] & ~reg_be))) |
               (addr_hit[ 469] & (|(SCMI_PERMIT[ 469] & ~reg_be))) |
               (addr_hit[ 470] & (|(SCMI_PERMIT[ 470] & ~reg_be))) |
               (addr_hit[ 471] & (|(SCMI_PERMIT[ 471] & ~reg_be))) |
               (addr_hit[ 472] & (|(SCMI_PERMIT[ 472] & ~reg_be))) |
               (addr_hit[ 473] & (|(SCMI_PERMIT[ 473] & ~reg_be))) |
               (addr_hit[ 474] & (|(SCMI_PERMIT[ 474] & ~reg_be))) |
               (addr_hit[ 475] & (|(SCMI_PERMIT[ 475] & ~reg_be))) |
               (addr_hit[ 476] & (|(SCMI_PERMIT[ 476] & ~reg_be))) |
               (addr_hit[ 477] & (|(SCMI_PERMIT[ 477] & ~reg_be))) |
               (addr_hit[ 478] & (|(SCMI_PERMIT[ 478] & ~reg_be))) |
               (addr_hit[ 479] & (|(SCMI_PERMIT[ 479] & ~reg_be))) |
               (addr_hit[ 480] & (|(SCMI_PERMIT[ 480] & ~reg_be))) |
               (addr_hit[ 481] & (|(SCMI_PERMIT[ 481] & ~reg_be))) |
               (addr_hit[ 482] & (|(SCMI_PERMIT[ 482] & ~reg_be))) |
               (addr_hit[ 483] & (|(SCMI_PERMIT[ 483] & ~reg_be))) |
               (addr_hit[ 484] & (|(SCMI_PERMIT[ 484] & ~reg_be))) |
               (addr_hit[ 485] & (|(SCMI_PERMIT[ 485] & ~reg_be))) |
               (addr_hit[ 486] & (|(SCMI_PERMIT[ 486] & ~reg_be))) |
               (addr_hit[ 487] & (|(SCMI_PERMIT[ 487] & ~reg_be))) |
               (addr_hit[ 488] & (|(SCMI_PERMIT[ 488] & ~reg_be))) |
               (addr_hit[ 489] & (|(SCMI_PERMIT[ 489] & ~reg_be))) |
               (addr_hit[ 490] & (|(SCMI_PERMIT[ 490] & ~reg_be))) |
               (addr_hit[ 491] & (|(SCMI_PERMIT[ 491] & ~reg_be))) |
               (addr_hit[ 492] & (|(SCMI_PERMIT[ 492] & ~reg_be))) |
               (addr_hit[ 493] & (|(SCMI_PERMIT[ 493] & ~reg_be))) |
               (addr_hit[ 494] & (|(SCMI_PERMIT[ 494] & ~reg_be))) |
               (addr_hit[ 495] & (|(SCMI_PERMIT[ 495] & ~reg_be))) |
               (addr_hit[ 496] & (|(SCMI_PERMIT[ 496] & ~reg_be))) |
               (addr_hit[ 497] & (|(SCMI_PERMIT[ 497] & ~reg_be))) |
               (addr_hit[ 498] & (|(SCMI_PERMIT[ 498] & ~reg_be))) |
               (addr_hit[ 499] & (|(SCMI_PERMIT[ 499] & ~reg_be))) |
               (addr_hit[ 500] & (|(SCMI_PERMIT[ 500] & ~reg_be))) |
               (addr_hit[ 501] & (|(SCMI_PERMIT[ 501] & ~reg_be))) |
               (addr_hit[ 502] & (|(SCMI_PERMIT[ 502] & ~reg_be))) |
               (addr_hit[ 503] & (|(SCMI_PERMIT[ 503] & ~reg_be))) |
               (addr_hit[ 504] & (|(SCMI_PERMIT[ 504] & ~reg_be))) |
               (addr_hit[ 505] & (|(SCMI_PERMIT[ 505] & ~reg_be))) |
               (addr_hit[ 506] & (|(SCMI_PERMIT[ 506] & ~reg_be))) |
               (addr_hit[ 507] & (|(SCMI_PERMIT[ 507] & ~reg_be))) |
               (addr_hit[ 508] & (|(SCMI_PERMIT[ 508] & ~reg_be))) |
               (addr_hit[ 509] & (|(SCMI_PERMIT[ 509] & ~reg_be))) |
               (addr_hit[ 510] & (|(SCMI_PERMIT[ 510] & ~reg_be))) |
               (addr_hit[ 511] & (|(SCMI_PERMIT[ 511] & ~reg_be))) |
               (addr_hit[ 512] & (|(SCMI_PERMIT[ 512] & ~reg_be))) |
               (addr_hit[ 513] & (|(SCMI_PERMIT[ 513] & ~reg_be))) |
               (addr_hit[ 514] & (|(SCMI_PERMIT[ 514] & ~reg_be))) |
               (addr_hit[ 515] & (|(SCMI_PERMIT[ 515] & ~reg_be))) |
               (addr_hit[ 516] & (|(SCMI_PERMIT[ 516] & ~reg_be))) |
               (addr_hit[ 517] & (|(SCMI_PERMIT[ 517] & ~reg_be))) |
               (addr_hit[ 518] & (|(SCMI_PERMIT[ 518] & ~reg_be))) |
               (addr_hit[ 519] & (|(SCMI_PERMIT[ 519] & ~reg_be))) |
               (addr_hit[ 520] & (|(SCMI_PERMIT[ 520] & ~reg_be))) |
               (addr_hit[ 521] & (|(SCMI_PERMIT[ 521] & ~reg_be))) |
               (addr_hit[ 522] & (|(SCMI_PERMIT[ 522] & ~reg_be))) |
               (addr_hit[ 523] & (|(SCMI_PERMIT[ 523] & ~reg_be))) |
               (addr_hit[ 524] & (|(SCMI_PERMIT[ 524] & ~reg_be))) |
               (addr_hit[ 525] & (|(SCMI_PERMIT[ 525] & ~reg_be))) |
               (addr_hit[ 526] & (|(SCMI_PERMIT[ 526] & ~reg_be))) |
               (addr_hit[ 527] & (|(SCMI_PERMIT[ 527] & ~reg_be))) |
               (addr_hit[ 528] & (|(SCMI_PERMIT[ 528] & ~reg_be))) |
               (addr_hit[ 529] & (|(SCMI_PERMIT[ 529] & ~reg_be))) |
               (addr_hit[ 530] & (|(SCMI_PERMIT[ 530] & ~reg_be))) |
               (addr_hit[ 531] & (|(SCMI_PERMIT[ 531] & ~reg_be))) |
               (addr_hit[ 532] & (|(SCMI_PERMIT[ 532] & ~reg_be))) |
               (addr_hit[ 533] & (|(SCMI_PERMIT[ 533] & ~reg_be))) |
               (addr_hit[ 534] & (|(SCMI_PERMIT[ 534] & ~reg_be))) |
               (addr_hit[ 535] & (|(SCMI_PERMIT[ 535] & ~reg_be))) |
               (addr_hit[ 536] & (|(SCMI_PERMIT[ 536] & ~reg_be))) |
               (addr_hit[ 537] & (|(SCMI_PERMIT[ 537] & ~reg_be))) |
               (addr_hit[ 538] & (|(SCMI_PERMIT[ 538] & ~reg_be))) |
               (addr_hit[ 539] & (|(SCMI_PERMIT[ 539] & ~reg_be))) |
               (addr_hit[ 540] & (|(SCMI_PERMIT[ 540] & ~reg_be))) |
               (addr_hit[ 541] & (|(SCMI_PERMIT[ 541] & ~reg_be))) |
               (addr_hit[ 542] & (|(SCMI_PERMIT[ 542] & ~reg_be))) |
               (addr_hit[ 543] & (|(SCMI_PERMIT[ 543] & ~reg_be))) |
               (addr_hit[ 544] & (|(SCMI_PERMIT[ 544] & ~reg_be))) |
               (addr_hit[ 545] & (|(SCMI_PERMIT[ 545] & ~reg_be))) |
               (addr_hit[ 546] & (|(SCMI_PERMIT[ 546] & ~reg_be))) |
               (addr_hit[ 547] & (|(SCMI_PERMIT[ 547] & ~reg_be))) |
               (addr_hit[ 548] & (|(SCMI_PERMIT[ 548] & ~reg_be))) |
               (addr_hit[ 549] & (|(SCMI_PERMIT[ 549] & ~reg_be))) |
               (addr_hit[ 550] & (|(SCMI_PERMIT[ 550] & ~reg_be))) |
               (addr_hit[ 551] & (|(SCMI_PERMIT[ 551] & ~reg_be))) |
               (addr_hit[ 552] & (|(SCMI_PERMIT[ 552] & ~reg_be))) |
               (addr_hit[ 553] & (|(SCMI_PERMIT[ 553] & ~reg_be))) |
               (addr_hit[ 554] & (|(SCMI_PERMIT[ 554] & ~reg_be))) |
               (addr_hit[ 555] & (|(SCMI_PERMIT[ 555] & ~reg_be))) |
               (addr_hit[ 556] & (|(SCMI_PERMIT[ 556] & ~reg_be))) |
               (addr_hit[ 557] & (|(SCMI_PERMIT[ 557] & ~reg_be))) |
               (addr_hit[ 558] & (|(SCMI_PERMIT[ 558] & ~reg_be))) |
               (addr_hit[ 559] & (|(SCMI_PERMIT[ 559] & ~reg_be))) |
               (addr_hit[ 560] & (|(SCMI_PERMIT[ 560] & ~reg_be))) |
               (addr_hit[ 561] & (|(SCMI_PERMIT[ 561] & ~reg_be))) |
               (addr_hit[ 562] & (|(SCMI_PERMIT[ 562] & ~reg_be))) |
               (addr_hit[ 563] & (|(SCMI_PERMIT[ 563] & ~reg_be))) |
               (addr_hit[ 564] & (|(SCMI_PERMIT[ 564] & ~reg_be))) |
               (addr_hit[ 565] & (|(SCMI_PERMIT[ 565] & ~reg_be))) |
               (addr_hit[ 566] & (|(SCMI_PERMIT[ 566] & ~reg_be))) |
               (addr_hit[ 567] & (|(SCMI_PERMIT[ 567] & ~reg_be))) |
               (addr_hit[ 568] & (|(SCMI_PERMIT[ 568] & ~reg_be))) |
               (addr_hit[ 569] & (|(SCMI_PERMIT[ 569] & ~reg_be))) |
               (addr_hit[ 570] & (|(SCMI_PERMIT[ 570] & ~reg_be))) |
               (addr_hit[ 571] & (|(SCMI_PERMIT[ 571] & ~reg_be))) |
               (addr_hit[ 572] & (|(SCMI_PERMIT[ 572] & ~reg_be))) |
               (addr_hit[ 573] & (|(SCMI_PERMIT[ 573] & ~reg_be))) |
               (addr_hit[ 574] & (|(SCMI_PERMIT[ 574] & ~reg_be))) |
               (addr_hit[ 575] & (|(SCMI_PERMIT[ 575] & ~reg_be))) |
               (addr_hit[ 576] & (|(SCMI_PERMIT[ 576] & ~reg_be))) |
               (addr_hit[ 577] & (|(SCMI_PERMIT[ 577] & ~reg_be))) |
               (addr_hit[ 578] & (|(SCMI_PERMIT[ 578] & ~reg_be))) |
               (addr_hit[ 579] & (|(SCMI_PERMIT[ 579] & ~reg_be))) |
               (addr_hit[ 580] & (|(SCMI_PERMIT[ 580] & ~reg_be))) |
               (addr_hit[ 581] & (|(SCMI_PERMIT[ 581] & ~reg_be))) |
               (addr_hit[ 582] & (|(SCMI_PERMIT[ 582] & ~reg_be))) |
               (addr_hit[ 583] & (|(SCMI_PERMIT[ 583] & ~reg_be))) |
               (addr_hit[ 584] & (|(SCMI_PERMIT[ 584] & ~reg_be))) |
               (addr_hit[ 585] & (|(SCMI_PERMIT[ 585] & ~reg_be))) |
               (addr_hit[ 586] & (|(SCMI_PERMIT[ 586] & ~reg_be))) |
               (addr_hit[ 587] & (|(SCMI_PERMIT[ 587] & ~reg_be))) |
               (addr_hit[ 588] & (|(SCMI_PERMIT[ 588] & ~reg_be))) |
               (addr_hit[ 589] & (|(SCMI_PERMIT[ 589] & ~reg_be))) |
               (addr_hit[ 590] & (|(SCMI_PERMIT[ 590] & ~reg_be))) |
               (addr_hit[ 591] & (|(SCMI_PERMIT[ 591] & ~reg_be))) |
               (addr_hit[ 592] & (|(SCMI_PERMIT[ 592] & ~reg_be))) |
               (addr_hit[ 593] & (|(SCMI_PERMIT[ 593] & ~reg_be))) |
               (addr_hit[ 594] & (|(SCMI_PERMIT[ 594] & ~reg_be))) |
               (addr_hit[ 595] & (|(SCMI_PERMIT[ 595] & ~reg_be))) |
               (addr_hit[ 596] & (|(SCMI_PERMIT[ 596] & ~reg_be))) |
               (addr_hit[ 597] & (|(SCMI_PERMIT[ 597] & ~reg_be))) |
               (addr_hit[ 598] & (|(SCMI_PERMIT[ 598] & ~reg_be))) |
               (addr_hit[ 599] & (|(SCMI_PERMIT[ 599] & ~reg_be))) |
               (addr_hit[ 600] & (|(SCMI_PERMIT[ 600] & ~reg_be))) |
               (addr_hit[ 601] & (|(SCMI_PERMIT[ 601] & ~reg_be))) |
               (addr_hit[ 602] & (|(SCMI_PERMIT[ 602] & ~reg_be))) |
               (addr_hit[ 603] & (|(SCMI_PERMIT[ 603] & ~reg_be))) |
               (addr_hit[ 604] & (|(SCMI_PERMIT[ 604] & ~reg_be))) |
               (addr_hit[ 605] & (|(SCMI_PERMIT[ 605] & ~reg_be))) |
               (addr_hit[ 606] & (|(SCMI_PERMIT[ 606] & ~reg_be))) |
               (addr_hit[ 607] & (|(SCMI_PERMIT[ 607] & ~reg_be))) |
               (addr_hit[ 608] & (|(SCMI_PERMIT[ 608] & ~reg_be))) |
               (addr_hit[ 609] & (|(SCMI_PERMIT[ 609] & ~reg_be))) |
               (addr_hit[ 610] & (|(SCMI_PERMIT[ 610] & ~reg_be))) |
               (addr_hit[ 611] & (|(SCMI_PERMIT[ 611] & ~reg_be))) |
               (addr_hit[ 612] & (|(SCMI_PERMIT[ 612] & ~reg_be))) |
               (addr_hit[ 613] & (|(SCMI_PERMIT[ 613] & ~reg_be))) |
               (addr_hit[ 614] & (|(SCMI_PERMIT[ 614] & ~reg_be))) |
               (addr_hit[ 615] & (|(SCMI_PERMIT[ 615] & ~reg_be))) |
               (addr_hit[ 616] & (|(SCMI_PERMIT[ 616] & ~reg_be))) |
               (addr_hit[ 617] & (|(SCMI_PERMIT[ 617] & ~reg_be))) |
               (addr_hit[ 618] & (|(SCMI_PERMIT[ 618] & ~reg_be))) |
               (addr_hit[ 619] & (|(SCMI_PERMIT[ 619] & ~reg_be))) |
               (addr_hit[ 620] & (|(SCMI_PERMIT[ 620] & ~reg_be))) |
               (addr_hit[ 621] & (|(SCMI_PERMIT[ 621] & ~reg_be))) |
               (addr_hit[ 622] & (|(SCMI_PERMIT[ 622] & ~reg_be))) |
               (addr_hit[ 623] & (|(SCMI_PERMIT[ 623] & ~reg_be))) |
               (addr_hit[ 624] & (|(SCMI_PERMIT[ 624] & ~reg_be))) |
               (addr_hit[ 625] & (|(SCMI_PERMIT[ 625] & ~reg_be))) |
               (addr_hit[ 626] & (|(SCMI_PERMIT[ 626] & ~reg_be))) |
               (addr_hit[ 627] & (|(SCMI_PERMIT[ 627] & ~reg_be))) |
               (addr_hit[ 628] & (|(SCMI_PERMIT[ 628] & ~reg_be))) |
               (addr_hit[ 629] & (|(SCMI_PERMIT[ 629] & ~reg_be))) |
               (addr_hit[ 630] & (|(SCMI_PERMIT[ 630] & ~reg_be))) |
               (addr_hit[ 631] & (|(SCMI_PERMIT[ 631] & ~reg_be))) |
               (addr_hit[ 632] & (|(SCMI_PERMIT[ 632] & ~reg_be))) |
               (addr_hit[ 633] & (|(SCMI_PERMIT[ 633] & ~reg_be))) |
               (addr_hit[ 634] & (|(SCMI_PERMIT[ 634] & ~reg_be))) |
               (addr_hit[ 635] & (|(SCMI_PERMIT[ 635] & ~reg_be))) |
               (addr_hit[ 636] & (|(SCMI_PERMIT[ 636] & ~reg_be))) |
               (addr_hit[ 637] & (|(SCMI_PERMIT[ 637] & ~reg_be))) |
               (addr_hit[ 638] & (|(SCMI_PERMIT[ 638] & ~reg_be))) |
               (addr_hit[ 639] & (|(SCMI_PERMIT[ 639] & ~reg_be))) |
               (addr_hit[ 640] & (|(SCMI_PERMIT[ 640] & ~reg_be))) |
               (addr_hit[ 641] & (|(SCMI_PERMIT[ 641] & ~reg_be))) |
               (addr_hit[ 642] & (|(SCMI_PERMIT[ 642] & ~reg_be))) |
               (addr_hit[ 643] & (|(SCMI_PERMIT[ 643] & ~reg_be))) |
               (addr_hit[ 644] & (|(SCMI_PERMIT[ 644] & ~reg_be))) |
               (addr_hit[ 645] & (|(SCMI_PERMIT[ 645] & ~reg_be))) |
               (addr_hit[ 646] & (|(SCMI_PERMIT[ 646] & ~reg_be))) |
               (addr_hit[ 647] & (|(SCMI_PERMIT[ 647] & ~reg_be))) |
               (addr_hit[ 648] & (|(SCMI_PERMIT[ 648] & ~reg_be))) |
               (addr_hit[ 649] & (|(SCMI_PERMIT[ 649] & ~reg_be))) |
               (addr_hit[ 650] & (|(SCMI_PERMIT[ 650] & ~reg_be))) |
               (addr_hit[ 651] & (|(SCMI_PERMIT[ 651] & ~reg_be))) |
               (addr_hit[ 652] & (|(SCMI_PERMIT[ 652] & ~reg_be))) |
               (addr_hit[ 653] & (|(SCMI_PERMIT[ 653] & ~reg_be))) |
               (addr_hit[ 654] & (|(SCMI_PERMIT[ 654] & ~reg_be))) |
               (addr_hit[ 655] & (|(SCMI_PERMIT[ 655] & ~reg_be))) |
               (addr_hit[ 656] & (|(SCMI_PERMIT[ 656] & ~reg_be))) |
               (addr_hit[ 657] & (|(SCMI_PERMIT[ 657] & ~reg_be))) |
               (addr_hit[ 658] & (|(SCMI_PERMIT[ 658] & ~reg_be))) |
               (addr_hit[ 659] & (|(SCMI_PERMIT[ 659] & ~reg_be))) |
               (addr_hit[ 660] & (|(SCMI_PERMIT[ 660] & ~reg_be))) |
               (addr_hit[ 661] & (|(SCMI_PERMIT[ 661] & ~reg_be))) |
               (addr_hit[ 662] & (|(SCMI_PERMIT[ 662] & ~reg_be))) |
               (addr_hit[ 663] & (|(SCMI_PERMIT[ 663] & ~reg_be))) |
               (addr_hit[ 664] & (|(SCMI_PERMIT[ 664] & ~reg_be))) |
               (addr_hit[ 665] & (|(SCMI_PERMIT[ 665] & ~reg_be))) |
               (addr_hit[ 666] & (|(SCMI_PERMIT[ 666] & ~reg_be))) |
               (addr_hit[ 667] & (|(SCMI_PERMIT[ 667] & ~reg_be))) |
               (addr_hit[ 668] & (|(SCMI_PERMIT[ 668] & ~reg_be))) |
               (addr_hit[ 669] & (|(SCMI_PERMIT[ 669] & ~reg_be))) |
               (addr_hit[ 670] & (|(SCMI_PERMIT[ 670] & ~reg_be))) |
               (addr_hit[ 671] & (|(SCMI_PERMIT[ 671] & ~reg_be))) |
               (addr_hit[ 672] & (|(SCMI_PERMIT[ 672] & ~reg_be))) |
               (addr_hit[ 673] & (|(SCMI_PERMIT[ 673] & ~reg_be))) |
               (addr_hit[ 674] & (|(SCMI_PERMIT[ 674] & ~reg_be))) |
               (addr_hit[ 675] & (|(SCMI_PERMIT[ 675] & ~reg_be))) |
               (addr_hit[ 676] & (|(SCMI_PERMIT[ 676] & ~reg_be))) |
               (addr_hit[ 677] & (|(SCMI_PERMIT[ 677] & ~reg_be))) |
               (addr_hit[ 678] & (|(SCMI_PERMIT[ 678] & ~reg_be))) |
               (addr_hit[ 679] & (|(SCMI_PERMIT[ 679] & ~reg_be))) |
               (addr_hit[ 680] & (|(SCMI_PERMIT[ 680] & ~reg_be))) |
               (addr_hit[ 681] & (|(SCMI_PERMIT[ 681] & ~reg_be))) |
               (addr_hit[ 682] & (|(SCMI_PERMIT[ 682] & ~reg_be))) |
               (addr_hit[ 683] & (|(SCMI_PERMIT[ 683] & ~reg_be))) |
               (addr_hit[ 684] & (|(SCMI_PERMIT[ 684] & ~reg_be))) |
               (addr_hit[ 685] & (|(SCMI_PERMIT[ 685] & ~reg_be))) |
               (addr_hit[ 686] & (|(SCMI_PERMIT[ 686] & ~reg_be))) |
               (addr_hit[ 687] & (|(SCMI_PERMIT[ 687] & ~reg_be))) |
               (addr_hit[ 688] & (|(SCMI_PERMIT[ 688] & ~reg_be))) |
               (addr_hit[ 689] & (|(SCMI_PERMIT[ 689] & ~reg_be))) |
               (addr_hit[ 690] & (|(SCMI_PERMIT[ 690] & ~reg_be))) |
               (addr_hit[ 691] & (|(SCMI_PERMIT[ 691] & ~reg_be))) |
               (addr_hit[ 692] & (|(SCMI_PERMIT[ 692] & ~reg_be))) |
               (addr_hit[ 693] & (|(SCMI_PERMIT[ 693] & ~reg_be))) |
               (addr_hit[ 694] & (|(SCMI_PERMIT[ 694] & ~reg_be))) |
               (addr_hit[ 695] & (|(SCMI_PERMIT[ 695] & ~reg_be))) |
               (addr_hit[ 696] & (|(SCMI_PERMIT[ 696] & ~reg_be))) |
               (addr_hit[ 697] & (|(SCMI_PERMIT[ 697] & ~reg_be))) |
               (addr_hit[ 698] & (|(SCMI_PERMIT[ 698] & ~reg_be))) |
               (addr_hit[ 699] & (|(SCMI_PERMIT[ 699] & ~reg_be))) |
               (addr_hit[ 700] & (|(SCMI_PERMIT[ 700] & ~reg_be))) |
               (addr_hit[ 701] & (|(SCMI_PERMIT[ 701] & ~reg_be))) |
               (addr_hit[ 702] & (|(SCMI_PERMIT[ 702] & ~reg_be))) |
               (addr_hit[ 703] & (|(SCMI_PERMIT[ 703] & ~reg_be))) |
               (addr_hit[ 704] & (|(SCMI_PERMIT[ 704] & ~reg_be))) |
               (addr_hit[ 705] & (|(SCMI_PERMIT[ 705] & ~reg_be))) |
               (addr_hit[ 706] & (|(SCMI_PERMIT[ 706] & ~reg_be))) |
               (addr_hit[ 707] & (|(SCMI_PERMIT[ 707] & ~reg_be))) |
               (addr_hit[ 708] & (|(SCMI_PERMIT[ 708] & ~reg_be))) |
               (addr_hit[ 709] & (|(SCMI_PERMIT[ 709] & ~reg_be))) |
               (addr_hit[ 710] & (|(SCMI_PERMIT[ 710] & ~reg_be))) |
               (addr_hit[ 711] & (|(SCMI_PERMIT[ 711] & ~reg_be))) |
               (addr_hit[ 712] & (|(SCMI_PERMIT[ 712] & ~reg_be))) |
               (addr_hit[ 713] & (|(SCMI_PERMIT[ 713] & ~reg_be))) |
               (addr_hit[ 714] & (|(SCMI_PERMIT[ 714] & ~reg_be))) |
               (addr_hit[ 715] & (|(SCMI_PERMIT[ 715] & ~reg_be))) |
               (addr_hit[ 716] & (|(SCMI_PERMIT[ 716] & ~reg_be))) |
               (addr_hit[ 717] & (|(SCMI_PERMIT[ 717] & ~reg_be))) |
               (addr_hit[ 718] & (|(SCMI_PERMIT[ 718] & ~reg_be))) |
               (addr_hit[ 719] & (|(SCMI_PERMIT[ 719] & ~reg_be))) |
               (addr_hit[ 720] & (|(SCMI_PERMIT[ 720] & ~reg_be))) |
               (addr_hit[ 721] & (|(SCMI_PERMIT[ 721] & ~reg_be))) |
               (addr_hit[ 722] & (|(SCMI_PERMIT[ 722] & ~reg_be))) |
               (addr_hit[ 723] & (|(SCMI_PERMIT[ 723] & ~reg_be))) |
               (addr_hit[ 724] & (|(SCMI_PERMIT[ 724] & ~reg_be))) |
               (addr_hit[ 725] & (|(SCMI_PERMIT[ 725] & ~reg_be))) |
               (addr_hit[ 726] & (|(SCMI_PERMIT[ 726] & ~reg_be))) |
               (addr_hit[ 727] & (|(SCMI_PERMIT[ 727] & ~reg_be))) |
               (addr_hit[ 728] & (|(SCMI_PERMIT[ 728] & ~reg_be))) |
               (addr_hit[ 729] & (|(SCMI_PERMIT[ 729] & ~reg_be))) |
               (addr_hit[ 730] & (|(SCMI_PERMIT[ 730] & ~reg_be))) |
               (addr_hit[ 731] & (|(SCMI_PERMIT[ 731] & ~reg_be))) |
               (addr_hit[ 732] & (|(SCMI_PERMIT[ 732] & ~reg_be))) |
               (addr_hit[ 733] & (|(SCMI_PERMIT[ 733] & ~reg_be))) |
               (addr_hit[ 734] & (|(SCMI_PERMIT[ 734] & ~reg_be))) |
               (addr_hit[ 735] & (|(SCMI_PERMIT[ 735] & ~reg_be))) |
               (addr_hit[ 736] & (|(SCMI_PERMIT[ 736] & ~reg_be))) |
               (addr_hit[ 737] & (|(SCMI_PERMIT[ 737] & ~reg_be))) |
               (addr_hit[ 738] & (|(SCMI_PERMIT[ 738] & ~reg_be))) |
               (addr_hit[ 739] & (|(SCMI_PERMIT[ 739] & ~reg_be))) |
               (addr_hit[ 740] & (|(SCMI_PERMIT[ 740] & ~reg_be))) |
               (addr_hit[ 741] & (|(SCMI_PERMIT[ 741] & ~reg_be))) |
               (addr_hit[ 742] & (|(SCMI_PERMIT[ 742] & ~reg_be))) |
               (addr_hit[ 743] & (|(SCMI_PERMIT[ 743] & ~reg_be))) |
               (addr_hit[ 744] & (|(SCMI_PERMIT[ 744] & ~reg_be))) |
               (addr_hit[ 745] & (|(SCMI_PERMIT[ 745] & ~reg_be))) |
               (addr_hit[ 746] & (|(SCMI_PERMIT[ 746] & ~reg_be))) |
               (addr_hit[ 747] & (|(SCMI_PERMIT[ 747] & ~reg_be))) |
               (addr_hit[ 748] & (|(SCMI_PERMIT[ 748] & ~reg_be))) |
               (addr_hit[ 749] & (|(SCMI_PERMIT[ 749] & ~reg_be))) |
               (addr_hit[ 750] & (|(SCMI_PERMIT[ 750] & ~reg_be))) |
               (addr_hit[ 751] & (|(SCMI_PERMIT[ 751] & ~reg_be))) |
               (addr_hit[ 752] & (|(SCMI_PERMIT[ 752] & ~reg_be))) |
               (addr_hit[ 753] & (|(SCMI_PERMIT[ 753] & ~reg_be))) |
               (addr_hit[ 754] & (|(SCMI_PERMIT[ 754] & ~reg_be))) |
               (addr_hit[ 755] & (|(SCMI_PERMIT[ 755] & ~reg_be))) |
               (addr_hit[ 756] & (|(SCMI_PERMIT[ 756] & ~reg_be))) |
               (addr_hit[ 757] & (|(SCMI_PERMIT[ 757] & ~reg_be))) |
               (addr_hit[ 758] & (|(SCMI_PERMIT[ 758] & ~reg_be))) |
               (addr_hit[ 759] & (|(SCMI_PERMIT[ 759] & ~reg_be))) |
               (addr_hit[ 760] & (|(SCMI_PERMIT[ 760] & ~reg_be))) |
               (addr_hit[ 761] & (|(SCMI_PERMIT[ 761] & ~reg_be))) |
               (addr_hit[ 762] & (|(SCMI_PERMIT[ 762] & ~reg_be))) |
               (addr_hit[ 763] & (|(SCMI_PERMIT[ 763] & ~reg_be))) |
               (addr_hit[ 764] & (|(SCMI_PERMIT[ 764] & ~reg_be))) |
               (addr_hit[ 765] & (|(SCMI_PERMIT[ 765] & ~reg_be))) |
               (addr_hit[ 766] & (|(SCMI_PERMIT[ 766] & ~reg_be))) |
               (addr_hit[ 767] & (|(SCMI_PERMIT[ 767] & ~reg_be))) |
               (addr_hit[ 768] & (|(SCMI_PERMIT[ 768] & ~reg_be))) |
               (addr_hit[ 769] & (|(SCMI_PERMIT[ 769] & ~reg_be))) |
               (addr_hit[ 770] & (|(SCMI_PERMIT[ 770] & ~reg_be))) |
               (addr_hit[ 771] & (|(SCMI_PERMIT[ 771] & ~reg_be))) |
               (addr_hit[ 772] & (|(SCMI_PERMIT[ 772] & ~reg_be))) |
               (addr_hit[ 773] & (|(SCMI_PERMIT[ 773] & ~reg_be))) |
               (addr_hit[ 774] & (|(SCMI_PERMIT[ 774] & ~reg_be))) |
               (addr_hit[ 775] & (|(SCMI_PERMIT[ 775] & ~reg_be))) |
               (addr_hit[ 776] & (|(SCMI_PERMIT[ 776] & ~reg_be))) |
               (addr_hit[ 777] & (|(SCMI_PERMIT[ 777] & ~reg_be))) |
               (addr_hit[ 778] & (|(SCMI_PERMIT[ 778] & ~reg_be))) |
               (addr_hit[ 779] & (|(SCMI_PERMIT[ 779] & ~reg_be))) |
               (addr_hit[ 780] & (|(SCMI_PERMIT[ 780] & ~reg_be))) |
               (addr_hit[ 781] & (|(SCMI_PERMIT[ 781] & ~reg_be))) |
               (addr_hit[ 782] & (|(SCMI_PERMIT[ 782] & ~reg_be))) |
               (addr_hit[ 783] & (|(SCMI_PERMIT[ 783] & ~reg_be))) |
               (addr_hit[ 784] & (|(SCMI_PERMIT[ 784] & ~reg_be))) |
               (addr_hit[ 785] & (|(SCMI_PERMIT[ 785] & ~reg_be))) |
               (addr_hit[ 786] & (|(SCMI_PERMIT[ 786] & ~reg_be))) |
               (addr_hit[ 787] & (|(SCMI_PERMIT[ 787] & ~reg_be))) |
               (addr_hit[ 788] & (|(SCMI_PERMIT[ 788] & ~reg_be))) |
               (addr_hit[ 789] & (|(SCMI_PERMIT[ 789] & ~reg_be))) |
               (addr_hit[ 790] & (|(SCMI_PERMIT[ 790] & ~reg_be))) |
               (addr_hit[ 791] & (|(SCMI_PERMIT[ 791] & ~reg_be))) |
               (addr_hit[ 792] & (|(SCMI_PERMIT[ 792] & ~reg_be))) |
               (addr_hit[ 793] & (|(SCMI_PERMIT[ 793] & ~reg_be))) |
               (addr_hit[ 794] & (|(SCMI_PERMIT[ 794] & ~reg_be))) |
               (addr_hit[ 795] & (|(SCMI_PERMIT[ 795] & ~reg_be))) |
               (addr_hit[ 796] & (|(SCMI_PERMIT[ 796] & ~reg_be))) |
               (addr_hit[ 797] & (|(SCMI_PERMIT[ 797] & ~reg_be))) |
               (addr_hit[ 798] & (|(SCMI_PERMIT[ 798] & ~reg_be))) |
               (addr_hit[ 799] & (|(SCMI_PERMIT[ 799] & ~reg_be))) |
               (addr_hit[ 800] & (|(SCMI_PERMIT[ 800] & ~reg_be))) |
               (addr_hit[ 801] & (|(SCMI_PERMIT[ 801] & ~reg_be))) |
               (addr_hit[ 802] & (|(SCMI_PERMIT[ 802] & ~reg_be))) |
               (addr_hit[ 803] & (|(SCMI_PERMIT[ 803] & ~reg_be))) |
               (addr_hit[ 804] & (|(SCMI_PERMIT[ 804] & ~reg_be))) |
               (addr_hit[ 805] & (|(SCMI_PERMIT[ 805] & ~reg_be))) |
               (addr_hit[ 806] & (|(SCMI_PERMIT[ 806] & ~reg_be))) |
               (addr_hit[ 807] & (|(SCMI_PERMIT[ 807] & ~reg_be))) |
               (addr_hit[ 808] & (|(SCMI_PERMIT[ 808] & ~reg_be))) |
               (addr_hit[ 809] & (|(SCMI_PERMIT[ 809] & ~reg_be))) |
               (addr_hit[ 810] & (|(SCMI_PERMIT[ 810] & ~reg_be))) |
               (addr_hit[ 811] & (|(SCMI_PERMIT[ 811] & ~reg_be))) |
               (addr_hit[ 812] & (|(SCMI_PERMIT[ 812] & ~reg_be))) |
               (addr_hit[ 813] & (|(SCMI_PERMIT[ 813] & ~reg_be))) |
               (addr_hit[ 814] & (|(SCMI_PERMIT[ 814] & ~reg_be))) |
               (addr_hit[ 815] & (|(SCMI_PERMIT[ 815] & ~reg_be))) |
               (addr_hit[ 816] & (|(SCMI_PERMIT[ 816] & ~reg_be))) |
               (addr_hit[ 817] & (|(SCMI_PERMIT[ 817] & ~reg_be))) |
               (addr_hit[ 818] & (|(SCMI_PERMIT[ 818] & ~reg_be))) |
               (addr_hit[ 819] & (|(SCMI_PERMIT[ 819] & ~reg_be))) |
               (addr_hit[ 820] & (|(SCMI_PERMIT[ 820] & ~reg_be))) |
               (addr_hit[ 821] & (|(SCMI_PERMIT[ 821] & ~reg_be))) |
               (addr_hit[ 822] & (|(SCMI_PERMIT[ 822] & ~reg_be))) |
               (addr_hit[ 823] & (|(SCMI_PERMIT[ 823] & ~reg_be))) |
               (addr_hit[ 824] & (|(SCMI_PERMIT[ 824] & ~reg_be))) |
               (addr_hit[ 825] & (|(SCMI_PERMIT[ 825] & ~reg_be))) |
               (addr_hit[ 826] & (|(SCMI_PERMIT[ 826] & ~reg_be))) |
               (addr_hit[ 827] & (|(SCMI_PERMIT[ 827] & ~reg_be))) |
               (addr_hit[ 828] & (|(SCMI_PERMIT[ 828] & ~reg_be))) |
               (addr_hit[ 829] & (|(SCMI_PERMIT[ 829] & ~reg_be))) |
               (addr_hit[ 830] & (|(SCMI_PERMIT[ 830] & ~reg_be))) |
               (addr_hit[ 831] & (|(SCMI_PERMIT[ 831] & ~reg_be))) |
               (addr_hit[ 832] & (|(SCMI_PERMIT[ 832] & ~reg_be))) |
               (addr_hit[ 833] & (|(SCMI_PERMIT[ 833] & ~reg_be))) |
               (addr_hit[ 834] & (|(SCMI_PERMIT[ 834] & ~reg_be))) |
               (addr_hit[ 835] & (|(SCMI_PERMIT[ 835] & ~reg_be))) |
               (addr_hit[ 836] & (|(SCMI_PERMIT[ 836] & ~reg_be))) |
               (addr_hit[ 837] & (|(SCMI_PERMIT[ 837] & ~reg_be))) |
               (addr_hit[ 838] & (|(SCMI_PERMIT[ 838] & ~reg_be))) |
               (addr_hit[ 839] & (|(SCMI_PERMIT[ 839] & ~reg_be))) |
               (addr_hit[ 840] & (|(SCMI_PERMIT[ 840] & ~reg_be))) |
               (addr_hit[ 841] & (|(SCMI_PERMIT[ 841] & ~reg_be))) |
               (addr_hit[ 842] & (|(SCMI_PERMIT[ 842] & ~reg_be))) |
               (addr_hit[ 843] & (|(SCMI_PERMIT[ 843] & ~reg_be))) |
               (addr_hit[ 844] & (|(SCMI_PERMIT[ 844] & ~reg_be))) |
               (addr_hit[ 845] & (|(SCMI_PERMIT[ 845] & ~reg_be))) |
               (addr_hit[ 846] & (|(SCMI_PERMIT[ 846] & ~reg_be))) |
               (addr_hit[ 847] & (|(SCMI_PERMIT[ 847] & ~reg_be))) |
               (addr_hit[ 848] & (|(SCMI_PERMIT[ 848] & ~reg_be))) |
               (addr_hit[ 849] & (|(SCMI_PERMIT[ 849] & ~reg_be))) |
               (addr_hit[ 850] & (|(SCMI_PERMIT[ 850] & ~reg_be))) |
               (addr_hit[ 851] & (|(SCMI_PERMIT[ 851] & ~reg_be))) |
               (addr_hit[ 852] & (|(SCMI_PERMIT[ 852] & ~reg_be))) |
               (addr_hit[ 853] & (|(SCMI_PERMIT[ 853] & ~reg_be))) |
               (addr_hit[ 854] & (|(SCMI_PERMIT[ 854] & ~reg_be))) |
               (addr_hit[ 855] & (|(SCMI_PERMIT[ 855] & ~reg_be))) |
               (addr_hit[ 856] & (|(SCMI_PERMIT[ 856] & ~reg_be))) |
               (addr_hit[ 857] & (|(SCMI_PERMIT[ 857] & ~reg_be))) |
               (addr_hit[ 858] & (|(SCMI_PERMIT[ 858] & ~reg_be))) |
               (addr_hit[ 859] & (|(SCMI_PERMIT[ 859] & ~reg_be))) |
               (addr_hit[ 860] & (|(SCMI_PERMIT[ 860] & ~reg_be))) |
               (addr_hit[ 861] & (|(SCMI_PERMIT[ 861] & ~reg_be))) |
               (addr_hit[ 862] & (|(SCMI_PERMIT[ 862] & ~reg_be))) |
               (addr_hit[ 863] & (|(SCMI_PERMIT[ 863] & ~reg_be))) |
               (addr_hit[ 864] & (|(SCMI_PERMIT[ 864] & ~reg_be))) |
               (addr_hit[ 865] & (|(SCMI_PERMIT[ 865] & ~reg_be))) |
               (addr_hit[ 866] & (|(SCMI_PERMIT[ 866] & ~reg_be))) |
               (addr_hit[ 867] & (|(SCMI_PERMIT[ 867] & ~reg_be))) |
               (addr_hit[ 868] & (|(SCMI_PERMIT[ 868] & ~reg_be))) |
               (addr_hit[ 869] & (|(SCMI_PERMIT[ 869] & ~reg_be))) |
               (addr_hit[ 870] & (|(SCMI_PERMIT[ 870] & ~reg_be))) |
               (addr_hit[ 871] & (|(SCMI_PERMIT[ 871] & ~reg_be))) |
               (addr_hit[ 872] & (|(SCMI_PERMIT[ 872] & ~reg_be))) |
               (addr_hit[ 873] & (|(SCMI_PERMIT[ 873] & ~reg_be))) |
               (addr_hit[ 874] & (|(SCMI_PERMIT[ 874] & ~reg_be))) |
               (addr_hit[ 875] & (|(SCMI_PERMIT[ 875] & ~reg_be))) |
               (addr_hit[ 876] & (|(SCMI_PERMIT[ 876] & ~reg_be))) |
               (addr_hit[ 877] & (|(SCMI_PERMIT[ 877] & ~reg_be))) |
               (addr_hit[ 878] & (|(SCMI_PERMIT[ 878] & ~reg_be))) |
               (addr_hit[ 879] & (|(SCMI_PERMIT[ 879] & ~reg_be))) |
               (addr_hit[ 880] & (|(SCMI_PERMIT[ 880] & ~reg_be))) |
               (addr_hit[ 881] & (|(SCMI_PERMIT[ 881] & ~reg_be))) |
               (addr_hit[ 882] & (|(SCMI_PERMIT[ 882] & ~reg_be))) |
               (addr_hit[ 883] & (|(SCMI_PERMIT[ 883] & ~reg_be))) |
               (addr_hit[ 884] & (|(SCMI_PERMIT[ 884] & ~reg_be))) |
               (addr_hit[ 885] & (|(SCMI_PERMIT[ 885] & ~reg_be))) |
               (addr_hit[ 886] & (|(SCMI_PERMIT[ 886] & ~reg_be))) |
               (addr_hit[ 887] & (|(SCMI_PERMIT[ 887] & ~reg_be))) |
               (addr_hit[ 888] & (|(SCMI_PERMIT[ 888] & ~reg_be))) |
               (addr_hit[ 889] & (|(SCMI_PERMIT[ 889] & ~reg_be))) |
               (addr_hit[ 890] & (|(SCMI_PERMIT[ 890] & ~reg_be))) |
               (addr_hit[ 891] & (|(SCMI_PERMIT[ 891] & ~reg_be))) |
               (addr_hit[ 892] & (|(SCMI_PERMIT[ 892] & ~reg_be))) |
               (addr_hit[ 893] & (|(SCMI_PERMIT[ 893] & ~reg_be))) |
               (addr_hit[ 894] & (|(SCMI_PERMIT[ 894] & ~reg_be))) |
               (addr_hit[ 895] & (|(SCMI_PERMIT[ 895] & ~reg_be))) |
               (addr_hit[ 896] & (|(SCMI_PERMIT[ 896] & ~reg_be))) |
               (addr_hit[ 897] & (|(SCMI_PERMIT[ 897] & ~reg_be))) |
               (addr_hit[ 898] & (|(SCMI_PERMIT[ 898] & ~reg_be))) |
               (addr_hit[ 899] & (|(SCMI_PERMIT[ 899] & ~reg_be))) |
               (addr_hit[ 900] & (|(SCMI_PERMIT[ 900] & ~reg_be))) |
               (addr_hit[ 901] & (|(SCMI_PERMIT[ 901] & ~reg_be))) |
               (addr_hit[ 902] & (|(SCMI_PERMIT[ 902] & ~reg_be))) |
               (addr_hit[ 903] & (|(SCMI_PERMIT[ 903] & ~reg_be))) |
               (addr_hit[ 904] & (|(SCMI_PERMIT[ 904] & ~reg_be))) |
               (addr_hit[ 905] & (|(SCMI_PERMIT[ 905] & ~reg_be))) |
               (addr_hit[ 906] & (|(SCMI_PERMIT[ 906] & ~reg_be))) |
               (addr_hit[ 907] & (|(SCMI_PERMIT[ 907] & ~reg_be))) |
               (addr_hit[ 908] & (|(SCMI_PERMIT[ 908] & ~reg_be))) |
               (addr_hit[ 909] & (|(SCMI_PERMIT[ 909] & ~reg_be))) |
               (addr_hit[ 910] & (|(SCMI_PERMIT[ 910] & ~reg_be))) |
               (addr_hit[ 911] & (|(SCMI_PERMIT[ 911] & ~reg_be))) |
               (addr_hit[ 912] & (|(SCMI_PERMIT[ 912] & ~reg_be))) |
               (addr_hit[ 913] & (|(SCMI_PERMIT[ 913] & ~reg_be))) |
               (addr_hit[ 914] & (|(SCMI_PERMIT[ 914] & ~reg_be))) |
               (addr_hit[ 915] & (|(SCMI_PERMIT[ 915] & ~reg_be))) |
               (addr_hit[ 916] & (|(SCMI_PERMIT[ 916] & ~reg_be))) |
               (addr_hit[ 917] & (|(SCMI_PERMIT[ 917] & ~reg_be))) |
               (addr_hit[ 918] & (|(SCMI_PERMIT[ 918] & ~reg_be))) |
               (addr_hit[ 919] & (|(SCMI_PERMIT[ 919] & ~reg_be))) |
               (addr_hit[ 920] & (|(SCMI_PERMIT[ 920] & ~reg_be))) |
               (addr_hit[ 921] & (|(SCMI_PERMIT[ 921] & ~reg_be))) |
               (addr_hit[ 922] & (|(SCMI_PERMIT[ 922] & ~reg_be))) |
               (addr_hit[ 923] & (|(SCMI_PERMIT[ 923] & ~reg_be))) |
               (addr_hit[ 924] & (|(SCMI_PERMIT[ 924] & ~reg_be))) |
               (addr_hit[ 925] & (|(SCMI_PERMIT[ 925] & ~reg_be))) |
               (addr_hit[ 926] & (|(SCMI_PERMIT[ 926] & ~reg_be))) |
               (addr_hit[ 927] & (|(SCMI_PERMIT[ 927] & ~reg_be))) |
               (addr_hit[ 928] & (|(SCMI_PERMIT[ 928] & ~reg_be))) |
               (addr_hit[ 929] & (|(SCMI_PERMIT[ 929] & ~reg_be))) |
               (addr_hit[ 930] & (|(SCMI_PERMIT[ 930] & ~reg_be))) |
               (addr_hit[ 931] & (|(SCMI_PERMIT[ 931] & ~reg_be))) |
               (addr_hit[ 932] & (|(SCMI_PERMIT[ 932] & ~reg_be))) |
               (addr_hit[ 933] & (|(SCMI_PERMIT[ 933] & ~reg_be))) |
               (addr_hit[ 934] & (|(SCMI_PERMIT[ 934] & ~reg_be))) |
               (addr_hit[ 935] & (|(SCMI_PERMIT[ 935] & ~reg_be))) |
               (addr_hit[ 936] & (|(SCMI_PERMIT[ 936] & ~reg_be))) |
               (addr_hit[ 937] & (|(SCMI_PERMIT[ 937] & ~reg_be))) |
               (addr_hit[ 938] & (|(SCMI_PERMIT[ 938] & ~reg_be))) |
               (addr_hit[ 939] & (|(SCMI_PERMIT[ 939] & ~reg_be))) |
               (addr_hit[ 940] & (|(SCMI_PERMIT[ 940] & ~reg_be))) |
               (addr_hit[ 941] & (|(SCMI_PERMIT[ 941] & ~reg_be))) |
               (addr_hit[ 942] & (|(SCMI_PERMIT[ 942] & ~reg_be))) |
               (addr_hit[ 943] & (|(SCMI_PERMIT[ 943] & ~reg_be))) |
               (addr_hit[ 944] & (|(SCMI_PERMIT[ 944] & ~reg_be))) |
               (addr_hit[ 945] & (|(SCMI_PERMIT[ 945] & ~reg_be))) |
               (addr_hit[ 946] & (|(SCMI_PERMIT[ 946] & ~reg_be))) |
               (addr_hit[ 947] & (|(SCMI_PERMIT[ 947] & ~reg_be))) |
               (addr_hit[ 948] & (|(SCMI_PERMIT[ 948] & ~reg_be))) |
               (addr_hit[ 949] & (|(SCMI_PERMIT[ 949] & ~reg_be))) |
               (addr_hit[ 950] & (|(SCMI_PERMIT[ 950] & ~reg_be))) |
               (addr_hit[ 951] & (|(SCMI_PERMIT[ 951] & ~reg_be))) |
               (addr_hit[ 952] & (|(SCMI_PERMIT[ 952] & ~reg_be))) |
               (addr_hit[ 953] & (|(SCMI_PERMIT[ 953] & ~reg_be))) |
               (addr_hit[ 954] & (|(SCMI_PERMIT[ 954] & ~reg_be))) |
               (addr_hit[ 955] & (|(SCMI_PERMIT[ 955] & ~reg_be))) |
               (addr_hit[ 956] & (|(SCMI_PERMIT[ 956] & ~reg_be))) |
               (addr_hit[ 957] & (|(SCMI_PERMIT[ 957] & ~reg_be))) |
               (addr_hit[ 958] & (|(SCMI_PERMIT[ 958] & ~reg_be))) |
               (addr_hit[ 959] & (|(SCMI_PERMIT[ 959] & ~reg_be))) |
               (addr_hit[ 960] & (|(SCMI_PERMIT[ 960] & ~reg_be))) |
               (addr_hit[ 961] & (|(SCMI_PERMIT[ 961] & ~reg_be))) |
               (addr_hit[ 962] & (|(SCMI_PERMIT[ 962] & ~reg_be))) |
               (addr_hit[ 963] & (|(SCMI_PERMIT[ 963] & ~reg_be))) |
               (addr_hit[ 964] & (|(SCMI_PERMIT[ 964] & ~reg_be))) |
               (addr_hit[ 965] & (|(SCMI_PERMIT[ 965] & ~reg_be))) |
               (addr_hit[ 966] & (|(SCMI_PERMIT[ 966] & ~reg_be))) |
               (addr_hit[ 967] & (|(SCMI_PERMIT[ 967] & ~reg_be))) |
               (addr_hit[ 968] & (|(SCMI_PERMIT[ 968] & ~reg_be))) |
               (addr_hit[ 969] & (|(SCMI_PERMIT[ 969] & ~reg_be))) |
               (addr_hit[ 970] & (|(SCMI_PERMIT[ 970] & ~reg_be))) |
               (addr_hit[ 971] & (|(SCMI_PERMIT[ 971] & ~reg_be))) |
               (addr_hit[ 972] & (|(SCMI_PERMIT[ 972] & ~reg_be))) |
               (addr_hit[ 973] & (|(SCMI_PERMIT[ 973] & ~reg_be))) |
               (addr_hit[ 974] & (|(SCMI_PERMIT[ 974] & ~reg_be))) |
               (addr_hit[ 975] & (|(SCMI_PERMIT[ 975] & ~reg_be))) |
               (addr_hit[ 976] & (|(SCMI_PERMIT[ 976] & ~reg_be))) |
               (addr_hit[ 977] & (|(SCMI_PERMIT[ 977] & ~reg_be))) |
               (addr_hit[ 978] & (|(SCMI_PERMIT[ 978] & ~reg_be))) |
               (addr_hit[ 979] & (|(SCMI_PERMIT[ 979] & ~reg_be))) |
               (addr_hit[ 980] & (|(SCMI_PERMIT[ 980] & ~reg_be))) |
               (addr_hit[ 981] & (|(SCMI_PERMIT[ 981] & ~reg_be))) |
               (addr_hit[ 982] & (|(SCMI_PERMIT[ 982] & ~reg_be))) |
               (addr_hit[ 983] & (|(SCMI_PERMIT[ 983] & ~reg_be))) |
               (addr_hit[ 984] & (|(SCMI_PERMIT[ 984] & ~reg_be))) |
               (addr_hit[ 985] & (|(SCMI_PERMIT[ 985] & ~reg_be))) |
               (addr_hit[ 986] & (|(SCMI_PERMIT[ 986] & ~reg_be))) |
               (addr_hit[ 987] & (|(SCMI_PERMIT[ 987] & ~reg_be))) |
               (addr_hit[ 988] & (|(SCMI_PERMIT[ 988] & ~reg_be))) |
               (addr_hit[ 989] & (|(SCMI_PERMIT[ 989] & ~reg_be))) |
               (addr_hit[ 990] & (|(SCMI_PERMIT[ 990] & ~reg_be))) |
               (addr_hit[ 991] & (|(SCMI_PERMIT[ 991] & ~reg_be))) |
               (addr_hit[ 992] & (|(SCMI_PERMIT[ 992] & ~reg_be))) |
               (addr_hit[ 993] & (|(SCMI_PERMIT[ 993] & ~reg_be))) |
               (addr_hit[ 994] & (|(SCMI_PERMIT[ 994] & ~reg_be))) |
               (addr_hit[ 995] & (|(SCMI_PERMIT[ 995] & ~reg_be))) |
               (addr_hit[ 996] & (|(SCMI_PERMIT[ 996] & ~reg_be))) |
               (addr_hit[ 997] & (|(SCMI_PERMIT[ 997] & ~reg_be))) |
               (addr_hit[ 998] & (|(SCMI_PERMIT[ 998] & ~reg_be))) |
               (addr_hit[ 999] & (|(SCMI_PERMIT[ 999] & ~reg_be))) |
               (addr_hit[1000] & (|(SCMI_PERMIT[1000] & ~reg_be))) |
               (addr_hit[1001] & (|(SCMI_PERMIT[1001] & ~reg_be))) |
               (addr_hit[1002] & (|(SCMI_PERMIT[1002] & ~reg_be))) |
               (addr_hit[1003] & (|(SCMI_PERMIT[1003] & ~reg_be))) |
               (addr_hit[1004] & (|(SCMI_PERMIT[1004] & ~reg_be))) |
               (addr_hit[1005] & (|(SCMI_PERMIT[1005] & ~reg_be))) |
               (addr_hit[1006] & (|(SCMI_PERMIT[1006] & ~reg_be))) |
               (addr_hit[1007] & (|(SCMI_PERMIT[1007] & ~reg_be))) |
               (addr_hit[1008] & (|(SCMI_PERMIT[1008] & ~reg_be))) |
               (addr_hit[1009] & (|(SCMI_PERMIT[1009] & ~reg_be))) |
               (addr_hit[1010] & (|(SCMI_PERMIT[1010] & ~reg_be))) |
               (addr_hit[1011] & (|(SCMI_PERMIT[1011] & ~reg_be))) |
               (addr_hit[1012] & (|(SCMI_PERMIT[1012] & ~reg_be))) |
               (addr_hit[1013] & (|(SCMI_PERMIT[1013] & ~reg_be))) |
               (addr_hit[1014] & (|(SCMI_PERMIT[1014] & ~reg_be))) |
               (addr_hit[1015] & (|(SCMI_PERMIT[1015] & ~reg_be))) |
               (addr_hit[1016] & (|(SCMI_PERMIT[1016] & ~reg_be))) |
               (addr_hit[1017] & (|(SCMI_PERMIT[1017] & ~reg_be))) |
               (addr_hit[1018] & (|(SCMI_PERMIT[1018] & ~reg_be))) |
               (addr_hit[1019] & (|(SCMI_PERMIT[1019] & ~reg_be))) |
               (addr_hit[1020] & (|(SCMI_PERMIT[1020] & ~reg_be))) |
               (addr_hit[1021] & (|(SCMI_PERMIT[1021] & ~reg_be))) |
               (addr_hit[1022] & (|(SCMI_PERMIT[1022] & ~reg_be))) |
               (addr_hit[1023] & (|(SCMI_PERMIT[1023] & ~reg_be))) |
               (addr_hit[1024] & (|(SCMI_PERMIT[1024] & ~reg_be))) |
               (addr_hit[1025] & (|(SCMI_PERMIT[1025] & ~reg_be))) |
               (addr_hit[1026] & (|(SCMI_PERMIT[1026] & ~reg_be))) |
               (addr_hit[1027] & (|(SCMI_PERMIT[1027] & ~reg_be))) |
               (addr_hit[1028] & (|(SCMI_PERMIT[1028] & ~reg_be))) |
               (addr_hit[1029] & (|(SCMI_PERMIT[1029] & ~reg_be))) |
               (addr_hit[1030] & (|(SCMI_PERMIT[1030] & ~reg_be))) |
               (addr_hit[1031] & (|(SCMI_PERMIT[1031] & ~reg_be))) |
               (addr_hit[1032] & (|(SCMI_PERMIT[1032] & ~reg_be))) |
               (addr_hit[1033] & (|(SCMI_PERMIT[1033] & ~reg_be))) |
               (addr_hit[1034] & (|(SCMI_PERMIT[1034] & ~reg_be))) |
               (addr_hit[1035] & (|(SCMI_PERMIT[1035] & ~reg_be))) |
               (addr_hit[1036] & (|(SCMI_PERMIT[1036] & ~reg_be))) |
               (addr_hit[1037] & (|(SCMI_PERMIT[1037] & ~reg_be))) |
               (addr_hit[1038] & (|(SCMI_PERMIT[1038] & ~reg_be))) |
               (addr_hit[1039] & (|(SCMI_PERMIT[1039] & ~reg_be))) |
               (addr_hit[1040] & (|(SCMI_PERMIT[1040] & ~reg_be))) |
               (addr_hit[1041] & (|(SCMI_PERMIT[1041] & ~reg_be))) |
               (addr_hit[1042] & (|(SCMI_PERMIT[1042] & ~reg_be))) |
               (addr_hit[1043] & (|(SCMI_PERMIT[1043] & ~reg_be))) |
               (addr_hit[1044] & (|(SCMI_PERMIT[1044] & ~reg_be))) |
               (addr_hit[1045] & (|(SCMI_PERMIT[1045] & ~reg_be))) |
               (addr_hit[1046] & (|(SCMI_PERMIT[1046] & ~reg_be))) |
               (addr_hit[1047] & (|(SCMI_PERMIT[1047] & ~reg_be))) |
               (addr_hit[1048] & (|(SCMI_PERMIT[1048] & ~reg_be))) |
               (addr_hit[1049] & (|(SCMI_PERMIT[1049] & ~reg_be))) |
               (addr_hit[1050] & (|(SCMI_PERMIT[1050] & ~reg_be))) |
               (addr_hit[1051] & (|(SCMI_PERMIT[1051] & ~reg_be))) |
               (addr_hit[1052] & (|(SCMI_PERMIT[1052] & ~reg_be))) |
               (addr_hit[1053] & (|(SCMI_PERMIT[1053] & ~reg_be))) |
               (addr_hit[1054] & (|(SCMI_PERMIT[1054] & ~reg_be))) |
               (addr_hit[1055] & (|(SCMI_PERMIT[1055] & ~reg_be))) |
               (addr_hit[1056] & (|(SCMI_PERMIT[1056] & ~reg_be))) |
               (addr_hit[1057] & (|(SCMI_PERMIT[1057] & ~reg_be))) |
               (addr_hit[1058] & (|(SCMI_PERMIT[1058] & ~reg_be))) |
               (addr_hit[1059] & (|(SCMI_PERMIT[1059] & ~reg_be))) |
               (addr_hit[1060] & (|(SCMI_PERMIT[1060] & ~reg_be))) |
               (addr_hit[1061] & (|(SCMI_PERMIT[1061] & ~reg_be))) |
               (addr_hit[1062] & (|(SCMI_PERMIT[1062] & ~reg_be))) |
               (addr_hit[1063] & (|(SCMI_PERMIT[1063] & ~reg_be))) |
               (addr_hit[1064] & (|(SCMI_PERMIT[1064] & ~reg_be))) |
               (addr_hit[1065] & (|(SCMI_PERMIT[1065] & ~reg_be))) |
               (addr_hit[1066] & (|(SCMI_PERMIT[1066] & ~reg_be))) |
               (addr_hit[1067] & (|(SCMI_PERMIT[1067] & ~reg_be))) |
               (addr_hit[1068] & (|(SCMI_PERMIT[1068] & ~reg_be))) |
               (addr_hit[1069] & (|(SCMI_PERMIT[1069] & ~reg_be))) |
               (addr_hit[1070] & (|(SCMI_PERMIT[1070] & ~reg_be))) |
               (addr_hit[1071] & (|(SCMI_PERMIT[1071] & ~reg_be))) |
               (addr_hit[1072] & (|(SCMI_PERMIT[1072] & ~reg_be))) |
               (addr_hit[1073] & (|(SCMI_PERMIT[1073] & ~reg_be))) |
               (addr_hit[1074] & (|(SCMI_PERMIT[1074] & ~reg_be))) |
               (addr_hit[1075] & (|(SCMI_PERMIT[1075] & ~reg_be))) |
               (addr_hit[1076] & (|(SCMI_PERMIT[1076] & ~reg_be))) |
               (addr_hit[1077] & (|(SCMI_PERMIT[1077] & ~reg_be))) |
               (addr_hit[1078] & (|(SCMI_PERMIT[1078] & ~reg_be))) |
               (addr_hit[1079] & (|(SCMI_PERMIT[1079] & ~reg_be))) |
               (addr_hit[1080] & (|(SCMI_PERMIT[1080] & ~reg_be))) |
               (addr_hit[1081] & (|(SCMI_PERMIT[1081] & ~reg_be))) |
               (addr_hit[1082] & (|(SCMI_PERMIT[1082] & ~reg_be))) |
               (addr_hit[1083] & (|(SCMI_PERMIT[1083] & ~reg_be))) |
               (addr_hit[1084] & (|(SCMI_PERMIT[1084] & ~reg_be))) |
               (addr_hit[1085] & (|(SCMI_PERMIT[1085] & ~reg_be))) |
               (addr_hit[1086] & (|(SCMI_PERMIT[1086] & ~reg_be))) |
               (addr_hit[1087] & (|(SCMI_PERMIT[1087] & ~reg_be))) |
               (addr_hit[1088] & (|(SCMI_PERMIT[1088] & ~reg_be))) |
               (addr_hit[1089] & (|(SCMI_PERMIT[1089] & ~reg_be))) |
               (addr_hit[1090] & (|(SCMI_PERMIT[1090] & ~reg_be))) |
               (addr_hit[1091] & (|(SCMI_PERMIT[1091] & ~reg_be))) |
               (addr_hit[1092] & (|(SCMI_PERMIT[1092] & ~reg_be))) |
               (addr_hit[1093] & (|(SCMI_PERMIT[1093] & ~reg_be))) |
               (addr_hit[1094] & (|(SCMI_PERMIT[1094] & ~reg_be))) |
               (addr_hit[1095] & (|(SCMI_PERMIT[1095] & ~reg_be))) |
               (addr_hit[1096] & (|(SCMI_PERMIT[1096] & ~reg_be))) |
               (addr_hit[1097] & (|(SCMI_PERMIT[1097] & ~reg_be))) |
               (addr_hit[1098] & (|(SCMI_PERMIT[1098] & ~reg_be))) |
               (addr_hit[1099] & (|(SCMI_PERMIT[1099] & ~reg_be))) |
               (addr_hit[1100] & (|(SCMI_PERMIT[1100] & ~reg_be))) |
               (addr_hit[1101] & (|(SCMI_PERMIT[1101] & ~reg_be))) |
               (addr_hit[1102] & (|(SCMI_PERMIT[1102] & ~reg_be))) |
               (addr_hit[1103] & (|(SCMI_PERMIT[1103] & ~reg_be))) |
               (addr_hit[1104] & (|(SCMI_PERMIT[1104] & ~reg_be))) |
               (addr_hit[1105] & (|(SCMI_PERMIT[1105] & ~reg_be))) |
               (addr_hit[1106] & (|(SCMI_PERMIT[1106] & ~reg_be))) |
               (addr_hit[1107] & (|(SCMI_PERMIT[1107] & ~reg_be))) |
               (addr_hit[1108] & (|(SCMI_PERMIT[1108] & ~reg_be))) |
               (addr_hit[1109] & (|(SCMI_PERMIT[1109] & ~reg_be))) |
               (addr_hit[1110] & (|(SCMI_PERMIT[1110] & ~reg_be))) |
               (addr_hit[1111] & (|(SCMI_PERMIT[1111] & ~reg_be))) |
               (addr_hit[1112] & (|(SCMI_PERMIT[1112] & ~reg_be))) |
               (addr_hit[1113] & (|(SCMI_PERMIT[1113] & ~reg_be))) |
               (addr_hit[1114] & (|(SCMI_PERMIT[1114] & ~reg_be))) |
               (addr_hit[1115] & (|(SCMI_PERMIT[1115] & ~reg_be))) |
               (addr_hit[1116] & (|(SCMI_PERMIT[1116] & ~reg_be))) |
               (addr_hit[1117] & (|(SCMI_PERMIT[1117] & ~reg_be))) |
               (addr_hit[1118] & (|(SCMI_PERMIT[1118] & ~reg_be))) |
               (addr_hit[1119] & (|(SCMI_PERMIT[1119] & ~reg_be))) |
               (addr_hit[1120] & (|(SCMI_PERMIT[1120] & ~reg_be))) |
               (addr_hit[1121] & (|(SCMI_PERMIT[1121] & ~reg_be))) |
               (addr_hit[1122] & (|(SCMI_PERMIT[1122] & ~reg_be))) |
               (addr_hit[1123] & (|(SCMI_PERMIT[1123] & ~reg_be))) |
               (addr_hit[1124] & (|(SCMI_PERMIT[1124] & ~reg_be))) |
               (addr_hit[1125] & (|(SCMI_PERMIT[1125] & ~reg_be))) |
               (addr_hit[1126] & (|(SCMI_PERMIT[1126] & ~reg_be))) |
               (addr_hit[1127] & (|(SCMI_PERMIT[1127] & ~reg_be))) |
               (addr_hit[1128] & (|(SCMI_PERMIT[1128] & ~reg_be))) |
               (addr_hit[1129] & (|(SCMI_PERMIT[1129] & ~reg_be))) |
               (addr_hit[1130] & (|(SCMI_PERMIT[1130] & ~reg_be))) |
               (addr_hit[1131] & (|(SCMI_PERMIT[1131] & ~reg_be))) |
               (addr_hit[1132] & (|(SCMI_PERMIT[1132] & ~reg_be))) |
               (addr_hit[1133] & (|(SCMI_PERMIT[1133] & ~reg_be))) |
               (addr_hit[1134] & (|(SCMI_PERMIT[1134] & ~reg_be))) |
               (addr_hit[1135] & (|(SCMI_PERMIT[1135] & ~reg_be))) |
               (addr_hit[1136] & (|(SCMI_PERMIT[1136] & ~reg_be))) |
               (addr_hit[1137] & (|(SCMI_PERMIT[1137] & ~reg_be))) |
               (addr_hit[1138] & (|(SCMI_PERMIT[1138] & ~reg_be))) |
               (addr_hit[1139] & (|(SCMI_PERMIT[1139] & ~reg_be))) |
               (addr_hit[1140] & (|(SCMI_PERMIT[1140] & ~reg_be))) |
               (addr_hit[1141] & (|(SCMI_PERMIT[1141] & ~reg_be))) |
               (addr_hit[1142] & (|(SCMI_PERMIT[1142] & ~reg_be))) |
               (addr_hit[1143] & (|(SCMI_PERMIT[1143] & ~reg_be))) |
               (addr_hit[1144] & (|(SCMI_PERMIT[1144] & ~reg_be))) |
               (addr_hit[1145] & (|(SCMI_PERMIT[1145] & ~reg_be))) |
               (addr_hit[1146] & (|(SCMI_PERMIT[1146] & ~reg_be))) |
               (addr_hit[1147] & (|(SCMI_PERMIT[1147] & ~reg_be))) |
               (addr_hit[1148] & (|(SCMI_PERMIT[1148] & ~reg_be))) |
               (addr_hit[1149] & (|(SCMI_PERMIT[1149] & ~reg_be))) |
               (addr_hit[1150] & (|(SCMI_PERMIT[1150] & ~reg_be))) |
               (addr_hit[1151] & (|(SCMI_PERMIT[1151] & ~reg_be))) |
               (addr_hit[1152] & (|(SCMI_PERMIT[1152] & ~reg_be))) |
               (addr_hit[1153] & (|(SCMI_PERMIT[1153] & ~reg_be))) |
               (addr_hit[1154] & (|(SCMI_PERMIT[1154] & ~reg_be))) |
               (addr_hit[1155] & (|(SCMI_PERMIT[1155] & ~reg_be))) |
               (addr_hit[1156] & (|(SCMI_PERMIT[1156] & ~reg_be))) |
               (addr_hit[1157] & (|(SCMI_PERMIT[1157] & ~reg_be))) |
               (addr_hit[1158] & (|(SCMI_PERMIT[1158] & ~reg_be))) |
               (addr_hit[1159] & (|(SCMI_PERMIT[1159] & ~reg_be))) |
               (addr_hit[1160] & (|(SCMI_PERMIT[1160] & ~reg_be))) |
               (addr_hit[1161] & (|(SCMI_PERMIT[1161] & ~reg_be))) |
               (addr_hit[1162] & (|(SCMI_PERMIT[1162] & ~reg_be))) |
               (addr_hit[1163] & (|(SCMI_PERMIT[1163] & ~reg_be))) |
               (addr_hit[1164] & (|(SCMI_PERMIT[1164] & ~reg_be))) |
               (addr_hit[1165] & (|(SCMI_PERMIT[1165] & ~reg_be))) |
               (addr_hit[1166] & (|(SCMI_PERMIT[1166] & ~reg_be))) |
               (addr_hit[1167] & (|(SCMI_PERMIT[1167] & ~reg_be))) |
               (addr_hit[1168] & (|(SCMI_PERMIT[1168] & ~reg_be))) |
               (addr_hit[1169] & (|(SCMI_PERMIT[1169] & ~reg_be))) |
               (addr_hit[1170] & (|(SCMI_PERMIT[1170] & ~reg_be))) |
               (addr_hit[1171] & (|(SCMI_PERMIT[1171] & ~reg_be))) |
               (addr_hit[1172] & (|(SCMI_PERMIT[1172] & ~reg_be))) |
               (addr_hit[1173] & (|(SCMI_PERMIT[1173] & ~reg_be))) |
               (addr_hit[1174] & (|(SCMI_PERMIT[1174] & ~reg_be))) |
               (addr_hit[1175] & (|(SCMI_PERMIT[1175] & ~reg_be))) |
               (addr_hit[1176] & (|(SCMI_PERMIT[1176] & ~reg_be))) |
               (addr_hit[1177] & (|(SCMI_PERMIT[1177] & ~reg_be))) |
               (addr_hit[1178] & (|(SCMI_PERMIT[1178] & ~reg_be))) |
               (addr_hit[1179] & (|(SCMI_PERMIT[1179] & ~reg_be))) |
               (addr_hit[1180] & (|(SCMI_PERMIT[1180] & ~reg_be))) |
               (addr_hit[1181] & (|(SCMI_PERMIT[1181] & ~reg_be))) |
               (addr_hit[1182] & (|(SCMI_PERMIT[1182] & ~reg_be))) |
               (addr_hit[1183] & (|(SCMI_PERMIT[1183] & ~reg_be))) |
               (addr_hit[1184] & (|(SCMI_PERMIT[1184] & ~reg_be))) |
               (addr_hit[1185] & (|(SCMI_PERMIT[1185] & ~reg_be))) |
               (addr_hit[1186] & (|(SCMI_PERMIT[1186] & ~reg_be))) |
               (addr_hit[1187] & (|(SCMI_PERMIT[1187] & ~reg_be))) |
               (addr_hit[1188] & (|(SCMI_PERMIT[1188] & ~reg_be))) |
               (addr_hit[1189] & (|(SCMI_PERMIT[1189] & ~reg_be))) |
               (addr_hit[1190] & (|(SCMI_PERMIT[1190] & ~reg_be))) |
               (addr_hit[1191] & (|(SCMI_PERMIT[1191] & ~reg_be))) |
               (addr_hit[1192] & (|(SCMI_PERMIT[1192] & ~reg_be))) |
               (addr_hit[1193] & (|(SCMI_PERMIT[1193] & ~reg_be))) |
               (addr_hit[1194] & (|(SCMI_PERMIT[1194] & ~reg_be))) |
               (addr_hit[1195] & (|(SCMI_PERMIT[1195] & ~reg_be))) |
               (addr_hit[1196] & (|(SCMI_PERMIT[1196] & ~reg_be))) |
               (addr_hit[1197] & (|(SCMI_PERMIT[1197] & ~reg_be))) |
               (addr_hit[1198] & (|(SCMI_PERMIT[1198] & ~reg_be))) |
               (addr_hit[1199] & (|(SCMI_PERMIT[1199] & ~reg_be))) |
               (addr_hit[1200] & (|(SCMI_PERMIT[1200] & ~reg_be))) |
               (addr_hit[1201] & (|(SCMI_PERMIT[1201] & ~reg_be))) |
               (addr_hit[1202] & (|(SCMI_PERMIT[1202] & ~reg_be))) |
               (addr_hit[1203] & (|(SCMI_PERMIT[1203] & ~reg_be))) |
               (addr_hit[1204] & (|(SCMI_PERMIT[1204] & ~reg_be))) |
               (addr_hit[1205] & (|(SCMI_PERMIT[1205] & ~reg_be))) |
               (addr_hit[1206] & (|(SCMI_PERMIT[1206] & ~reg_be))) |
               (addr_hit[1207] & (|(SCMI_PERMIT[1207] & ~reg_be))) |
               (addr_hit[1208] & (|(SCMI_PERMIT[1208] & ~reg_be))) |
               (addr_hit[1209] & (|(SCMI_PERMIT[1209] & ~reg_be))) |
               (addr_hit[1210] & (|(SCMI_PERMIT[1210] & ~reg_be))) |
               (addr_hit[1211] & (|(SCMI_PERMIT[1211] & ~reg_be))) |
               (addr_hit[1212] & (|(SCMI_PERMIT[1212] & ~reg_be))) |
               (addr_hit[1213] & (|(SCMI_PERMIT[1213] & ~reg_be))) |
               (addr_hit[1214] & (|(SCMI_PERMIT[1214] & ~reg_be))) |
               (addr_hit[1215] & (|(SCMI_PERMIT[1215] & ~reg_be))) |
               (addr_hit[1216] & (|(SCMI_PERMIT[1216] & ~reg_be))) |
               (addr_hit[1217] & (|(SCMI_PERMIT[1217] & ~reg_be))) |
               (addr_hit[1218] & (|(SCMI_PERMIT[1218] & ~reg_be))) |
               (addr_hit[1219] & (|(SCMI_PERMIT[1219] & ~reg_be))) |
               (addr_hit[1220] & (|(SCMI_PERMIT[1220] & ~reg_be))) |
               (addr_hit[1221] & (|(SCMI_PERMIT[1221] & ~reg_be))) |
               (addr_hit[1222] & (|(SCMI_PERMIT[1222] & ~reg_be))) |
               (addr_hit[1223] & (|(SCMI_PERMIT[1223] & ~reg_be))) |
               (addr_hit[1224] & (|(SCMI_PERMIT[1224] & ~reg_be))) |
               (addr_hit[1225] & (|(SCMI_PERMIT[1225] & ~reg_be))) |
               (addr_hit[1226] & (|(SCMI_PERMIT[1226] & ~reg_be))) |
               (addr_hit[1227] & (|(SCMI_PERMIT[1227] & ~reg_be))) |
               (addr_hit[1228] & (|(SCMI_PERMIT[1228] & ~reg_be))) |
               (addr_hit[1229] & (|(SCMI_PERMIT[1229] & ~reg_be))) |
               (addr_hit[1230] & (|(SCMI_PERMIT[1230] & ~reg_be))) |
               (addr_hit[1231] & (|(SCMI_PERMIT[1231] & ~reg_be))) |
               (addr_hit[1232] & (|(SCMI_PERMIT[1232] & ~reg_be))) |
               (addr_hit[1233] & (|(SCMI_PERMIT[1233] & ~reg_be))) |
               (addr_hit[1234] & (|(SCMI_PERMIT[1234] & ~reg_be))) |
               (addr_hit[1235] & (|(SCMI_PERMIT[1235] & ~reg_be))) |
               (addr_hit[1236] & (|(SCMI_PERMIT[1236] & ~reg_be))) |
               (addr_hit[1237] & (|(SCMI_PERMIT[1237] & ~reg_be))) |
               (addr_hit[1238] & (|(SCMI_PERMIT[1238] & ~reg_be))) |
               (addr_hit[1239] & (|(SCMI_PERMIT[1239] & ~reg_be))) |
               (addr_hit[1240] & (|(SCMI_PERMIT[1240] & ~reg_be))) |
               (addr_hit[1241] & (|(SCMI_PERMIT[1241] & ~reg_be))) |
               (addr_hit[1242] & (|(SCMI_PERMIT[1242] & ~reg_be))) |
               (addr_hit[1243] & (|(SCMI_PERMIT[1243] & ~reg_be))) |
               (addr_hit[1244] & (|(SCMI_PERMIT[1244] & ~reg_be))) |
               (addr_hit[1245] & (|(SCMI_PERMIT[1245] & ~reg_be))) |
               (addr_hit[1246] & (|(SCMI_PERMIT[1246] & ~reg_be))) |
               (addr_hit[1247] & (|(SCMI_PERMIT[1247] & ~reg_be))) |
               (addr_hit[1248] & (|(SCMI_PERMIT[1248] & ~reg_be))) |
               (addr_hit[1249] & (|(SCMI_PERMIT[1249] & ~reg_be))) |
               (addr_hit[1250] & (|(SCMI_PERMIT[1250] & ~reg_be))) |
               (addr_hit[1251] & (|(SCMI_PERMIT[1251] & ~reg_be))) |
               (addr_hit[1252] & (|(SCMI_PERMIT[1252] & ~reg_be))) |
               (addr_hit[1253] & (|(SCMI_PERMIT[1253] & ~reg_be))) |
               (addr_hit[1254] & (|(SCMI_PERMIT[1254] & ~reg_be))) |
               (addr_hit[1255] & (|(SCMI_PERMIT[1255] & ~reg_be))) |
               (addr_hit[1256] & (|(SCMI_PERMIT[1256] & ~reg_be))) |
               (addr_hit[1257] & (|(SCMI_PERMIT[1257] & ~reg_be))) |
               (addr_hit[1258] & (|(SCMI_PERMIT[1258] & ~reg_be))) |
               (addr_hit[1259] & (|(SCMI_PERMIT[1259] & ~reg_be))) |
               (addr_hit[1260] & (|(SCMI_PERMIT[1260] & ~reg_be))) |
               (addr_hit[1261] & (|(SCMI_PERMIT[1261] & ~reg_be))) |
               (addr_hit[1262] & (|(SCMI_PERMIT[1262] & ~reg_be))) |
               (addr_hit[1263] & (|(SCMI_PERMIT[1263] & ~reg_be))) |
               (addr_hit[1264] & (|(SCMI_PERMIT[1264] & ~reg_be))) |
               (addr_hit[1265] & (|(SCMI_PERMIT[1265] & ~reg_be))) |
               (addr_hit[1266] & (|(SCMI_PERMIT[1266] & ~reg_be))) |
               (addr_hit[1267] & (|(SCMI_PERMIT[1267] & ~reg_be))) |
               (addr_hit[1268] & (|(SCMI_PERMIT[1268] & ~reg_be))) |
               (addr_hit[1269] & (|(SCMI_PERMIT[1269] & ~reg_be))) |
               (addr_hit[1270] & (|(SCMI_PERMIT[1270] & ~reg_be))) |
               (addr_hit[1271] & (|(SCMI_PERMIT[1271] & ~reg_be))) |
               (addr_hit[1272] & (|(SCMI_PERMIT[1272] & ~reg_be))) |
               (addr_hit[1273] & (|(SCMI_PERMIT[1273] & ~reg_be))) |
               (addr_hit[1274] & (|(SCMI_PERMIT[1274] & ~reg_be))) |
               (addr_hit[1275] & (|(SCMI_PERMIT[1275] & ~reg_be))) |
               (addr_hit[1276] & (|(SCMI_PERMIT[1276] & ~reg_be))) |
               (addr_hit[1277] & (|(SCMI_PERMIT[1277] & ~reg_be))) |
               (addr_hit[1278] & (|(SCMI_PERMIT[1278] & ~reg_be))) |
               (addr_hit[1279] & (|(SCMI_PERMIT[1279] & ~reg_be))) |
               (addr_hit[1280] & (|(SCMI_PERMIT[1280] & ~reg_be))) |
               (addr_hit[1281] & (|(SCMI_PERMIT[1281] & ~reg_be))) |
               (addr_hit[1282] & (|(SCMI_PERMIT[1282] & ~reg_be))) |
               (addr_hit[1283] & (|(SCMI_PERMIT[1283] & ~reg_be))) |
               (addr_hit[1284] & (|(SCMI_PERMIT[1284] & ~reg_be))) |
               (addr_hit[1285] & (|(SCMI_PERMIT[1285] & ~reg_be))) |
               (addr_hit[1286] & (|(SCMI_PERMIT[1286] & ~reg_be))) |
               (addr_hit[1287] & (|(SCMI_PERMIT[1287] & ~reg_be))) |
               (addr_hit[1288] & (|(SCMI_PERMIT[1288] & ~reg_be))) |
               (addr_hit[1289] & (|(SCMI_PERMIT[1289] & ~reg_be))) |
               (addr_hit[1290] & (|(SCMI_PERMIT[1290] & ~reg_be))) |
               (addr_hit[1291] & (|(SCMI_PERMIT[1291] & ~reg_be))) |
               (addr_hit[1292] & (|(SCMI_PERMIT[1292] & ~reg_be))) |
               (addr_hit[1293] & (|(SCMI_PERMIT[1293] & ~reg_be))) |
               (addr_hit[1294] & (|(SCMI_PERMIT[1294] & ~reg_be))) |
               (addr_hit[1295] & (|(SCMI_PERMIT[1295] & ~reg_be))) |
               (addr_hit[1296] & (|(SCMI_PERMIT[1296] & ~reg_be))) |
               (addr_hit[1297] & (|(SCMI_PERMIT[1297] & ~reg_be))) |
               (addr_hit[1298] & (|(SCMI_PERMIT[1298] & ~reg_be))) |
               (addr_hit[1299] & (|(SCMI_PERMIT[1299] & ~reg_be))) |
               (addr_hit[1300] & (|(SCMI_PERMIT[1300] & ~reg_be))) |
               (addr_hit[1301] & (|(SCMI_PERMIT[1301] & ~reg_be))) |
               (addr_hit[1302] & (|(SCMI_PERMIT[1302] & ~reg_be))) |
               (addr_hit[1303] & (|(SCMI_PERMIT[1303] & ~reg_be))) |
               (addr_hit[1304] & (|(SCMI_PERMIT[1304] & ~reg_be))) |
               (addr_hit[1305] & (|(SCMI_PERMIT[1305] & ~reg_be))) |
               (addr_hit[1306] & (|(SCMI_PERMIT[1306] & ~reg_be))) |
               (addr_hit[1307] & (|(SCMI_PERMIT[1307] & ~reg_be))) |
               (addr_hit[1308] & (|(SCMI_PERMIT[1308] & ~reg_be))) |
               (addr_hit[1309] & (|(SCMI_PERMIT[1309] & ~reg_be))) |
               (addr_hit[1310] & (|(SCMI_PERMIT[1310] & ~reg_be))) |
               (addr_hit[1311] & (|(SCMI_PERMIT[1311] & ~reg_be))) |
               (addr_hit[1312] & (|(SCMI_PERMIT[1312] & ~reg_be))) |
               (addr_hit[1313] & (|(SCMI_PERMIT[1313] & ~reg_be))) |
               (addr_hit[1314] & (|(SCMI_PERMIT[1314] & ~reg_be))) |
               (addr_hit[1315] & (|(SCMI_PERMIT[1315] & ~reg_be))) |
               (addr_hit[1316] & (|(SCMI_PERMIT[1316] & ~reg_be))) |
               (addr_hit[1317] & (|(SCMI_PERMIT[1317] & ~reg_be))) |
               (addr_hit[1318] & (|(SCMI_PERMIT[1318] & ~reg_be))) |
               (addr_hit[1319] & (|(SCMI_PERMIT[1319] & ~reg_be))) |
               (addr_hit[1320] & (|(SCMI_PERMIT[1320] & ~reg_be))) |
               (addr_hit[1321] & (|(SCMI_PERMIT[1321] & ~reg_be))) |
               (addr_hit[1322] & (|(SCMI_PERMIT[1322] & ~reg_be))) |
               (addr_hit[1323] & (|(SCMI_PERMIT[1323] & ~reg_be))) |
               (addr_hit[1324] & (|(SCMI_PERMIT[1324] & ~reg_be))) |
               (addr_hit[1325] & (|(SCMI_PERMIT[1325] & ~reg_be))) |
               (addr_hit[1326] & (|(SCMI_PERMIT[1326] & ~reg_be))) |
               (addr_hit[1327] & (|(SCMI_PERMIT[1327] & ~reg_be))) |
               (addr_hit[1328] & (|(SCMI_PERMIT[1328] & ~reg_be))) |
               (addr_hit[1329] & (|(SCMI_PERMIT[1329] & ~reg_be))) |
               (addr_hit[1330] & (|(SCMI_PERMIT[1330] & ~reg_be))) |
               (addr_hit[1331] & (|(SCMI_PERMIT[1331] & ~reg_be))) |
               (addr_hit[1332] & (|(SCMI_PERMIT[1332] & ~reg_be))) |
               (addr_hit[1333] & (|(SCMI_PERMIT[1333] & ~reg_be))) |
               (addr_hit[1334] & (|(SCMI_PERMIT[1334] & ~reg_be))) |
               (addr_hit[1335] & (|(SCMI_PERMIT[1335] & ~reg_be))) |
               (addr_hit[1336] & (|(SCMI_PERMIT[1336] & ~reg_be))) |
               (addr_hit[1337] & (|(SCMI_PERMIT[1337] & ~reg_be))) |
               (addr_hit[1338] & (|(SCMI_PERMIT[1338] & ~reg_be))) |
               (addr_hit[1339] & (|(SCMI_PERMIT[1339] & ~reg_be))) |
               (addr_hit[1340] & (|(SCMI_PERMIT[1340] & ~reg_be))) |
               (addr_hit[1341] & (|(SCMI_PERMIT[1341] & ~reg_be))) |
               (addr_hit[1342] & (|(SCMI_PERMIT[1342] & ~reg_be))) |
               (addr_hit[1343] & (|(SCMI_PERMIT[1343] & ~reg_be))) |
               (addr_hit[1344] & (|(SCMI_PERMIT[1344] & ~reg_be))) |
               (addr_hit[1345] & (|(SCMI_PERMIT[1345] & ~reg_be))) |
               (addr_hit[1346] & (|(SCMI_PERMIT[1346] & ~reg_be))) |
               (addr_hit[1347] & (|(SCMI_PERMIT[1347] & ~reg_be))) |
               (addr_hit[1348] & (|(SCMI_PERMIT[1348] & ~reg_be))) |
               (addr_hit[1349] & (|(SCMI_PERMIT[1349] & ~reg_be))) |
               (addr_hit[1350] & (|(SCMI_PERMIT[1350] & ~reg_be))) |
               (addr_hit[1351] & (|(SCMI_PERMIT[1351] & ~reg_be))) |
               (addr_hit[1352] & (|(SCMI_PERMIT[1352] & ~reg_be))) |
               (addr_hit[1353] & (|(SCMI_PERMIT[1353] & ~reg_be))) |
               (addr_hit[1354] & (|(SCMI_PERMIT[1354] & ~reg_be))) |
               (addr_hit[1355] & (|(SCMI_PERMIT[1355] & ~reg_be))) |
               (addr_hit[1356] & (|(SCMI_PERMIT[1356] & ~reg_be))) |
               (addr_hit[1357] & (|(SCMI_PERMIT[1357] & ~reg_be))) |
               (addr_hit[1358] & (|(SCMI_PERMIT[1358] & ~reg_be))) |
               (addr_hit[1359] & (|(SCMI_PERMIT[1359] & ~reg_be))) |
               (addr_hit[1360] & (|(SCMI_PERMIT[1360] & ~reg_be))) |
               (addr_hit[1361] & (|(SCMI_PERMIT[1361] & ~reg_be))) |
               (addr_hit[1362] & (|(SCMI_PERMIT[1362] & ~reg_be))) |
               (addr_hit[1363] & (|(SCMI_PERMIT[1363] & ~reg_be))) |
               (addr_hit[1364] & (|(SCMI_PERMIT[1364] & ~reg_be))) |
               (addr_hit[1365] & (|(SCMI_PERMIT[1365] & ~reg_be))) |
               (addr_hit[1366] & (|(SCMI_PERMIT[1366] & ~reg_be))) |
               (addr_hit[1367] & (|(SCMI_PERMIT[1367] & ~reg_be))) |
               (addr_hit[1368] & (|(SCMI_PERMIT[1368] & ~reg_be))) |
               (addr_hit[1369] & (|(SCMI_PERMIT[1369] & ~reg_be))) |
               (addr_hit[1370] & (|(SCMI_PERMIT[1370] & ~reg_be))) |
               (addr_hit[1371] & (|(SCMI_PERMIT[1371] & ~reg_be))) |
               (addr_hit[1372] & (|(SCMI_PERMIT[1372] & ~reg_be))) |
               (addr_hit[1373] & (|(SCMI_PERMIT[1373] & ~reg_be))) |
               (addr_hit[1374] & (|(SCMI_PERMIT[1374] & ~reg_be))) |
               (addr_hit[1375] & (|(SCMI_PERMIT[1375] & ~reg_be))) |
               (addr_hit[1376] & (|(SCMI_PERMIT[1376] & ~reg_be))) |
               (addr_hit[1377] & (|(SCMI_PERMIT[1377] & ~reg_be))) |
               (addr_hit[1378] & (|(SCMI_PERMIT[1378] & ~reg_be))) |
               (addr_hit[1379] & (|(SCMI_PERMIT[1379] & ~reg_be))) |
               (addr_hit[1380] & (|(SCMI_PERMIT[1380] & ~reg_be))) |
               (addr_hit[1381] & (|(SCMI_PERMIT[1381] & ~reg_be))) |
               (addr_hit[1382] & (|(SCMI_PERMIT[1382] & ~reg_be))) |
               (addr_hit[1383] & (|(SCMI_PERMIT[1383] & ~reg_be))) |
               (addr_hit[1384] & (|(SCMI_PERMIT[1384] & ~reg_be))) |
               (addr_hit[1385] & (|(SCMI_PERMIT[1385] & ~reg_be))) |
               (addr_hit[1386] & (|(SCMI_PERMIT[1386] & ~reg_be))) |
               (addr_hit[1387] & (|(SCMI_PERMIT[1387] & ~reg_be))) |
               (addr_hit[1388] & (|(SCMI_PERMIT[1388] & ~reg_be))) |
               (addr_hit[1389] & (|(SCMI_PERMIT[1389] & ~reg_be))) |
               (addr_hit[1390] & (|(SCMI_PERMIT[1390] & ~reg_be))) |
               (addr_hit[1391] & (|(SCMI_PERMIT[1391] & ~reg_be))) |
               (addr_hit[1392] & (|(SCMI_PERMIT[1392] & ~reg_be))) |
               (addr_hit[1393] & (|(SCMI_PERMIT[1393] & ~reg_be))) |
               (addr_hit[1394] & (|(SCMI_PERMIT[1394] & ~reg_be))) |
               (addr_hit[1395] & (|(SCMI_PERMIT[1395] & ~reg_be))) |
               (addr_hit[1396] & (|(SCMI_PERMIT[1396] & ~reg_be))) |
               (addr_hit[1397] & (|(SCMI_PERMIT[1397] & ~reg_be))) |
               (addr_hit[1398] & (|(SCMI_PERMIT[1398] & ~reg_be))) |
               (addr_hit[1399] & (|(SCMI_PERMIT[1399] & ~reg_be))) |
               (addr_hit[1400] & (|(SCMI_PERMIT[1400] & ~reg_be))) |
               (addr_hit[1401] & (|(SCMI_PERMIT[1401] & ~reg_be))) |
               (addr_hit[1402] & (|(SCMI_PERMIT[1402] & ~reg_be))) |
               (addr_hit[1403] & (|(SCMI_PERMIT[1403] & ~reg_be))) |
               (addr_hit[1404] & (|(SCMI_PERMIT[1404] & ~reg_be))) |
               (addr_hit[1405] & (|(SCMI_PERMIT[1405] & ~reg_be))) |
               (addr_hit[1406] & (|(SCMI_PERMIT[1406] & ~reg_be))) |
               (addr_hit[1407] & (|(SCMI_PERMIT[1407] & ~reg_be))) |
               (addr_hit[1408] & (|(SCMI_PERMIT[1408] & ~reg_be))) |
               (addr_hit[1409] & (|(SCMI_PERMIT[1409] & ~reg_be))) |
               (addr_hit[1410] & (|(SCMI_PERMIT[1410] & ~reg_be))) |
               (addr_hit[1411] & (|(SCMI_PERMIT[1411] & ~reg_be))) |
               (addr_hit[1412] & (|(SCMI_PERMIT[1412] & ~reg_be))) |
               (addr_hit[1413] & (|(SCMI_PERMIT[1413] & ~reg_be))) |
               (addr_hit[1414] & (|(SCMI_PERMIT[1414] & ~reg_be))) |
               (addr_hit[1415] & (|(SCMI_PERMIT[1415] & ~reg_be))) |
               (addr_hit[1416] & (|(SCMI_PERMIT[1416] & ~reg_be))) |
               (addr_hit[1417] & (|(SCMI_PERMIT[1417] & ~reg_be))) |
               (addr_hit[1418] & (|(SCMI_PERMIT[1418] & ~reg_be))) |
               (addr_hit[1419] & (|(SCMI_PERMIT[1419] & ~reg_be))) |
               (addr_hit[1420] & (|(SCMI_PERMIT[1420] & ~reg_be))) |
               (addr_hit[1421] & (|(SCMI_PERMIT[1421] & ~reg_be))) |
               (addr_hit[1422] & (|(SCMI_PERMIT[1422] & ~reg_be))) |
               (addr_hit[1423] & (|(SCMI_PERMIT[1423] & ~reg_be))) |
               (addr_hit[1424] & (|(SCMI_PERMIT[1424] & ~reg_be))) |
               (addr_hit[1425] & (|(SCMI_PERMIT[1425] & ~reg_be))) |
               (addr_hit[1426] & (|(SCMI_PERMIT[1426] & ~reg_be))) |
               (addr_hit[1427] & (|(SCMI_PERMIT[1427] & ~reg_be))) |
               (addr_hit[1428] & (|(SCMI_PERMIT[1428] & ~reg_be))) |
               (addr_hit[1429] & (|(SCMI_PERMIT[1429] & ~reg_be))) |
               (addr_hit[1430] & (|(SCMI_PERMIT[1430] & ~reg_be))) |
               (addr_hit[1431] & (|(SCMI_PERMIT[1431] & ~reg_be))) |
               (addr_hit[1432] & (|(SCMI_PERMIT[1432] & ~reg_be))) |
               (addr_hit[1433] & (|(SCMI_PERMIT[1433] & ~reg_be))) |
               (addr_hit[1434] & (|(SCMI_PERMIT[1434] & ~reg_be))) |
               (addr_hit[1435] & (|(SCMI_PERMIT[1435] & ~reg_be))) |
               (addr_hit[1436] & (|(SCMI_PERMIT[1436] & ~reg_be))) |
               (addr_hit[1437] & (|(SCMI_PERMIT[1437] & ~reg_be))) |
               (addr_hit[1438] & (|(SCMI_PERMIT[1438] & ~reg_be))) |
               (addr_hit[1439] & (|(SCMI_PERMIT[1439] & ~reg_be))) |
               (addr_hit[1440] & (|(SCMI_PERMIT[1440] & ~reg_be))) |
               (addr_hit[1441] & (|(SCMI_PERMIT[1441] & ~reg_be))) |
               (addr_hit[1442] & (|(SCMI_PERMIT[1442] & ~reg_be))) |
               (addr_hit[1443] & (|(SCMI_PERMIT[1443] & ~reg_be))) |
               (addr_hit[1444] & (|(SCMI_PERMIT[1444] & ~reg_be))) |
               (addr_hit[1445] & (|(SCMI_PERMIT[1445] & ~reg_be))) |
               (addr_hit[1446] & (|(SCMI_PERMIT[1446] & ~reg_be))) |
               (addr_hit[1447] & (|(SCMI_PERMIT[1447] & ~reg_be))) |
               (addr_hit[1448] & (|(SCMI_PERMIT[1448] & ~reg_be))) |
               (addr_hit[1449] & (|(SCMI_PERMIT[1449] & ~reg_be))) |
               (addr_hit[1450] & (|(SCMI_PERMIT[1450] & ~reg_be))) |
               (addr_hit[1451] & (|(SCMI_PERMIT[1451] & ~reg_be))) |
               (addr_hit[1452] & (|(SCMI_PERMIT[1452] & ~reg_be))) |
               (addr_hit[1453] & (|(SCMI_PERMIT[1453] & ~reg_be))) |
               (addr_hit[1454] & (|(SCMI_PERMIT[1454] & ~reg_be))) |
               (addr_hit[1455] & (|(SCMI_PERMIT[1455] & ~reg_be))) |
               (addr_hit[1456] & (|(SCMI_PERMIT[1456] & ~reg_be))) |
               (addr_hit[1457] & (|(SCMI_PERMIT[1457] & ~reg_be))) |
               (addr_hit[1458] & (|(SCMI_PERMIT[1458] & ~reg_be))) |
               (addr_hit[1459] & (|(SCMI_PERMIT[1459] & ~reg_be))) |
               (addr_hit[1460] & (|(SCMI_PERMIT[1460] & ~reg_be))) |
               (addr_hit[1461] & (|(SCMI_PERMIT[1461] & ~reg_be))) |
               (addr_hit[1462] & (|(SCMI_PERMIT[1462] & ~reg_be))) |
               (addr_hit[1463] & (|(SCMI_PERMIT[1463] & ~reg_be))) |
               (addr_hit[1464] & (|(SCMI_PERMIT[1464] & ~reg_be))) |
               (addr_hit[1465] & (|(SCMI_PERMIT[1465] & ~reg_be))) |
               (addr_hit[1466] & (|(SCMI_PERMIT[1466] & ~reg_be))) |
               (addr_hit[1467] & (|(SCMI_PERMIT[1467] & ~reg_be))) |
               (addr_hit[1468] & (|(SCMI_PERMIT[1468] & ~reg_be))) |
               (addr_hit[1469] & (|(SCMI_PERMIT[1469] & ~reg_be)))));
  end

  assign reserved_1_c0_we = addr_hit[0] & reg_we & !reg_error;
  assign reserved_1_c0_wd = reg_wdata[31:0];

  assign channel_status_c0_channel_free_we = addr_hit[1] & reg_we & !reg_error;
  assign channel_status_c0_channel_free_wd = reg_wdata[0];

  assign channel_status_c0_channel_error_we = addr_hit[1] & reg_we & !reg_error;
  assign channel_status_c0_channel_error_wd = reg_wdata[1];

  assign channel_status_c0_field1_we = addr_hit[1] & reg_we & !reg_error;
  assign channel_status_c0_field1_wd = reg_wdata[31:2];

  assign reserved_2_c0_we = addr_hit[2] & reg_we & !reg_error;
  assign reserved_2_c0_wd = reg_wdata[31:0];

  assign channel_flags_c0_intr_enable_we = addr_hit[4] & reg_we & !reg_error;
  assign channel_flags_c0_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c0_field1_we = addr_hit[4] & reg_we & !reg_error;
  assign channel_flags_c0_field1_wd = reg_wdata[31:1];

  assign length_c0_we = addr_hit[5] & reg_we & !reg_error;
  assign length_c0_wd = reg_wdata[31:0];

  assign message_header_c0_message_id_we = addr_hit[6] & reg_we & !reg_error;
  assign message_header_c0_message_id_wd = reg_wdata[7:0];

  assign message_header_c0_message_type_we = addr_hit[6] & reg_we & !reg_error;
  assign message_header_c0_message_type_wd = reg_wdata[9:8];

  assign message_header_c0_protocol_id_we = addr_hit[6] & reg_we & !reg_error;
  assign message_header_c0_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c0_token_we = addr_hit[6] & reg_we & !reg_error;
  assign message_header_c0_token_wd = reg_wdata[27:18];

  assign message_header_c0_field1_we = addr_hit[6] & reg_we & !reg_error;
  assign message_header_c0_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c0_we = addr_hit[7] & reg_we & !reg_error;
  assign message_payload_1_c0_wd = reg_wdata[31:0];

  assign doorbell_c0_intr_we = addr_hit[8] & reg_we & !reg_error;
  assign doorbell_c0_intr_wd = reg_wdata[0];

  assign doorbell_c0_preserve_mask_we = addr_hit[8] & reg_we & !reg_error;
  assign doorbell_c0_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c0_intr_we = addr_hit[9] & reg_we & !reg_error;
  assign completion_interrupt_c0_intr_wd = reg_wdata[0];

  assign completion_interrupt_c0_preserve_mask_we = addr_hit[9] & reg_we & !reg_error;
  assign completion_interrupt_c0_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c1_we = addr_hit[10] & reg_we & !reg_error;
  assign reserved_1_c1_wd = reg_wdata[31:0];

  assign channel_status_c1_channel_free_we = addr_hit[11] & reg_we & !reg_error;
  assign channel_status_c1_channel_free_wd = reg_wdata[0];

  assign channel_status_c1_channel_error_we = addr_hit[11] & reg_we & !reg_error;
  assign channel_status_c1_channel_error_wd = reg_wdata[1];

  assign channel_status_c1_field1_we = addr_hit[11] & reg_we & !reg_error;
  assign channel_status_c1_field1_wd = reg_wdata[31:2];

  assign reserved_2_c1_we = addr_hit[12] & reg_we & !reg_error;
  assign reserved_2_c1_wd = reg_wdata[31:0];

  assign channel_flags_c1_intr_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_flags_c1_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c1_field1_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_flags_c1_field1_wd = reg_wdata[31:1];

  assign length_c1_we = addr_hit[15] & reg_we & !reg_error;
  assign length_c1_wd = reg_wdata[31:0];

  assign message_header_c1_message_id_we = addr_hit[16] & reg_we & !reg_error;
  assign message_header_c1_message_id_wd = reg_wdata[7:0];

  assign message_header_c1_message_type_we = addr_hit[16] & reg_we & !reg_error;
  assign message_header_c1_message_type_wd = reg_wdata[9:8];

  assign message_header_c1_protocol_id_we = addr_hit[16] & reg_we & !reg_error;
  assign message_header_c1_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c1_token_we = addr_hit[16] & reg_we & !reg_error;
  assign message_header_c1_token_wd = reg_wdata[27:18];

  assign message_header_c1_field1_we = addr_hit[16] & reg_we & !reg_error;
  assign message_header_c1_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c1_we = addr_hit[17] & reg_we & !reg_error;
  assign message_payload_1_c1_wd = reg_wdata[31:0];

  assign doorbell_c1_intr_we = addr_hit[18] & reg_we & !reg_error;
  assign doorbell_c1_intr_wd = reg_wdata[0];

  assign doorbell_c1_preserve_mask_we = addr_hit[18] & reg_we & !reg_error;
  assign doorbell_c1_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c1_intr_we = addr_hit[19] & reg_we & !reg_error;
  assign completion_interrupt_c1_intr_wd = reg_wdata[0];

  assign completion_interrupt_c1_preserve_mask_we = addr_hit[19] & reg_we & !reg_error;
  assign completion_interrupt_c1_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c2_we = addr_hit[20] & reg_we & !reg_error;
  assign reserved_1_c2_wd = reg_wdata[31:0];

  assign channel_status_c2_channel_free_we = addr_hit[21] & reg_we & !reg_error;
  assign channel_status_c2_channel_free_wd = reg_wdata[0];

  assign channel_status_c2_channel_error_we = addr_hit[21] & reg_we & !reg_error;
  assign channel_status_c2_channel_error_wd = reg_wdata[1];

  assign channel_status_c2_field1_we = addr_hit[21] & reg_we & !reg_error;
  assign channel_status_c2_field1_wd = reg_wdata[31:2];

  assign reserved_2_c2_we = addr_hit[22] & reg_we & !reg_error;
  assign reserved_2_c2_wd = reg_wdata[31:0];

  assign channel_flags_c2_intr_enable_we = addr_hit[24] & reg_we & !reg_error;
  assign channel_flags_c2_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c2_field1_we = addr_hit[24] & reg_we & !reg_error;
  assign channel_flags_c2_field1_wd = reg_wdata[31:1];

  assign length_c2_we = addr_hit[25] & reg_we & !reg_error;
  assign length_c2_wd = reg_wdata[31:0];

  assign message_header_c2_message_id_we = addr_hit[26] & reg_we & !reg_error;
  assign message_header_c2_message_id_wd = reg_wdata[7:0];

  assign message_header_c2_message_type_we = addr_hit[26] & reg_we & !reg_error;
  assign message_header_c2_message_type_wd = reg_wdata[9:8];

  assign message_header_c2_protocol_id_we = addr_hit[26] & reg_we & !reg_error;
  assign message_header_c2_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c2_token_we = addr_hit[26] & reg_we & !reg_error;
  assign message_header_c2_token_wd = reg_wdata[27:18];

  assign message_header_c2_field1_we = addr_hit[26] & reg_we & !reg_error;
  assign message_header_c2_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c2_we = addr_hit[27] & reg_we & !reg_error;
  assign message_payload_1_c2_wd = reg_wdata[31:0];

  assign doorbell_c2_intr_we = addr_hit[28] & reg_we & !reg_error;
  assign doorbell_c2_intr_wd = reg_wdata[0];

  assign doorbell_c2_preserve_mask_we = addr_hit[28] & reg_we & !reg_error;
  assign doorbell_c2_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c2_intr_we = addr_hit[29] & reg_we & !reg_error;
  assign completion_interrupt_c2_intr_wd = reg_wdata[0];

  assign completion_interrupt_c2_preserve_mask_we = addr_hit[29] & reg_we & !reg_error;
  assign completion_interrupt_c2_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c3_we = addr_hit[30] & reg_we & !reg_error;
  assign reserved_1_c3_wd = reg_wdata[31:0];

  assign channel_status_c3_channel_free_we = addr_hit[31] & reg_we & !reg_error;
  assign channel_status_c3_channel_free_wd = reg_wdata[0];

  assign channel_status_c3_channel_error_we = addr_hit[31] & reg_we & !reg_error;
  assign channel_status_c3_channel_error_wd = reg_wdata[1];

  assign channel_status_c3_field1_we = addr_hit[31] & reg_we & !reg_error;
  assign channel_status_c3_field1_wd = reg_wdata[31:2];

  assign reserved_2_c3_we = addr_hit[32] & reg_we & !reg_error;
  assign reserved_2_c3_wd = reg_wdata[31:0];

  assign channel_flags_c3_intr_enable_we = addr_hit[34] & reg_we & !reg_error;
  assign channel_flags_c3_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c3_field1_we = addr_hit[34] & reg_we & !reg_error;
  assign channel_flags_c3_field1_wd = reg_wdata[31:1];

  assign length_c3_we = addr_hit[35] & reg_we & !reg_error;
  assign length_c3_wd = reg_wdata[31:0];

  assign message_header_c3_message_id_we = addr_hit[36] & reg_we & !reg_error;
  assign message_header_c3_message_id_wd = reg_wdata[7:0];

  assign message_header_c3_message_type_we = addr_hit[36] & reg_we & !reg_error;
  assign message_header_c3_message_type_wd = reg_wdata[9:8];

  assign message_header_c3_protocol_id_we = addr_hit[36] & reg_we & !reg_error;
  assign message_header_c3_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c3_token_we = addr_hit[36] & reg_we & !reg_error;
  assign message_header_c3_token_wd = reg_wdata[27:18];

  assign message_header_c3_field1_we = addr_hit[36] & reg_we & !reg_error;
  assign message_header_c3_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c3_we = addr_hit[37] & reg_we & !reg_error;
  assign message_payload_1_c3_wd = reg_wdata[31:0];

  assign doorbell_c3_intr_we = addr_hit[38] & reg_we & !reg_error;
  assign doorbell_c3_intr_wd = reg_wdata[0];

  assign doorbell_c3_preserve_mask_we = addr_hit[38] & reg_we & !reg_error;
  assign doorbell_c3_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c3_intr_we = addr_hit[39] & reg_we & !reg_error;
  assign completion_interrupt_c3_intr_wd = reg_wdata[0];

  assign completion_interrupt_c3_preserve_mask_we = addr_hit[39] & reg_we & !reg_error;
  assign completion_interrupt_c3_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c4_we = addr_hit[40] & reg_we & !reg_error;
  assign reserved_1_c4_wd = reg_wdata[31:0];

  assign channel_status_c4_channel_free_we = addr_hit[41] & reg_we & !reg_error;
  assign channel_status_c4_channel_free_wd = reg_wdata[0];

  assign channel_status_c4_channel_error_we = addr_hit[41] & reg_we & !reg_error;
  assign channel_status_c4_channel_error_wd = reg_wdata[1];

  assign channel_status_c4_field1_we = addr_hit[41] & reg_we & !reg_error;
  assign channel_status_c4_field1_wd = reg_wdata[31:2];

  assign reserved_2_c4_we = addr_hit[42] & reg_we & !reg_error;
  assign reserved_2_c4_wd = reg_wdata[31:0];

  assign channel_flags_c4_intr_enable_we = addr_hit[44] & reg_we & !reg_error;
  assign channel_flags_c4_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c4_field1_we = addr_hit[44] & reg_we & !reg_error;
  assign channel_flags_c4_field1_wd = reg_wdata[31:1];

  assign length_c4_we = addr_hit[45] & reg_we & !reg_error;
  assign length_c4_wd = reg_wdata[31:0];

  assign message_header_c4_message_id_we = addr_hit[46] & reg_we & !reg_error;
  assign message_header_c4_message_id_wd = reg_wdata[7:0];

  assign message_header_c4_message_type_we = addr_hit[46] & reg_we & !reg_error;
  assign message_header_c4_message_type_wd = reg_wdata[9:8];

  assign message_header_c4_protocol_id_we = addr_hit[46] & reg_we & !reg_error;
  assign message_header_c4_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c4_token_we = addr_hit[46] & reg_we & !reg_error;
  assign message_header_c4_token_wd = reg_wdata[27:18];

  assign message_header_c4_field1_we = addr_hit[46] & reg_we & !reg_error;
  assign message_header_c4_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c4_we = addr_hit[47] & reg_we & !reg_error;
  assign message_payload_1_c4_wd = reg_wdata[31:0];

  assign doorbell_c4_intr_we = addr_hit[48] & reg_we & !reg_error;
  assign doorbell_c4_intr_wd = reg_wdata[0];

  assign doorbell_c4_preserve_mask_we = addr_hit[48] & reg_we & !reg_error;
  assign doorbell_c4_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c4_intr_we = addr_hit[49] & reg_we & !reg_error;
  assign completion_interrupt_c4_intr_wd = reg_wdata[0];

  assign completion_interrupt_c4_preserve_mask_we = addr_hit[49] & reg_we & !reg_error;
  assign completion_interrupt_c4_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c5_we = addr_hit[50] & reg_we & !reg_error;
  assign reserved_1_c5_wd = reg_wdata[31:0];

  assign channel_status_c5_channel_free_we = addr_hit[51] & reg_we & !reg_error;
  assign channel_status_c5_channel_free_wd = reg_wdata[0];

  assign channel_status_c5_channel_error_we = addr_hit[51] & reg_we & !reg_error;
  assign channel_status_c5_channel_error_wd = reg_wdata[1];

  assign channel_status_c5_field1_we = addr_hit[51] & reg_we & !reg_error;
  assign channel_status_c5_field1_wd = reg_wdata[31:2];

  assign reserved_2_c5_we = addr_hit[52] & reg_we & !reg_error;
  assign reserved_2_c5_wd = reg_wdata[31:0];

  assign channel_flags_c5_intr_enable_we = addr_hit[54] & reg_we & !reg_error;
  assign channel_flags_c5_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c5_field1_we = addr_hit[54] & reg_we & !reg_error;
  assign channel_flags_c5_field1_wd = reg_wdata[31:1];

  assign length_c5_we = addr_hit[55] & reg_we & !reg_error;
  assign length_c5_wd = reg_wdata[31:0];

  assign message_header_c5_message_id_we = addr_hit[56] & reg_we & !reg_error;
  assign message_header_c5_message_id_wd = reg_wdata[7:0];

  assign message_header_c5_message_type_we = addr_hit[56] & reg_we & !reg_error;
  assign message_header_c5_message_type_wd = reg_wdata[9:8];

  assign message_header_c5_protocol_id_we = addr_hit[56] & reg_we & !reg_error;
  assign message_header_c5_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c5_token_we = addr_hit[56] & reg_we & !reg_error;
  assign message_header_c5_token_wd = reg_wdata[27:18];

  assign message_header_c5_field1_we = addr_hit[56] & reg_we & !reg_error;
  assign message_header_c5_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c5_we = addr_hit[57] & reg_we & !reg_error;
  assign message_payload_1_c5_wd = reg_wdata[31:0];

  assign doorbell_c5_intr_we = addr_hit[58] & reg_we & !reg_error;
  assign doorbell_c5_intr_wd = reg_wdata[0];

  assign doorbell_c5_preserve_mask_we = addr_hit[58] & reg_we & !reg_error;
  assign doorbell_c5_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c5_intr_we = addr_hit[59] & reg_we & !reg_error;
  assign completion_interrupt_c5_intr_wd = reg_wdata[0];

  assign completion_interrupt_c5_preserve_mask_we = addr_hit[59] & reg_we & !reg_error;
  assign completion_interrupt_c5_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c6_we = addr_hit[60] & reg_we & !reg_error;
  assign reserved_1_c6_wd = reg_wdata[31:0];

  assign channel_status_c6_channel_free_we = addr_hit[61] & reg_we & !reg_error;
  assign channel_status_c6_channel_free_wd = reg_wdata[0];

  assign channel_status_c6_channel_error_we = addr_hit[61] & reg_we & !reg_error;
  assign channel_status_c6_channel_error_wd = reg_wdata[1];

  assign channel_status_c6_field1_we = addr_hit[61] & reg_we & !reg_error;
  assign channel_status_c6_field1_wd = reg_wdata[31:2];

  assign reserved_2_c6_we = addr_hit[62] & reg_we & !reg_error;
  assign reserved_2_c6_wd = reg_wdata[31:0];

  assign channel_flags_c6_intr_enable_we = addr_hit[64] & reg_we & !reg_error;
  assign channel_flags_c6_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c6_field1_we = addr_hit[64] & reg_we & !reg_error;
  assign channel_flags_c6_field1_wd = reg_wdata[31:1];

  assign length_c6_we = addr_hit[65] & reg_we & !reg_error;
  assign length_c6_wd = reg_wdata[31:0];

  assign message_header_c6_message_id_we = addr_hit[66] & reg_we & !reg_error;
  assign message_header_c6_message_id_wd = reg_wdata[7:0];

  assign message_header_c6_message_type_we = addr_hit[66] & reg_we & !reg_error;
  assign message_header_c6_message_type_wd = reg_wdata[9:8];

  assign message_header_c6_protocol_id_we = addr_hit[66] & reg_we & !reg_error;
  assign message_header_c6_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c6_token_we = addr_hit[66] & reg_we & !reg_error;
  assign message_header_c6_token_wd = reg_wdata[27:18];

  assign message_header_c6_field1_we = addr_hit[66] & reg_we & !reg_error;
  assign message_header_c6_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c6_we = addr_hit[67] & reg_we & !reg_error;
  assign message_payload_1_c6_wd = reg_wdata[31:0];

  assign doorbell_c6_intr_we = addr_hit[68] & reg_we & !reg_error;
  assign doorbell_c6_intr_wd = reg_wdata[0];

  assign doorbell_c6_preserve_mask_we = addr_hit[68] & reg_we & !reg_error;
  assign doorbell_c6_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c6_intr_we = addr_hit[69] & reg_we & !reg_error;
  assign completion_interrupt_c6_intr_wd = reg_wdata[0];

  assign completion_interrupt_c6_preserve_mask_we = addr_hit[69] & reg_we & !reg_error;
  assign completion_interrupt_c6_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c7_we = addr_hit[70] & reg_we & !reg_error;
  assign reserved_1_c7_wd = reg_wdata[31:0];

  assign channel_status_c7_channel_free_we = addr_hit[71] & reg_we & !reg_error;
  assign channel_status_c7_channel_free_wd = reg_wdata[0];

  assign channel_status_c7_channel_error_we = addr_hit[71] & reg_we & !reg_error;
  assign channel_status_c7_channel_error_wd = reg_wdata[1];

  assign channel_status_c7_field1_we = addr_hit[71] & reg_we & !reg_error;
  assign channel_status_c7_field1_wd = reg_wdata[31:2];

  assign reserved_2_c7_we = addr_hit[72] & reg_we & !reg_error;
  assign reserved_2_c7_wd = reg_wdata[31:0];

  assign channel_flags_c7_intr_enable_we = addr_hit[74] & reg_we & !reg_error;
  assign channel_flags_c7_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c7_field1_we = addr_hit[74] & reg_we & !reg_error;
  assign channel_flags_c7_field1_wd = reg_wdata[31:1];

  assign length_c7_we = addr_hit[75] & reg_we & !reg_error;
  assign length_c7_wd = reg_wdata[31:0];

  assign message_header_c7_message_id_we = addr_hit[76] & reg_we & !reg_error;
  assign message_header_c7_message_id_wd = reg_wdata[7:0];

  assign message_header_c7_message_type_we = addr_hit[76] & reg_we & !reg_error;
  assign message_header_c7_message_type_wd = reg_wdata[9:8];

  assign message_header_c7_protocol_id_we = addr_hit[76] & reg_we & !reg_error;
  assign message_header_c7_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c7_token_we = addr_hit[76] & reg_we & !reg_error;
  assign message_header_c7_token_wd = reg_wdata[27:18];

  assign message_header_c7_field1_we = addr_hit[76] & reg_we & !reg_error;
  assign message_header_c7_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c7_we = addr_hit[77] & reg_we & !reg_error;
  assign message_payload_1_c7_wd = reg_wdata[31:0];

  assign doorbell_c7_intr_we = addr_hit[78] & reg_we & !reg_error;
  assign doorbell_c7_intr_wd = reg_wdata[0];

  assign doorbell_c7_preserve_mask_we = addr_hit[78] & reg_we & !reg_error;
  assign doorbell_c7_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c7_intr_we = addr_hit[79] & reg_we & !reg_error;
  assign completion_interrupt_c7_intr_wd = reg_wdata[0];

  assign completion_interrupt_c7_preserve_mask_we = addr_hit[79] & reg_we & !reg_error;
  assign completion_interrupt_c7_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c8_we = addr_hit[80] & reg_we & !reg_error;
  assign reserved_1_c8_wd = reg_wdata[31:0];

  assign channel_status_c8_channel_free_we = addr_hit[81] & reg_we & !reg_error;
  assign channel_status_c8_channel_free_wd = reg_wdata[0];

  assign channel_status_c8_channel_error_we = addr_hit[81] & reg_we & !reg_error;
  assign channel_status_c8_channel_error_wd = reg_wdata[1];

  assign channel_status_c8_field1_we = addr_hit[81] & reg_we & !reg_error;
  assign channel_status_c8_field1_wd = reg_wdata[31:2];

  assign reserved_2_c8_we = addr_hit[82] & reg_we & !reg_error;
  assign reserved_2_c8_wd = reg_wdata[31:0];

  assign channel_flags_c8_intr_enable_we = addr_hit[84] & reg_we & !reg_error;
  assign channel_flags_c8_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c8_field1_we = addr_hit[84] & reg_we & !reg_error;
  assign channel_flags_c8_field1_wd = reg_wdata[31:1];

  assign length_c8_we = addr_hit[85] & reg_we & !reg_error;
  assign length_c8_wd = reg_wdata[31:0];

  assign message_header_c8_message_id_we = addr_hit[86] & reg_we & !reg_error;
  assign message_header_c8_message_id_wd = reg_wdata[7:0];

  assign message_header_c8_message_type_we = addr_hit[86] & reg_we & !reg_error;
  assign message_header_c8_message_type_wd = reg_wdata[9:8];

  assign message_header_c8_protocol_id_we = addr_hit[86] & reg_we & !reg_error;
  assign message_header_c8_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c8_token_we = addr_hit[86] & reg_we & !reg_error;
  assign message_header_c8_token_wd = reg_wdata[27:18];

  assign message_header_c8_field1_we = addr_hit[86] & reg_we & !reg_error;
  assign message_header_c8_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c8_we = addr_hit[87] & reg_we & !reg_error;
  assign message_payload_1_c8_wd = reg_wdata[31:0];

  assign doorbell_c8_intr_we = addr_hit[88] & reg_we & !reg_error;
  assign doorbell_c8_intr_wd = reg_wdata[0];

  assign doorbell_c8_preserve_mask_we = addr_hit[88] & reg_we & !reg_error;
  assign doorbell_c8_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c8_intr_we = addr_hit[89] & reg_we & !reg_error;
  assign completion_interrupt_c8_intr_wd = reg_wdata[0];

  assign completion_interrupt_c8_preserve_mask_we = addr_hit[89] & reg_we & !reg_error;
  assign completion_interrupt_c8_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c9_we = addr_hit[90] & reg_we & !reg_error;
  assign reserved_1_c9_wd = reg_wdata[31:0];

  assign channel_status_c9_channel_free_we = addr_hit[91] & reg_we & !reg_error;
  assign channel_status_c9_channel_free_wd = reg_wdata[0];

  assign channel_status_c9_channel_error_we = addr_hit[91] & reg_we & !reg_error;
  assign channel_status_c9_channel_error_wd = reg_wdata[1];

  assign channel_status_c9_field1_we = addr_hit[91] & reg_we & !reg_error;
  assign channel_status_c9_field1_wd = reg_wdata[31:2];

  assign reserved_2_c9_we = addr_hit[92] & reg_we & !reg_error;
  assign reserved_2_c9_wd = reg_wdata[31:0];

  assign channel_flags_c9_intr_enable_we = addr_hit[94] & reg_we & !reg_error;
  assign channel_flags_c9_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c9_field1_we = addr_hit[94] & reg_we & !reg_error;
  assign channel_flags_c9_field1_wd = reg_wdata[31:1];

  assign length_c9_we = addr_hit[95] & reg_we & !reg_error;
  assign length_c9_wd = reg_wdata[31:0];

  assign message_header_c9_message_id_we = addr_hit[96] & reg_we & !reg_error;
  assign message_header_c9_message_id_wd = reg_wdata[7:0];

  assign message_header_c9_message_type_we = addr_hit[96] & reg_we & !reg_error;
  assign message_header_c9_message_type_wd = reg_wdata[9:8];

  assign message_header_c9_protocol_id_we = addr_hit[96] & reg_we & !reg_error;
  assign message_header_c9_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c9_token_we = addr_hit[96] & reg_we & !reg_error;
  assign message_header_c9_token_wd = reg_wdata[27:18];

  assign message_header_c9_field1_we = addr_hit[96] & reg_we & !reg_error;
  assign message_header_c9_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c9_we = addr_hit[97] & reg_we & !reg_error;
  assign message_payload_1_c9_wd = reg_wdata[31:0];

  assign doorbell_c9_intr_we = addr_hit[98] & reg_we & !reg_error;
  assign doorbell_c9_intr_wd = reg_wdata[0];

  assign doorbell_c9_preserve_mask_we = addr_hit[98] & reg_we & !reg_error;
  assign doorbell_c9_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c9_intr_we = addr_hit[99] & reg_we & !reg_error;
  assign completion_interrupt_c9_intr_wd = reg_wdata[0];

  assign completion_interrupt_c9_preserve_mask_we = addr_hit[99] & reg_we & !reg_error;
  assign completion_interrupt_c9_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c10_we = addr_hit[100] & reg_we & !reg_error;
  assign reserved_1_c10_wd = reg_wdata[31:0];

  assign channel_status_c10_channel_free_we = addr_hit[101] & reg_we & !reg_error;
  assign channel_status_c10_channel_free_wd = reg_wdata[0];

  assign channel_status_c10_channel_error_we = addr_hit[101] & reg_we & !reg_error;
  assign channel_status_c10_channel_error_wd = reg_wdata[1];

  assign channel_status_c10_field1_we = addr_hit[101] & reg_we & !reg_error;
  assign channel_status_c10_field1_wd = reg_wdata[31:2];

  assign reserved_2_c10_we = addr_hit[102] & reg_we & !reg_error;
  assign reserved_2_c10_wd = reg_wdata[31:0];

  assign channel_flags_c10_intr_enable_we = addr_hit[104] & reg_we & !reg_error;
  assign channel_flags_c10_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c10_field1_we = addr_hit[104] & reg_we & !reg_error;
  assign channel_flags_c10_field1_wd = reg_wdata[31:1];

  assign length_c10_we = addr_hit[105] & reg_we & !reg_error;
  assign length_c10_wd = reg_wdata[31:0];

  assign message_header_c10_message_id_we = addr_hit[106] & reg_we & !reg_error;
  assign message_header_c10_message_id_wd = reg_wdata[7:0];

  assign message_header_c10_message_type_we = addr_hit[106] & reg_we & !reg_error;
  assign message_header_c10_message_type_wd = reg_wdata[9:8];

  assign message_header_c10_protocol_id_we = addr_hit[106] & reg_we & !reg_error;
  assign message_header_c10_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c10_token_we = addr_hit[106] & reg_we & !reg_error;
  assign message_header_c10_token_wd = reg_wdata[27:18];

  assign message_header_c10_field1_we = addr_hit[106] & reg_we & !reg_error;
  assign message_header_c10_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c10_we = addr_hit[107] & reg_we & !reg_error;
  assign message_payload_1_c10_wd = reg_wdata[31:0];

  assign doorbell_c10_intr_we = addr_hit[108] & reg_we & !reg_error;
  assign doorbell_c10_intr_wd = reg_wdata[0];

  assign doorbell_c10_preserve_mask_we = addr_hit[108] & reg_we & !reg_error;
  assign doorbell_c10_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c10_intr_we = addr_hit[109] & reg_we & !reg_error;
  assign completion_interrupt_c10_intr_wd = reg_wdata[0];

  assign completion_interrupt_c10_preserve_mask_we = addr_hit[109] & reg_we & !reg_error;
  assign completion_interrupt_c10_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c11_we = addr_hit[110] & reg_we & !reg_error;
  assign reserved_1_c11_wd = reg_wdata[31:0];

  assign channel_status_c11_channel_free_we = addr_hit[111] & reg_we & !reg_error;
  assign channel_status_c11_channel_free_wd = reg_wdata[0];

  assign channel_status_c11_channel_error_we = addr_hit[111] & reg_we & !reg_error;
  assign channel_status_c11_channel_error_wd = reg_wdata[1];

  assign channel_status_c11_field1_we = addr_hit[111] & reg_we & !reg_error;
  assign channel_status_c11_field1_wd = reg_wdata[31:2];

  assign reserved_2_c11_we = addr_hit[112] & reg_we & !reg_error;
  assign reserved_2_c11_wd = reg_wdata[31:0];

  assign channel_flags_c11_intr_enable_we = addr_hit[114] & reg_we & !reg_error;
  assign channel_flags_c11_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c11_field1_we = addr_hit[114] & reg_we & !reg_error;
  assign channel_flags_c11_field1_wd = reg_wdata[31:1];

  assign length_c11_we = addr_hit[115] & reg_we & !reg_error;
  assign length_c11_wd = reg_wdata[31:0];

  assign message_header_c11_message_id_we = addr_hit[116] & reg_we & !reg_error;
  assign message_header_c11_message_id_wd = reg_wdata[7:0];

  assign message_header_c11_message_type_we = addr_hit[116] & reg_we & !reg_error;
  assign message_header_c11_message_type_wd = reg_wdata[9:8];

  assign message_header_c11_protocol_id_we = addr_hit[116] & reg_we & !reg_error;
  assign message_header_c11_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c11_token_we = addr_hit[116] & reg_we & !reg_error;
  assign message_header_c11_token_wd = reg_wdata[27:18];

  assign message_header_c11_field1_we = addr_hit[116] & reg_we & !reg_error;
  assign message_header_c11_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c11_we = addr_hit[117] & reg_we & !reg_error;
  assign message_payload_1_c11_wd = reg_wdata[31:0];

  assign doorbell_c11_intr_we = addr_hit[118] & reg_we & !reg_error;
  assign doorbell_c11_intr_wd = reg_wdata[0];

  assign doorbell_c11_preserve_mask_we = addr_hit[118] & reg_we & !reg_error;
  assign doorbell_c11_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c11_intr_we = addr_hit[119] & reg_we & !reg_error;
  assign completion_interrupt_c11_intr_wd = reg_wdata[0];

  assign completion_interrupt_c11_preserve_mask_we = addr_hit[119] & reg_we & !reg_error;
  assign completion_interrupt_c11_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c12_we = addr_hit[120] & reg_we & !reg_error;
  assign reserved_1_c12_wd = reg_wdata[31:0];

  assign channel_status_c12_channel_free_we = addr_hit[121] & reg_we & !reg_error;
  assign channel_status_c12_channel_free_wd = reg_wdata[0];

  assign channel_status_c12_channel_error_we = addr_hit[121] & reg_we & !reg_error;
  assign channel_status_c12_channel_error_wd = reg_wdata[1];

  assign channel_status_c12_field1_we = addr_hit[121] & reg_we & !reg_error;
  assign channel_status_c12_field1_wd = reg_wdata[31:2];

  assign reserved_2_c12_we = addr_hit[122] & reg_we & !reg_error;
  assign reserved_2_c12_wd = reg_wdata[31:0];

  assign channel_flags_c12_intr_enable_we = addr_hit[124] & reg_we & !reg_error;
  assign channel_flags_c12_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c12_field1_we = addr_hit[124] & reg_we & !reg_error;
  assign channel_flags_c12_field1_wd = reg_wdata[31:1];

  assign length_c12_we = addr_hit[125] & reg_we & !reg_error;
  assign length_c12_wd = reg_wdata[31:0];

  assign message_header_c12_message_id_we = addr_hit[126] & reg_we & !reg_error;
  assign message_header_c12_message_id_wd = reg_wdata[7:0];

  assign message_header_c12_message_type_we = addr_hit[126] & reg_we & !reg_error;
  assign message_header_c12_message_type_wd = reg_wdata[9:8];

  assign message_header_c12_protocol_id_we = addr_hit[126] & reg_we & !reg_error;
  assign message_header_c12_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c12_token_we = addr_hit[126] & reg_we & !reg_error;
  assign message_header_c12_token_wd = reg_wdata[27:18];

  assign message_header_c12_field1_we = addr_hit[126] & reg_we & !reg_error;
  assign message_header_c12_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c12_we = addr_hit[127] & reg_we & !reg_error;
  assign message_payload_1_c12_wd = reg_wdata[31:0];

  assign doorbell_c12_intr_we = addr_hit[128] & reg_we & !reg_error;
  assign doorbell_c12_intr_wd = reg_wdata[0];

  assign doorbell_c12_preserve_mask_we = addr_hit[128] & reg_we & !reg_error;
  assign doorbell_c12_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c12_intr_we = addr_hit[129] & reg_we & !reg_error;
  assign completion_interrupt_c12_intr_wd = reg_wdata[0];

  assign completion_interrupt_c12_preserve_mask_we = addr_hit[129] & reg_we & !reg_error;
  assign completion_interrupt_c12_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c13_we = addr_hit[130] & reg_we & !reg_error;
  assign reserved_1_c13_wd = reg_wdata[31:0];

  assign channel_status_c13_channel_free_we = addr_hit[131] & reg_we & !reg_error;
  assign channel_status_c13_channel_free_wd = reg_wdata[0];

  assign channel_status_c13_channel_error_we = addr_hit[131] & reg_we & !reg_error;
  assign channel_status_c13_channel_error_wd = reg_wdata[1];

  assign channel_status_c13_field1_we = addr_hit[131] & reg_we & !reg_error;
  assign channel_status_c13_field1_wd = reg_wdata[31:2];

  assign reserved_2_c13_we = addr_hit[132] & reg_we & !reg_error;
  assign reserved_2_c13_wd = reg_wdata[31:0];

  assign channel_flags_c13_intr_enable_we = addr_hit[134] & reg_we & !reg_error;
  assign channel_flags_c13_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c13_field1_we = addr_hit[134] & reg_we & !reg_error;
  assign channel_flags_c13_field1_wd = reg_wdata[31:1];

  assign length_c13_we = addr_hit[135] & reg_we & !reg_error;
  assign length_c13_wd = reg_wdata[31:0];

  assign message_header_c13_message_id_we = addr_hit[136] & reg_we & !reg_error;
  assign message_header_c13_message_id_wd = reg_wdata[7:0];

  assign message_header_c13_message_type_we = addr_hit[136] & reg_we & !reg_error;
  assign message_header_c13_message_type_wd = reg_wdata[9:8];

  assign message_header_c13_protocol_id_we = addr_hit[136] & reg_we & !reg_error;
  assign message_header_c13_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c13_token_we = addr_hit[136] & reg_we & !reg_error;
  assign message_header_c13_token_wd = reg_wdata[27:18];

  assign message_header_c13_field1_we = addr_hit[136] & reg_we & !reg_error;
  assign message_header_c13_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c13_we = addr_hit[137] & reg_we & !reg_error;
  assign message_payload_1_c13_wd = reg_wdata[31:0];

  assign doorbell_c13_intr_we = addr_hit[138] & reg_we & !reg_error;
  assign doorbell_c13_intr_wd = reg_wdata[0];

  assign doorbell_c13_preserve_mask_we = addr_hit[138] & reg_we & !reg_error;
  assign doorbell_c13_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c13_intr_we = addr_hit[139] & reg_we & !reg_error;
  assign completion_interrupt_c13_intr_wd = reg_wdata[0];

  assign completion_interrupt_c13_preserve_mask_we = addr_hit[139] & reg_we & !reg_error;
  assign completion_interrupt_c13_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c14_we = addr_hit[140] & reg_we & !reg_error;
  assign reserved_1_c14_wd = reg_wdata[31:0];

  assign channel_status_c14_channel_free_we = addr_hit[141] & reg_we & !reg_error;
  assign channel_status_c14_channel_free_wd = reg_wdata[0];

  assign channel_status_c14_channel_error_we = addr_hit[141] & reg_we & !reg_error;
  assign channel_status_c14_channel_error_wd = reg_wdata[1];

  assign channel_status_c14_field1_we = addr_hit[141] & reg_we & !reg_error;
  assign channel_status_c14_field1_wd = reg_wdata[31:2];

  assign reserved_2_c14_we = addr_hit[142] & reg_we & !reg_error;
  assign reserved_2_c14_wd = reg_wdata[31:0];

  assign channel_flags_c14_intr_enable_we = addr_hit[144] & reg_we & !reg_error;
  assign channel_flags_c14_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c14_field1_we = addr_hit[144] & reg_we & !reg_error;
  assign channel_flags_c14_field1_wd = reg_wdata[31:1];

  assign length_c14_we = addr_hit[145] & reg_we & !reg_error;
  assign length_c14_wd = reg_wdata[31:0];

  assign message_header_c14_message_id_we = addr_hit[146] & reg_we & !reg_error;
  assign message_header_c14_message_id_wd = reg_wdata[7:0];

  assign message_header_c14_message_type_we = addr_hit[146] & reg_we & !reg_error;
  assign message_header_c14_message_type_wd = reg_wdata[9:8];

  assign message_header_c14_protocol_id_we = addr_hit[146] & reg_we & !reg_error;
  assign message_header_c14_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c14_token_we = addr_hit[146] & reg_we & !reg_error;
  assign message_header_c14_token_wd = reg_wdata[27:18];

  assign message_header_c14_field1_we = addr_hit[146] & reg_we & !reg_error;
  assign message_header_c14_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c14_we = addr_hit[147] & reg_we & !reg_error;
  assign message_payload_1_c14_wd = reg_wdata[31:0];

  assign doorbell_c14_intr_we = addr_hit[148] & reg_we & !reg_error;
  assign doorbell_c14_intr_wd = reg_wdata[0];

  assign doorbell_c14_preserve_mask_we = addr_hit[148] & reg_we & !reg_error;
  assign doorbell_c14_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c14_intr_we = addr_hit[149] & reg_we & !reg_error;
  assign completion_interrupt_c14_intr_wd = reg_wdata[0];

  assign completion_interrupt_c14_preserve_mask_we = addr_hit[149] & reg_we & !reg_error;
  assign completion_interrupt_c14_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c15_we = addr_hit[150] & reg_we & !reg_error;
  assign reserved_1_c15_wd = reg_wdata[31:0];

  assign channel_status_c15_channel_free_we = addr_hit[151] & reg_we & !reg_error;
  assign channel_status_c15_channel_free_wd = reg_wdata[0];

  assign channel_status_c15_channel_error_we = addr_hit[151] & reg_we & !reg_error;
  assign channel_status_c15_channel_error_wd = reg_wdata[1];

  assign channel_status_c15_field1_we = addr_hit[151] & reg_we & !reg_error;
  assign channel_status_c15_field1_wd = reg_wdata[31:2];

  assign reserved_2_c15_we = addr_hit[152] & reg_we & !reg_error;
  assign reserved_2_c15_wd = reg_wdata[31:0];

  assign channel_flags_c15_intr_enable_we = addr_hit[154] & reg_we & !reg_error;
  assign channel_flags_c15_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c15_field1_we = addr_hit[154] & reg_we & !reg_error;
  assign channel_flags_c15_field1_wd = reg_wdata[31:1];

  assign length_c15_we = addr_hit[155] & reg_we & !reg_error;
  assign length_c15_wd = reg_wdata[31:0];

  assign message_header_c15_message_id_we = addr_hit[156] & reg_we & !reg_error;
  assign message_header_c15_message_id_wd = reg_wdata[7:0];

  assign message_header_c15_message_type_we = addr_hit[156] & reg_we & !reg_error;
  assign message_header_c15_message_type_wd = reg_wdata[9:8];

  assign message_header_c15_protocol_id_we = addr_hit[156] & reg_we & !reg_error;
  assign message_header_c15_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c15_token_we = addr_hit[156] & reg_we & !reg_error;
  assign message_header_c15_token_wd = reg_wdata[27:18];

  assign message_header_c15_field1_we = addr_hit[156] & reg_we & !reg_error;
  assign message_header_c15_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c15_we = addr_hit[157] & reg_we & !reg_error;
  assign message_payload_1_c15_wd = reg_wdata[31:0];

  assign doorbell_c15_intr_we = addr_hit[158] & reg_we & !reg_error;
  assign doorbell_c15_intr_wd = reg_wdata[0];

  assign doorbell_c15_preserve_mask_we = addr_hit[158] & reg_we & !reg_error;
  assign doorbell_c15_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c15_intr_we = addr_hit[159] & reg_we & !reg_error;
  assign completion_interrupt_c15_intr_wd = reg_wdata[0];

  assign completion_interrupt_c15_preserve_mask_we = addr_hit[159] & reg_we & !reg_error;
  assign completion_interrupt_c15_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c16_we = addr_hit[160] & reg_we & !reg_error;
  assign reserved_1_c16_wd = reg_wdata[31:0];

  assign channel_status_c16_channel_free_we = addr_hit[161] & reg_we & !reg_error;
  assign channel_status_c16_channel_free_wd = reg_wdata[0];

  assign channel_status_c16_channel_error_we = addr_hit[161] & reg_we & !reg_error;
  assign channel_status_c16_channel_error_wd = reg_wdata[1];

  assign channel_status_c16_field1_we = addr_hit[161] & reg_we & !reg_error;
  assign channel_status_c16_field1_wd = reg_wdata[31:2];

  assign reserved_2_c16_we = addr_hit[162] & reg_we & !reg_error;
  assign reserved_2_c16_wd = reg_wdata[31:0];

  assign channel_flags_c16_intr_enable_we = addr_hit[164] & reg_we & !reg_error;
  assign channel_flags_c16_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c16_field1_we = addr_hit[164] & reg_we & !reg_error;
  assign channel_flags_c16_field1_wd = reg_wdata[31:1];

  assign length_c16_we = addr_hit[165] & reg_we & !reg_error;
  assign length_c16_wd = reg_wdata[31:0];

  assign message_header_c16_message_id_we = addr_hit[166] & reg_we & !reg_error;
  assign message_header_c16_message_id_wd = reg_wdata[7:0];

  assign message_header_c16_message_type_we = addr_hit[166] & reg_we & !reg_error;
  assign message_header_c16_message_type_wd = reg_wdata[9:8];

  assign message_header_c16_protocol_id_we = addr_hit[166] & reg_we & !reg_error;
  assign message_header_c16_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c16_token_we = addr_hit[166] & reg_we & !reg_error;
  assign message_header_c16_token_wd = reg_wdata[27:18];

  assign message_header_c16_field1_we = addr_hit[166] & reg_we & !reg_error;
  assign message_header_c16_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c16_we = addr_hit[167] & reg_we & !reg_error;
  assign message_payload_1_c16_wd = reg_wdata[31:0];

  assign doorbell_c16_intr_we = addr_hit[168] & reg_we & !reg_error;
  assign doorbell_c16_intr_wd = reg_wdata[0];

  assign doorbell_c16_preserve_mask_we = addr_hit[168] & reg_we & !reg_error;
  assign doorbell_c16_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c16_intr_we = addr_hit[169] & reg_we & !reg_error;
  assign completion_interrupt_c16_intr_wd = reg_wdata[0];

  assign completion_interrupt_c16_preserve_mask_we = addr_hit[169] & reg_we & !reg_error;
  assign completion_interrupt_c16_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c17_we = addr_hit[170] & reg_we & !reg_error;
  assign reserved_1_c17_wd = reg_wdata[31:0];

  assign channel_status_c17_channel_free_we = addr_hit[171] & reg_we & !reg_error;
  assign channel_status_c17_channel_free_wd = reg_wdata[0];

  assign channel_status_c17_channel_error_we = addr_hit[171] & reg_we & !reg_error;
  assign channel_status_c17_channel_error_wd = reg_wdata[1];

  assign channel_status_c17_field1_we = addr_hit[171] & reg_we & !reg_error;
  assign channel_status_c17_field1_wd = reg_wdata[31:2];

  assign reserved_2_c17_we = addr_hit[172] & reg_we & !reg_error;
  assign reserved_2_c17_wd = reg_wdata[31:0];

  assign channel_flags_c17_intr_enable_we = addr_hit[174] & reg_we & !reg_error;
  assign channel_flags_c17_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c17_field1_we = addr_hit[174] & reg_we & !reg_error;
  assign channel_flags_c17_field1_wd = reg_wdata[31:1];

  assign length_c17_we = addr_hit[175] & reg_we & !reg_error;
  assign length_c17_wd = reg_wdata[31:0];

  assign message_header_c17_message_id_we = addr_hit[176] & reg_we & !reg_error;
  assign message_header_c17_message_id_wd = reg_wdata[7:0];

  assign message_header_c17_message_type_we = addr_hit[176] & reg_we & !reg_error;
  assign message_header_c17_message_type_wd = reg_wdata[9:8];

  assign message_header_c17_protocol_id_we = addr_hit[176] & reg_we & !reg_error;
  assign message_header_c17_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c17_token_we = addr_hit[176] & reg_we & !reg_error;
  assign message_header_c17_token_wd = reg_wdata[27:18];

  assign message_header_c17_field1_we = addr_hit[176] & reg_we & !reg_error;
  assign message_header_c17_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c17_we = addr_hit[177] & reg_we & !reg_error;
  assign message_payload_1_c17_wd = reg_wdata[31:0];

  assign doorbell_c17_intr_we = addr_hit[178] & reg_we & !reg_error;
  assign doorbell_c17_intr_wd = reg_wdata[0];

  assign doorbell_c17_preserve_mask_we = addr_hit[178] & reg_we & !reg_error;
  assign doorbell_c17_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c17_intr_we = addr_hit[179] & reg_we & !reg_error;
  assign completion_interrupt_c17_intr_wd = reg_wdata[0];

  assign completion_interrupt_c17_preserve_mask_we = addr_hit[179] & reg_we & !reg_error;
  assign completion_interrupt_c17_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c18_we = addr_hit[180] & reg_we & !reg_error;
  assign reserved_1_c18_wd = reg_wdata[31:0];

  assign channel_status_c18_channel_free_we = addr_hit[181] & reg_we & !reg_error;
  assign channel_status_c18_channel_free_wd = reg_wdata[0];

  assign channel_status_c18_channel_error_we = addr_hit[181] & reg_we & !reg_error;
  assign channel_status_c18_channel_error_wd = reg_wdata[1];

  assign channel_status_c18_field1_we = addr_hit[181] & reg_we & !reg_error;
  assign channel_status_c18_field1_wd = reg_wdata[31:2];

  assign reserved_2_c18_we = addr_hit[182] & reg_we & !reg_error;
  assign reserved_2_c18_wd = reg_wdata[31:0];

  assign channel_flags_c18_intr_enable_we = addr_hit[184] & reg_we & !reg_error;
  assign channel_flags_c18_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c18_field1_we = addr_hit[184] & reg_we & !reg_error;
  assign channel_flags_c18_field1_wd = reg_wdata[31:1];

  assign length_c18_we = addr_hit[185] & reg_we & !reg_error;
  assign length_c18_wd = reg_wdata[31:0];

  assign message_header_c18_message_id_we = addr_hit[186] & reg_we & !reg_error;
  assign message_header_c18_message_id_wd = reg_wdata[7:0];

  assign message_header_c18_message_type_we = addr_hit[186] & reg_we & !reg_error;
  assign message_header_c18_message_type_wd = reg_wdata[9:8];

  assign message_header_c18_protocol_id_we = addr_hit[186] & reg_we & !reg_error;
  assign message_header_c18_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c18_token_we = addr_hit[186] & reg_we & !reg_error;
  assign message_header_c18_token_wd = reg_wdata[27:18];

  assign message_header_c18_field1_we = addr_hit[186] & reg_we & !reg_error;
  assign message_header_c18_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c18_we = addr_hit[187] & reg_we & !reg_error;
  assign message_payload_1_c18_wd = reg_wdata[31:0];

  assign doorbell_c18_intr_we = addr_hit[188] & reg_we & !reg_error;
  assign doorbell_c18_intr_wd = reg_wdata[0];

  assign doorbell_c18_preserve_mask_we = addr_hit[188] & reg_we & !reg_error;
  assign doorbell_c18_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c18_intr_we = addr_hit[189] & reg_we & !reg_error;
  assign completion_interrupt_c18_intr_wd = reg_wdata[0];

  assign completion_interrupt_c18_preserve_mask_we = addr_hit[189] & reg_we & !reg_error;
  assign completion_interrupt_c18_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c19_we = addr_hit[190] & reg_we & !reg_error;
  assign reserved_1_c19_wd = reg_wdata[31:0];

  assign channel_status_c19_channel_free_we = addr_hit[191] & reg_we & !reg_error;
  assign channel_status_c19_channel_free_wd = reg_wdata[0];

  assign channel_status_c19_channel_error_we = addr_hit[191] & reg_we & !reg_error;
  assign channel_status_c19_channel_error_wd = reg_wdata[1];

  assign channel_status_c19_field1_we = addr_hit[191] & reg_we & !reg_error;
  assign channel_status_c19_field1_wd = reg_wdata[31:2];

  assign reserved_2_c19_we = addr_hit[192] & reg_we & !reg_error;
  assign reserved_2_c19_wd = reg_wdata[31:0];

  assign channel_flags_c19_intr_enable_we = addr_hit[194] & reg_we & !reg_error;
  assign channel_flags_c19_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c19_field1_we = addr_hit[194] & reg_we & !reg_error;
  assign channel_flags_c19_field1_wd = reg_wdata[31:1];

  assign length_c19_we = addr_hit[195] & reg_we & !reg_error;
  assign length_c19_wd = reg_wdata[31:0];

  assign message_header_c19_message_id_we = addr_hit[196] & reg_we & !reg_error;
  assign message_header_c19_message_id_wd = reg_wdata[7:0];

  assign message_header_c19_message_type_we = addr_hit[196] & reg_we & !reg_error;
  assign message_header_c19_message_type_wd = reg_wdata[9:8];

  assign message_header_c19_protocol_id_we = addr_hit[196] & reg_we & !reg_error;
  assign message_header_c19_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c19_token_we = addr_hit[196] & reg_we & !reg_error;
  assign message_header_c19_token_wd = reg_wdata[27:18];

  assign message_header_c19_field1_we = addr_hit[196] & reg_we & !reg_error;
  assign message_header_c19_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c19_we = addr_hit[197] & reg_we & !reg_error;
  assign message_payload_1_c19_wd = reg_wdata[31:0];

  assign doorbell_c19_intr_we = addr_hit[198] & reg_we & !reg_error;
  assign doorbell_c19_intr_wd = reg_wdata[0];

  assign doorbell_c19_preserve_mask_we = addr_hit[198] & reg_we & !reg_error;
  assign doorbell_c19_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c19_intr_we = addr_hit[199] & reg_we & !reg_error;
  assign completion_interrupt_c19_intr_wd = reg_wdata[0];

  assign completion_interrupt_c19_preserve_mask_we = addr_hit[199] & reg_we & !reg_error;
  assign completion_interrupt_c19_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c20_we = addr_hit[200] & reg_we & !reg_error;
  assign reserved_1_c20_wd = reg_wdata[31:0];

  assign channel_status_c20_channel_free_we = addr_hit[201] & reg_we & !reg_error;
  assign channel_status_c20_channel_free_wd = reg_wdata[0];

  assign channel_status_c20_channel_error_we = addr_hit[201] & reg_we & !reg_error;
  assign channel_status_c20_channel_error_wd = reg_wdata[1];

  assign channel_status_c20_field1_we = addr_hit[201] & reg_we & !reg_error;
  assign channel_status_c20_field1_wd = reg_wdata[31:2];

  assign reserved_2_c20_we = addr_hit[202] & reg_we & !reg_error;
  assign reserved_2_c20_wd = reg_wdata[31:0];

  assign channel_flags_c20_intr_enable_we = addr_hit[204] & reg_we & !reg_error;
  assign channel_flags_c20_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c20_field1_we = addr_hit[204] & reg_we & !reg_error;
  assign channel_flags_c20_field1_wd = reg_wdata[31:1];

  assign length_c20_we = addr_hit[205] & reg_we & !reg_error;
  assign length_c20_wd = reg_wdata[31:0];

  assign message_header_c20_message_id_we = addr_hit[206] & reg_we & !reg_error;
  assign message_header_c20_message_id_wd = reg_wdata[7:0];

  assign message_header_c20_message_type_we = addr_hit[206] & reg_we & !reg_error;
  assign message_header_c20_message_type_wd = reg_wdata[9:8];

  assign message_header_c20_protocol_id_we = addr_hit[206] & reg_we & !reg_error;
  assign message_header_c20_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c20_token_we = addr_hit[206] & reg_we & !reg_error;
  assign message_header_c20_token_wd = reg_wdata[27:18];

  assign message_header_c20_field1_we = addr_hit[206] & reg_we & !reg_error;
  assign message_header_c20_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c20_we = addr_hit[207] & reg_we & !reg_error;
  assign message_payload_1_c20_wd = reg_wdata[31:0];

  assign doorbell_c20_intr_we = addr_hit[208] & reg_we & !reg_error;
  assign doorbell_c20_intr_wd = reg_wdata[0];

  assign doorbell_c20_preserve_mask_we = addr_hit[208] & reg_we & !reg_error;
  assign doorbell_c20_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c20_intr_we = addr_hit[209] & reg_we & !reg_error;
  assign completion_interrupt_c20_intr_wd = reg_wdata[0];

  assign completion_interrupt_c20_preserve_mask_we = addr_hit[209] & reg_we & !reg_error;
  assign completion_interrupt_c20_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c21_we = addr_hit[210] & reg_we & !reg_error;
  assign reserved_1_c21_wd = reg_wdata[31:0];

  assign channel_status_c21_channel_free_we = addr_hit[211] & reg_we & !reg_error;
  assign channel_status_c21_channel_free_wd = reg_wdata[0];

  assign channel_status_c21_channel_error_we = addr_hit[211] & reg_we & !reg_error;
  assign channel_status_c21_channel_error_wd = reg_wdata[1];

  assign channel_status_c21_field1_we = addr_hit[211] & reg_we & !reg_error;
  assign channel_status_c21_field1_wd = reg_wdata[31:2];

  assign reserved_2_c21_we = addr_hit[212] & reg_we & !reg_error;
  assign reserved_2_c21_wd = reg_wdata[31:0];

  assign channel_flags_c21_intr_enable_we = addr_hit[214] & reg_we & !reg_error;
  assign channel_flags_c21_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c21_field1_we = addr_hit[214] & reg_we & !reg_error;
  assign channel_flags_c21_field1_wd = reg_wdata[31:1];

  assign length_c21_we = addr_hit[215] & reg_we & !reg_error;
  assign length_c21_wd = reg_wdata[31:0];

  assign message_header_c21_message_id_we = addr_hit[216] & reg_we & !reg_error;
  assign message_header_c21_message_id_wd = reg_wdata[7:0];

  assign message_header_c21_message_type_we = addr_hit[216] & reg_we & !reg_error;
  assign message_header_c21_message_type_wd = reg_wdata[9:8];

  assign message_header_c21_protocol_id_we = addr_hit[216] & reg_we & !reg_error;
  assign message_header_c21_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c21_token_we = addr_hit[216] & reg_we & !reg_error;
  assign message_header_c21_token_wd = reg_wdata[27:18];

  assign message_header_c21_field1_we = addr_hit[216] & reg_we & !reg_error;
  assign message_header_c21_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c21_we = addr_hit[217] & reg_we & !reg_error;
  assign message_payload_1_c21_wd = reg_wdata[31:0];

  assign doorbell_c21_intr_we = addr_hit[218] & reg_we & !reg_error;
  assign doorbell_c21_intr_wd = reg_wdata[0];

  assign doorbell_c21_preserve_mask_we = addr_hit[218] & reg_we & !reg_error;
  assign doorbell_c21_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c21_intr_we = addr_hit[219] & reg_we & !reg_error;
  assign completion_interrupt_c21_intr_wd = reg_wdata[0];

  assign completion_interrupt_c21_preserve_mask_we = addr_hit[219] & reg_we & !reg_error;
  assign completion_interrupt_c21_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c22_we = addr_hit[220] & reg_we & !reg_error;
  assign reserved_1_c22_wd = reg_wdata[31:0];

  assign channel_status_c22_channel_free_we = addr_hit[221] & reg_we & !reg_error;
  assign channel_status_c22_channel_free_wd = reg_wdata[0];

  assign channel_status_c22_channel_error_we = addr_hit[221] & reg_we & !reg_error;
  assign channel_status_c22_channel_error_wd = reg_wdata[1];

  assign channel_status_c22_field1_we = addr_hit[221] & reg_we & !reg_error;
  assign channel_status_c22_field1_wd = reg_wdata[31:2];

  assign reserved_2_c22_we = addr_hit[222] & reg_we & !reg_error;
  assign reserved_2_c22_wd = reg_wdata[31:0];

  assign channel_flags_c22_intr_enable_we = addr_hit[224] & reg_we & !reg_error;
  assign channel_flags_c22_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c22_field1_we = addr_hit[224] & reg_we & !reg_error;
  assign channel_flags_c22_field1_wd = reg_wdata[31:1];

  assign length_c22_we = addr_hit[225] & reg_we & !reg_error;
  assign length_c22_wd = reg_wdata[31:0];

  assign message_header_c22_message_id_we = addr_hit[226] & reg_we & !reg_error;
  assign message_header_c22_message_id_wd = reg_wdata[7:0];

  assign message_header_c22_message_type_we = addr_hit[226] & reg_we & !reg_error;
  assign message_header_c22_message_type_wd = reg_wdata[9:8];

  assign message_header_c22_protocol_id_we = addr_hit[226] & reg_we & !reg_error;
  assign message_header_c22_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c22_token_we = addr_hit[226] & reg_we & !reg_error;
  assign message_header_c22_token_wd = reg_wdata[27:18];

  assign message_header_c22_field1_we = addr_hit[226] & reg_we & !reg_error;
  assign message_header_c22_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c22_we = addr_hit[227] & reg_we & !reg_error;
  assign message_payload_1_c22_wd = reg_wdata[31:0];

  assign doorbell_c22_intr_we = addr_hit[228] & reg_we & !reg_error;
  assign doorbell_c22_intr_wd = reg_wdata[0];

  assign doorbell_c22_preserve_mask_we = addr_hit[228] & reg_we & !reg_error;
  assign doorbell_c22_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c22_intr_we = addr_hit[229] & reg_we & !reg_error;
  assign completion_interrupt_c22_intr_wd = reg_wdata[0];

  assign completion_interrupt_c22_preserve_mask_we = addr_hit[229] & reg_we & !reg_error;
  assign completion_interrupt_c22_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c23_we = addr_hit[230] & reg_we & !reg_error;
  assign reserved_1_c23_wd = reg_wdata[31:0];

  assign channel_status_c23_channel_free_we = addr_hit[231] & reg_we & !reg_error;
  assign channel_status_c23_channel_free_wd = reg_wdata[0];

  assign channel_status_c23_channel_error_we = addr_hit[231] & reg_we & !reg_error;
  assign channel_status_c23_channel_error_wd = reg_wdata[1];

  assign channel_status_c23_field1_we = addr_hit[231] & reg_we & !reg_error;
  assign channel_status_c23_field1_wd = reg_wdata[31:2];

  assign reserved_2_c23_we = addr_hit[232] & reg_we & !reg_error;
  assign reserved_2_c23_wd = reg_wdata[31:0];

  assign channel_flags_c23_intr_enable_we = addr_hit[234] & reg_we & !reg_error;
  assign channel_flags_c23_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c23_field1_we = addr_hit[234] & reg_we & !reg_error;
  assign channel_flags_c23_field1_wd = reg_wdata[31:1];

  assign length_c23_we = addr_hit[235] & reg_we & !reg_error;
  assign length_c23_wd = reg_wdata[31:0];

  assign message_header_c23_message_id_we = addr_hit[236] & reg_we & !reg_error;
  assign message_header_c23_message_id_wd = reg_wdata[7:0];

  assign message_header_c23_message_type_we = addr_hit[236] & reg_we & !reg_error;
  assign message_header_c23_message_type_wd = reg_wdata[9:8];

  assign message_header_c23_protocol_id_we = addr_hit[236] & reg_we & !reg_error;
  assign message_header_c23_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c23_token_we = addr_hit[236] & reg_we & !reg_error;
  assign message_header_c23_token_wd = reg_wdata[27:18];

  assign message_header_c23_field1_we = addr_hit[236] & reg_we & !reg_error;
  assign message_header_c23_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c23_we = addr_hit[237] & reg_we & !reg_error;
  assign message_payload_1_c23_wd = reg_wdata[31:0];

  assign doorbell_c23_intr_we = addr_hit[238] & reg_we & !reg_error;
  assign doorbell_c23_intr_wd = reg_wdata[0];

  assign doorbell_c23_preserve_mask_we = addr_hit[238] & reg_we & !reg_error;
  assign doorbell_c23_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c23_intr_we = addr_hit[239] & reg_we & !reg_error;
  assign completion_interrupt_c23_intr_wd = reg_wdata[0];

  assign completion_interrupt_c23_preserve_mask_we = addr_hit[239] & reg_we & !reg_error;
  assign completion_interrupt_c23_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c24_we = addr_hit[240] & reg_we & !reg_error;
  assign reserved_1_c24_wd = reg_wdata[31:0];

  assign channel_status_c24_channel_free_we = addr_hit[241] & reg_we & !reg_error;
  assign channel_status_c24_channel_free_wd = reg_wdata[0];

  assign channel_status_c24_channel_error_we = addr_hit[241] & reg_we & !reg_error;
  assign channel_status_c24_channel_error_wd = reg_wdata[1];

  assign channel_status_c24_field1_we = addr_hit[241] & reg_we & !reg_error;
  assign channel_status_c24_field1_wd = reg_wdata[31:2];

  assign reserved_2_c24_we = addr_hit[242] & reg_we & !reg_error;
  assign reserved_2_c24_wd = reg_wdata[31:0];

  assign channel_flags_c24_intr_enable_we = addr_hit[244] & reg_we & !reg_error;
  assign channel_flags_c24_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c24_field1_we = addr_hit[244] & reg_we & !reg_error;
  assign channel_flags_c24_field1_wd = reg_wdata[31:1];

  assign length_c24_we = addr_hit[245] & reg_we & !reg_error;
  assign length_c24_wd = reg_wdata[31:0];

  assign message_header_c24_message_id_we = addr_hit[246] & reg_we & !reg_error;
  assign message_header_c24_message_id_wd = reg_wdata[7:0];

  assign message_header_c24_message_type_we = addr_hit[246] & reg_we & !reg_error;
  assign message_header_c24_message_type_wd = reg_wdata[9:8];

  assign message_header_c24_protocol_id_we = addr_hit[246] & reg_we & !reg_error;
  assign message_header_c24_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c24_token_we = addr_hit[246] & reg_we & !reg_error;
  assign message_header_c24_token_wd = reg_wdata[27:18];

  assign message_header_c24_field1_we = addr_hit[246] & reg_we & !reg_error;
  assign message_header_c24_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c24_we = addr_hit[247] & reg_we & !reg_error;
  assign message_payload_1_c24_wd = reg_wdata[31:0];

  assign doorbell_c24_intr_we = addr_hit[248] & reg_we & !reg_error;
  assign doorbell_c24_intr_wd = reg_wdata[0];

  assign doorbell_c24_preserve_mask_we = addr_hit[248] & reg_we & !reg_error;
  assign doorbell_c24_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c24_intr_we = addr_hit[249] & reg_we & !reg_error;
  assign completion_interrupt_c24_intr_wd = reg_wdata[0];

  assign completion_interrupt_c24_preserve_mask_we = addr_hit[249] & reg_we & !reg_error;
  assign completion_interrupt_c24_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c25_we = addr_hit[250] & reg_we & !reg_error;
  assign reserved_1_c25_wd = reg_wdata[31:0];

  assign channel_status_c25_channel_free_we = addr_hit[251] & reg_we & !reg_error;
  assign channel_status_c25_channel_free_wd = reg_wdata[0];

  assign channel_status_c25_channel_error_we = addr_hit[251] & reg_we & !reg_error;
  assign channel_status_c25_channel_error_wd = reg_wdata[1];

  assign channel_status_c25_field1_we = addr_hit[251] & reg_we & !reg_error;
  assign channel_status_c25_field1_wd = reg_wdata[31:2];

  assign reserved_2_c25_we = addr_hit[252] & reg_we & !reg_error;
  assign reserved_2_c25_wd = reg_wdata[31:0];

  assign channel_flags_c25_intr_enable_we = addr_hit[254] & reg_we & !reg_error;
  assign channel_flags_c25_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c25_field1_we = addr_hit[254] & reg_we & !reg_error;
  assign channel_flags_c25_field1_wd = reg_wdata[31:1];

  assign length_c25_we = addr_hit[255] & reg_we & !reg_error;
  assign length_c25_wd = reg_wdata[31:0];

  assign message_header_c25_message_id_we = addr_hit[256] & reg_we & !reg_error;
  assign message_header_c25_message_id_wd = reg_wdata[7:0];

  assign message_header_c25_message_type_we = addr_hit[256] & reg_we & !reg_error;
  assign message_header_c25_message_type_wd = reg_wdata[9:8];

  assign message_header_c25_protocol_id_we = addr_hit[256] & reg_we & !reg_error;
  assign message_header_c25_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c25_token_we = addr_hit[256] & reg_we & !reg_error;
  assign message_header_c25_token_wd = reg_wdata[27:18];

  assign message_header_c25_field1_we = addr_hit[256] & reg_we & !reg_error;
  assign message_header_c25_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c25_we = addr_hit[257] & reg_we & !reg_error;
  assign message_payload_1_c25_wd = reg_wdata[31:0];

  assign doorbell_c25_intr_we = addr_hit[258] & reg_we & !reg_error;
  assign doorbell_c25_intr_wd = reg_wdata[0];

  assign doorbell_c25_preserve_mask_we = addr_hit[258] & reg_we & !reg_error;
  assign doorbell_c25_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c25_intr_we = addr_hit[259] & reg_we & !reg_error;
  assign completion_interrupt_c25_intr_wd = reg_wdata[0];

  assign completion_interrupt_c25_preserve_mask_we = addr_hit[259] & reg_we & !reg_error;
  assign completion_interrupt_c25_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c26_we = addr_hit[260] & reg_we & !reg_error;
  assign reserved_1_c26_wd = reg_wdata[31:0];

  assign channel_status_c26_channel_free_we = addr_hit[261] & reg_we & !reg_error;
  assign channel_status_c26_channel_free_wd = reg_wdata[0];

  assign channel_status_c26_channel_error_we = addr_hit[261] & reg_we & !reg_error;
  assign channel_status_c26_channel_error_wd = reg_wdata[1];

  assign channel_status_c26_field1_we = addr_hit[261] & reg_we & !reg_error;
  assign channel_status_c26_field1_wd = reg_wdata[31:2];

  assign reserved_2_c26_we = addr_hit[262] & reg_we & !reg_error;
  assign reserved_2_c26_wd = reg_wdata[31:0];

  assign channel_flags_c26_intr_enable_we = addr_hit[264] & reg_we & !reg_error;
  assign channel_flags_c26_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c26_field1_we = addr_hit[264] & reg_we & !reg_error;
  assign channel_flags_c26_field1_wd = reg_wdata[31:1];

  assign length_c26_we = addr_hit[265] & reg_we & !reg_error;
  assign length_c26_wd = reg_wdata[31:0];

  assign message_header_c26_message_id_we = addr_hit[266] & reg_we & !reg_error;
  assign message_header_c26_message_id_wd = reg_wdata[7:0];

  assign message_header_c26_message_type_we = addr_hit[266] & reg_we & !reg_error;
  assign message_header_c26_message_type_wd = reg_wdata[9:8];

  assign message_header_c26_protocol_id_we = addr_hit[266] & reg_we & !reg_error;
  assign message_header_c26_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c26_token_we = addr_hit[266] & reg_we & !reg_error;
  assign message_header_c26_token_wd = reg_wdata[27:18];

  assign message_header_c26_field1_we = addr_hit[266] & reg_we & !reg_error;
  assign message_header_c26_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c26_we = addr_hit[267] & reg_we & !reg_error;
  assign message_payload_1_c26_wd = reg_wdata[31:0];

  assign doorbell_c26_intr_we = addr_hit[268] & reg_we & !reg_error;
  assign doorbell_c26_intr_wd = reg_wdata[0];

  assign doorbell_c26_preserve_mask_we = addr_hit[268] & reg_we & !reg_error;
  assign doorbell_c26_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c26_intr_we = addr_hit[269] & reg_we & !reg_error;
  assign completion_interrupt_c26_intr_wd = reg_wdata[0];

  assign completion_interrupt_c26_preserve_mask_we = addr_hit[269] & reg_we & !reg_error;
  assign completion_interrupt_c26_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c27_we = addr_hit[270] & reg_we & !reg_error;
  assign reserved_1_c27_wd = reg_wdata[31:0];

  assign channel_status_c27_channel_free_we = addr_hit[271] & reg_we & !reg_error;
  assign channel_status_c27_channel_free_wd = reg_wdata[0];

  assign channel_status_c27_channel_error_we = addr_hit[271] & reg_we & !reg_error;
  assign channel_status_c27_channel_error_wd = reg_wdata[1];

  assign channel_status_c27_field1_we = addr_hit[271] & reg_we & !reg_error;
  assign channel_status_c27_field1_wd = reg_wdata[31:2];

  assign reserved_2_c27_we = addr_hit[272] & reg_we & !reg_error;
  assign reserved_2_c27_wd = reg_wdata[31:0];

  assign channel_flags_c27_intr_enable_we = addr_hit[274] & reg_we & !reg_error;
  assign channel_flags_c27_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c27_field1_we = addr_hit[274] & reg_we & !reg_error;
  assign channel_flags_c27_field1_wd = reg_wdata[31:1];

  assign length_c27_we = addr_hit[275] & reg_we & !reg_error;
  assign length_c27_wd = reg_wdata[31:0];

  assign message_header_c27_message_id_we = addr_hit[276] & reg_we & !reg_error;
  assign message_header_c27_message_id_wd = reg_wdata[7:0];

  assign message_header_c27_message_type_we = addr_hit[276] & reg_we & !reg_error;
  assign message_header_c27_message_type_wd = reg_wdata[9:8];

  assign message_header_c27_protocol_id_we = addr_hit[276] & reg_we & !reg_error;
  assign message_header_c27_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c27_token_we = addr_hit[276] & reg_we & !reg_error;
  assign message_header_c27_token_wd = reg_wdata[27:18];

  assign message_header_c27_field1_we = addr_hit[276] & reg_we & !reg_error;
  assign message_header_c27_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c27_we = addr_hit[277] & reg_we & !reg_error;
  assign message_payload_1_c27_wd = reg_wdata[31:0];

  assign doorbell_c27_intr_we = addr_hit[278] & reg_we & !reg_error;
  assign doorbell_c27_intr_wd = reg_wdata[0];

  assign doorbell_c27_preserve_mask_we = addr_hit[278] & reg_we & !reg_error;
  assign doorbell_c27_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c27_intr_we = addr_hit[279] & reg_we & !reg_error;
  assign completion_interrupt_c27_intr_wd = reg_wdata[0];

  assign completion_interrupt_c27_preserve_mask_we = addr_hit[279] & reg_we & !reg_error;
  assign completion_interrupt_c27_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c28_we = addr_hit[280] & reg_we & !reg_error;
  assign reserved_1_c28_wd = reg_wdata[31:0];

  assign channel_status_c28_channel_free_we = addr_hit[281] & reg_we & !reg_error;
  assign channel_status_c28_channel_free_wd = reg_wdata[0];

  assign channel_status_c28_channel_error_we = addr_hit[281] & reg_we & !reg_error;
  assign channel_status_c28_channel_error_wd = reg_wdata[1];

  assign channel_status_c28_field1_we = addr_hit[281] & reg_we & !reg_error;
  assign channel_status_c28_field1_wd = reg_wdata[31:2];

  assign reserved_2_c28_we = addr_hit[282] & reg_we & !reg_error;
  assign reserved_2_c28_wd = reg_wdata[31:0];

  assign channel_flags_c28_intr_enable_we = addr_hit[284] & reg_we & !reg_error;
  assign channel_flags_c28_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c28_field1_we = addr_hit[284] & reg_we & !reg_error;
  assign channel_flags_c28_field1_wd = reg_wdata[31:1];

  assign length_c28_we = addr_hit[285] & reg_we & !reg_error;
  assign length_c28_wd = reg_wdata[31:0];

  assign message_header_c28_message_id_we = addr_hit[286] & reg_we & !reg_error;
  assign message_header_c28_message_id_wd = reg_wdata[7:0];

  assign message_header_c28_message_type_we = addr_hit[286] & reg_we & !reg_error;
  assign message_header_c28_message_type_wd = reg_wdata[9:8];

  assign message_header_c28_protocol_id_we = addr_hit[286] & reg_we & !reg_error;
  assign message_header_c28_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c28_token_we = addr_hit[286] & reg_we & !reg_error;
  assign message_header_c28_token_wd = reg_wdata[27:18];

  assign message_header_c28_field1_we = addr_hit[286] & reg_we & !reg_error;
  assign message_header_c28_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c28_we = addr_hit[287] & reg_we & !reg_error;
  assign message_payload_1_c28_wd = reg_wdata[31:0];

  assign doorbell_c28_intr_we = addr_hit[288] & reg_we & !reg_error;
  assign doorbell_c28_intr_wd = reg_wdata[0];

  assign doorbell_c28_preserve_mask_we = addr_hit[288] & reg_we & !reg_error;
  assign doorbell_c28_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c28_intr_we = addr_hit[289] & reg_we & !reg_error;
  assign completion_interrupt_c28_intr_wd = reg_wdata[0];

  assign completion_interrupt_c28_preserve_mask_we = addr_hit[289] & reg_we & !reg_error;
  assign completion_interrupt_c28_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c29_we = addr_hit[290] & reg_we & !reg_error;
  assign reserved_1_c29_wd = reg_wdata[31:0];

  assign channel_status_c29_channel_free_we = addr_hit[291] & reg_we & !reg_error;
  assign channel_status_c29_channel_free_wd = reg_wdata[0];

  assign channel_status_c29_channel_error_we = addr_hit[291] & reg_we & !reg_error;
  assign channel_status_c29_channel_error_wd = reg_wdata[1];

  assign channel_status_c29_field1_we = addr_hit[291] & reg_we & !reg_error;
  assign channel_status_c29_field1_wd = reg_wdata[31:2];

  assign reserved_2_c29_we = addr_hit[292] & reg_we & !reg_error;
  assign reserved_2_c29_wd = reg_wdata[31:0];

  assign channel_flags_c29_intr_enable_we = addr_hit[294] & reg_we & !reg_error;
  assign channel_flags_c29_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c29_field1_we = addr_hit[294] & reg_we & !reg_error;
  assign channel_flags_c29_field1_wd = reg_wdata[31:1];

  assign length_c29_we = addr_hit[295] & reg_we & !reg_error;
  assign length_c29_wd = reg_wdata[31:0];

  assign message_header_c29_message_id_we = addr_hit[296] & reg_we & !reg_error;
  assign message_header_c29_message_id_wd = reg_wdata[7:0];

  assign message_header_c29_message_type_we = addr_hit[296] & reg_we & !reg_error;
  assign message_header_c29_message_type_wd = reg_wdata[9:8];

  assign message_header_c29_protocol_id_we = addr_hit[296] & reg_we & !reg_error;
  assign message_header_c29_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c29_token_we = addr_hit[296] & reg_we & !reg_error;
  assign message_header_c29_token_wd = reg_wdata[27:18];

  assign message_header_c29_field1_we = addr_hit[296] & reg_we & !reg_error;
  assign message_header_c29_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c29_we = addr_hit[297] & reg_we & !reg_error;
  assign message_payload_1_c29_wd = reg_wdata[31:0];

  assign doorbell_c29_intr_we = addr_hit[298] & reg_we & !reg_error;
  assign doorbell_c29_intr_wd = reg_wdata[0];

  assign doorbell_c29_preserve_mask_we = addr_hit[298] & reg_we & !reg_error;
  assign doorbell_c29_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c29_intr_we = addr_hit[299] & reg_we & !reg_error;
  assign completion_interrupt_c29_intr_wd = reg_wdata[0];

  assign completion_interrupt_c29_preserve_mask_we = addr_hit[299] & reg_we & !reg_error;
  assign completion_interrupt_c29_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c30_we = addr_hit[300] & reg_we & !reg_error;
  assign reserved_1_c30_wd = reg_wdata[31:0];

  assign channel_status_c30_channel_free_we = addr_hit[301] & reg_we & !reg_error;
  assign channel_status_c30_channel_free_wd = reg_wdata[0];

  assign channel_status_c30_channel_error_we = addr_hit[301] & reg_we & !reg_error;
  assign channel_status_c30_channel_error_wd = reg_wdata[1];

  assign channel_status_c30_field1_we = addr_hit[301] & reg_we & !reg_error;
  assign channel_status_c30_field1_wd = reg_wdata[31:2];

  assign reserved_2_c30_we = addr_hit[302] & reg_we & !reg_error;
  assign reserved_2_c30_wd = reg_wdata[31:0];

  assign channel_flags_c30_intr_enable_we = addr_hit[304] & reg_we & !reg_error;
  assign channel_flags_c30_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c30_field1_we = addr_hit[304] & reg_we & !reg_error;
  assign channel_flags_c30_field1_wd = reg_wdata[31:1];

  assign length_c30_we = addr_hit[305] & reg_we & !reg_error;
  assign length_c30_wd = reg_wdata[31:0];

  assign message_header_c30_message_id_we = addr_hit[306] & reg_we & !reg_error;
  assign message_header_c30_message_id_wd = reg_wdata[7:0];

  assign message_header_c30_message_type_we = addr_hit[306] & reg_we & !reg_error;
  assign message_header_c30_message_type_wd = reg_wdata[9:8];

  assign message_header_c30_protocol_id_we = addr_hit[306] & reg_we & !reg_error;
  assign message_header_c30_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c30_token_we = addr_hit[306] & reg_we & !reg_error;
  assign message_header_c30_token_wd = reg_wdata[27:18];

  assign message_header_c30_field1_we = addr_hit[306] & reg_we & !reg_error;
  assign message_header_c30_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c30_we = addr_hit[307] & reg_we & !reg_error;
  assign message_payload_1_c30_wd = reg_wdata[31:0];

  assign doorbell_c30_intr_we = addr_hit[308] & reg_we & !reg_error;
  assign doorbell_c30_intr_wd = reg_wdata[0];

  assign doorbell_c30_preserve_mask_we = addr_hit[308] & reg_we & !reg_error;
  assign doorbell_c30_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c30_intr_we = addr_hit[309] & reg_we & !reg_error;
  assign completion_interrupt_c30_intr_wd = reg_wdata[0];

  assign completion_interrupt_c30_preserve_mask_we = addr_hit[309] & reg_we & !reg_error;
  assign completion_interrupt_c30_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c31_we = addr_hit[310] & reg_we & !reg_error;
  assign reserved_1_c31_wd = reg_wdata[31:0];

  assign channel_status_c31_channel_free_we = addr_hit[311] & reg_we & !reg_error;
  assign channel_status_c31_channel_free_wd = reg_wdata[0];

  assign channel_status_c31_channel_error_we = addr_hit[311] & reg_we & !reg_error;
  assign channel_status_c31_channel_error_wd = reg_wdata[1];

  assign channel_status_c31_field1_we = addr_hit[311] & reg_we & !reg_error;
  assign channel_status_c31_field1_wd = reg_wdata[31:2];

  assign reserved_2_c31_we = addr_hit[312] & reg_we & !reg_error;
  assign reserved_2_c31_wd = reg_wdata[31:0];

  assign channel_flags_c31_intr_enable_we = addr_hit[314] & reg_we & !reg_error;
  assign channel_flags_c31_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c31_field1_we = addr_hit[314] & reg_we & !reg_error;
  assign channel_flags_c31_field1_wd = reg_wdata[31:1];

  assign length_c31_we = addr_hit[315] & reg_we & !reg_error;
  assign length_c31_wd = reg_wdata[31:0];

  assign message_header_c31_message_id_we = addr_hit[316] & reg_we & !reg_error;
  assign message_header_c31_message_id_wd = reg_wdata[7:0];

  assign message_header_c31_message_type_we = addr_hit[316] & reg_we & !reg_error;
  assign message_header_c31_message_type_wd = reg_wdata[9:8];

  assign message_header_c31_protocol_id_we = addr_hit[316] & reg_we & !reg_error;
  assign message_header_c31_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c31_token_we = addr_hit[316] & reg_we & !reg_error;
  assign message_header_c31_token_wd = reg_wdata[27:18];

  assign message_header_c31_field1_we = addr_hit[316] & reg_we & !reg_error;
  assign message_header_c31_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c31_we = addr_hit[317] & reg_we & !reg_error;
  assign message_payload_1_c31_wd = reg_wdata[31:0];

  assign doorbell_c31_intr_we = addr_hit[318] & reg_we & !reg_error;
  assign doorbell_c31_intr_wd = reg_wdata[0];

  assign doorbell_c31_preserve_mask_we = addr_hit[318] & reg_we & !reg_error;
  assign doorbell_c31_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c31_intr_we = addr_hit[319] & reg_we & !reg_error;
  assign completion_interrupt_c31_intr_wd = reg_wdata[0];

  assign completion_interrupt_c31_preserve_mask_we = addr_hit[319] & reg_we & !reg_error;
  assign completion_interrupt_c31_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c32_we = addr_hit[320] & reg_we & !reg_error;
  assign reserved_1_c32_wd = reg_wdata[31:0];

  assign channel_status_c32_channel_free_we = addr_hit[321] & reg_we & !reg_error;
  assign channel_status_c32_channel_free_wd = reg_wdata[0];

  assign channel_status_c32_channel_error_we = addr_hit[321] & reg_we & !reg_error;
  assign channel_status_c32_channel_error_wd = reg_wdata[1];

  assign channel_status_c32_field1_we = addr_hit[321] & reg_we & !reg_error;
  assign channel_status_c32_field1_wd = reg_wdata[31:2];

  assign reserved_2_c32_we = addr_hit[322] & reg_we & !reg_error;
  assign reserved_2_c32_wd = reg_wdata[31:0];

  assign channel_flags_c32_intr_enable_we = addr_hit[324] & reg_we & !reg_error;
  assign channel_flags_c32_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c32_field1_we = addr_hit[324] & reg_we & !reg_error;
  assign channel_flags_c32_field1_wd = reg_wdata[31:1];

  assign length_c32_we = addr_hit[325] & reg_we & !reg_error;
  assign length_c32_wd = reg_wdata[31:0];

  assign message_header_c32_message_id_we = addr_hit[326] & reg_we & !reg_error;
  assign message_header_c32_message_id_wd = reg_wdata[7:0];

  assign message_header_c32_message_type_we = addr_hit[326] & reg_we & !reg_error;
  assign message_header_c32_message_type_wd = reg_wdata[9:8];

  assign message_header_c32_protocol_id_we = addr_hit[326] & reg_we & !reg_error;
  assign message_header_c32_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c32_token_we = addr_hit[326] & reg_we & !reg_error;
  assign message_header_c32_token_wd = reg_wdata[27:18];

  assign message_header_c32_field1_we = addr_hit[326] & reg_we & !reg_error;
  assign message_header_c32_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c32_we = addr_hit[327] & reg_we & !reg_error;
  assign message_payload_1_c32_wd = reg_wdata[31:0];

  assign doorbell_c32_intr_we = addr_hit[328] & reg_we & !reg_error;
  assign doorbell_c32_intr_wd = reg_wdata[0];

  assign doorbell_c32_preserve_mask_we = addr_hit[328] & reg_we & !reg_error;
  assign doorbell_c32_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c32_intr_we = addr_hit[329] & reg_we & !reg_error;
  assign completion_interrupt_c32_intr_wd = reg_wdata[0];

  assign completion_interrupt_c32_preserve_mask_we = addr_hit[329] & reg_we & !reg_error;
  assign completion_interrupt_c32_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c33_we = addr_hit[330] & reg_we & !reg_error;
  assign reserved_1_c33_wd = reg_wdata[31:0];

  assign channel_status_c33_channel_free_we = addr_hit[331] & reg_we & !reg_error;
  assign channel_status_c33_channel_free_wd = reg_wdata[0];

  assign channel_status_c33_channel_error_we = addr_hit[331] & reg_we & !reg_error;
  assign channel_status_c33_channel_error_wd = reg_wdata[1];

  assign channel_status_c33_field1_we = addr_hit[331] & reg_we & !reg_error;
  assign channel_status_c33_field1_wd = reg_wdata[31:2];

  assign reserved_2_c33_we = addr_hit[332] & reg_we & !reg_error;
  assign reserved_2_c33_wd = reg_wdata[31:0];

  assign channel_flags_c33_intr_enable_we = addr_hit[334] & reg_we & !reg_error;
  assign channel_flags_c33_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c33_field1_we = addr_hit[334] & reg_we & !reg_error;
  assign channel_flags_c33_field1_wd = reg_wdata[31:1];

  assign length_c33_we = addr_hit[335] & reg_we & !reg_error;
  assign length_c33_wd = reg_wdata[31:0];

  assign message_header_c33_message_id_we = addr_hit[336] & reg_we & !reg_error;
  assign message_header_c33_message_id_wd = reg_wdata[7:0];

  assign message_header_c33_message_type_we = addr_hit[336] & reg_we & !reg_error;
  assign message_header_c33_message_type_wd = reg_wdata[9:8];

  assign message_header_c33_protocol_id_we = addr_hit[336] & reg_we & !reg_error;
  assign message_header_c33_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c33_token_we = addr_hit[336] & reg_we & !reg_error;
  assign message_header_c33_token_wd = reg_wdata[27:18];

  assign message_header_c33_field1_we = addr_hit[336] & reg_we & !reg_error;
  assign message_header_c33_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c33_we = addr_hit[337] & reg_we & !reg_error;
  assign message_payload_1_c33_wd = reg_wdata[31:0];

  assign doorbell_c33_intr_we = addr_hit[338] & reg_we & !reg_error;
  assign doorbell_c33_intr_wd = reg_wdata[0];

  assign doorbell_c33_preserve_mask_we = addr_hit[338] & reg_we & !reg_error;
  assign doorbell_c33_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c33_intr_we = addr_hit[339] & reg_we & !reg_error;
  assign completion_interrupt_c33_intr_wd = reg_wdata[0];

  assign completion_interrupt_c33_preserve_mask_we = addr_hit[339] & reg_we & !reg_error;
  assign completion_interrupt_c33_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c34_we = addr_hit[340] & reg_we & !reg_error;
  assign reserved_1_c34_wd = reg_wdata[31:0];

  assign channel_status_c34_channel_free_we = addr_hit[341] & reg_we & !reg_error;
  assign channel_status_c34_channel_free_wd = reg_wdata[0];

  assign channel_status_c34_channel_error_we = addr_hit[341] & reg_we & !reg_error;
  assign channel_status_c34_channel_error_wd = reg_wdata[1];

  assign channel_status_c34_field1_we = addr_hit[341] & reg_we & !reg_error;
  assign channel_status_c34_field1_wd = reg_wdata[31:2];

  assign reserved_2_c34_we = addr_hit[342] & reg_we & !reg_error;
  assign reserved_2_c34_wd = reg_wdata[31:0];

  assign channel_flags_c34_intr_enable_we = addr_hit[344] & reg_we & !reg_error;
  assign channel_flags_c34_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c34_field1_we = addr_hit[344] & reg_we & !reg_error;
  assign channel_flags_c34_field1_wd = reg_wdata[31:1];

  assign length_c34_we = addr_hit[345] & reg_we & !reg_error;
  assign length_c34_wd = reg_wdata[31:0];

  assign message_header_c34_message_id_we = addr_hit[346] & reg_we & !reg_error;
  assign message_header_c34_message_id_wd = reg_wdata[7:0];

  assign message_header_c34_message_type_we = addr_hit[346] & reg_we & !reg_error;
  assign message_header_c34_message_type_wd = reg_wdata[9:8];

  assign message_header_c34_protocol_id_we = addr_hit[346] & reg_we & !reg_error;
  assign message_header_c34_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c34_token_we = addr_hit[346] & reg_we & !reg_error;
  assign message_header_c34_token_wd = reg_wdata[27:18];

  assign message_header_c34_field1_we = addr_hit[346] & reg_we & !reg_error;
  assign message_header_c34_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c34_we = addr_hit[347] & reg_we & !reg_error;
  assign message_payload_1_c34_wd = reg_wdata[31:0];

  assign doorbell_c34_intr_we = addr_hit[348] & reg_we & !reg_error;
  assign doorbell_c34_intr_wd = reg_wdata[0];

  assign doorbell_c34_preserve_mask_we = addr_hit[348] & reg_we & !reg_error;
  assign doorbell_c34_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c34_intr_we = addr_hit[349] & reg_we & !reg_error;
  assign completion_interrupt_c34_intr_wd = reg_wdata[0];

  assign completion_interrupt_c34_preserve_mask_we = addr_hit[349] & reg_we & !reg_error;
  assign completion_interrupt_c34_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c35_we = addr_hit[350] & reg_we & !reg_error;
  assign reserved_1_c35_wd = reg_wdata[31:0];

  assign channel_status_c35_channel_free_we = addr_hit[351] & reg_we & !reg_error;
  assign channel_status_c35_channel_free_wd = reg_wdata[0];

  assign channel_status_c35_channel_error_we = addr_hit[351] & reg_we & !reg_error;
  assign channel_status_c35_channel_error_wd = reg_wdata[1];

  assign channel_status_c35_field1_we = addr_hit[351] & reg_we & !reg_error;
  assign channel_status_c35_field1_wd = reg_wdata[31:2];

  assign reserved_2_c35_we = addr_hit[352] & reg_we & !reg_error;
  assign reserved_2_c35_wd = reg_wdata[31:0];

  assign channel_flags_c35_intr_enable_we = addr_hit[354] & reg_we & !reg_error;
  assign channel_flags_c35_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c35_field1_we = addr_hit[354] & reg_we & !reg_error;
  assign channel_flags_c35_field1_wd = reg_wdata[31:1];

  assign length_c35_we = addr_hit[355] & reg_we & !reg_error;
  assign length_c35_wd = reg_wdata[31:0];

  assign message_header_c35_message_id_we = addr_hit[356] & reg_we & !reg_error;
  assign message_header_c35_message_id_wd = reg_wdata[7:0];

  assign message_header_c35_message_type_we = addr_hit[356] & reg_we & !reg_error;
  assign message_header_c35_message_type_wd = reg_wdata[9:8];

  assign message_header_c35_protocol_id_we = addr_hit[356] & reg_we & !reg_error;
  assign message_header_c35_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c35_token_we = addr_hit[356] & reg_we & !reg_error;
  assign message_header_c35_token_wd = reg_wdata[27:18];

  assign message_header_c35_field1_we = addr_hit[356] & reg_we & !reg_error;
  assign message_header_c35_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c35_we = addr_hit[357] & reg_we & !reg_error;
  assign message_payload_1_c35_wd = reg_wdata[31:0];

  assign doorbell_c35_intr_we = addr_hit[358] & reg_we & !reg_error;
  assign doorbell_c35_intr_wd = reg_wdata[0];

  assign doorbell_c35_preserve_mask_we = addr_hit[358] & reg_we & !reg_error;
  assign doorbell_c35_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c35_intr_we = addr_hit[359] & reg_we & !reg_error;
  assign completion_interrupt_c35_intr_wd = reg_wdata[0];

  assign completion_interrupt_c35_preserve_mask_we = addr_hit[359] & reg_we & !reg_error;
  assign completion_interrupt_c35_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c36_we = addr_hit[360] & reg_we & !reg_error;
  assign reserved_1_c36_wd = reg_wdata[31:0];

  assign channel_status_c36_channel_free_we = addr_hit[361] & reg_we & !reg_error;
  assign channel_status_c36_channel_free_wd = reg_wdata[0];

  assign channel_status_c36_channel_error_we = addr_hit[361] & reg_we & !reg_error;
  assign channel_status_c36_channel_error_wd = reg_wdata[1];

  assign channel_status_c36_field1_we = addr_hit[361] & reg_we & !reg_error;
  assign channel_status_c36_field1_wd = reg_wdata[31:2];

  assign reserved_2_c36_we = addr_hit[362] & reg_we & !reg_error;
  assign reserved_2_c36_wd = reg_wdata[31:0];

  assign channel_flags_c36_intr_enable_we = addr_hit[364] & reg_we & !reg_error;
  assign channel_flags_c36_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c36_field1_we = addr_hit[364] & reg_we & !reg_error;
  assign channel_flags_c36_field1_wd = reg_wdata[31:1];

  assign length_c36_we = addr_hit[365] & reg_we & !reg_error;
  assign length_c36_wd = reg_wdata[31:0];

  assign message_header_c36_message_id_we = addr_hit[366] & reg_we & !reg_error;
  assign message_header_c36_message_id_wd = reg_wdata[7:0];

  assign message_header_c36_message_type_we = addr_hit[366] & reg_we & !reg_error;
  assign message_header_c36_message_type_wd = reg_wdata[9:8];

  assign message_header_c36_protocol_id_we = addr_hit[366] & reg_we & !reg_error;
  assign message_header_c36_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c36_token_we = addr_hit[366] & reg_we & !reg_error;
  assign message_header_c36_token_wd = reg_wdata[27:18];

  assign message_header_c36_field1_we = addr_hit[366] & reg_we & !reg_error;
  assign message_header_c36_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c36_we = addr_hit[367] & reg_we & !reg_error;
  assign message_payload_1_c36_wd = reg_wdata[31:0];

  assign doorbell_c36_intr_we = addr_hit[368] & reg_we & !reg_error;
  assign doorbell_c36_intr_wd = reg_wdata[0];

  assign doorbell_c36_preserve_mask_we = addr_hit[368] & reg_we & !reg_error;
  assign doorbell_c36_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c36_intr_we = addr_hit[369] & reg_we & !reg_error;
  assign completion_interrupt_c36_intr_wd = reg_wdata[0];

  assign completion_interrupt_c36_preserve_mask_we = addr_hit[369] & reg_we & !reg_error;
  assign completion_interrupt_c36_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c37_we = addr_hit[370] & reg_we & !reg_error;
  assign reserved_1_c37_wd = reg_wdata[31:0];

  assign channel_status_c37_channel_free_we = addr_hit[371] & reg_we & !reg_error;
  assign channel_status_c37_channel_free_wd = reg_wdata[0];

  assign channel_status_c37_channel_error_we = addr_hit[371] & reg_we & !reg_error;
  assign channel_status_c37_channel_error_wd = reg_wdata[1];

  assign channel_status_c37_field1_we = addr_hit[371] & reg_we & !reg_error;
  assign channel_status_c37_field1_wd = reg_wdata[31:2];

  assign reserved_2_c37_we = addr_hit[372] & reg_we & !reg_error;
  assign reserved_2_c37_wd = reg_wdata[31:0];

  assign channel_flags_c37_intr_enable_we = addr_hit[374] & reg_we & !reg_error;
  assign channel_flags_c37_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c37_field1_we = addr_hit[374] & reg_we & !reg_error;
  assign channel_flags_c37_field1_wd = reg_wdata[31:1];

  assign length_c37_we = addr_hit[375] & reg_we & !reg_error;
  assign length_c37_wd = reg_wdata[31:0];

  assign message_header_c37_message_id_we = addr_hit[376] & reg_we & !reg_error;
  assign message_header_c37_message_id_wd = reg_wdata[7:0];

  assign message_header_c37_message_type_we = addr_hit[376] & reg_we & !reg_error;
  assign message_header_c37_message_type_wd = reg_wdata[9:8];

  assign message_header_c37_protocol_id_we = addr_hit[376] & reg_we & !reg_error;
  assign message_header_c37_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c37_token_we = addr_hit[376] & reg_we & !reg_error;
  assign message_header_c37_token_wd = reg_wdata[27:18];

  assign message_header_c37_field1_we = addr_hit[376] & reg_we & !reg_error;
  assign message_header_c37_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c37_we = addr_hit[377] & reg_we & !reg_error;
  assign message_payload_1_c37_wd = reg_wdata[31:0];

  assign doorbell_c37_intr_we = addr_hit[378] & reg_we & !reg_error;
  assign doorbell_c37_intr_wd = reg_wdata[0];

  assign doorbell_c37_preserve_mask_we = addr_hit[378] & reg_we & !reg_error;
  assign doorbell_c37_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c37_intr_we = addr_hit[379] & reg_we & !reg_error;
  assign completion_interrupt_c37_intr_wd = reg_wdata[0];

  assign completion_interrupt_c37_preserve_mask_we = addr_hit[379] & reg_we & !reg_error;
  assign completion_interrupt_c37_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c38_we = addr_hit[380] & reg_we & !reg_error;
  assign reserved_1_c38_wd = reg_wdata[31:0];

  assign channel_status_c38_channel_free_we = addr_hit[381] & reg_we & !reg_error;
  assign channel_status_c38_channel_free_wd = reg_wdata[0];

  assign channel_status_c38_channel_error_we = addr_hit[381] & reg_we & !reg_error;
  assign channel_status_c38_channel_error_wd = reg_wdata[1];

  assign channel_status_c38_field1_we = addr_hit[381] & reg_we & !reg_error;
  assign channel_status_c38_field1_wd = reg_wdata[31:2];

  assign reserved_2_c38_we = addr_hit[382] & reg_we & !reg_error;
  assign reserved_2_c38_wd = reg_wdata[31:0];

  assign channel_flags_c38_intr_enable_we = addr_hit[384] & reg_we & !reg_error;
  assign channel_flags_c38_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c38_field1_we = addr_hit[384] & reg_we & !reg_error;
  assign channel_flags_c38_field1_wd = reg_wdata[31:1];

  assign length_c38_we = addr_hit[385] & reg_we & !reg_error;
  assign length_c38_wd = reg_wdata[31:0];

  assign message_header_c38_message_id_we = addr_hit[386] & reg_we & !reg_error;
  assign message_header_c38_message_id_wd = reg_wdata[7:0];

  assign message_header_c38_message_type_we = addr_hit[386] & reg_we & !reg_error;
  assign message_header_c38_message_type_wd = reg_wdata[9:8];

  assign message_header_c38_protocol_id_we = addr_hit[386] & reg_we & !reg_error;
  assign message_header_c38_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c38_token_we = addr_hit[386] & reg_we & !reg_error;
  assign message_header_c38_token_wd = reg_wdata[27:18];

  assign message_header_c38_field1_we = addr_hit[386] & reg_we & !reg_error;
  assign message_header_c38_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c38_we = addr_hit[387] & reg_we & !reg_error;
  assign message_payload_1_c38_wd = reg_wdata[31:0];

  assign doorbell_c38_intr_we = addr_hit[388] & reg_we & !reg_error;
  assign doorbell_c38_intr_wd = reg_wdata[0];

  assign doorbell_c38_preserve_mask_we = addr_hit[388] & reg_we & !reg_error;
  assign doorbell_c38_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c38_intr_we = addr_hit[389] & reg_we & !reg_error;
  assign completion_interrupt_c38_intr_wd = reg_wdata[0];

  assign completion_interrupt_c38_preserve_mask_we = addr_hit[389] & reg_we & !reg_error;
  assign completion_interrupt_c38_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c39_we = addr_hit[390] & reg_we & !reg_error;
  assign reserved_1_c39_wd = reg_wdata[31:0];

  assign channel_status_c39_channel_free_we = addr_hit[391] & reg_we & !reg_error;
  assign channel_status_c39_channel_free_wd = reg_wdata[0];

  assign channel_status_c39_channel_error_we = addr_hit[391] & reg_we & !reg_error;
  assign channel_status_c39_channel_error_wd = reg_wdata[1];

  assign channel_status_c39_field1_we = addr_hit[391] & reg_we & !reg_error;
  assign channel_status_c39_field1_wd = reg_wdata[31:2];

  assign reserved_2_c39_we = addr_hit[392] & reg_we & !reg_error;
  assign reserved_2_c39_wd = reg_wdata[31:0];

  assign channel_flags_c39_intr_enable_we = addr_hit[394] & reg_we & !reg_error;
  assign channel_flags_c39_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c39_field1_we = addr_hit[394] & reg_we & !reg_error;
  assign channel_flags_c39_field1_wd = reg_wdata[31:1];

  assign length_c39_we = addr_hit[395] & reg_we & !reg_error;
  assign length_c39_wd = reg_wdata[31:0];

  assign message_header_c39_message_id_we = addr_hit[396] & reg_we & !reg_error;
  assign message_header_c39_message_id_wd = reg_wdata[7:0];

  assign message_header_c39_message_type_we = addr_hit[396] & reg_we & !reg_error;
  assign message_header_c39_message_type_wd = reg_wdata[9:8];

  assign message_header_c39_protocol_id_we = addr_hit[396] & reg_we & !reg_error;
  assign message_header_c39_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c39_token_we = addr_hit[396] & reg_we & !reg_error;
  assign message_header_c39_token_wd = reg_wdata[27:18];

  assign message_header_c39_field1_we = addr_hit[396] & reg_we & !reg_error;
  assign message_header_c39_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c39_we = addr_hit[397] & reg_we & !reg_error;
  assign message_payload_1_c39_wd = reg_wdata[31:0];

  assign doorbell_c39_intr_we = addr_hit[398] & reg_we & !reg_error;
  assign doorbell_c39_intr_wd = reg_wdata[0];

  assign doorbell_c39_preserve_mask_we = addr_hit[398] & reg_we & !reg_error;
  assign doorbell_c39_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c39_intr_we = addr_hit[399] & reg_we & !reg_error;
  assign completion_interrupt_c39_intr_wd = reg_wdata[0];

  assign completion_interrupt_c39_preserve_mask_we = addr_hit[399] & reg_we & !reg_error;
  assign completion_interrupt_c39_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c40_we = addr_hit[400] & reg_we & !reg_error;
  assign reserved_1_c40_wd = reg_wdata[31:0];

  assign channel_status_c40_channel_free_we = addr_hit[401] & reg_we & !reg_error;
  assign channel_status_c40_channel_free_wd = reg_wdata[0];

  assign channel_status_c40_channel_error_we = addr_hit[401] & reg_we & !reg_error;
  assign channel_status_c40_channel_error_wd = reg_wdata[1];

  assign channel_status_c40_field1_we = addr_hit[401] & reg_we & !reg_error;
  assign channel_status_c40_field1_wd = reg_wdata[31:2];

  assign reserved_2_c40_we = addr_hit[402] & reg_we & !reg_error;
  assign reserved_2_c40_wd = reg_wdata[31:0];

  assign channel_flags_c40_intr_enable_we = addr_hit[404] & reg_we & !reg_error;
  assign channel_flags_c40_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c40_field1_we = addr_hit[404] & reg_we & !reg_error;
  assign channel_flags_c40_field1_wd = reg_wdata[31:1];

  assign length_c40_we = addr_hit[405] & reg_we & !reg_error;
  assign length_c40_wd = reg_wdata[31:0];

  assign message_header_c40_message_id_we = addr_hit[406] & reg_we & !reg_error;
  assign message_header_c40_message_id_wd = reg_wdata[7:0];

  assign message_header_c40_message_type_we = addr_hit[406] & reg_we & !reg_error;
  assign message_header_c40_message_type_wd = reg_wdata[9:8];

  assign message_header_c40_protocol_id_we = addr_hit[406] & reg_we & !reg_error;
  assign message_header_c40_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c40_token_we = addr_hit[406] & reg_we & !reg_error;
  assign message_header_c40_token_wd = reg_wdata[27:18];

  assign message_header_c40_field1_we = addr_hit[406] & reg_we & !reg_error;
  assign message_header_c40_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c40_we = addr_hit[407] & reg_we & !reg_error;
  assign message_payload_1_c40_wd = reg_wdata[31:0];

  assign doorbell_c40_intr_we = addr_hit[408] & reg_we & !reg_error;
  assign doorbell_c40_intr_wd = reg_wdata[0];

  assign doorbell_c40_preserve_mask_we = addr_hit[408] & reg_we & !reg_error;
  assign doorbell_c40_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c40_intr_we = addr_hit[409] & reg_we & !reg_error;
  assign completion_interrupt_c40_intr_wd = reg_wdata[0];

  assign completion_interrupt_c40_preserve_mask_we = addr_hit[409] & reg_we & !reg_error;
  assign completion_interrupt_c40_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c41_we = addr_hit[410] & reg_we & !reg_error;
  assign reserved_1_c41_wd = reg_wdata[31:0];

  assign channel_status_c41_channel_free_we = addr_hit[411] & reg_we & !reg_error;
  assign channel_status_c41_channel_free_wd = reg_wdata[0];

  assign channel_status_c41_channel_error_we = addr_hit[411] & reg_we & !reg_error;
  assign channel_status_c41_channel_error_wd = reg_wdata[1];

  assign channel_status_c41_field1_we = addr_hit[411] & reg_we & !reg_error;
  assign channel_status_c41_field1_wd = reg_wdata[31:2];

  assign reserved_2_c41_we = addr_hit[412] & reg_we & !reg_error;
  assign reserved_2_c41_wd = reg_wdata[31:0];

  assign channel_flags_c41_intr_enable_we = addr_hit[414] & reg_we & !reg_error;
  assign channel_flags_c41_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c41_field1_we = addr_hit[414] & reg_we & !reg_error;
  assign channel_flags_c41_field1_wd = reg_wdata[31:1];

  assign length_c41_we = addr_hit[415] & reg_we & !reg_error;
  assign length_c41_wd = reg_wdata[31:0];

  assign message_header_c41_message_id_we = addr_hit[416] & reg_we & !reg_error;
  assign message_header_c41_message_id_wd = reg_wdata[7:0];

  assign message_header_c41_message_type_we = addr_hit[416] & reg_we & !reg_error;
  assign message_header_c41_message_type_wd = reg_wdata[9:8];

  assign message_header_c41_protocol_id_we = addr_hit[416] & reg_we & !reg_error;
  assign message_header_c41_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c41_token_we = addr_hit[416] & reg_we & !reg_error;
  assign message_header_c41_token_wd = reg_wdata[27:18];

  assign message_header_c41_field1_we = addr_hit[416] & reg_we & !reg_error;
  assign message_header_c41_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c41_we = addr_hit[417] & reg_we & !reg_error;
  assign message_payload_1_c41_wd = reg_wdata[31:0];

  assign doorbell_c41_intr_we = addr_hit[418] & reg_we & !reg_error;
  assign doorbell_c41_intr_wd = reg_wdata[0];

  assign doorbell_c41_preserve_mask_we = addr_hit[418] & reg_we & !reg_error;
  assign doorbell_c41_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c41_intr_we = addr_hit[419] & reg_we & !reg_error;
  assign completion_interrupt_c41_intr_wd = reg_wdata[0];

  assign completion_interrupt_c41_preserve_mask_we = addr_hit[419] & reg_we & !reg_error;
  assign completion_interrupt_c41_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c42_we = addr_hit[420] & reg_we & !reg_error;
  assign reserved_1_c42_wd = reg_wdata[31:0];

  assign channel_status_c42_channel_free_we = addr_hit[421] & reg_we & !reg_error;
  assign channel_status_c42_channel_free_wd = reg_wdata[0];

  assign channel_status_c42_channel_error_we = addr_hit[421] & reg_we & !reg_error;
  assign channel_status_c42_channel_error_wd = reg_wdata[1];

  assign channel_status_c42_field1_we = addr_hit[421] & reg_we & !reg_error;
  assign channel_status_c42_field1_wd = reg_wdata[31:2];

  assign reserved_2_c42_we = addr_hit[422] & reg_we & !reg_error;
  assign reserved_2_c42_wd = reg_wdata[31:0];

  assign channel_flags_c42_intr_enable_we = addr_hit[424] & reg_we & !reg_error;
  assign channel_flags_c42_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c42_field1_we = addr_hit[424] & reg_we & !reg_error;
  assign channel_flags_c42_field1_wd = reg_wdata[31:1];

  assign length_c42_we = addr_hit[425] & reg_we & !reg_error;
  assign length_c42_wd = reg_wdata[31:0];

  assign message_header_c42_message_id_we = addr_hit[426] & reg_we & !reg_error;
  assign message_header_c42_message_id_wd = reg_wdata[7:0];

  assign message_header_c42_message_type_we = addr_hit[426] & reg_we & !reg_error;
  assign message_header_c42_message_type_wd = reg_wdata[9:8];

  assign message_header_c42_protocol_id_we = addr_hit[426] & reg_we & !reg_error;
  assign message_header_c42_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c42_token_we = addr_hit[426] & reg_we & !reg_error;
  assign message_header_c42_token_wd = reg_wdata[27:18];

  assign message_header_c42_field1_we = addr_hit[426] & reg_we & !reg_error;
  assign message_header_c42_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c42_we = addr_hit[427] & reg_we & !reg_error;
  assign message_payload_1_c42_wd = reg_wdata[31:0];

  assign doorbell_c42_intr_we = addr_hit[428] & reg_we & !reg_error;
  assign doorbell_c42_intr_wd = reg_wdata[0];

  assign doorbell_c42_preserve_mask_we = addr_hit[428] & reg_we & !reg_error;
  assign doorbell_c42_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c42_intr_we = addr_hit[429] & reg_we & !reg_error;
  assign completion_interrupt_c42_intr_wd = reg_wdata[0];

  assign completion_interrupt_c42_preserve_mask_we = addr_hit[429] & reg_we & !reg_error;
  assign completion_interrupt_c42_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c43_we = addr_hit[430] & reg_we & !reg_error;
  assign reserved_1_c43_wd = reg_wdata[31:0];

  assign channel_status_c43_channel_free_we = addr_hit[431] & reg_we & !reg_error;
  assign channel_status_c43_channel_free_wd = reg_wdata[0];

  assign channel_status_c43_channel_error_we = addr_hit[431] & reg_we & !reg_error;
  assign channel_status_c43_channel_error_wd = reg_wdata[1];

  assign channel_status_c43_field1_we = addr_hit[431] & reg_we & !reg_error;
  assign channel_status_c43_field1_wd = reg_wdata[31:2];

  assign reserved_2_c43_we = addr_hit[432] & reg_we & !reg_error;
  assign reserved_2_c43_wd = reg_wdata[31:0];

  assign channel_flags_c43_intr_enable_we = addr_hit[434] & reg_we & !reg_error;
  assign channel_flags_c43_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c43_field1_we = addr_hit[434] & reg_we & !reg_error;
  assign channel_flags_c43_field1_wd = reg_wdata[31:1];

  assign length_c43_we = addr_hit[435] & reg_we & !reg_error;
  assign length_c43_wd = reg_wdata[31:0];

  assign message_header_c43_message_id_we = addr_hit[436] & reg_we & !reg_error;
  assign message_header_c43_message_id_wd = reg_wdata[7:0];

  assign message_header_c43_message_type_we = addr_hit[436] & reg_we & !reg_error;
  assign message_header_c43_message_type_wd = reg_wdata[9:8];

  assign message_header_c43_protocol_id_we = addr_hit[436] & reg_we & !reg_error;
  assign message_header_c43_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c43_token_we = addr_hit[436] & reg_we & !reg_error;
  assign message_header_c43_token_wd = reg_wdata[27:18];

  assign message_header_c43_field1_we = addr_hit[436] & reg_we & !reg_error;
  assign message_header_c43_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c43_we = addr_hit[437] & reg_we & !reg_error;
  assign message_payload_1_c43_wd = reg_wdata[31:0];

  assign doorbell_c43_intr_we = addr_hit[438] & reg_we & !reg_error;
  assign doorbell_c43_intr_wd = reg_wdata[0];

  assign doorbell_c43_preserve_mask_we = addr_hit[438] & reg_we & !reg_error;
  assign doorbell_c43_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c43_intr_we = addr_hit[439] & reg_we & !reg_error;
  assign completion_interrupt_c43_intr_wd = reg_wdata[0];

  assign completion_interrupt_c43_preserve_mask_we = addr_hit[439] & reg_we & !reg_error;
  assign completion_interrupt_c43_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c44_we = addr_hit[440] & reg_we & !reg_error;
  assign reserved_1_c44_wd = reg_wdata[31:0];

  assign channel_status_c44_channel_free_we = addr_hit[441] & reg_we & !reg_error;
  assign channel_status_c44_channel_free_wd = reg_wdata[0];

  assign channel_status_c44_channel_error_we = addr_hit[441] & reg_we & !reg_error;
  assign channel_status_c44_channel_error_wd = reg_wdata[1];

  assign channel_status_c44_field1_we = addr_hit[441] & reg_we & !reg_error;
  assign channel_status_c44_field1_wd = reg_wdata[31:2];

  assign reserved_2_c44_we = addr_hit[442] & reg_we & !reg_error;
  assign reserved_2_c44_wd = reg_wdata[31:0];

  assign channel_flags_c44_intr_enable_we = addr_hit[444] & reg_we & !reg_error;
  assign channel_flags_c44_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c44_field1_we = addr_hit[444] & reg_we & !reg_error;
  assign channel_flags_c44_field1_wd = reg_wdata[31:1];

  assign length_c44_we = addr_hit[445] & reg_we & !reg_error;
  assign length_c44_wd = reg_wdata[31:0];

  assign message_header_c44_message_id_we = addr_hit[446] & reg_we & !reg_error;
  assign message_header_c44_message_id_wd = reg_wdata[7:0];

  assign message_header_c44_message_type_we = addr_hit[446] & reg_we & !reg_error;
  assign message_header_c44_message_type_wd = reg_wdata[9:8];

  assign message_header_c44_protocol_id_we = addr_hit[446] & reg_we & !reg_error;
  assign message_header_c44_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c44_token_we = addr_hit[446] & reg_we & !reg_error;
  assign message_header_c44_token_wd = reg_wdata[27:18];

  assign message_header_c44_field1_we = addr_hit[446] & reg_we & !reg_error;
  assign message_header_c44_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c44_we = addr_hit[447] & reg_we & !reg_error;
  assign message_payload_1_c44_wd = reg_wdata[31:0];

  assign doorbell_c44_intr_we = addr_hit[448] & reg_we & !reg_error;
  assign doorbell_c44_intr_wd = reg_wdata[0];

  assign doorbell_c44_preserve_mask_we = addr_hit[448] & reg_we & !reg_error;
  assign doorbell_c44_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c44_intr_we = addr_hit[449] & reg_we & !reg_error;
  assign completion_interrupt_c44_intr_wd = reg_wdata[0];

  assign completion_interrupt_c44_preserve_mask_we = addr_hit[449] & reg_we & !reg_error;
  assign completion_interrupt_c44_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c45_we = addr_hit[450] & reg_we & !reg_error;
  assign reserved_1_c45_wd = reg_wdata[31:0];

  assign channel_status_c45_channel_free_we = addr_hit[451] & reg_we & !reg_error;
  assign channel_status_c45_channel_free_wd = reg_wdata[0];

  assign channel_status_c45_channel_error_we = addr_hit[451] & reg_we & !reg_error;
  assign channel_status_c45_channel_error_wd = reg_wdata[1];

  assign channel_status_c45_field1_we = addr_hit[451] & reg_we & !reg_error;
  assign channel_status_c45_field1_wd = reg_wdata[31:2];

  assign reserved_2_c45_we = addr_hit[452] & reg_we & !reg_error;
  assign reserved_2_c45_wd = reg_wdata[31:0];

  assign channel_flags_c45_intr_enable_we = addr_hit[454] & reg_we & !reg_error;
  assign channel_flags_c45_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c45_field1_we = addr_hit[454] & reg_we & !reg_error;
  assign channel_flags_c45_field1_wd = reg_wdata[31:1];

  assign length_c45_we = addr_hit[455] & reg_we & !reg_error;
  assign length_c45_wd = reg_wdata[31:0];

  assign message_header_c45_message_id_we = addr_hit[456] & reg_we & !reg_error;
  assign message_header_c45_message_id_wd = reg_wdata[7:0];

  assign message_header_c45_message_type_we = addr_hit[456] & reg_we & !reg_error;
  assign message_header_c45_message_type_wd = reg_wdata[9:8];

  assign message_header_c45_protocol_id_we = addr_hit[456] & reg_we & !reg_error;
  assign message_header_c45_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c45_token_we = addr_hit[456] & reg_we & !reg_error;
  assign message_header_c45_token_wd = reg_wdata[27:18];

  assign message_header_c45_field1_we = addr_hit[456] & reg_we & !reg_error;
  assign message_header_c45_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c45_we = addr_hit[457] & reg_we & !reg_error;
  assign message_payload_1_c45_wd = reg_wdata[31:0];

  assign doorbell_c45_intr_we = addr_hit[458] & reg_we & !reg_error;
  assign doorbell_c45_intr_wd = reg_wdata[0];

  assign doorbell_c45_preserve_mask_we = addr_hit[458] & reg_we & !reg_error;
  assign doorbell_c45_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c45_intr_we = addr_hit[459] & reg_we & !reg_error;
  assign completion_interrupt_c45_intr_wd = reg_wdata[0];

  assign completion_interrupt_c45_preserve_mask_we = addr_hit[459] & reg_we & !reg_error;
  assign completion_interrupt_c45_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c46_we = addr_hit[460] & reg_we & !reg_error;
  assign reserved_1_c46_wd = reg_wdata[31:0];

  assign channel_status_c46_channel_free_we = addr_hit[461] & reg_we & !reg_error;
  assign channel_status_c46_channel_free_wd = reg_wdata[0];

  assign channel_status_c46_channel_error_we = addr_hit[461] & reg_we & !reg_error;
  assign channel_status_c46_channel_error_wd = reg_wdata[1];

  assign channel_status_c46_field1_we = addr_hit[461] & reg_we & !reg_error;
  assign channel_status_c46_field1_wd = reg_wdata[31:2];

  assign reserved_2_c46_we = addr_hit[462] & reg_we & !reg_error;
  assign reserved_2_c46_wd = reg_wdata[31:0];

  assign channel_flags_c46_intr_enable_we = addr_hit[464] & reg_we & !reg_error;
  assign channel_flags_c46_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c46_field1_we = addr_hit[464] & reg_we & !reg_error;
  assign channel_flags_c46_field1_wd = reg_wdata[31:1];

  assign length_c46_we = addr_hit[465] & reg_we & !reg_error;
  assign length_c46_wd = reg_wdata[31:0];

  assign message_header_c46_message_id_we = addr_hit[466] & reg_we & !reg_error;
  assign message_header_c46_message_id_wd = reg_wdata[7:0];

  assign message_header_c46_message_type_we = addr_hit[466] & reg_we & !reg_error;
  assign message_header_c46_message_type_wd = reg_wdata[9:8];

  assign message_header_c46_protocol_id_we = addr_hit[466] & reg_we & !reg_error;
  assign message_header_c46_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c46_token_we = addr_hit[466] & reg_we & !reg_error;
  assign message_header_c46_token_wd = reg_wdata[27:18];

  assign message_header_c46_field1_we = addr_hit[466] & reg_we & !reg_error;
  assign message_header_c46_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c46_we = addr_hit[467] & reg_we & !reg_error;
  assign message_payload_1_c46_wd = reg_wdata[31:0];

  assign doorbell_c46_intr_we = addr_hit[468] & reg_we & !reg_error;
  assign doorbell_c46_intr_wd = reg_wdata[0];

  assign doorbell_c46_preserve_mask_we = addr_hit[468] & reg_we & !reg_error;
  assign doorbell_c46_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c46_intr_we = addr_hit[469] & reg_we & !reg_error;
  assign completion_interrupt_c46_intr_wd = reg_wdata[0];

  assign completion_interrupt_c46_preserve_mask_we = addr_hit[469] & reg_we & !reg_error;
  assign completion_interrupt_c46_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c47_we = addr_hit[470] & reg_we & !reg_error;
  assign reserved_1_c47_wd = reg_wdata[31:0];

  assign channel_status_c47_channel_free_we = addr_hit[471] & reg_we & !reg_error;
  assign channel_status_c47_channel_free_wd = reg_wdata[0];

  assign channel_status_c47_channel_error_we = addr_hit[471] & reg_we & !reg_error;
  assign channel_status_c47_channel_error_wd = reg_wdata[1];

  assign channel_status_c47_field1_we = addr_hit[471] & reg_we & !reg_error;
  assign channel_status_c47_field1_wd = reg_wdata[31:2];

  assign reserved_2_c47_we = addr_hit[472] & reg_we & !reg_error;
  assign reserved_2_c47_wd = reg_wdata[31:0];

  assign channel_flags_c47_intr_enable_we = addr_hit[474] & reg_we & !reg_error;
  assign channel_flags_c47_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c47_field1_we = addr_hit[474] & reg_we & !reg_error;
  assign channel_flags_c47_field1_wd = reg_wdata[31:1];

  assign length_c47_we = addr_hit[475] & reg_we & !reg_error;
  assign length_c47_wd = reg_wdata[31:0];

  assign message_header_c47_message_id_we = addr_hit[476] & reg_we & !reg_error;
  assign message_header_c47_message_id_wd = reg_wdata[7:0];

  assign message_header_c47_message_type_we = addr_hit[476] & reg_we & !reg_error;
  assign message_header_c47_message_type_wd = reg_wdata[9:8];

  assign message_header_c47_protocol_id_we = addr_hit[476] & reg_we & !reg_error;
  assign message_header_c47_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c47_token_we = addr_hit[476] & reg_we & !reg_error;
  assign message_header_c47_token_wd = reg_wdata[27:18];

  assign message_header_c47_field1_we = addr_hit[476] & reg_we & !reg_error;
  assign message_header_c47_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c47_we = addr_hit[477] & reg_we & !reg_error;
  assign message_payload_1_c47_wd = reg_wdata[31:0];

  assign doorbell_c47_intr_we = addr_hit[478] & reg_we & !reg_error;
  assign doorbell_c47_intr_wd = reg_wdata[0];

  assign doorbell_c47_preserve_mask_we = addr_hit[478] & reg_we & !reg_error;
  assign doorbell_c47_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c47_intr_we = addr_hit[479] & reg_we & !reg_error;
  assign completion_interrupt_c47_intr_wd = reg_wdata[0];

  assign completion_interrupt_c47_preserve_mask_we = addr_hit[479] & reg_we & !reg_error;
  assign completion_interrupt_c47_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c48_we = addr_hit[480] & reg_we & !reg_error;
  assign reserved_1_c48_wd = reg_wdata[31:0];

  assign channel_status_c48_channel_free_we = addr_hit[481] & reg_we & !reg_error;
  assign channel_status_c48_channel_free_wd = reg_wdata[0];

  assign channel_status_c48_channel_error_we = addr_hit[481] & reg_we & !reg_error;
  assign channel_status_c48_channel_error_wd = reg_wdata[1];

  assign channel_status_c48_field1_we = addr_hit[481] & reg_we & !reg_error;
  assign channel_status_c48_field1_wd = reg_wdata[31:2];

  assign reserved_2_c48_we = addr_hit[482] & reg_we & !reg_error;
  assign reserved_2_c48_wd = reg_wdata[31:0];

  assign channel_flags_c48_intr_enable_we = addr_hit[484] & reg_we & !reg_error;
  assign channel_flags_c48_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c48_field1_we = addr_hit[484] & reg_we & !reg_error;
  assign channel_flags_c48_field1_wd = reg_wdata[31:1];

  assign length_c48_we = addr_hit[485] & reg_we & !reg_error;
  assign length_c48_wd = reg_wdata[31:0];

  assign message_header_c48_message_id_we = addr_hit[486] & reg_we & !reg_error;
  assign message_header_c48_message_id_wd = reg_wdata[7:0];

  assign message_header_c48_message_type_we = addr_hit[486] & reg_we & !reg_error;
  assign message_header_c48_message_type_wd = reg_wdata[9:8];

  assign message_header_c48_protocol_id_we = addr_hit[486] & reg_we & !reg_error;
  assign message_header_c48_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c48_token_we = addr_hit[486] & reg_we & !reg_error;
  assign message_header_c48_token_wd = reg_wdata[27:18];

  assign message_header_c48_field1_we = addr_hit[486] & reg_we & !reg_error;
  assign message_header_c48_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c48_we = addr_hit[487] & reg_we & !reg_error;
  assign message_payload_1_c48_wd = reg_wdata[31:0];

  assign doorbell_c48_intr_we = addr_hit[488] & reg_we & !reg_error;
  assign doorbell_c48_intr_wd = reg_wdata[0];

  assign doorbell_c48_preserve_mask_we = addr_hit[488] & reg_we & !reg_error;
  assign doorbell_c48_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c48_intr_we = addr_hit[489] & reg_we & !reg_error;
  assign completion_interrupt_c48_intr_wd = reg_wdata[0];

  assign completion_interrupt_c48_preserve_mask_we = addr_hit[489] & reg_we & !reg_error;
  assign completion_interrupt_c48_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c49_we = addr_hit[490] & reg_we & !reg_error;
  assign reserved_1_c49_wd = reg_wdata[31:0];

  assign channel_status_c49_channel_free_we = addr_hit[491] & reg_we & !reg_error;
  assign channel_status_c49_channel_free_wd = reg_wdata[0];

  assign channel_status_c49_channel_error_we = addr_hit[491] & reg_we & !reg_error;
  assign channel_status_c49_channel_error_wd = reg_wdata[1];

  assign channel_status_c49_field1_we = addr_hit[491] & reg_we & !reg_error;
  assign channel_status_c49_field1_wd = reg_wdata[31:2];

  assign reserved_2_c49_we = addr_hit[492] & reg_we & !reg_error;
  assign reserved_2_c49_wd = reg_wdata[31:0];

  assign channel_flags_c49_intr_enable_we = addr_hit[494] & reg_we & !reg_error;
  assign channel_flags_c49_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c49_field1_we = addr_hit[494] & reg_we & !reg_error;
  assign channel_flags_c49_field1_wd = reg_wdata[31:1];

  assign length_c49_we = addr_hit[495] & reg_we & !reg_error;
  assign length_c49_wd = reg_wdata[31:0];

  assign message_header_c49_message_id_we = addr_hit[496] & reg_we & !reg_error;
  assign message_header_c49_message_id_wd = reg_wdata[7:0];

  assign message_header_c49_message_type_we = addr_hit[496] & reg_we & !reg_error;
  assign message_header_c49_message_type_wd = reg_wdata[9:8];

  assign message_header_c49_protocol_id_we = addr_hit[496] & reg_we & !reg_error;
  assign message_header_c49_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c49_token_we = addr_hit[496] & reg_we & !reg_error;
  assign message_header_c49_token_wd = reg_wdata[27:18];

  assign message_header_c49_field1_we = addr_hit[496] & reg_we & !reg_error;
  assign message_header_c49_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c49_we = addr_hit[497] & reg_we & !reg_error;
  assign message_payload_1_c49_wd = reg_wdata[31:0];

  assign doorbell_c49_intr_we = addr_hit[498] & reg_we & !reg_error;
  assign doorbell_c49_intr_wd = reg_wdata[0];

  assign doorbell_c49_preserve_mask_we = addr_hit[498] & reg_we & !reg_error;
  assign doorbell_c49_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c49_intr_we = addr_hit[499] & reg_we & !reg_error;
  assign completion_interrupt_c49_intr_wd = reg_wdata[0];

  assign completion_interrupt_c49_preserve_mask_we = addr_hit[499] & reg_we & !reg_error;
  assign completion_interrupt_c49_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c50_we = addr_hit[500] & reg_we & !reg_error;
  assign reserved_1_c50_wd = reg_wdata[31:0];

  assign channel_status_c50_channel_free_we = addr_hit[501] & reg_we & !reg_error;
  assign channel_status_c50_channel_free_wd = reg_wdata[0];

  assign channel_status_c50_channel_error_we = addr_hit[501] & reg_we & !reg_error;
  assign channel_status_c50_channel_error_wd = reg_wdata[1];

  assign channel_status_c50_field1_we = addr_hit[501] & reg_we & !reg_error;
  assign channel_status_c50_field1_wd = reg_wdata[31:2];

  assign reserved_2_c50_we = addr_hit[502] & reg_we & !reg_error;
  assign reserved_2_c50_wd = reg_wdata[31:0];

  assign channel_flags_c50_intr_enable_we = addr_hit[504] & reg_we & !reg_error;
  assign channel_flags_c50_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c50_field1_we = addr_hit[504] & reg_we & !reg_error;
  assign channel_flags_c50_field1_wd = reg_wdata[31:1];

  assign length_c50_we = addr_hit[505] & reg_we & !reg_error;
  assign length_c50_wd = reg_wdata[31:0];

  assign message_header_c50_message_id_we = addr_hit[506] & reg_we & !reg_error;
  assign message_header_c50_message_id_wd = reg_wdata[7:0];

  assign message_header_c50_message_type_we = addr_hit[506] & reg_we & !reg_error;
  assign message_header_c50_message_type_wd = reg_wdata[9:8];

  assign message_header_c50_protocol_id_we = addr_hit[506] & reg_we & !reg_error;
  assign message_header_c50_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c50_token_we = addr_hit[506] & reg_we & !reg_error;
  assign message_header_c50_token_wd = reg_wdata[27:18];

  assign message_header_c50_field1_we = addr_hit[506] & reg_we & !reg_error;
  assign message_header_c50_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c50_we = addr_hit[507] & reg_we & !reg_error;
  assign message_payload_1_c50_wd = reg_wdata[31:0];

  assign doorbell_c50_intr_we = addr_hit[508] & reg_we & !reg_error;
  assign doorbell_c50_intr_wd = reg_wdata[0];

  assign doorbell_c50_preserve_mask_we = addr_hit[508] & reg_we & !reg_error;
  assign doorbell_c50_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c50_intr_we = addr_hit[509] & reg_we & !reg_error;
  assign completion_interrupt_c50_intr_wd = reg_wdata[0];

  assign completion_interrupt_c50_preserve_mask_we = addr_hit[509] & reg_we & !reg_error;
  assign completion_interrupt_c50_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c51_we = addr_hit[510] & reg_we & !reg_error;
  assign reserved_1_c51_wd = reg_wdata[31:0];

  assign channel_status_c51_channel_free_we = addr_hit[511] & reg_we & !reg_error;
  assign channel_status_c51_channel_free_wd = reg_wdata[0];

  assign channel_status_c51_channel_error_we = addr_hit[511] & reg_we & !reg_error;
  assign channel_status_c51_channel_error_wd = reg_wdata[1];

  assign channel_status_c51_field1_we = addr_hit[511] & reg_we & !reg_error;
  assign channel_status_c51_field1_wd = reg_wdata[31:2];

  assign reserved_2_c51_we = addr_hit[512] & reg_we & !reg_error;
  assign reserved_2_c51_wd = reg_wdata[31:0];

  assign channel_flags_c51_intr_enable_we = addr_hit[514] & reg_we & !reg_error;
  assign channel_flags_c51_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c51_field1_we = addr_hit[514] & reg_we & !reg_error;
  assign channel_flags_c51_field1_wd = reg_wdata[31:1];

  assign length_c51_we = addr_hit[515] & reg_we & !reg_error;
  assign length_c51_wd = reg_wdata[31:0];

  assign message_header_c51_message_id_we = addr_hit[516] & reg_we & !reg_error;
  assign message_header_c51_message_id_wd = reg_wdata[7:0];

  assign message_header_c51_message_type_we = addr_hit[516] & reg_we & !reg_error;
  assign message_header_c51_message_type_wd = reg_wdata[9:8];

  assign message_header_c51_protocol_id_we = addr_hit[516] & reg_we & !reg_error;
  assign message_header_c51_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c51_token_we = addr_hit[516] & reg_we & !reg_error;
  assign message_header_c51_token_wd = reg_wdata[27:18];

  assign message_header_c51_field1_we = addr_hit[516] & reg_we & !reg_error;
  assign message_header_c51_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c51_we = addr_hit[517] & reg_we & !reg_error;
  assign message_payload_1_c51_wd = reg_wdata[31:0];

  assign doorbell_c51_intr_we = addr_hit[518] & reg_we & !reg_error;
  assign doorbell_c51_intr_wd = reg_wdata[0];

  assign doorbell_c51_preserve_mask_we = addr_hit[518] & reg_we & !reg_error;
  assign doorbell_c51_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c51_intr_we = addr_hit[519] & reg_we & !reg_error;
  assign completion_interrupt_c51_intr_wd = reg_wdata[0];

  assign completion_interrupt_c51_preserve_mask_we = addr_hit[519] & reg_we & !reg_error;
  assign completion_interrupt_c51_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c52_we = addr_hit[520] & reg_we & !reg_error;
  assign reserved_1_c52_wd = reg_wdata[31:0];

  assign channel_status_c52_channel_free_we = addr_hit[521] & reg_we & !reg_error;
  assign channel_status_c52_channel_free_wd = reg_wdata[0];

  assign channel_status_c52_channel_error_we = addr_hit[521] & reg_we & !reg_error;
  assign channel_status_c52_channel_error_wd = reg_wdata[1];

  assign channel_status_c52_field1_we = addr_hit[521] & reg_we & !reg_error;
  assign channel_status_c52_field1_wd = reg_wdata[31:2];

  assign reserved_2_c52_we = addr_hit[522] & reg_we & !reg_error;
  assign reserved_2_c52_wd = reg_wdata[31:0];

  assign channel_flags_c52_intr_enable_we = addr_hit[524] & reg_we & !reg_error;
  assign channel_flags_c52_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c52_field1_we = addr_hit[524] & reg_we & !reg_error;
  assign channel_flags_c52_field1_wd = reg_wdata[31:1];

  assign length_c52_we = addr_hit[525] & reg_we & !reg_error;
  assign length_c52_wd = reg_wdata[31:0];

  assign message_header_c52_message_id_we = addr_hit[526] & reg_we & !reg_error;
  assign message_header_c52_message_id_wd = reg_wdata[7:0];

  assign message_header_c52_message_type_we = addr_hit[526] & reg_we & !reg_error;
  assign message_header_c52_message_type_wd = reg_wdata[9:8];

  assign message_header_c52_protocol_id_we = addr_hit[526] & reg_we & !reg_error;
  assign message_header_c52_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c52_token_we = addr_hit[526] & reg_we & !reg_error;
  assign message_header_c52_token_wd = reg_wdata[27:18];

  assign message_header_c52_field1_we = addr_hit[526] & reg_we & !reg_error;
  assign message_header_c52_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c52_we = addr_hit[527] & reg_we & !reg_error;
  assign message_payload_1_c52_wd = reg_wdata[31:0];

  assign doorbell_c52_intr_we = addr_hit[528] & reg_we & !reg_error;
  assign doorbell_c52_intr_wd = reg_wdata[0];

  assign doorbell_c52_preserve_mask_we = addr_hit[528] & reg_we & !reg_error;
  assign doorbell_c52_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c52_intr_we = addr_hit[529] & reg_we & !reg_error;
  assign completion_interrupt_c52_intr_wd = reg_wdata[0];

  assign completion_interrupt_c52_preserve_mask_we = addr_hit[529] & reg_we & !reg_error;
  assign completion_interrupt_c52_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c53_we = addr_hit[530] & reg_we & !reg_error;
  assign reserved_1_c53_wd = reg_wdata[31:0];

  assign channel_status_c53_channel_free_we = addr_hit[531] & reg_we & !reg_error;
  assign channel_status_c53_channel_free_wd = reg_wdata[0];

  assign channel_status_c53_channel_error_we = addr_hit[531] & reg_we & !reg_error;
  assign channel_status_c53_channel_error_wd = reg_wdata[1];

  assign channel_status_c53_field1_we = addr_hit[531] & reg_we & !reg_error;
  assign channel_status_c53_field1_wd = reg_wdata[31:2];

  assign reserved_2_c53_we = addr_hit[532] & reg_we & !reg_error;
  assign reserved_2_c53_wd = reg_wdata[31:0];

  assign channel_flags_c53_intr_enable_we = addr_hit[534] & reg_we & !reg_error;
  assign channel_flags_c53_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c53_field1_we = addr_hit[534] & reg_we & !reg_error;
  assign channel_flags_c53_field1_wd = reg_wdata[31:1];

  assign length_c53_we = addr_hit[535] & reg_we & !reg_error;
  assign length_c53_wd = reg_wdata[31:0];

  assign message_header_c53_message_id_we = addr_hit[536] & reg_we & !reg_error;
  assign message_header_c53_message_id_wd = reg_wdata[7:0];

  assign message_header_c53_message_type_we = addr_hit[536] & reg_we & !reg_error;
  assign message_header_c53_message_type_wd = reg_wdata[9:8];

  assign message_header_c53_protocol_id_we = addr_hit[536] & reg_we & !reg_error;
  assign message_header_c53_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c53_token_we = addr_hit[536] & reg_we & !reg_error;
  assign message_header_c53_token_wd = reg_wdata[27:18];

  assign message_header_c53_field1_we = addr_hit[536] & reg_we & !reg_error;
  assign message_header_c53_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c53_we = addr_hit[537] & reg_we & !reg_error;
  assign message_payload_1_c53_wd = reg_wdata[31:0];

  assign doorbell_c53_intr_we = addr_hit[538] & reg_we & !reg_error;
  assign doorbell_c53_intr_wd = reg_wdata[0];

  assign doorbell_c53_preserve_mask_we = addr_hit[538] & reg_we & !reg_error;
  assign doorbell_c53_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c53_intr_we = addr_hit[539] & reg_we & !reg_error;
  assign completion_interrupt_c53_intr_wd = reg_wdata[0];

  assign completion_interrupt_c53_preserve_mask_we = addr_hit[539] & reg_we & !reg_error;
  assign completion_interrupt_c53_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c54_we = addr_hit[540] & reg_we & !reg_error;
  assign reserved_1_c54_wd = reg_wdata[31:0];

  assign channel_status_c54_channel_free_we = addr_hit[541] & reg_we & !reg_error;
  assign channel_status_c54_channel_free_wd = reg_wdata[0];

  assign channel_status_c54_channel_error_we = addr_hit[541] & reg_we & !reg_error;
  assign channel_status_c54_channel_error_wd = reg_wdata[1];

  assign channel_status_c54_field1_we = addr_hit[541] & reg_we & !reg_error;
  assign channel_status_c54_field1_wd = reg_wdata[31:2];

  assign reserved_2_c54_we = addr_hit[542] & reg_we & !reg_error;
  assign reserved_2_c54_wd = reg_wdata[31:0];

  assign channel_flags_c54_intr_enable_we = addr_hit[544] & reg_we & !reg_error;
  assign channel_flags_c54_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c54_field1_we = addr_hit[544] & reg_we & !reg_error;
  assign channel_flags_c54_field1_wd = reg_wdata[31:1];

  assign length_c54_we = addr_hit[545] & reg_we & !reg_error;
  assign length_c54_wd = reg_wdata[31:0];

  assign message_header_c54_message_id_we = addr_hit[546] & reg_we & !reg_error;
  assign message_header_c54_message_id_wd = reg_wdata[7:0];

  assign message_header_c54_message_type_we = addr_hit[546] & reg_we & !reg_error;
  assign message_header_c54_message_type_wd = reg_wdata[9:8];

  assign message_header_c54_protocol_id_we = addr_hit[546] & reg_we & !reg_error;
  assign message_header_c54_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c54_token_we = addr_hit[546] & reg_we & !reg_error;
  assign message_header_c54_token_wd = reg_wdata[27:18];

  assign message_header_c54_field1_we = addr_hit[546] & reg_we & !reg_error;
  assign message_header_c54_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c54_we = addr_hit[547] & reg_we & !reg_error;
  assign message_payload_1_c54_wd = reg_wdata[31:0];

  assign doorbell_c54_intr_we = addr_hit[548] & reg_we & !reg_error;
  assign doorbell_c54_intr_wd = reg_wdata[0];

  assign doorbell_c54_preserve_mask_we = addr_hit[548] & reg_we & !reg_error;
  assign doorbell_c54_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c54_intr_we = addr_hit[549] & reg_we & !reg_error;
  assign completion_interrupt_c54_intr_wd = reg_wdata[0];

  assign completion_interrupt_c54_preserve_mask_we = addr_hit[549] & reg_we & !reg_error;
  assign completion_interrupt_c54_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c55_we = addr_hit[550] & reg_we & !reg_error;
  assign reserved_1_c55_wd = reg_wdata[31:0];

  assign channel_status_c55_channel_free_we = addr_hit[551] & reg_we & !reg_error;
  assign channel_status_c55_channel_free_wd = reg_wdata[0];

  assign channel_status_c55_channel_error_we = addr_hit[551] & reg_we & !reg_error;
  assign channel_status_c55_channel_error_wd = reg_wdata[1];

  assign channel_status_c55_field1_we = addr_hit[551] & reg_we & !reg_error;
  assign channel_status_c55_field1_wd = reg_wdata[31:2];

  assign reserved_2_c55_we = addr_hit[552] & reg_we & !reg_error;
  assign reserved_2_c55_wd = reg_wdata[31:0];

  assign channel_flags_c55_intr_enable_we = addr_hit[554] & reg_we & !reg_error;
  assign channel_flags_c55_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c55_field1_we = addr_hit[554] & reg_we & !reg_error;
  assign channel_flags_c55_field1_wd = reg_wdata[31:1];

  assign length_c55_we = addr_hit[555] & reg_we & !reg_error;
  assign length_c55_wd = reg_wdata[31:0];

  assign message_header_c55_message_id_we = addr_hit[556] & reg_we & !reg_error;
  assign message_header_c55_message_id_wd = reg_wdata[7:0];

  assign message_header_c55_message_type_we = addr_hit[556] & reg_we & !reg_error;
  assign message_header_c55_message_type_wd = reg_wdata[9:8];

  assign message_header_c55_protocol_id_we = addr_hit[556] & reg_we & !reg_error;
  assign message_header_c55_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c55_token_we = addr_hit[556] & reg_we & !reg_error;
  assign message_header_c55_token_wd = reg_wdata[27:18];

  assign message_header_c55_field1_we = addr_hit[556] & reg_we & !reg_error;
  assign message_header_c55_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c55_we = addr_hit[557] & reg_we & !reg_error;
  assign message_payload_1_c55_wd = reg_wdata[31:0];

  assign doorbell_c55_intr_we = addr_hit[558] & reg_we & !reg_error;
  assign doorbell_c55_intr_wd = reg_wdata[0];

  assign doorbell_c55_preserve_mask_we = addr_hit[558] & reg_we & !reg_error;
  assign doorbell_c55_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c55_intr_we = addr_hit[559] & reg_we & !reg_error;
  assign completion_interrupt_c55_intr_wd = reg_wdata[0];

  assign completion_interrupt_c55_preserve_mask_we = addr_hit[559] & reg_we & !reg_error;
  assign completion_interrupt_c55_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c56_we = addr_hit[560] & reg_we & !reg_error;
  assign reserved_1_c56_wd = reg_wdata[31:0];

  assign channel_status_c56_channel_free_we = addr_hit[561] & reg_we & !reg_error;
  assign channel_status_c56_channel_free_wd = reg_wdata[0];

  assign channel_status_c56_channel_error_we = addr_hit[561] & reg_we & !reg_error;
  assign channel_status_c56_channel_error_wd = reg_wdata[1];

  assign channel_status_c56_field1_we = addr_hit[561] & reg_we & !reg_error;
  assign channel_status_c56_field1_wd = reg_wdata[31:2];

  assign reserved_2_c56_we = addr_hit[562] & reg_we & !reg_error;
  assign reserved_2_c56_wd = reg_wdata[31:0];

  assign channel_flags_c56_intr_enable_we = addr_hit[564] & reg_we & !reg_error;
  assign channel_flags_c56_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c56_field1_we = addr_hit[564] & reg_we & !reg_error;
  assign channel_flags_c56_field1_wd = reg_wdata[31:1];

  assign length_c56_we = addr_hit[565] & reg_we & !reg_error;
  assign length_c56_wd = reg_wdata[31:0];

  assign message_header_c56_message_id_we = addr_hit[566] & reg_we & !reg_error;
  assign message_header_c56_message_id_wd = reg_wdata[7:0];

  assign message_header_c56_message_type_we = addr_hit[566] & reg_we & !reg_error;
  assign message_header_c56_message_type_wd = reg_wdata[9:8];

  assign message_header_c56_protocol_id_we = addr_hit[566] & reg_we & !reg_error;
  assign message_header_c56_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c56_token_we = addr_hit[566] & reg_we & !reg_error;
  assign message_header_c56_token_wd = reg_wdata[27:18];

  assign message_header_c56_field1_we = addr_hit[566] & reg_we & !reg_error;
  assign message_header_c56_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c56_we = addr_hit[567] & reg_we & !reg_error;
  assign message_payload_1_c56_wd = reg_wdata[31:0];

  assign doorbell_c56_intr_we = addr_hit[568] & reg_we & !reg_error;
  assign doorbell_c56_intr_wd = reg_wdata[0];

  assign doorbell_c56_preserve_mask_we = addr_hit[568] & reg_we & !reg_error;
  assign doorbell_c56_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c56_intr_we = addr_hit[569] & reg_we & !reg_error;
  assign completion_interrupt_c56_intr_wd = reg_wdata[0];

  assign completion_interrupt_c56_preserve_mask_we = addr_hit[569] & reg_we & !reg_error;
  assign completion_interrupt_c56_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c57_we = addr_hit[570] & reg_we & !reg_error;
  assign reserved_1_c57_wd = reg_wdata[31:0];

  assign channel_status_c57_channel_free_we = addr_hit[571] & reg_we & !reg_error;
  assign channel_status_c57_channel_free_wd = reg_wdata[0];

  assign channel_status_c57_channel_error_we = addr_hit[571] & reg_we & !reg_error;
  assign channel_status_c57_channel_error_wd = reg_wdata[1];

  assign channel_status_c57_field1_we = addr_hit[571] & reg_we & !reg_error;
  assign channel_status_c57_field1_wd = reg_wdata[31:2];

  assign reserved_2_c57_we = addr_hit[572] & reg_we & !reg_error;
  assign reserved_2_c57_wd = reg_wdata[31:0];

  assign channel_flags_c57_intr_enable_we = addr_hit[574] & reg_we & !reg_error;
  assign channel_flags_c57_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c57_field1_we = addr_hit[574] & reg_we & !reg_error;
  assign channel_flags_c57_field1_wd = reg_wdata[31:1];

  assign length_c57_we = addr_hit[575] & reg_we & !reg_error;
  assign length_c57_wd = reg_wdata[31:0];

  assign message_header_c57_message_id_we = addr_hit[576] & reg_we & !reg_error;
  assign message_header_c57_message_id_wd = reg_wdata[7:0];

  assign message_header_c57_message_type_we = addr_hit[576] & reg_we & !reg_error;
  assign message_header_c57_message_type_wd = reg_wdata[9:8];

  assign message_header_c57_protocol_id_we = addr_hit[576] & reg_we & !reg_error;
  assign message_header_c57_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c57_token_we = addr_hit[576] & reg_we & !reg_error;
  assign message_header_c57_token_wd = reg_wdata[27:18];

  assign message_header_c57_field1_we = addr_hit[576] & reg_we & !reg_error;
  assign message_header_c57_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c57_we = addr_hit[577] & reg_we & !reg_error;
  assign message_payload_1_c57_wd = reg_wdata[31:0];

  assign doorbell_c57_intr_we = addr_hit[578] & reg_we & !reg_error;
  assign doorbell_c57_intr_wd = reg_wdata[0];

  assign doorbell_c57_preserve_mask_we = addr_hit[578] & reg_we & !reg_error;
  assign doorbell_c57_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c57_intr_we = addr_hit[579] & reg_we & !reg_error;
  assign completion_interrupt_c57_intr_wd = reg_wdata[0];

  assign completion_interrupt_c57_preserve_mask_we = addr_hit[579] & reg_we & !reg_error;
  assign completion_interrupt_c57_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c58_we = addr_hit[580] & reg_we & !reg_error;
  assign reserved_1_c58_wd = reg_wdata[31:0];

  assign channel_status_c58_channel_free_we = addr_hit[581] & reg_we & !reg_error;
  assign channel_status_c58_channel_free_wd = reg_wdata[0];

  assign channel_status_c58_channel_error_we = addr_hit[581] & reg_we & !reg_error;
  assign channel_status_c58_channel_error_wd = reg_wdata[1];

  assign channel_status_c58_field1_we = addr_hit[581] & reg_we & !reg_error;
  assign channel_status_c58_field1_wd = reg_wdata[31:2];

  assign reserved_2_c58_we = addr_hit[582] & reg_we & !reg_error;
  assign reserved_2_c58_wd = reg_wdata[31:0];

  assign channel_flags_c58_intr_enable_we = addr_hit[584] & reg_we & !reg_error;
  assign channel_flags_c58_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c58_field1_we = addr_hit[584] & reg_we & !reg_error;
  assign channel_flags_c58_field1_wd = reg_wdata[31:1];

  assign length_c58_we = addr_hit[585] & reg_we & !reg_error;
  assign length_c58_wd = reg_wdata[31:0];

  assign message_header_c58_message_id_we = addr_hit[586] & reg_we & !reg_error;
  assign message_header_c58_message_id_wd = reg_wdata[7:0];

  assign message_header_c58_message_type_we = addr_hit[586] & reg_we & !reg_error;
  assign message_header_c58_message_type_wd = reg_wdata[9:8];

  assign message_header_c58_protocol_id_we = addr_hit[586] & reg_we & !reg_error;
  assign message_header_c58_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c58_token_we = addr_hit[586] & reg_we & !reg_error;
  assign message_header_c58_token_wd = reg_wdata[27:18];

  assign message_header_c58_field1_we = addr_hit[586] & reg_we & !reg_error;
  assign message_header_c58_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c58_we = addr_hit[587] & reg_we & !reg_error;
  assign message_payload_1_c58_wd = reg_wdata[31:0];

  assign doorbell_c58_intr_we = addr_hit[588] & reg_we & !reg_error;
  assign doorbell_c58_intr_wd = reg_wdata[0];

  assign doorbell_c58_preserve_mask_we = addr_hit[588] & reg_we & !reg_error;
  assign doorbell_c58_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c58_intr_we = addr_hit[589] & reg_we & !reg_error;
  assign completion_interrupt_c58_intr_wd = reg_wdata[0];

  assign completion_interrupt_c58_preserve_mask_we = addr_hit[589] & reg_we & !reg_error;
  assign completion_interrupt_c58_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c59_we = addr_hit[590] & reg_we & !reg_error;
  assign reserved_1_c59_wd = reg_wdata[31:0];

  assign channel_status_c59_channel_free_we = addr_hit[591] & reg_we & !reg_error;
  assign channel_status_c59_channel_free_wd = reg_wdata[0];

  assign channel_status_c59_channel_error_we = addr_hit[591] & reg_we & !reg_error;
  assign channel_status_c59_channel_error_wd = reg_wdata[1];

  assign channel_status_c59_field1_we = addr_hit[591] & reg_we & !reg_error;
  assign channel_status_c59_field1_wd = reg_wdata[31:2];

  assign reserved_2_c59_we = addr_hit[592] & reg_we & !reg_error;
  assign reserved_2_c59_wd = reg_wdata[31:0];

  assign channel_flags_c59_intr_enable_we = addr_hit[594] & reg_we & !reg_error;
  assign channel_flags_c59_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c59_field1_we = addr_hit[594] & reg_we & !reg_error;
  assign channel_flags_c59_field1_wd = reg_wdata[31:1];

  assign length_c59_we = addr_hit[595] & reg_we & !reg_error;
  assign length_c59_wd = reg_wdata[31:0];

  assign message_header_c59_message_id_we = addr_hit[596] & reg_we & !reg_error;
  assign message_header_c59_message_id_wd = reg_wdata[7:0];

  assign message_header_c59_message_type_we = addr_hit[596] & reg_we & !reg_error;
  assign message_header_c59_message_type_wd = reg_wdata[9:8];

  assign message_header_c59_protocol_id_we = addr_hit[596] & reg_we & !reg_error;
  assign message_header_c59_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c59_token_we = addr_hit[596] & reg_we & !reg_error;
  assign message_header_c59_token_wd = reg_wdata[27:18];

  assign message_header_c59_field1_we = addr_hit[596] & reg_we & !reg_error;
  assign message_header_c59_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c59_we = addr_hit[597] & reg_we & !reg_error;
  assign message_payload_1_c59_wd = reg_wdata[31:0];

  assign doorbell_c59_intr_we = addr_hit[598] & reg_we & !reg_error;
  assign doorbell_c59_intr_wd = reg_wdata[0];

  assign doorbell_c59_preserve_mask_we = addr_hit[598] & reg_we & !reg_error;
  assign doorbell_c59_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c59_intr_we = addr_hit[599] & reg_we & !reg_error;
  assign completion_interrupt_c59_intr_wd = reg_wdata[0];

  assign completion_interrupt_c59_preserve_mask_we = addr_hit[599] & reg_we & !reg_error;
  assign completion_interrupt_c59_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c60_we = addr_hit[600] & reg_we & !reg_error;
  assign reserved_1_c60_wd = reg_wdata[31:0];

  assign channel_status_c60_channel_free_we = addr_hit[601] & reg_we & !reg_error;
  assign channel_status_c60_channel_free_wd = reg_wdata[0];

  assign channel_status_c60_channel_error_we = addr_hit[601] & reg_we & !reg_error;
  assign channel_status_c60_channel_error_wd = reg_wdata[1];

  assign channel_status_c60_field1_we = addr_hit[601] & reg_we & !reg_error;
  assign channel_status_c60_field1_wd = reg_wdata[31:2];

  assign reserved_2_c60_we = addr_hit[602] & reg_we & !reg_error;
  assign reserved_2_c60_wd = reg_wdata[31:0];

  assign channel_flags_c60_intr_enable_we = addr_hit[604] & reg_we & !reg_error;
  assign channel_flags_c60_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c60_field1_we = addr_hit[604] & reg_we & !reg_error;
  assign channel_flags_c60_field1_wd = reg_wdata[31:1];

  assign length_c60_we = addr_hit[605] & reg_we & !reg_error;
  assign length_c60_wd = reg_wdata[31:0];

  assign message_header_c60_message_id_we = addr_hit[606] & reg_we & !reg_error;
  assign message_header_c60_message_id_wd = reg_wdata[7:0];

  assign message_header_c60_message_type_we = addr_hit[606] & reg_we & !reg_error;
  assign message_header_c60_message_type_wd = reg_wdata[9:8];

  assign message_header_c60_protocol_id_we = addr_hit[606] & reg_we & !reg_error;
  assign message_header_c60_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c60_token_we = addr_hit[606] & reg_we & !reg_error;
  assign message_header_c60_token_wd = reg_wdata[27:18];

  assign message_header_c60_field1_we = addr_hit[606] & reg_we & !reg_error;
  assign message_header_c60_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c60_we = addr_hit[607] & reg_we & !reg_error;
  assign message_payload_1_c60_wd = reg_wdata[31:0];

  assign doorbell_c60_intr_we = addr_hit[608] & reg_we & !reg_error;
  assign doorbell_c60_intr_wd = reg_wdata[0];

  assign doorbell_c60_preserve_mask_we = addr_hit[608] & reg_we & !reg_error;
  assign doorbell_c60_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c60_intr_we = addr_hit[609] & reg_we & !reg_error;
  assign completion_interrupt_c60_intr_wd = reg_wdata[0];

  assign completion_interrupt_c60_preserve_mask_we = addr_hit[609] & reg_we & !reg_error;
  assign completion_interrupt_c60_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c61_we = addr_hit[610] & reg_we & !reg_error;
  assign reserved_1_c61_wd = reg_wdata[31:0];

  assign channel_status_c61_channel_free_we = addr_hit[611] & reg_we & !reg_error;
  assign channel_status_c61_channel_free_wd = reg_wdata[0];

  assign channel_status_c61_channel_error_we = addr_hit[611] & reg_we & !reg_error;
  assign channel_status_c61_channel_error_wd = reg_wdata[1];

  assign channel_status_c61_field1_we = addr_hit[611] & reg_we & !reg_error;
  assign channel_status_c61_field1_wd = reg_wdata[31:2];

  assign reserved_2_c61_we = addr_hit[612] & reg_we & !reg_error;
  assign reserved_2_c61_wd = reg_wdata[31:0];

  assign channel_flags_c61_intr_enable_we = addr_hit[614] & reg_we & !reg_error;
  assign channel_flags_c61_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c61_field1_we = addr_hit[614] & reg_we & !reg_error;
  assign channel_flags_c61_field1_wd = reg_wdata[31:1];

  assign length_c61_we = addr_hit[615] & reg_we & !reg_error;
  assign length_c61_wd = reg_wdata[31:0];

  assign message_header_c61_message_id_we = addr_hit[616] & reg_we & !reg_error;
  assign message_header_c61_message_id_wd = reg_wdata[7:0];

  assign message_header_c61_message_type_we = addr_hit[616] & reg_we & !reg_error;
  assign message_header_c61_message_type_wd = reg_wdata[9:8];

  assign message_header_c61_protocol_id_we = addr_hit[616] & reg_we & !reg_error;
  assign message_header_c61_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c61_token_we = addr_hit[616] & reg_we & !reg_error;
  assign message_header_c61_token_wd = reg_wdata[27:18];

  assign message_header_c61_field1_we = addr_hit[616] & reg_we & !reg_error;
  assign message_header_c61_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c61_we = addr_hit[617] & reg_we & !reg_error;
  assign message_payload_1_c61_wd = reg_wdata[31:0];

  assign doorbell_c61_intr_we = addr_hit[618] & reg_we & !reg_error;
  assign doorbell_c61_intr_wd = reg_wdata[0];

  assign doorbell_c61_preserve_mask_we = addr_hit[618] & reg_we & !reg_error;
  assign doorbell_c61_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c61_intr_we = addr_hit[619] & reg_we & !reg_error;
  assign completion_interrupt_c61_intr_wd = reg_wdata[0];

  assign completion_interrupt_c61_preserve_mask_we = addr_hit[619] & reg_we & !reg_error;
  assign completion_interrupt_c61_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c62_we = addr_hit[620] & reg_we & !reg_error;
  assign reserved_1_c62_wd = reg_wdata[31:0];

  assign channel_status_c62_channel_free_we = addr_hit[621] & reg_we & !reg_error;
  assign channel_status_c62_channel_free_wd = reg_wdata[0];

  assign channel_status_c62_channel_error_we = addr_hit[621] & reg_we & !reg_error;
  assign channel_status_c62_channel_error_wd = reg_wdata[1];

  assign channel_status_c62_field1_we = addr_hit[621] & reg_we & !reg_error;
  assign channel_status_c62_field1_wd = reg_wdata[31:2];

  assign reserved_2_c62_we = addr_hit[622] & reg_we & !reg_error;
  assign reserved_2_c62_wd = reg_wdata[31:0];

  assign channel_flags_c62_intr_enable_we = addr_hit[624] & reg_we & !reg_error;
  assign channel_flags_c62_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c62_field1_we = addr_hit[624] & reg_we & !reg_error;
  assign channel_flags_c62_field1_wd = reg_wdata[31:1];

  assign length_c62_we = addr_hit[625] & reg_we & !reg_error;
  assign length_c62_wd = reg_wdata[31:0];

  assign message_header_c62_message_id_we = addr_hit[626] & reg_we & !reg_error;
  assign message_header_c62_message_id_wd = reg_wdata[7:0];

  assign message_header_c62_message_type_we = addr_hit[626] & reg_we & !reg_error;
  assign message_header_c62_message_type_wd = reg_wdata[9:8];

  assign message_header_c62_protocol_id_we = addr_hit[626] & reg_we & !reg_error;
  assign message_header_c62_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c62_token_we = addr_hit[626] & reg_we & !reg_error;
  assign message_header_c62_token_wd = reg_wdata[27:18];

  assign message_header_c62_field1_we = addr_hit[626] & reg_we & !reg_error;
  assign message_header_c62_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c62_we = addr_hit[627] & reg_we & !reg_error;
  assign message_payload_1_c62_wd = reg_wdata[31:0];

  assign doorbell_c62_intr_we = addr_hit[628] & reg_we & !reg_error;
  assign doorbell_c62_intr_wd = reg_wdata[0];

  assign doorbell_c62_preserve_mask_we = addr_hit[628] & reg_we & !reg_error;
  assign doorbell_c62_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c62_intr_we = addr_hit[629] & reg_we & !reg_error;
  assign completion_interrupt_c62_intr_wd = reg_wdata[0];

  assign completion_interrupt_c62_preserve_mask_we = addr_hit[629] & reg_we & !reg_error;
  assign completion_interrupt_c62_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c63_we = addr_hit[630] & reg_we & !reg_error;
  assign reserved_1_c63_wd = reg_wdata[31:0];

  assign channel_status_c63_channel_free_we = addr_hit[631] & reg_we & !reg_error;
  assign channel_status_c63_channel_free_wd = reg_wdata[0];

  assign channel_status_c63_channel_error_we = addr_hit[631] & reg_we & !reg_error;
  assign channel_status_c63_channel_error_wd = reg_wdata[1];

  assign channel_status_c63_field1_we = addr_hit[631] & reg_we & !reg_error;
  assign channel_status_c63_field1_wd = reg_wdata[31:2];

  assign reserved_2_c63_we = addr_hit[632] & reg_we & !reg_error;
  assign reserved_2_c63_wd = reg_wdata[31:0];

  assign channel_flags_c63_intr_enable_we = addr_hit[634] & reg_we & !reg_error;
  assign channel_flags_c63_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c63_field1_we = addr_hit[634] & reg_we & !reg_error;
  assign channel_flags_c63_field1_wd = reg_wdata[31:1];

  assign length_c63_we = addr_hit[635] & reg_we & !reg_error;
  assign length_c63_wd = reg_wdata[31:0];

  assign message_header_c63_message_id_we = addr_hit[636] & reg_we & !reg_error;
  assign message_header_c63_message_id_wd = reg_wdata[7:0];

  assign message_header_c63_message_type_we = addr_hit[636] & reg_we & !reg_error;
  assign message_header_c63_message_type_wd = reg_wdata[9:8];

  assign message_header_c63_protocol_id_we = addr_hit[636] & reg_we & !reg_error;
  assign message_header_c63_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c63_token_we = addr_hit[636] & reg_we & !reg_error;
  assign message_header_c63_token_wd = reg_wdata[27:18];

  assign message_header_c63_field1_we = addr_hit[636] & reg_we & !reg_error;
  assign message_header_c63_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c63_we = addr_hit[637] & reg_we & !reg_error;
  assign message_payload_1_c63_wd = reg_wdata[31:0];

  assign doorbell_c63_intr_we = addr_hit[638] & reg_we & !reg_error;
  assign doorbell_c63_intr_wd = reg_wdata[0];

  assign doorbell_c63_preserve_mask_we = addr_hit[638] & reg_we & !reg_error;
  assign doorbell_c63_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c63_intr_we = addr_hit[639] & reg_we & !reg_error;
  assign completion_interrupt_c63_intr_wd = reg_wdata[0];

  assign completion_interrupt_c63_preserve_mask_we = addr_hit[639] & reg_we & !reg_error;
  assign completion_interrupt_c63_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c64_we = addr_hit[640] & reg_we & !reg_error;
  assign reserved_1_c64_wd = reg_wdata[31:0];

  assign channel_status_c64_channel_free_we = addr_hit[641] & reg_we & !reg_error;
  assign channel_status_c64_channel_free_wd = reg_wdata[0];

  assign channel_status_c64_channel_error_we = addr_hit[641] & reg_we & !reg_error;
  assign channel_status_c64_channel_error_wd = reg_wdata[1];

  assign channel_status_c64_field1_we = addr_hit[641] & reg_we & !reg_error;
  assign channel_status_c64_field1_wd = reg_wdata[31:2];

  assign reserved_2_c64_we = addr_hit[642] & reg_we & !reg_error;
  assign reserved_2_c64_wd = reg_wdata[31:0];

  assign channel_flags_c64_intr_enable_we = addr_hit[644] & reg_we & !reg_error;
  assign channel_flags_c64_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c64_field1_we = addr_hit[644] & reg_we & !reg_error;
  assign channel_flags_c64_field1_wd = reg_wdata[31:1];

  assign length_c64_we = addr_hit[645] & reg_we & !reg_error;
  assign length_c64_wd = reg_wdata[31:0];

  assign message_header_c64_message_id_we = addr_hit[646] & reg_we & !reg_error;
  assign message_header_c64_message_id_wd = reg_wdata[7:0];

  assign message_header_c64_message_type_we = addr_hit[646] & reg_we & !reg_error;
  assign message_header_c64_message_type_wd = reg_wdata[9:8];

  assign message_header_c64_protocol_id_we = addr_hit[646] & reg_we & !reg_error;
  assign message_header_c64_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c64_token_we = addr_hit[646] & reg_we & !reg_error;
  assign message_header_c64_token_wd = reg_wdata[27:18];

  assign message_header_c64_field1_we = addr_hit[646] & reg_we & !reg_error;
  assign message_header_c64_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c64_we = addr_hit[647] & reg_we & !reg_error;
  assign message_payload_1_c64_wd = reg_wdata[31:0];

  assign doorbell_c64_intr_we = addr_hit[648] & reg_we & !reg_error;
  assign doorbell_c64_intr_wd = reg_wdata[0];

  assign doorbell_c64_preserve_mask_we = addr_hit[648] & reg_we & !reg_error;
  assign doorbell_c64_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c64_intr_we = addr_hit[649] & reg_we & !reg_error;
  assign completion_interrupt_c64_intr_wd = reg_wdata[0];

  assign completion_interrupt_c64_preserve_mask_we = addr_hit[649] & reg_we & !reg_error;
  assign completion_interrupt_c64_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c65_we = addr_hit[650] & reg_we & !reg_error;
  assign reserved_1_c65_wd = reg_wdata[31:0];

  assign channel_status_c65_channel_free_we = addr_hit[651] & reg_we & !reg_error;
  assign channel_status_c65_channel_free_wd = reg_wdata[0];

  assign channel_status_c65_channel_error_we = addr_hit[651] & reg_we & !reg_error;
  assign channel_status_c65_channel_error_wd = reg_wdata[1];

  assign channel_status_c65_field1_we = addr_hit[651] & reg_we & !reg_error;
  assign channel_status_c65_field1_wd = reg_wdata[31:2];

  assign reserved_2_c65_we = addr_hit[652] & reg_we & !reg_error;
  assign reserved_2_c65_wd = reg_wdata[31:0];

  assign channel_flags_c65_intr_enable_we = addr_hit[654] & reg_we & !reg_error;
  assign channel_flags_c65_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c65_field1_we = addr_hit[654] & reg_we & !reg_error;
  assign channel_flags_c65_field1_wd = reg_wdata[31:1];

  assign length_c65_we = addr_hit[655] & reg_we & !reg_error;
  assign length_c65_wd = reg_wdata[31:0];

  assign message_header_c65_message_id_we = addr_hit[656] & reg_we & !reg_error;
  assign message_header_c65_message_id_wd = reg_wdata[7:0];

  assign message_header_c65_message_type_we = addr_hit[656] & reg_we & !reg_error;
  assign message_header_c65_message_type_wd = reg_wdata[9:8];

  assign message_header_c65_protocol_id_we = addr_hit[656] & reg_we & !reg_error;
  assign message_header_c65_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c65_token_we = addr_hit[656] & reg_we & !reg_error;
  assign message_header_c65_token_wd = reg_wdata[27:18];

  assign message_header_c65_field1_we = addr_hit[656] & reg_we & !reg_error;
  assign message_header_c65_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c65_we = addr_hit[657] & reg_we & !reg_error;
  assign message_payload_1_c65_wd = reg_wdata[31:0];

  assign doorbell_c65_intr_we = addr_hit[658] & reg_we & !reg_error;
  assign doorbell_c65_intr_wd = reg_wdata[0];

  assign doorbell_c65_preserve_mask_we = addr_hit[658] & reg_we & !reg_error;
  assign doorbell_c65_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c65_intr_we = addr_hit[659] & reg_we & !reg_error;
  assign completion_interrupt_c65_intr_wd = reg_wdata[0];

  assign completion_interrupt_c65_preserve_mask_we = addr_hit[659] & reg_we & !reg_error;
  assign completion_interrupt_c65_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c66_we = addr_hit[660] & reg_we & !reg_error;
  assign reserved_1_c66_wd = reg_wdata[31:0];

  assign channel_status_c66_channel_free_we = addr_hit[661] & reg_we & !reg_error;
  assign channel_status_c66_channel_free_wd = reg_wdata[0];

  assign channel_status_c66_channel_error_we = addr_hit[661] & reg_we & !reg_error;
  assign channel_status_c66_channel_error_wd = reg_wdata[1];

  assign channel_status_c66_field1_we = addr_hit[661] & reg_we & !reg_error;
  assign channel_status_c66_field1_wd = reg_wdata[31:2];

  assign reserved_2_c66_we = addr_hit[662] & reg_we & !reg_error;
  assign reserved_2_c66_wd = reg_wdata[31:0];

  assign channel_flags_c66_intr_enable_we = addr_hit[664] & reg_we & !reg_error;
  assign channel_flags_c66_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c66_field1_we = addr_hit[664] & reg_we & !reg_error;
  assign channel_flags_c66_field1_wd = reg_wdata[31:1];

  assign length_c66_we = addr_hit[665] & reg_we & !reg_error;
  assign length_c66_wd = reg_wdata[31:0];

  assign message_header_c66_message_id_we = addr_hit[666] & reg_we & !reg_error;
  assign message_header_c66_message_id_wd = reg_wdata[7:0];

  assign message_header_c66_message_type_we = addr_hit[666] & reg_we & !reg_error;
  assign message_header_c66_message_type_wd = reg_wdata[9:8];

  assign message_header_c66_protocol_id_we = addr_hit[666] & reg_we & !reg_error;
  assign message_header_c66_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c66_token_we = addr_hit[666] & reg_we & !reg_error;
  assign message_header_c66_token_wd = reg_wdata[27:18];

  assign message_header_c66_field1_we = addr_hit[666] & reg_we & !reg_error;
  assign message_header_c66_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c66_we = addr_hit[667] & reg_we & !reg_error;
  assign message_payload_1_c66_wd = reg_wdata[31:0];

  assign doorbell_c66_intr_we = addr_hit[668] & reg_we & !reg_error;
  assign doorbell_c66_intr_wd = reg_wdata[0];

  assign doorbell_c66_preserve_mask_we = addr_hit[668] & reg_we & !reg_error;
  assign doorbell_c66_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c66_intr_we = addr_hit[669] & reg_we & !reg_error;
  assign completion_interrupt_c66_intr_wd = reg_wdata[0];

  assign completion_interrupt_c66_preserve_mask_we = addr_hit[669] & reg_we & !reg_error;
  assign completion_interrupt_c66_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c67_we = addr_hit[670] & reg_we & !reg_error;
  assign reserved_1_c67_wd = reg_wdata[31:0];

  assign channel_status_c67_channel_free_we = addr_hit[671] & reg_we & !reg_error;
  assign channel_status_c67_channel_free_wd = reg_wdata[0];

  assign channel_status_c67_channel_error_we = addr_hit[671] & reg_we & !reg_error;
  assign channel_status_c67_channel_error_wd = reg_wdata[1];

  assign channel_status_c67_field1_we = addr_hit[671] & reg_we & !reg_error;
  assign channel_status_c67_field1_wd = reg_wdata[31:2];

  assign reserved_2_c67_we = addr_hit[672] & reg_we & !reg_error;
  assign reserved_2_c67_wd = reg_wdata[31:0];

  assign channel_flags_c67_intr_enable_we = addr_hit[674] & reg_we & !reg_error;
  assign channel_flags_c67_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c67_field1_we = addr_hit[674] & reg_we & !reg_error;
  assign channel_flags_c67_field1_wd = reg_wdata[31:1];

  assign length_c67_we = addr_hit[675] & reg_we & !reg_error;
  assign length_c67_wd = reg_wdata[31:0];

  assign message_header_c67_message_id_we = addr_hit[676] & reg_we & !reg_error;
  assign message_header_c67_message_id_wd = reg_wdata[7:0];

  assign message_header_c67_message_type_we = addr_hit[676] & reg_we & !reg_error;
  assign message_header_c67_message_type_wd = reg_wdata[9:8];

  assign message_header_c67_protocol_id_we = addr_hit[676] & reg_we & !reg_error;
  assign message_header_c67_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c67_token_we = addr_hit[676] & reg_we & !reg_error;
  assign message_header_c67_token_wd = reg_wdata[27:18];

  assign message_header_c67_field1_we = addr_hit[676] & reg_we & !reg_error;
  assign message_header_c67_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c67_we = addr_hit[677] & reg_we & !reg_error;
  assign message_payload_1_c67_wd = reg_wdata[31:0];

  assign doorbell_c67_intr_we = addr_hit[678] & reg_we & !reg_error;
  assign doorbell_c67_intr_wd = reg_wdata[0];

  assign doorbell_c67_preserve_mask_we = addr_hit[678] & reg_we & !reg_error;
  assign doorbell_c67_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c67_intr_we = addr_hit[679] & reg_we & !reg_error;
  assign completion_interrupt_c67_intr_wd = reg_wdata[0];

  assign completion_interrupt_c67_preserve_mask_we = addr_hit[679] & reg_we & !reg_error;
  assign completion_interrupt_c67_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c68_we = addr_hit[680] & reg_we & !reg_error;
  assign reserved_1_c68_wd = reg_wdata[31:0];

  assign channel_status_c68_channel_free_we = addr_hit[681] & reg_we & !reg_error;
  assign channel_status_c68_channel_free_wd = reg_wdata[0];

  assign channel_status_c68_channel_error_we = addr_hit[681] & reg_we & !reg_error;
  assign channel_status_c68_channel_error_wd = reg_wdata[1];

  assign channel_status_c68_field1_we = addr_hit[681] & reg_we & !reg_error;
  assign channel_status_c68_field1_wd = reg_wdata[31:2];

  assign reserved_2_c68_we = addr_hit[682] & reg_we & !reg_error;
  assign reserved_2_c68_wd = reg_wdata[31:0];

  assign channel_flags_c68_intr_enable_we = addr_hit[684] & reg_we & !reg_error;
  assign channel_flags_c68_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c68_field1_we = addr_hit[684] & reg_we & !reg_error;
  assign channel_flags_c68_field1_wd = reg_wdata[31:1];

  assign length_c68_we = addr_hit[685] & reg_we & !reg_error;
  assign length_c68_wd = reg_wdata[31:0];

  assign message_header_c68_message_id_we = addr_hit[686] & reg_we & !reg_error;
  assign message_header_c68_message_id_wd = reg_wdata[7:0];

  assign message_header_c68_message_type_we = addr_hit[686] & reg_we & !reg_error;
  assign message_header_c68_message_type_wd = reg_wdata[9:8];

  assign message_header_c68_protocol_id_we = addr_hit[686] & reg_we & !reg_error;
  assign message_header_c68_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c68_token_we = addr_hit[686] & reg_we & !reg_error;
  assign message_header_c68_token_wd = reg_wdata[27:18];

  assign message_header_c68_field1_we = addr_hit[686] & reg_we & !reg_error;
  assign message_header_c68_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c68_we = addr_hit[687] & reg_we & !reg_error;
  assign message_payload_1_c68_wd = reg_wdata[31:0];

  assign doorbell_c68_intr_we = addr_hit[688] & reg_we & !reg_error;
  assign doorbell_c68_intr_wd = reg_wdata[0];

  assign doorbell_c68_preserve_mask_we = addr_hit[688] & reg_we & !reg_error;
  assign doorbell_c68_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c68_intr_we = addr_hit[689] & reg_we & !reg_error;
  assign completion_interrupt_c68_intr_wd = reg_wdata[0];

  assign completion_interrupt_c68_preserve_mask_we = addr_hit[689] & reg_we & !reg_error;
  assign completion_interrupt_c68_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c69_we = addr_hit[690] & reg_we & !reg_error;
  assign reserved_1_c69_wd = reg_wdata[31:0];

  assign channel_status_c69_channel_free_we = addr_hit[691] & reg_we & !reg_error;
  assign channel_status_c69_channel_free_wd = reg_wdata[0];

  assign channel_status_c69_channel_error_we = addr_hit[691] & reg_we & !reg_error;
  assign channel_status_c69_channel_error_wd = reg_wdata[1];

  assign channel_status_c69_field1_we = addr_hit[691] & reg_we & !reg_error;
  assign channel_status_c69_field1_wd = reg_wdata[31:2];

  assign reserved_2_c69_we = addr_hit[692] & reg_we & !reg_error;
  assign reserved_2_c69_wd = reg_wdata[31:0];

  assign channel_flags_c69_intr_enable_we = addr_hit[694] & reg_we & !reg_error;
  assign channel_flags_c69_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c69_field1_we = addr_hit[694] & reg_we & !reg_error;
  assign channel_flags_c69_field1_wd = reg_wdata[31:1];

  assign length_c69_we = addr_hit[695] & reg_we & !reg_error;
  assign length_c69_wd = reg_wdata[31:0];

  assign message_header_c69_message_id_we = addr_hit[696] & reg_we & !reg_error;
  assign message_header_c69_message_id_wd = reg_wdata[7:0];

  assign message_header_c69_message_type_we = addr_hit[696] & reg_we & !reg_error;
  assign message_header_c69_message_type_wd = reg_wdata[9:8];

  assign message_header_c69_protocol_id_we = addr_hit[696] & reg_we & !reg_error;
  assign message_header_c69_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c69_token_we = addr_hit[696] & reg_we & !reg_error;
  assign message_header_c69_token_wd = reg_wdata[27:18];

  assign message_header_c69_field1_we = addr_hit[696] & reg_we & !reg_error;
  assign message_header_c69_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c69_we = addr_hit[697] & reg_we & !reg_error;
  assign message_payload_1_c69_wd = reg_wdata[31:0];

  assign doorbell_c69_intr_we = addr_hit[698] & reg_we & !reg_error;
  assign doorbell_c69_intr_wd = reg_wdata[0];

  assign doorbell_c69_preserve_mask_we = addr_hit[698] & reg_we & !reg_error;
  assign doorbell_c69_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c69_intr_we = addr_hit[699] & reg_we & !reg_error;
  assign completion_interrupt_c69_intr_wd = reg_wdata[0];

  assign completion_interrupt_c69_preserve_mask_we = addr_hit[699] & reg_we & !reg_error;
  assign completion_interrupt_c69_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c70_we = addr_hit[700] & reg_we & !reg_error;
  assign reserved_1_c70_wd = reg_wdata[31:0];

  assign channel_status_c70_channel_free_we = addr_hit[701] & reg_we & !reg_error;
  assign channel_status_c70_channel_free_wd = reg_wdata[0];

  assign channel_status_c70_channel_error_we = addr_hit[701] & reg_we & !reg_error;
  assign channel_status_c70_channel_error_wd = reg_wdata[1];

  assign channel_status_c70_field1_we = addr_hit[701] & reg_we & !reg_error;
  assign channel_status_c70_field1_wd = reg_wdata[31:2];

  assign reserved_2_c70_we = addr_hit[702] & reg_we & !reg_error;
  assign reserved_2_c70_wd = reg_wdata[31:0];

  assign channel_flags_c70_intr_enable_we = addr_hit[704] & reg_we & !reg_error;
  assign channel_flags_c70_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c70_field1_we = addr_hit[704] & reg_we & !reg_error;
  assign channel_flags_c70_field1_wd = reg_wdata[31:1];

  assign length_c70_we = addr_hit[705] & reg_we & !reg_error;
  assign length_c70_wd = reg_wdata[31:0];

  assign message_header_c70_message_id_we = addr_hit[706] & reg_we & !reg_error;
  assign message_header_c70_message_id_wd = reg_wdata[7:0];

  assign message_header_c70_message_type_we = addr_hit[706] & reg_we & !reg_error;
  assign message_header_c70_message_type_wd = reg_wdata[9:8];

  assign message_header_c70_protocol_id_we = addr_hit[706] & reg_we & !reg_error;
  assign message_header_c70_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c70_token_we = addr_hit[706] & reg_we & !reg_error;
  assign message_header_c70_token_wd = reg_wdata[27:18];

  assign message_header_c70_field1_we = addr_hit[706] & reg_we & !reg_error;
  assign message_header_c70_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c70_we = addr_hit[707] & reg_we & !reg_error;
  assign message_payload_1_c70_wd = reg_wdata[31:0];

  assign doorbell_c70_intr_we = addr_hit[708] & reg_we & !reg_error;
  assign doorbell_c70_intr_wd = reg_wdata[0];

  assign doorbell_c70_preserve_mask_we = addr_hit[708] & reg_we & !reg_error;
  assign doorbell_c70_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c70_intr_we = addr_hit[709] & reg_we & !reg_error;
  assign completion_interrupt_c70_intr_wd = reg_wdata[0];

  assign completion_interrupt_c70_preserve_mask_we = addr_hit[709] & reg_we & !reg_error;
  assign completion_interrupt_c70_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c71_we = addr_hit[710] & reg_we & !reg_error;
  assign reserved_1_c71_wd = reg_wdata[31:0];

  assign channel_status_c71_channel_free_we = addr_hit[711] & reg_we & !reg_error;
  assign channel_status_c71_channel_free_wd = reg_wdata[0];

  assign channel_status_c71_channel_error_we = addr_hit[711] & reg_we & !reg_error;
  assign channel_status_c71_channel_error_wd = reg_wdata[1];

  assign channel_status_c71_field1_we = addr_hit[711] & reg_we & !reg_error;
  assign channel_status_c71_field1_wd = reg_wdata[31:2];

  assign reserved_2_c71_we = addr_hit[712] & reg_we & !reg_error;
  assign reserved_2_c71_wd = reg_wdata[31:0];

  assign channel_flags_c71_intr_enable_we = addr_hit[714] & reg_we & !reg_error;
  assign channel_flags_c71_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c71_field1_we = addr_hit[714] & reg_we & !reg_error;
  assign channel_flags_c71_field1_wd = reg_wdata[31:1];

  assign length_c71_we = addr_hit[715] & reg_we & !reg_error;
  assign length_c71_wd = reg_wdata[31:0];

  assign message_header_c71_message_id_we = addr_hit[716] & reg_we & !reg_error;
  assign message_header_c71_message_id_wd = reg_wdata[7:0];

  assign message_header_c71_message_type_we = addr_hit[716] & reg_we & !reg_error;
  assign message_header_c71_message_type_wd = reg_wdata[9:8];

  assign message_header_c71_protocol_id_we = addr_hit[716] & reg_we & !reg_error;
  assign message_header_c71_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c71_token_we = addr_hit[716] & reg_we & !reg_error;
  assign message_header_c71_token_wd = reg_wdata[27:18];

  assign message_header_c71_field1_we = addr_hit[716] & reg_we & !reg_error;
  assign message_header_c71_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c71_we = addr_hit[717] & reg_we & !reg_error;
  assign message_payload_1_c71_wd = reg_wdata[31:0];

  assign doorbell_c71_intr_we = addr_hit[718] & reg_we & !reg_error;
  assign doorbell_c71_intr_wd = reg_wdata[0];

  assign doorbell_c71_preserve_mask_we = addr_hit[718] & reg_we & !reg_error;
  assign doorbell_c71_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c71_intr_we = addr_hit[719] & reg_we & !reg_error;
  assign completion_interrupt_c71_intr_wd = reg_wdata[0];

  assign completion_interrupt_c71_preserve_mask_we = addr_hit[719] & reg_we & !reg_error;
  assign completion_interrupt_c71_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c72_we = addr_hit[720] & reg_we & !reg_error;
  assign reserved_1_c72_wd = reg_wdata[31:0];

  assign channel_status_c72_channel_free_we = addr_hit[721] & reg_we & !reg_error;
  assign channel_status_c72_channel_free_wd = reg_wdata[0];

  assign channel_status_c72_channel_error_we = addr_hit[721] & reg_we & !reg_error;
  assign channel_status_c72_channel_error_wd = reg_wdata[1];

  assign channel_status_c72_field1_we = addr_hit[721] & reg_we & !reg_error;
  assign channel_status_c72_field1_wd = reg_wdata[31:2];

  assign reserved_2_c72_we = addr_hit[722] & reg_we & !reg_error;
  assign reserved_2_c72_wd = reg_wdata[31:0];

  assign channel_flags_c72_intr_enable_we = addr_hit[724] & reg_we & !reg_error;
  assign channel_flags_c72_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c72_field1_we = addr_hit[724] & reg_we & !reg_error;
  assign channel_flags_c72_field1_wd = reg_wdata[31:1];

  assign length_c72_we = addr_hit[725] & reg_we & !reg_error;
  assign length_c72_wd = reg_wdata[31:0];

  assign message_header_c72_message_id_we = addr_hit[726] & reg_we & !reg_error;
  assign message_header_c72_message_id_wd = reg_wdata[7:0];

  assign message_header_c72_message_type_we = addr_hit[726] & reg_we & !reg_error;
  assign message_header_c72_message_type_wd = reg_wdata[9:8];

  assign message_header_c72_protocol_id_we = addr_hit[726] & reg_we & !reg_error;
  assign message_header_c72_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c72_token_we = addr_hit[726] & reg_we & !reg_error;
  assign message_header_c72_token_wd = reg_wdata[27:18];

  assign message_header_c72_field1_we = addr_hit[726] & reg_we & !reg_error;
  assign message_header_c72_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c72_we = addr_hit[727] & reg_we & !reg_error;
  assign message_payload_1_c72_wd = reg_wdata[31:0];

  assign doorbell_c72_intr_we = addr_hit[728] & reg_we & !reg_error;
  assign doorbell_c72_intr_wd = reg_wdata[0];

  assign doorbell_c72_preserve_mask_we = addr_hit[728] & reg_we & !reg_error;
  assign doorbell_c72_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c72_intr_we = addr_hit[729] & reg_we & !reg_error;
  assign completion_interrupt_c72_intr_wd = reg_wdata[0];

  assign completion_interrupt_c72_preserve_mask_we = addr_hit[729] & reg_we & !reg_error;
  assign completion_interrupt_c72_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c73_we = addr_hit[730] & reg_we & !reg_error;
  assign reserved_1_c73_wd = reg_wdata[31:0];

  assign channel_status_c73_channel_free_we = addr_hit[731] & reg_we & !reg_error;
  assign channel_status_c73_channel_free_wd = reg_wdata[0];

  assign channel_status_c73_channel_error_we = addr_hit[731] & reg_we & !reg_error;
  assign channel_status_c73_channel_error_wd = reg_wdata[1];

  assign channel_status_c73_field1_we = addr_hit[731] & reg_we & !reg_error;
  assign channel_status_c73_field1_wd = reg_wdata[31:2];

  assign reserved_2_c73_we = addr_hit[732] & reg_we & !reg_error;
  assign reserved_2_c73_wd = reg_wdata[31:0];

  assign channel_flags_c73_intr_enable_we = addr_hit[734] & reg_we & !reg_error;
  assign channel_flags_c73_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c73_field1_we = addr_hit[734] & reg_we & !reg_error;
  assign channel_flags_c73_field1_wd = reg_wdata[31:1];

  assign length_c73_we = addr_hit[735] & reg_we & !reg_error;
  assign length_c73_wd = reg_wdata[31:0];

  assign message_header_c73_message_id_we = addr_hit[736] & reg_we & !reg_error;
  assign message_header_c73_message_id_wd = reg_wdata[7:0];

  assign message_header_c73_message_type_we = addr_hit[736] & reg_we & !reg_error;
  assign message_header_c73_message_type_wd = reg_wdata[9:8];

  assign message_header_c73_protocol_id_we = addr_hit[736] & reg_we & !reg_error;
  assign message_header_c73_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c73_token_we = addr_hit[736] & reg_we & !reg_error;
  assign message_header_c73_token_wd = reg_wdata[27:18];

  assign message_header_c73_field1_we = addr_hit[736] & reg_we & !reg_error;
  assign message_header_c73_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c73_we = addr_hit[737] & reg_we & !reg_error;
  assign message_payload_1_c73_wd = reg_wdata[31:0];

  assign doorbell_c73_intr_we = addr_hit[738] & reg_we & !reg_error;
  assign doorbell_c73_intr_wd = reg_wdata[0];

  assign doorbell_c73_preserve_mask_we = addr_hit[738] & reg_we & !reg_error;
  assign doorbell_c73_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c73_intr_we = addr_hit[739] & reg_we & !reg_error;
  assign completion_interrupt_c73_intr_wd = reg_wdata[0];

  assign completion_interrupt_c73_preserve_mask_we = addr_hit[739] & reg_we & !reg_error;
  assign completion_interrupt_c73_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c74_we = addr_hit[740] & reg_we & !reg_error;
  assign reserved_1_c74_wd = reg_wdata[31:0];

  assign channel_status_c74_channel_free_we = addr_hit[741] & reg_we & !reg_error;
  assign channel_status_c74_channel_free_wd = reg_wdata[0];

  assign channel_status_c74_channel_error_we = addr_hit[741] & reg_we & !reg_error;
  assign channel_status_c74_channel_error_wd = reg_wdata[1];

  assign channel_status_c74_field1_we = addr_hit[741] & reg_we & !reg_error;
  assign channel_status_c74_field1_wd = reg_wdata[31:2];

  assign reserved_2_c74_we = addr_hit[742] & reg_we & !reg_error;
  assign reserved_2_c74_wd = reg_wdata[31:0];

  assign channel_flags_c74_intr_enable_we = addr_hit[744] & reg_we & !reg_error;
  assign channel_flags_c74_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c74_field1_we = addr_hit[744] & reg_we & !reg_error;
  assign channel_flags_c74_field1_wd = reg_wdata[31:1];

  assign length_c74_we = addr_hit[745] & reg_we & !reg_error;
  assign length_c74_wd = reg_wdata[31:0];

  assign message_header_c74_message_id_we = addr_hit[746] & reg_we & !reg_error;
  assign message_header_c74_message_id_wd = reg_wdata[7:0];

  assign message_header_c74_message_type_we = addr_hit[746] & reg_we & !reg_error;
  assign message_header_c74_message_type_wd = reg_wdata[9:8];

  assign message_header_c74_protocol_id_we = addr_hit[746] & reg_we & !reg_error;
  assign message_header_c74_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c74_token_we = addr_hit[746] & reg_we & !reg_error;
  assign message_header_c74_token_wd = reg_wdata[27:18];

  assign message_header_c74_field1_we = addr_hit[746] & reg_we & !reg_error;
  assign message_header_c74_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c74_we = addr_hit[747] & reg_we & !reg_error;
  assign message_payload_1_c74_wd = reg_wdata[31:0];

  assign doorbell_c74_intr_we = addr_hit[748] & reg_we & !reg_error;
  assign doorbell_c74_intr_wd = reg_wdata[0];

  assign doorbell_c74_preserve_mask_we = addr_hit[748] & reg_we & !reg_error;
  assign doorbell_c74_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c74_intr_we = addr_hit[749] & reg_we & !reg_error;
  assign completion_interrupt_c74_intr_wd = reg_wdata[0];

  assign completion_interrupt_c74_preserve_mask_we = addr_hit[749] & reg_we & !reg_error;
  assign completion_interrupt_c74_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c75_we = addr_hit[750] & reg_we & !reg_error;
  assign reserved_1_c75_wd = reg_wdata[31:0];

  assign channel_status_c75_channel_free_we = addr_hit[751] & reg_we & !reg_error;
  assign channel_status_c75_channel_free_wd = reg_wdata[0];

  assign channel_status_c75_channel_error_we = addr_hit[751] & reg_we & !reg_error;
  assign channel_status_c75_channel_error_wd = reg_wdata[1];

  assign channel_status_c75_field1_we = addr_hit[751] & reg_we & !reg_error;
  assign channel_status_c75_field1_wd = reg_wdata[31:2];

  assign reserved_2_c75_we = addr_hit[752] & reg_we & !reg_error;
  assign reserved_2_c75_wd = reg_wdata[31:0];

  assign channel_flags_c75_intr_enable_we = addr_hit[754] & reg_we & !reg_error;
  assign channel_flags_c75_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c75_field1_we = addr_hit[754] & reg_we & !reg_error;
  assign channel_flags_c75_field1_wd = reg_wdata[31:1];

  assign length_c75_we = addr_hit[755] & reg_we & !reg_error;
  assign length_c75_wd = reg_wdata[31:0];

  assign message_header_c75_message_id_we = addr_hit[756] & reg_we & !reg_error;
  assign message_header_c75_message_id_wd = reg_wdata[7:0];

  assign message_header_c75_message_type_we = addr_hit[756] & reg_we & !reg_error;
  assign message_header_c75_message_type_wd = reg_wdata[9:8];

  assign message_header_c75_protocol_id_we = addr_hit[756] & reg_we & !reg_error;
  assign message_header_c75_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c75_token_we = addr_hit[756] & reg_we & !reg_error;
  assign message_header_c75_token_wd = reg_wdata[27:18];

  assign message_header_c75_field1_we = addr_hit[756] & reg_we & !reg_error;
  assign message_header_c75_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c75_we = addr_hit[757] & reg_we & !reg_error;
  assign message_payload_1_c75_wd = reg_wdata[31:0];

  assign doorbell_c75_intr_we = addr_hit[758] & reg_we & !reg_error;
  assign doorbell_c75_intr_wd = reg_wdata[0];

  assign doorbell_c75_preserve_mask_we = addr_hit[758] & reg_we & !reg_error;
  assign doorbell_c75_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c75_intr_we = addr_hit[759] & reg_we & !reg_error;
  assign completion_interrupt_c75_intr_wd = reg_wdata[0];

  assign completion_interrupt_c75_preserve_mask_we = addr_hit[759] & reg_we & !reg_error;
  assign completion_interrupt_c75_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c76_we = addr_hit[760] & reg_we & !reg_error;
  assign reserved_1_c76_wd = reg_wdata[31:0];

  assign channel_status_c76_channel_free_we = addr_hit[761] & reg_we & !reg_error;
  assign channel_status_c76_channel_free_wd = reg_wdata[0];

  assign channel_status_c76_channel_error_we = addr_hit[761] & reg_we & !reg_error;
  assign channel_status_c76_channel_error_wd = reg_wdata[1];

  assign channel_status_c76_field1_we = addr_hit[761] & reg_we & !reg_error;
  assign channel_status_c76_field1_wd = reg_wdata[31:2];

  assign reserved_2_c76_we = addr_hit[762] & reg_we & !reg_error;
  assign reserved_2_c76_wd = reg_wdata[31:0];

  assign channel_flags_c76_intr_enable_we = addr_hit[764] & reg_we & !reg_error;
  assign channel_flags_c76_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c76_field1_we = addr_hit[764] & reg_we & !reg_error;
  assign channel_flags_c76_field1_wd = reg_wdata[31:1];

  assign length_c76_we = addr_hit[765] & reg_we & !reg_error;
  assign length_c76_wd = reg_wdata[31:0];

  assign message_header_c76_message_id_we = addr_hit[766] & reg_we & !reg_error;
  assign message_header_c76_message_id_wd = reg_wdata[7:0];

  assign message_header_c76_message_type_we = addr_hit[766] & reg_we & !reg_error;
  assign message_header_c76_message_type_wd = reg_wdata[9:8];

  assign message_header_c76_protocol_id_we = addr_hit[766] & reg_we & !reg_error;
  assign message_header_c76_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c76_token_we = addr_hit[766] & reg_we & !reg_error;
  assign message_header_c76_token_wd = reg_wdata[27:18];

  assign message_header_c76_field1_we = addr_hit[766] & reg_we & !reg_error;
  assign message_header_c76_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c76_we = addr_hit[767] & reg_we & !reg_error;
  assign message_payload_1_c76_wd = reg_wdata[31:0];

  assign doorbell_c76_intr_we = addr_hit[768] & reg_we & !reg_error;
  assign doorbell_c76_intr_wd = reg_wdata[0];

  assign doorbell_c76_preserve_mask_we = addr_hit[768] & reg_we & !reg_error;
  assign doorbell_c76_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c76_intr_we = addr_hit[769] & reg_we & !reg_error;
  assign completion_interrupt_c76_intr_wd = reg_wdata[0];

  assign completion_interrupt_c76_preserve_mask_we = addr_hit[769] & reg_we & !reg_error;
  assign completion_interrupt_c76_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c77_we = addr_hit[770] & reg_we & !reg_error;
  assign reserved_1_c77_wd = reg_wdata[31:0];

  assign channel_status_c77_channel_free_we = addr_hit[771] & reg_we & !reg_error;
  assign channel_status_c77_channel_free_wd = reg_wdata[0];

  assign channel_status_c77_channel_error_we = addr_hit[771] & reg_we & !reg_error;
  assign channel_status_c77_channel_error_wd = reg_wdata[1];

  assign channel_status_c77_field1_we = addr_hit[771] & reg_we & !reg_error;
  assign channel_status_c77_field1_wd = reg_wdata[31:2];

  assign reserved_2_c77_we = addr_hit[772] & reg_we & !reg_error;
  assign reserved_2_c77_wd = reg_wdata[31:0];

  assign channel_flags_c77_intr_enable_we = addr_hit[774] & reg_we & !reg_error;
  assign channel_flags_c77_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c77_field1_we = addr_hit[774] & reg_we & !reg_error;
  assign channel_flags_c77_field1_wd = reg_wdata[31:1];

  assign length_c77_we = addr_hit[775] & reg_we & !reg_error;
  assign length_c77_wd = reg_wdata[31:0];

  assign message_header_c77_message_id_we = addr_hit[776] & reg_we & !reg_error;
  assign message_header_c77_message_id_wd = reg_wdata[7:0];

  assign message_header_c77_message_type_we = addr_hit[776] & reg_we & !reg_error;
  assign message_header_c77_message_type_wd = reg_wdata[9:8];

  assign message_header_c77_protocol_id_we = addr_hit[776] & reg_we & !reg_error;
  assign message_header_c77_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c77_token_we = addr_hit[776] & reg_we & !reg_error;
  assign message_header_c77_token_wd = reg_wdata[27:18];

  assign message_header_c77_field1_we = addr_hit[776] & reg_we & !reg_error;
  assign message_header_c77_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c77_we = addr_hit[777] & reg_we & !reg_error;
  assign message_payload_1_c77_wd = reg_wdata[31:0];

  assign doorbell_c77_intr_we = addr_hit[778] & reg_we & !reg_error;
  assign doorbell_c77_intr_wd = reg_wdata[0];

  assign doorbell_c77_preserve_mask_we = addr_hit[778] & reg_we & !reg_error;
  assign doorbell_c77_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c77_intr_we = addr_hit[779] & reg_we & !reg_error;
  assign completion_interrupt_c77_intr_wd = reg_wdata[0];

  assign completion_interrupt_c77_preserve_mask_we = addr_hit[779] & reg_we & !reg_error;
  assign completion_interrupt_c77_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c78_we = addr_hit[780] & reg_we & !reg_error;
  assign reserved_1_c78_wd = reg_wdata[31:0];

  assign channel_status_c78_channel_free_we = addr_hit[781] & reg_we & !reg_error;
  assign channel_status_c78_channel_free_wd = reg_wdata[0];

  assign channel_status_c78_channel_error_we = addr_hit[781] & reg_we & !reg_error;
  assign channel_status_c78_channel_error_wd = reg_wdata[1];

  assign channel_status_c78_field1_we = addr_hit[781] & reg_we & !reg_error;
  assign channel_status_c78_field1_wd = reg_wdata[31:2];

  assign reserved_2_c78_we = addr_hit[782] & reg_we & !reg_error;
  assign reserved_2_c78_wd = reg_wdata[31:0];

  assign channel_flags_c78_intr_enable_we = addr_hit[784] & reg_we & !reg_error;
  assign channel_flags_c78_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c78_field1_we = addr_hit[784] & reg_we & !reg_error;
  assign channel_flags_c78_field1_wd = reg_wdata[31:1];

  assign length_c78_we = addr_hit[785] & reg_we & !reg_error;
  assign length_c78_wd = reg_wdata[31:0];

  assign message_header_c78_message_id_we = addr_hit[786] & reg_we & !reg_error;
  assign message_header_c78_message_id_wd = reg_wdata[7:0];

  assign message_header_c78_message_type_we = addr_hit[786] & reg_we & !reg_error;
  assign message_header_c78_message_type_wd = reg_wdata[9:8];

  assign message_header_c78_protocol_id_we = addr_hit[786] & reg_we & !reg_error;
  assign message_header_c78_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c78_token_we = addr_hit[786] & reg_we & !reg_error;
  assign message_header_c78_token_wd = reg_wdata[27:18];

  assign message_header_c78_field1_we = addr_hit[786] & reg_we & !reg_error;
  assign message_header_c78_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c78_we = addr_hit[787] & reg_we & !reg_error;
  assign message_payload_1_c78_wd = reg_wdata[31:0];

  assign doorbell_c78_intr_we = addr_hit[788] & reg_we & !reg_error;
  assign doorbell_c78_intr_wd = reg_wdata[0];

  assign doorbell_c78_preserve_mask_we = addr_hit[788] & reg_we & !reg_error;
  assign doorbell_c78_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c78_intr_we = addr_hit[789] & reg_we & !reg_error;
  assign completion_interrupt_c78_intr_wd = reg_wdata[0];

  assign completion_interrupt_c78_preserve_mask_we = addr_hit[789] & reg_we & !reg_error;
  assign completion_interrupt_c78_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c79_we = addr_hit[790] & reg_we & !reg_error;
  assign reserved_1_c79_wd = reg_wdata[31:0];

  assign channel_status_c79_channel_free_we = addr_hit[791] & reg_we & !reg_error;
  assign channel_status_c79_channel_free_wd = reg_wdata[0];

  assign channel_status_c79_channel_error_we = addr_hit[791] & reg_we & !reg_error;
  assign channel_status_c79_channel_error_wd = reg_wdata[1];

  assign channel_status_c79_field1_we = addr_hit[791] & reg_we & !reg_error;
  assign channel_status_c79_field1_wd = reg_wdata[31:2];

  assign reserved_2_c79_we = addr_hit[792] & reg_we & !reg_error;
  assign reserved_2_c79_wd = reg_wdata[31:0];

  assign channel_flags_c79_intr_enable_we = addr_hit[794] & reg_we & !reg_error;
  assign channel_flags_c79_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c79_field1_we = addr_hit[794] & reg_we & !reg_error;
  assign channel_flags_c79_field1_wd = reg_wdata[31:1];

  assign length_c79_we = addr_hit[795] & reg_we & !reg_error;
  assign length_c79_wd = reg_wdata[31:0];

  assign message_header_c79_message_id_we = addr_hit[796] & reg_we & !reg_error;
  assign message_header_c79_message_id_wd = reg_wdata[7:0];

  assign message_header_c79_message_type_we = addr_hit[796] & reg_we & !reg_error;
  assign message_header_c79_message_type_wd = reg_wdata[9:8];

  assign message_header_c79_protocol_id_we = addr_hit[796] & reg_we & !reg_error;
  assign message_header_c79_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c79_token_we = addr_hit[796] & reg_we & !reg_error;
  assign message_header_c79_token_wd = reg_wdata[27:18];

  assign message_header_c79_field1_we = addr_hit[796] & reg_we & !reg_error;
  assign message_header_c79_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c79_we = addr_hit[797] & reg_we & !reg_error;
  assign message_payload_1_c79_wd = reg_wdata[31:0];

  assign doorbell_c79_intr_we = addr_hit[798] & reg_we & !reg_error;
  assign doorbell_c79_intr_wd = reg_wdata[0];

  assign doorbell_c79_preserve_mask_we = addr_hit[798] & reg_we & !reg_error;
  assign doorbell_c79_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c79_intr_we = addr_hit[799] & reg_we & !reg_error;
  assign completion_interrupt_c79_intr_wd = reg_wdata[0];

  assign completion_interrupt_c79_preserve_mask_we = addr_hit[799] & reg_we & !reg_error;
  assign completion_interrupt_c79_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c80_we = addr_hit[800] & reg_we & !reg_error;
  assign reserved_1_c80_wd = reg_wdata[31:0];

  assign channel_status_c80_channel_free_we = addr_hit[801] & reg_we & !reg_error;
  assign channel_status_c80_channel_free_wd = reg_wdata[0];

  assign channel_status_c80_channel_error_we = addr_hit[801] & reg_we & !reg_error;
  assign channel_status_c80_channel_error_wd = reg_wdata[1];

  assign channel_status_c80_field1_we = addr_hit[801] & reg_we & !reg_error;
  assign channel_status_c80_field1_wd = reg_wdata[31:2];

  assign reserved_2_c80_we = addr_hit[802] & reg_we & !reg_error;
  assign reserved_2_c80_wd = reg_wdata[31:0];

  assign channel_flags_c80_intr_enable_we = addr_hit[804] & reg_we & !reg_error;
  assign channel_flags_c80_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c80_field1_we = addr_hit[804] & reg_we & !reg_error;
  assign channel_flags_c80_field1_wd = reg_wdata[31:1];

  assign length_c80_we = addr_hit[805] & reg_we & !reg_error;
  assign length_c80_wd = reg_wdata[31:0];

  assign message_header_c80_message_id_we = addr_hit[806] & reg_we & !reg_error;
  assign message_header_c80_message_id_wd = reg_wdata[7:0];

  assign message_header_c80_message_type_we = addr_hit[806] & reg_we & !reg_error;
  assign message_header_c80_message_type_wd = reg_wdata[9:8];

  assign message_header_c80_protocol_id_we = addr_hit[806] & reg_we & !reg_error;
  assign message_header_c80_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c80_token_we = addr_hit[806] & reg_we & !reg_error;
  assign message_header_c80_token_wd = reg_wdata[27:18];

  assign message_header_c80_field1_we = addr_hit[806] & reg_we & !reg_error;
  assign message_header_c80_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c80_we = addr_hit[807] & reg_we & !reg_error;
  assign message_payload_1_c80_wd = reg_wdata[31:0];

  assign doorbell_c80_intr_we = addr_hit[808] & reg_we & !reg_error;
  assign doorbell_c80_intr_wd = reg_wdata[0];

  assign doorbell_c80_preserve_mask_we = addr_hit[808] & reg_we & !reg_error;
  assign doorbell_c80_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c80_intr_we = addr_hit[809] & reg_we & !reg_error;
  assign completion_interrupt_c80_intr_wd = reg_wdata[0];

  assign completion_interrupt_c80_preserve_mask_we = addr_hit[809] & reg_we & !reg_error;
  assign completion_interrupt_c80_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c81_we = addr_hit[810] & reg_we & !reg_error;
  assign reserved_1_c81_wd = reg_wdata[31:0];

  assign channel_status_c81_channel_free_we = addr_hit[811] & reg_we & !reg_error;
  assign channel_status_c81_channel_free_wd = reg_wdata[0];

  assign channel_status_c81_channel_error_we = addr_hit[811] & reg_we & !reg_error;
  assign channel_status_c81_channel_error_wd = reg_wdata[1];

  assign channel_status_c81_field1_we = addr_hit[811] & reg_we & !reg_error;
  assign channel_status_c81_field1_wd = reg_wdata[31:2];

  assign reserved_2_c81_we = addr_hit[812] & reg_we & !reg_error;
  assign reserved_2_c81_wd = reg_wdata[31:0];

  assign channel_flags_c81_intr_enable_we = addr_hit[814] & reg_we & !reg_error;
  assign channel_flags_c81_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c81_field1_we = addr_hit[814] & reg_we & !reg_error;
  assign channel_flags_c81_field1_wd = reg_wdata[31:1];

  assign length_c81_we = addr_hit[815] & reg_we & !reg_error;
  assign length_c81_wd = reg_wdata[31:0];

  assign message_header_c81_message_id_we = addr_hit[816] & reg_we & !reg_error;
  assign message_header_c81_message_id_wd = reg_wdata[7:0];

  assign message_header_c81_message_type_we = addr_hit[816] & reg_we & !reg_error;
  assign message_header_c81_message_type_wd = reg_wdata[9:8];

  assign message_header_c81_protocol_id_we = addr_hit[816] & reg_we & !reg_error;
  assign message_header_c81_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c81_token_we = addr_hit[816] & reg_we & !reg_error;
  assign message_header_c81_token_wd = reg_wdata[27:18];

  assign message_header_c81_field1_we = addr_hit[816] & reg_we & !reg_error;
  assign message_header_c81_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c81_we = addr_hit[817] & reg_we & !reg_error;
  assign message_payload_1_c81_wd = reg_wdata[31:0];

  assign doorbell_c81_intr_we = addr_hit[818] & reg_we & !reg_error;
  assign doorbell_c81_intr_wd = reg_wdata[0];

  assign doorbell_c81_preserve_mask_we = addr_hit[818] & reg_we & !reg_error;
  assign doorbell_c81_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c81_intr_we = addr_hit[819] & reg_we & !reg_error;
  assign completion_interrupt_c81_intr_wd = reg_wdata[0];

  assign completion_interrupt_c81_preserve_mask_we = addr_hit[819] & reg_we & !reg_error;
  assign completion_interrupt_c81_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c82_we = addr_hit[820] & reg_we & !reg_error;
  assign reserved_1_c82_wd = reg_wdata[31:0];

  assign channel_status_c82_channel_free_we = addr_hit[821] & reg_we & !reg_error;
  assign channel_status_c82_channel_free_wd = reg_wdata[0];

  assign channel_status_c82_channel_error_we = addr_hit[821] & reg_we & !reg_error;
  assign channel_status_c82_channel_error_wd = reg_wdata[1];

  assign channel_status_c82_field1_we = addr_hit[821] & reg_we & !reg_error;
  assign channel_status_c82_field1_wd = reg_wdata[31:2];

  assign reserved_2_c82_we = addr_hit[822] & reg_we & !reg_error;
  assign reserved_2_c82_wd = reg_wdata[31:0];

  assign channel_flags_c82_intr_enable_we = addr_hit[824] & reg_we & !reg_error;
  assign channel_flags_c82_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c82_field1_we = addr_hit[824] & reg_we & !reg_error;
  assign channel_flags_c82_field1_wd = reg_wdata[31:1];

  assign length_c82_we = addr_hit[825] & reg_we & !reg_error;
  assign length_c82_wd = reg_wdata[31:0];

  assign message_header_c82_message_id_we = addr_hit[826] & reg_we & !reg_error;
  assign message_header_c82_message_id_wd = reg_wdata[7:0];

  assign message_header_c82_message_type_we = addr_hit[826] & reg_we & !reg_error;
  assign message_header_c82_message_type_wd = reg_wdata[9:8];

  assign message_header_c82_protocol_id_we = addr_hit[826] & reg_we & !reg_error;
  assign message_header_c82_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c82_token_we = addr_hit[826] & reg_we & !reg_error;
  assign message_header_c82_token_wd = reg_wdata[27:18];

  assign message_header_c82_field1_we = addr_hit[826] & reg_we & !reg_error;
  assign message_header_c82_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c82_we = addr_hit[827] & reg_we & !reg_error;
  assign message_payload_1_c82_wd = reg_wdata[31:0];

  assign doorbell_c82_intr_we = addr_hit[828] & reg_we & !reg_error;
  assign doorbell_c82_intr_wd = reg_wdata[0];

  assign doorbell_c82_preserve_mask_we = addr_hit[828] & reg_we & !reg_error;
  assign doorbell_c82_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c82_intr_we = addr_hit[829] & reg_we & !reg_error;
  assign completion_interrupt_c82_intr_wd = reg_wdata[0];

  assign completion_interrupt_c82_preserve_mask_we = addr_hit[829] & reg_we & !reg_error;
  assign completion_interrupt_c82_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c83_we = addr_hit[830] & reg_we & !reg_error;
  assign reserved_1_c83_wd = reg_wdata[31:0];

  assign channel_status_c83_channel_free_we = addr_hit[831] & reg_we & !reg_error;
  assign channel_status_c83_channel_free_wd = reg_wdata[0];

  assign channel_status_c83_channel_error_we = addr_hit[831] & reg_we & !reg_error;
  assign channel_status_c83_channel_error_wd = reg_wdata[1];

  assign channel_status_c83_field1_we = addr_hit[831] & reg_we & !reg_error;
  assign channel_status_c83_field1_wd = reg_wdata[31:2];

  assign reserved_2_c83_we = addr_hit[832] & reg_we & !reg_error;
  assign reserved_2_c83_wd = reg_wdata[31:0];

  assign channel_flags_c83_intr_enable_we = addr_hit[834] & reg_we & !reg_error;
  assign channel_flags_c83_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c83_field1_we = addr_hit[834] & reg_we & !reg_error;
  assign channel_flags_c83_field1_wd = reg_wdata[31:1];

  assign length_c83_we = addr_hit[835] & reg_we & !reg_error;
  assign length_c83_wd = reg_wdata[31:0];

  assign message_header_c83_message_id_we = addr_hit[836] & reg_we & !reg_error;
  assign message_header_c83_message_id_wd = reg_wdata[7:0];

  assign message_header_c83_message_type_we = addr_hit[836] & reg_we & !reg_error;
  assign message_header_c83_message_type_wd = reg_wdata[9:8];

  assign message_header_c83_protocol_id_we = addr_hit[836] & reg_we & !reg_error;
  assign message_header_c83_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c83_token_we = addr_hit[836] & reg_we & !reg_error;
  assign message_header_c83_token_wd = reg_wdata[27:18];

  assign message_header_c83_field1_we = addr_hit[836] & reg_we & !reg_error;
  assign message_header_c83_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c83_we = addr_hit[837] & reg_we & !reg_error;
  assign message_payload_1_c83_wd = reg_wdata[31:0];

  assign doorbell_c83_intr_we = addr_hit[838] & reg_we & !reg_error;
  assign doorbell_c83_intr_wd = reg_wdata[0];

  assign doorbell_c83_preserve_mask_we = addr_hit[838] & reg_we & !reg_error;
  assign doorbell_c83_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c83_intr_we = addr_hit[839] & reg_we & !reg_error;
  assign completion_interrupt_c83_intr_wd = reg_wdata[0];

  assign completion_interrupt_c83_preserve_mask_we = addr_hit[839] & reg_we & !reg_error;
  assign completion_interrupt_c83_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c84_we = addr_hit[840] & reg_we & !reg_error;
  assign reserved_1_c84_wd = reg_wdata[31:0];

  assign channel_status_c84_channel_free_we = addr_hit[841] & reg_we & !reg_error;
  assign channel_status_c84_channel_free_wd = reg_wdata[0];

  assign channel_status_c84_channel_error_we = addr_hit[841] & reg_we & !reg_error;
  assign channel_status_c84_channel_error_wd = reg_wdata[1];

  assign channel_status_c84_field1_we = addr_hit[841] & reg_we & !reg_error;
  assign channel_status_c84_field1_wd = reg_wdata[31:2];

  assign reserved_2_c84_we = addr_hit[842] & reg_we & !reg_error;
  assign reserved_2_c84_wd = reg_wdata[31:0];

  assign channel_flags_c84_intr_enable_we = addr_hit[844] & reg_we & !reg_error;
  assign channel_flags_c84_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c84_field1_we = addr_hit[844] & reg_we & !reg_error;
  assign channel_flags_c84_field1_wd = reg_wdata[31:1];

  assign length_c84_we = addr_hit[845] & reg_we & !reg_error;
  assign length_c84_wd = reg_wdata[31:0];

  assign message_header_c84_message_id_we = addr_hit[846] & reg_we & !reg_error;
  assign message_header_c84_message_id_wd = reg_wdata[7:0];

  assign message_header_c84_message_type_we = addr_hit[846] & reg_we & !reg_error;
  assign message_header_c84_message_type_wd = reg_wdata[9:8];

  assign message_header_c84_protocol_id_we = addr_hit[846] & reg_we & !reg_error;
  assign message_header_c84_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c84_token_we = addr_hit[846] & reg_we & !reg_error;
  assign message_header_c84_token_wd = reg_wdata[27:18];

  assign message_header_c84_field1_we = addr_hit[846] & reg_we & !reg_error;
  assign message_header_c84_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c84_we = addr_hit[847] & reg_we & !reg_error;
  assign message_payload_1_c84_wd = reg_wdata[31:0];

  assign doorbell_c84_intr_we = addr_hit[848] & reg_we & !reg_error;
  assign doorbell_c84_intr_wd = reg_wdata[0];

  assign doorbell_c84_preserve_mask_we = addr_hit[848] & reg_we & !reg_error;
  assign doorbell_c84_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c84_intr_we = addr_hit[849] & reg_we & !reg_error;
  assign completion_interrupt_c84_intr_wd = reg_wdata[0];

  assign completion_interrupt_c84_preserve_mask_we = addr_hit[849] & reg_we & !reg_error;
  assign completion_interrupt_c84_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c85_we = addr_hit[850] & reg_we & !reg_error;
  assign reserved_1_c85_wd = reg_wdata[31:0];

  assign channel_status_c85_channel_free_we = addr_hit[851] & reg_we & !reg_error;
  assign channel_status_c85_channel_free_wd = reg_wdata[0];

  assign channel_status_c85_channel_error_we = addr_hit[851] & reg_we & !reg_error;
  assign channel_status_c85_channel_error_wd = reg_wdata[1];

  assign channel_status_c85_field1_we = addr_hit[851] & reg_we & !reg_error;
  assign channel_status_c85_field1_wd = reg_wdata[31:2];

  assign reserved_2_c85_we = addr_hit[852] & reg_we & !reg_error;
  assign reserved_2_c85_wd = reg_wdata[31:0];

  assign channel_flags_c85_intr_enable_we = addr_hit[854] & reg_we & !reg_error;
  assign channel_flags_c85_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c85_field1_we = addr_hit[854] & reg_we & !reg_error;
  assign channel_flags_c85_field1_wd = reg_wdata[31:1];

  assign length_c85_we = addr_hit[855] & reg_we & !reg_error;
  assign length_c85_wd = reg_wdata[31:0];

  assign message_header_c85_message_id_we = addr_hit[856] & reg_we & !reg_error;
  assign message_header_c85_message_id_wd = reg_wdata[7:0];

  assign message_header_c85_message_type_we = addr_hit[856] & reg_we & !reg_error;
  assign message_header_c85_message_type_wd = reg_wdata[9:8];

  assign message_header_c85_protocol_id_we = addr_hit[856] & reg_we & !reg_error;
  assign message_header_c85_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c85_token_we = addr_hit[856] & reg_we & !reg_error;
  assign message_header_c85_token_wd = reg_wdata[27:18];

  assign message_header_c85_field1_we = addr_hit[856] & reg_we & !reg_error;
  assign message_header_c85_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c85_we = addr_hit[857] & reg_we & !reg_error;
  assign message_payload_1_c85_wd = reg_wdata[31:0];

  assign doorbell_c85_intr_we = addr_hit[858] & reg_we & !reg_error;
  assign doorbell_c85_intr_wd = reg_wdata[0];

  assign doorbell_c85_preserve_mask_we = addr_hit[858] & reg_we & !reg_error;
  assign doorbell_c85_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c85_intr_we = addr_hit[859] & reg_we & !reg_error;
  assign completion_interrupt_c85_intr_wd = reg_wdata[0];

  assign completion_interrupt_c85_preserve_mask_we = addr_hit[859] & reg_we & !reg_error;
  assign completion_interrupt_c85_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c86_we = addr_hit[860] & reg_we & !reg_error;
  assign reserved_1_c86_wd = reg_wdata[31:0];

  assign channel_status_c86_channel_free_we = addr_hit[861] & reg_we & !reg_error;
  assign channel_status_c86_channel_free_wd = reg_wdata[0];

  assign channel_status_c86_channel_error_we = addr_hit[861] & reg_we & !reg_error;
  assign channel_status_c86_channel_error_wd = reg_wdata[1];

  assign channel_status_c86_field1_we = addr_hit[861] & reg_we & !reg_error;
  assign channel_status_c86_field1_wd = reg_wdata[31:2];

  assign reserved_2_c86_we = addr_hit[862] & reg_we & !reg_error;
  assign reserved_2_c86_wd = reg_wdata[31:0];

  assign channel_flags_c86_intr_enable_we = addr_hit[864] & reg_we & !reg_error;
  assign channel_flags_c86_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c86_field1_we = addr_hit[864] & reg_we & !reg_error;
  assign channel_flags_c86_field1_wd = reg_wdata[31:1];

  assign length_c86_we = addr_hit[865] & reg_we & !reg_error;
  assign length_c86_wd = reg_wdata[31:0];

  assign message_header_c86_message_id_we = addr_hit[866] & reg_we & !reg_error;
  assign message_header_c86_message_id_wd = reg_wdata[7:0];

  assign message_header_c86_message_type_we = addr_hit[866] & reg_we & !reg_error;
  assign message_header_c86_message_type_wd = reg_wdata[9:8];

  assign message_header_c86_protocol_id_we = addr_hit[866] & reg_we & !reg_error;
  assign message_header_c86_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c86_token_we = addr_hit[866] & reg_we & !reg_error;
  assign message_header_c86_token_wd = reg_wdata[27:18];

  assign message_header_c86_field1_we = addr_hit[866] & reg_we & !reg_error;
  assign message_header_c86_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c86_we = addr_hit[867] & reg_we & !reg_error;
  assign message_payload_1_c86_wd = reg_wdata[31:0];

  assign doorbell_c86_intr_we = addr_hit[868] & reg_we & !reg_error;
  assign doorbell_c86_intr_wd = reg_wdata[0];

  assign doorbell_c86_preserve_mask_we = addr_hit[868] & reg_we & !reg_error;
  assign doorbell_c86_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c86_intr_we = addr_hit[869] & reg_we & !reg_error;
  assign completion_interrupt_c86_intr_wd = reg_wdata[0];

  assign completion_interrupt_c86_preserve_mask_we = addr_hit[869] & reg_we & !reg_error;
  assign completion_interrupt_c86_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c87_we = addr_hit[870] & reg_we & !reg_error;
  assign reserved_1_c87_wd = reg_wdata[31:0];

  assign channel_status_c87_channel_free_we = addr_hit[871] & reg_we & !reg_error;
  assign channel_status_c87_channel_free_wd = reg_wdata[0];

  assign channel_status_c87_channel_error_we = addr_hit[871] & reg_we & !reg_error;
  assign channel_status_c87_channel_error_wd = reg_wdata[1];

  assign channel_status_c87_field1_we = addr_hit[871] & reg_we & !reg_error;
  assign channel_status_c87_field1_wd = reg_wdata[31:2];

  assign reserved_2_c87_we = addr_hit[872] & reg_we & !reg_error;
  assign reserved_2_c87_wd = reg_wdata[31:0];

  assign channel_flags_c87_intr_enable_we = addr_hit[874] & reg_we & !reg_error;
  assign channel_flags_c87_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c87_field1_we = addr_hit[874] & reg_we & !reg_error;
  assign channel_flags_c87_field1_wd = reg_wdata[31:1];

  assign length_c87_we = addr_hit[875] & reg_we & !reg_error;
  assign length_c87_wd = reg_wdata[31:0];

  assign message_header_c87_message_id_we = addr_hit[876] & reg_we & !reg_error;
  assign message_header_c87_message_id_wd = reg_wdata[7:0];

  assign message_header_c87_message_type_we = addr_hit[876] & reg_we & !reg_error;
  assign message_header_c87_message_type_wd = reg_wdata[9:8];

  assign message_header_c87_protocol_id_we = addr_hit[876] & reg_we & !reg_error;
  assign message_header_c87_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c87_token_we = addr_hit[876] & reg_we & !reg_error;
  assign message_header_c87_token_wd = reg_wdata[27:18];

  assign message_header_c87_field1_we = addr_hit[876] & reg_we & !reg_error;
  assign message_header_c87_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c87_we = addr_hit[877] & reg_we & !reg_error;
  assign message_payload_1_c87_wd = reg_wdata[31:0];

  assign doorbell_c87_intr_we = addr_hit[878] & reg_we & !reg_error;
  assign doorbell_c87_intr_wd = reg_wdata[0];

  assign doorbell_c87_preserve_mask_we = addr_hit[878] & reg_we & !reg_error;
  assign doorbell_c87_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c87_intr_we = addr_hit[879] & reg_we & !reg_error;
  assign completion_interrupt_c87_intr_wd = reg_wdata[0];

  assign completion_interrupt_c87_preserve_mask_we = addr_hit[879] & reg_we & !reg_error;
  assign completion_interrupt_c87_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c88_we = addr_hit[880] & reg_we & !reg_error;
  assign reserved_1_c88_wd = reg_wdata[31:0];

  assign channel_status_c88_channel_free_we = addr_hit[881] & reg_we & !reg_error;
  assign channel_status_c88_channel_free_wd = reg_wdata[0];

  assign channel_status_c88_channel_error_we = addr_hit[881] & reg_we & !reg_error;
  assign channel_status_c88_channel_error_wd = reg_wdata[1];

  assign channel_status_c88_field1_we = addr_hit[881] & reg_we & !reg_error;
  assign channel_status_c88_field1_wd = reg_wdata[31:2];

  assign reserved_2_c88_we = addr_hit[882] & reg_we & !reg_error;
  assign reserved_2_c88_wd = reg_wdata[31:0];

  assign channel_flags_c88_intr_enable_we = addr_hit[884] & reg_we & !reg_error;
  assign channel_flags_c88_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c88_field1_we = addr_hit[884] & reg_we & !reg_error;
  assign channel_flags_c88_field1_wd = reg_wdata[31:1];

  assign length_c88_we = addr_hit[885] & reg_we & !reg_error;
  assign length_c88_wd = reg_wdata[31:0];

  assign message_header_c88_message_id_we = addr_hit[886] & reg_we & !reg_error;
  assign message_header_c88_message_id_wd = reg_wdata[7:0];

  assign message_header_c88_message_type_we = addr_hit[886] & reg_we & !reg_error;
  assign message_header_c88_message_type_wd = reg_wdata[9:8];

  assign message_header_c88_protocol_id_we = addr_hit[886] & reg_we & !reg_error;
  assign message_header_c88_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c88_token_we = addr_hit[886] & reg_we & !reg_error;
  assign message_header_c88_token_wd = reg_wdata[27:18];

  assign message_header_c88_field1_we = addr_hit[886] & reg_we & !reg_error;
  assign message_header_c88_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c88_we = addr_hit[887] & reg_we & !reg_error;
  assign message_payload_1_c88_wd = reg_wdata[31:0];

  assign doorbell_c88_intr_we = addr_hit[888] & reg_we & !reg_error;
  assign doorbell_c88_intr_wd = reg_wdata[0];

  assign doorbell_c88_preserve_mask_we = addr_hit[888] & reg_we & !reg_error;
  assign doorbell_c88_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c88_intr_we = addr_hit[889] & reg_we & !reg_error;
  assign completion_interrupt_c88_intr_wd = reg_wdata[0];

  assign completion_interrupt_c88_preserve_mask_we = addr_hit[889] & reg_we & !reg_error;
  assign completion_interrupt_c88_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c89_we = addr_hit[890] & reg_we & !reg_error;
  assign reserved_1_c89_wd = reg_wdata[31:0];

  assign channel_status_c89_channel_free_we = addr_hit[891] & reg_we & !reg_error;
  assign channel_status_c89_channel_free_wd = reg_wdata[0];

  assign channel_status_c89_channel_error_we = addr_hit[891] & reg_we & !reg_error;
  assign channel_status_c89_channel_error_wd = reg_wdata[1];

  assign channel_status_c89_field1_we = addr_hit[891] & reg_we & !reg_error;
  assign channel_status_c89_field1_wd = reg_wdata[31:2];

  assign reserved_2_c89_we = addr_hit[892] & reg_we & !reg_error;
  assign reserved_2_c89_wd = reg_wdata[31:0];

  assign channel_flags_c89_intr_enable_we = addr_hit[894] & reg_we & !reg_error;
  assign channel_flags_c89_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c89_field1_we = addr_hit[894] & reg_we & !reg_error;
  assign channel_flags_c89_field1_wd = reg_wdata[31:1];

  assign length_c89_we = addr_hit[895] & reg_we & !reg_error;
  assign length_c89_wd = reg_wdata[31:0];

  assign message_header_c89_message_id_we = addr_hit[896] & reg_we & !reg_error;
  assign message_header_c89_message_id_wd = reg_wdata[7:0];

  assign message_header_c89_message_type_we = addr_hit[896] & reg_we & !reg_error;
  assign message_header_c89_message_type_wd = reg_wdata[9:8];

  assign message_header_c89_protocol_id_we = addr_hit[896] & reg_we & !reg_error;
  assign message_header_c89_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c89_token_we = addr_hit[896] & reg_we & !reg_error;
  assign message_header_c89_token_wd = reg_wdata[27:18];

  assign message_header_c89_field1_we = addr_hit[896] & reg_we & !reg_error;
  assign message_header_c89_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c89_we = addr_hit[897] & reg_we & !reg_error;
  assign message_payload_1_c89_wd = reg_wdata[31:0];

  assign doorbell_c89_intr_we = addr_hit[898] & reg_we & !reg_error;
  assign doorbell_c89_intr_wd = reg_wdata[0];

  assign doorbell_c89_preserve_mask_we = addr_hit[898] & reg_we & !reg_error;
  assign doorbell_c89_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c89_intr_we = addr_hit[899] & reg_we & !reg_error;
  assign completion_interrupt_c89_intr_wd = reg_wdata[0];

  assign completion_interrupt_c89_preserve_mask_we = addr_hit[899] & reg_we & !reg_error;
  assign completion_interrupt_c89_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c90_we = addr_hit[900] & reg_we & !reg_error;
  assign reserved_1_c90_wd = reg_wdata[31:0];

  assign channel_status_c90_channel_free_we = addr_hit[901] & reg_we & !reg_error;
  assign channel_status_c90_channel_free_wd = reg_wdata[0];

  assign channel_status_c90_channel_error_we = addr_hit[901] & reg_we & !reg_error;
  assign channel_status_c90_channel_error_wd = reg_wdata[1];

  assign channel_status_c90_field1_we = addr_hit[901] & reg_we & !reg_error;
  assign channel_status_c90_field1_wd = reg_wdata[31:2];

  assign reserved_2_c90_we = addr_hit[902] & reg_we & !reg_error;
  assign reserved_2_c90_wd = reg_wdata[31:0];

  assign channel_flags_c90_intr_enable_we = addr_hit[904] & reg_we & !reg_error;
  assign channel_flags_c90_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c90_field1_we = addr_hit[904] & reg_we & !reg_error;
  assign channel_flags_c90_field1_wd = reg_wdata[31:1];

  assign length_c90_we = addr_hit[905] & reg_we & !reg_error;
  assign length_c90_wd = reg_wdata[31:0];

  assign message_header_c90_message_id_we = addr_hit[906] & reg_we & !reg_error;
  assign message_header_c90_message_id_wd = reg_wdata[7:0];

  assign message_header_c90_message_type_we = addr_hit[906] & reg_we & !reg_error;
  assign message_header_c90_message_type_wd = reg_wdata[9:8];

  assign message_header_c90_protocol_id_we = addr_hit[906] & reg_we & !reg_error;
  assign message_header_c90_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c90_token_we = addr_hit[906] & reg_we & !reg_error;
  assign message_header_c90_token_wd = reg_wdata[27:18];

  assign message_header_c90_field1_we = addr_hit[906] & reg_we & !reg_error;
  assign message_header_c90_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c90_we = addr_hit[907] & reg_we & !reg_error;
  assign message_payload_1_c90_wd = reg_wdata[31:0];

  assign doorbell_c90_intr_we = addr_hit[908] & reg_we & !reg_error;
  assign doorbell_c90_intr_wd = reg_wdata[0];

  assign doorbell_c90_preserve_mask_we = addr_hit[908] & reg_we & !reg_error;
  assign doorbell_c90_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c90_intr_we = addr_hit[909] & reg_we & !reg_error;
  assign completion_interrupt_c90_intr_wd = reg_wdata[0];

  assign completion_interrupt_c90_preserve_mask_we = addr_hit[909] & reg_we & !reg_error;
  assign completion_interrupt_c90_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c91_we = addr_hit[910] & reg_we & !reg_error;
  assign reserved_1_c91_wd = reg_wdata[31:0];

  assign channel_status_c91_channel_free_we = addr_hit[911] & reg_we & !reg_error;
  assign channel_status_c91_channel_free_wd = reg_wdata[0];

  assign channel_status_c91_channel_error_we = addr_hit[911] & reg_we & !reg_error;
  assign channel_status_c91_channel_error_wd = reg_wdata[1];

  assign channel_status_c91_field1_we = addr_hit[911] & reg_we & !reg_error;
  assign channel_status_c91_field1_wd = reg_wdata[31:2];

  assign reserved_2_c91_we = addr_hit[912] & reg_we & !reg_error;
  assign reserved_2_c91_wd = reg_wdata[31:0];

  assign channel_flags_c91_intr_enable_we = addr_hit[914] & reg_we & !reg_error;
  assign channel_flags_c91_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c91_field1_we = addr_hit[914] & reg_we & !reg_error;
  assign channel_flags_c91_field1_wd = reg_wdata[31:1];

  assign length_c91_we = addr_hit[915] & reg_we & !reg_error;
  assign length_c91_wd = reg_wdata[31:0];

  assign message_header_c91_message_id_we = addr_hit[916] & reg_we & !reg_error;
  assign message_header_c91_message_id_wd = reg_wdata[7:0];

  assign message_header_c91_message_type_we = addr_hit[916] & reg_we & !reg_error;
  assign message_header_c91_message_type_wd = reg_wdata[9:8];

  assign message_header_c91_protocol_id_we = addr_hit[916] & reg_we & !reg_error;
  assign message_header_c91_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c91_token_we = addr_hit[916] & reg_we & !reg_error;
  assign message_header_c91_token_wd = reg_wdata[27:18];

  assign message_header_c91_field1_we = addr_hit[916] & reg_we & !reg_error;
  assign message_header_c91_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c91_we = addr_hit[917] & reg_we & !reg_error;
  assign message_payload_1_c91_wd = reg_wdata[31:0];

  assign doorbell_c91_intr_we = addr_hit[918] & reg_we & !reg_error;
  assign doorbell_c91_intr_wd = reg_wdata[0];

  assign doorbell_c91_preserve_mask_we = addr_hit[918] & reg_we & !reg_error;
  assign doorbell_c91_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c91_intr_we = addr_hit[919] & reg_we & !reg_error;
  assign completion_interrupt_c91_intr_wd = reg_wdata[0];

  assign completion_interrupt_c91_preserve_mask_we = addr_hit[919] & reg_we & !reg_error;
  assign completion_interrupt_c91_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c92_we = addr_hit[920] & reg_we & !reg_error;
  assign reserved_1_c92_wd = reg_wdata[31:0];

  assign channel_status_c92_channel_free_we = addr_hit[921] & reg_we & !reg_error;
  assign channel_status_c92_channel_free_wd = reg_wdata[0];

  assign channel_status_c92_channel_error_we = addr_hit[921] & reg_we & !reg_error;
  assign channel_status_c92_channel_error_wd = reg_wdata[1];

  assign channel_status_c92_field1_we = addr_hit[921] & reg_we & !reg_error;
  assign channel_status_c92_field1_wd = reg_wdata[31:2];

  assign reserved_2_c92_we = addr_hit[922] & reg_we & !reg_error;
  assign reserved_2_c92_wd = reg_wdata[31:0];

  assign channel_flags_c92_intr_enable_we = addr_hit[924] & reg_we & !reg_error;
  assign channel_flags_c92_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c92_field1_we = addr_hit[924] & reg_we & !reg_error;
  assign channel_flags_c92_field1_wd = reg_wdata[31:1];

  assign length_c92_we = addr_hit[925] & reg_we & !reg_error;
  assign length_c92_wd = reg_wdata[31:0];

  assign message_header_c92_message_id_we = addr_hit[926] & reg_we & !reg_error;
  assign message_header_c92_message_id_wd = reg_wdata[7:0];

  assign message_header_c92_message_type_we = addr_hit[926] & reg_we & !reg_error;
  assign message_header_c92_message_type_wd = reg_wdata[9:8];

  assign message_header_c92_protocol_id_we = addr_hit[926] & reg_we & !reg_error;
  assign message_header_c92_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c92_token_we = addr_hit[926] & reg_we & !reg_error;
  assign message_header_c92_token_wd = reg_wdata[27:18];

  assign message_header_c92_field1_we = addr_hit[926] & reg_we & !reg_error;
  assign message_header_c92_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c92_we = addr_hit[927] & reg_we & !reg_error;
  assign message_payload_1_c92_wd = reg_wdata[31:0];

  assign doorbell_c92_intr_we = addr_hit[928] & reg_we & !reg_error;
  assign doorbell_c92_intr_wd = reg_wdata[0];

  assign doorbell_c92_preserve_mask_we = addr_hit[928] & reg_we & !reg_error;
  assign doorbell_c92_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c92_intr_we = addr_hit[929] & reg_we & !reg_error;
  assign completion_interrupt_c92_intr_wd = reg_wdata[0];

  assign completion_interrupt_c92_preserve_mask_we = addr_hit[929] & reg_we & !reg_error;
  assign completion_interrupt_c92_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c93_we = addr_hit[930] & reg_we & !reg_error;
  assign reserved_1_c93_wd = reg_wdata[31:0];

  assign channel_status_c93_channel_free_we = addr_hit[931] & reg_we & !reg_error;
  assign channel_status_c93_channel_free_wd = reg_wdata[0];

  assign channel_status_c93_channel_error_we = addr_hit[931] & reg_we & !reg_error;
  assign channel_status_c93_channel_error_wd = reg_wdata[1];

  assign channel_status_c93_field1_we = addr_hit[931] & reg_we & !reg_error;
  assign channel_status_c93_field1_wd = reg_wdata[31:2];

  assign reserved_2_c93_we = addr_hit[932] & reg_we & !reg_error;
  assign reserved_2_c93_wd = reg_wdata[31:0];

  assign channel_flags_c93_intr_enable_we = addr_hit[934] & reg_we & !reg_error;
  assign channel_flags_c93_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c93_field1_we = addr_hit[934] & reg_we & !reg_error;
  assign channel_flags_c93_field1_wd = reg_wdata[31:1];

  assign length_c93_we = addr_hit[935] & reg_we & !reg_error;
  assign length_c93_wd = reg_wdata[31:0];

  assign message_header_c93_message_id_we = addr_hit[936] & reg_we & !reg_error;
  assign message_header_c93_message_id_wd = reg_wdata[7:0];

  assign message_header_c93_message_type_we = addr_hit[936] & reg_we & !reg_error;
  assign message_header_c93_message_type_wd = reg_wdata[9:8];

  assign message_header_c93_protocol_id_we = addr_hit[936] & reg_we & !reg_error;
  assign message_header_c93_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c93_token_we = addr_hit[936] & reg_we & !reg_error;
  assign message_header_c93_token_wd = reg_wdata[27:18];

  assign message_header_c93_field1_we = addr_hit[936] & reg_we & !reg_error;
  assign message_header_c93_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c93_we = addr_hit[937] & reg_we & !reg_error;
  assign message_payload_1_c93_wd = reg_wdata[31:0];

  assign doorbell_c93_intr_we = addr_hit[938] & reg_we & !reg_error;
  assign doorbell_c93_intr_wd = reg_wdata[0];

  assign doorbell_c93_preserve_mask_we = addr_hit[938] & reg_we & !reg_error;
  assign doorbell_c93_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c93_intr_we = addr_hit[939] & reg_we & !reg_error;
  assign completion_interrupt_c93_intr_wd = reg_wdata[0];

  assign completion_interrupt_c93_preserve_mask_we = addr_hit[939] & reg_we & !reg_error;
  assign completion_interrupt_c93_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c94_we = addr_hit[940] & reg_we & !reg_error;
  assign reserved_1_c94_wd = reg_wdata[31:0];

  assign channel_status_c94_channel_free_we = addr_hit[941] & reg_we & !reg_error;
  assign channel_status_c94_channel_free_wd = reg_wdata[0];

  assign channel_status_c94_channel_error_we = addr_hit[941] & reg_we & !reg_error;
  assign channel_status_c94_channel_error_wd = reg_wdata[1];

  assign channel_status_c94_field1_we = addr_hit[941] & reg_we & !reg_error;
  assign channel_status_c94_field1_wd = reg_wdata[31:2];

  assign reserved_2_c94_we = addr_hit[942] & reg_we & !reg_error;
  assign reserved_2_c94_wd = reg_wdata[31:0];

  assign channel_flags_c94_intr_enable_we = addr_hit[944] & reg_we & !reg_error;
  assign channel_flags_c94_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c94_field1_we = addr_hit[944] & reg_we & !reg_error;
  assign channel_flags_c94_field1_wd = reg_wdata[31:1];

  assign length_c94_we = addr_hit[945] & reg_we & !reg_error;
  assign length_c94_wd = reg_wdata[31:0];

  assign message_header_c94_message_id_we = addr_hit[946] & reg_we & !reg_error;
  assign message_header_c94_message_id_wd = reg_wdata[7:0];

  assign message_header_c94_message_type_we = addr_hit[946] & reg_we & !reg_error;
  assign message_header_c94_message_type_wd = reg_wdata[9:8];

  assign message_header_c94_protocol_id_we = addr_hit[946] & reg_we & !reg_error;
  assign message_header_c94_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c94_token_we = addr_hit[946] & reg_we & !reg_error;
  assign message_header_c94_token_wd = reg_wdata[27:18];

  assign message_header_c94_field1_we = addr_hit[946] & reg_we & !reg_error;
  assign message_header_c94_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c94_we = addr_hit[947] & reg_we & !reg_error;
  assign message_payload_1_c94_wd = reg_wdata[31:0];

  assign doorbell_c94_intr_we = addr_hit[948] & reg_we & !reg_error;
  assign doorbell_c94_intr_wd = reg_wdata[0];

  assign doorbell_c94_preserve_mask_we = addr_hit[948] & reg_we & !reg_error;
  assign doorbell_c94_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c94_intr_we = addr_hit[949] & reg_we & !reg_error;
  assign completion_interrupt_c94_intr_wd = reg_wdata[0];

  assign completion_interrupt_c94_preserve_mask_we = addr_hit[949] & reg_we & !reg_error;
  assign completion_interrupt_c94_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c95_we = addr_hit[950] & reg_we & !reg_error;
  assign reserved_1_c95_wd = reg_wdata[31:0];

  assign channel_status_c95_channel_free_we = addr_hit[951] & reg_we & !reg_error;
  assign channel_status_c95_channel_free_wd = reg_wdata[0];

  assign channel_status_c95_channel_error_we = addr_hit[951] & reg_we & !reg_error;
  assign channel_status_c95_channel_error_wd = reg_wdata[1];

  assign channel_status_c95_field1_we = addr_hit[951] & reg_we & !reg_error;
  assign channel_status_c95_field1_wd = reg_wdata[31:2];

  assign reserved_2_c95_we = addr_hit[952] & reg_we & !reg_error;
  assign reserved_2_c95_wd = reg_wdata[31:0];

  assign channel_flags_c95_intr_enable_we = addr_hit[954] & reg_we & !reg_error;
  assign channel_flags_c95_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c95_field1_we = addr_hit[954] & reg_we & !reg_error;
  assign channel_flags_c95_field1_wd = reg_wdata[31:1];

  assign length_c95_we = addr_hit[955] & reg_we & !reg_error;
  assign length_c95_wd = reg_wdata[31:0];

  assign message_header_c95_message_id_we = addr_hit[956] & reg_we & !reg_error;
  assign message_header_c95_message_id_wd = reg_wdata[7:0];

  assign message_header_c95_message_type_we = addr_hit[956] & reg_we & !reg_error;
  assign message_header_c95_message_type_wd = reg_wdata[9:8];

  assign message_header_c95_protocol_id_we = addr_hit[956] & reg_we & !reg_error;
  assign message_header_c95_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c95_token_we = addr_hit[956] & reg_we & !reg_error;
  assign message_header_c95_token_wd = reg_wdata[27:18];

  assign message_header_c95_field1_we = addr_hit[956] & reg_we & !reg_error;
  assign message_header_c95_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c95_we = addr_hit[957] & reg_we & !reg_error;
  assign message_payload_1_c95_wd = reg_wdata[31:0];

  assign doorbell_c95_intr_we = addr_hit[958] & reg_we & !reg_error;
  assign doorbell_c95_intr_wd = reg_wdata[0];

  assign doorbell_c95_preserve_mask_we = addr_hit[958] & reg_we & !reg_error;
  assign doorbell_c95_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c95_intr_we = addr_hit[959] & reg_we & !reg_error;
  assign completion_interrupt_c95_intr_wd = reg_wdata[0];

  assign completion_interrupt_c95_preserve_mask_we = addr_hit[959] & reg_we & !reg_error;
  assign completion_interrupt_c95_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c96_we = addr_hit[960] & reg_we & !reg_error;
  assign reserved_1_c96_wd = reg_wdata[31:0];

  assign channel_status_c96_channel_free_we = addr_hit[961] & reg_we & !reg_error;
  assign channel_status_c96_channel_free_wd = reg_wdata[0];

  assign channel_status_c96_channel_error_we = addr_hit[961] & reg_we & !reg_error;
  assign channel_status_c96_channel_error_wd = reg_wdata[1];

  assign channel_status_c96_field1_we = addr_hit[961] & reg_we & !reg_error;
  assign channel_status_c96_field1_wd = reg_wdata[31:2];

  assign reserved_2_c96_we = addr_hit[962] & reg_we & !reg_error;
  assign reserved_2_c96_wd = reg_wdata[31:0];

  assign channel_flags_c96_intr_enable_we = addr_hit[964] & reg_we & !reg_error;
  assign channel_flags_c96_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c96_field1_we = addr_hit[964] & reg_we & !reg_error;
  assign channel_flags_c96_field1_wd = reg_wdata[31:1];

  assign length_c96_we = addr_hit[965] & reg_we & !reg_error;
  assign length_c96_wd = reg_wdata[31:0];

  assign message_header_c96_message_id_we = addr_hit[966] & reg_we & !reg_error;
  assign message_header_c96_message_id_wd = reg_wdata[7:0];

  assign message_header_c96_message_type_we = addr_hit[966] & reg_we & !reg_error;
  assign message_header_c96_message_type_wd = reg_wdata[9:8];

  assign message_header_c96_protocol_id_we = addr_hit[966] & reg_we & !reg_error;
  assign message_header_c96_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c96_token_we = addr_hit[966] & reg_we & !reg_error;
  assign message_header_c96_token_wd = reg_wdata[27:18];

  assign message_header_c96_field1_we = addr_hit[966] & reg_we & !reg_error;
  assign message_header_c96_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c96_we = addr_hit[967] & reg_we & !reg_error;
  assign message_payload_1_c96_wd = reg_wdata[31:0];

  assign doorbell_c96_intr_we = addr_hit[968] & reg_we & !reg_error;
  assign doorbell_c96_intr_wd = reg_wdata[0];

  assign doorbell_c96_preserve_mask_we = addr_hit[968] & reg_we & !reg_error;
  assign doorbell_c96_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c96_intr_we = addr_hit[969] & reg_we & !reg_error;
  assign completion_interrupt_c96_intr_wd = reg_wdata[0];

  assign completion_interrupt_c96_preserve_mask_we = addr_hit[969] & reg_we & !reg_error;
  assign completion_interrupt_c96_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c97_we = addr_hit[970] & reg_we & !reg_error;
  assign reserved_1_c97_wd = reg_wdata[31:0];

  assign channel_status_c97_channel_free_we = addr_hit[971] & reg_we & !reg_error;
  assign channel_status_c97_channel_free_wd = reg_wdata[0];

  assign channel_status_c97_channel_error_we = addr_hit[971] & reg_we & !reg_error;
  assign channel_status_c97_channel_error_wd = reg_wdata[1];

  assign channel_status_c97_field1_we = addr_hit[971] & reg_we & !reg_error;
  assign channel_status_c97_field1_wd = reg_wdata[31:2];

  assign reserved_2_c97_we = addr_hit[972] & reg_we & !reg_error;
  assign reserved_2_c97_wd = reg_wdata[31:0];

  assign channel_flags_c97_intr_enable_we = addr_hit[974] & reg_we & !reg_error;
  assign channel_flags_c97_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c97_field1_we = addr_hit[974] & reg_we & !reg_error;
  assign channel_flags_c97_field1_wd = reg_wdata[31:1];

  assign length_c97_we = addr_hit[975] & reg_we & !reg_error;
  assign length_c97_wd = reg_wdata[31:0];

  assign message_header_c97_message_id_we = addr_hit[976] & reg_we & !reg_error;
  assign message_header_c97_message_id_wd = reg_wdata[7:0];

  assign message_header_c97_message_type_we = addr_hit[976] & reg_we & !reg_error;
  assign message_header_c97_message_type_wd = reg_wdata[9:8];

  assign message_header_c97_protocol_id_we = addr_hit[976] & reg_we & !reg_error;
  assign message_header_c97_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c97_token_we = addr_hit[976] & reg_we & !reg_error;
  assign message_header_c97_token_wd = reg_wdata[27:18];

  assign message_header_c97_field1_we = addr_hit[976] & reg_we & !reg_error;
  assign message_header_c97_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c97_we = addr_hit[977] & reg_we & !reg_error;
  assign message_payload_1_c97_wd = reg_wdata[31:0];

  assign doorbell_c97_intr_we = addr_hit[978] & reg_we & !reg_error;
  assign doorbell_c97_intr_wd = reg_wdata[0];

  assign doorbell_c97_preserve_mask_we = addr_hit[978] & reg_we & !reg_error;
  assign doorbell_c97_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c97_intr_we = addr_hit[979] & reg_we & !reg_error;
  assign completion_interrupt_c97_intr_wd = reg_wdata[0];

  assign completion_interrupt_c97_preserve_mask_we = addr_hit[979] & reg_we & !reg_error;
  assign completion_interrupt_c97_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c98_we = addr_hit[980] & reg_we & !reg_error;
  assign reserved_1_c98_wd = reg_wdata[31:0];

  assign channel_status_c98_channel_free_we = addr_hit[981] & reg_we & !reg_error;
  assign channel_status_c98_channel_free_wd = reg_wdata[0];

  assign channel_status_c98_channel_error_we = addr_hit[981] & reg_we & !reg_error;
  assign channel_status_c98_channel_error_wd = reg_wdata[1];

  assign channel_status_c98_field1_we = addr_hit[981] & reg_we & !reg_error;
  assign channel_status_c98_field1_wd = reg_wdata[31:2];

  assign reserved_2_c98_we = addr_hit[982] & reg_we & !reg_error;
  assign reserved_2_c98_wd = reg_wdata[31:0];

  assign channel_flags_c98_intr_enable_we = addr_hit[984] & reg_we & !reg_error;
  assign channel_flags_c98_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c98_field1_we = addr_hit[984] & reg_we & !reg_error;
  assign channel_flags_c98_field1_wd = reg_wdata[31:1];

  assign length_c98_we = addr_hit[985] & reg_we & !reg_error;
  assign length_c98_wd = reg_wdata[31:0];

  assign message_header_c98_message_id_we = addr_hit[986] & reg_we & !reg_error;
  assign message_header_c98_message_id_wd = reg_wdata[7:0];

  assign message_header_c98_message_type_we = addr_hit[986] & reg_we & !reg_error;
  assign message_header_c98_message_type_wd = reg_wdata[9:8];

  assign message_header_c98_protocol_id_we = addr_hit[986] & reg_we & !reg_error;
  assign message_header_c98_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c98_token_we = addr_hit[986] & reg_we & !reg_error;
  assign message_header_c98_token_wd = reg_wdata[27:18];

  assign message_header_c98_field1_we = addr_hit[986] & reg_we & !reg_error;
  assign message_header_c98_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c98_we = addr_hit[987] & reg_we & !reg_error;
  assign message_payload_1_c98_wd = reg_wdata[31:0];

  assign doorbell_c98_intr_we = addr_hit[988] & reg_we & !reg_error;
  assign doorbell_c98_intr_wd = reg_wdata[0];

  assign doorbell_c98_preserve_mask_we = addr_hit[988] & reg_we & !reg_error;
  assign doorbell_c98_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c98_intr_we = addr_hit[989] & reg_we & !reg_error;
  assign completion_interrupt_c98_intr_wd = reg_wdata[0];

  assign completion_interrupt_c98_preserve_mask_we = addr_hit[989] & reg_we & !reg_error;
  assign completion_interrupt_c98_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c99_we = addr_hit[990] & reg_we & !reg_error;
  assign reserved_1_c99_wd = reg_wdata[31:0];

  assign channel_status_c99_channel_free_we = addr_hit[991] & reg_we & !reg_error;
  assign channel_status_c99_channel_free_wd = reg_wdata[0];

  assign channel_status_c99_channel_error_we = addr_hit[991] & reg_we & !reg_error;
  assign channel_status_c99_channel_error_wd = reg_wdata[1];

  assign channel_status_c99_field1_we = addr_hit[991] & reg_we & !reg_error;
  assign channel_status_c99_field1_wd = reg_wdata[31:2];

  assign reserved_2_c99_we = addr_hit[992] & reg_we & !reg_error;
  assign reserved_2_c99_wd = reg_wdata[31:0];

  assign channel_flags_c99_intr_enable_we = addr_hit[994] & reg_we & !reg_error;
  assign channel_flags_c99_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c99_field1_we = addr_hit[994] & reg_we & !reg_error;
  assign channel_flags_c99_field1_wd = reg_wdata[31:1];

  assign length_c99_we = addr_hit[995] & reg_we & !reg_error;
  assign length_c99_wd = reg_wdata[31:0];

  assign message_header_c99_message_id_we = addr_hit[996] & reg_we & !reg_error;
  assign message_header_c99_message_id_wd = reg_wdata[7:0];

  assign message_header_c99_message_type_we = addr_hit[996] & reg_we & !reg_error;
  assign message_header_c99_message_type_wd = reg_wdata[9:8];

  assign message_header_c99_protocol_id_we = addr_hit[996] & reg_we & !reg_error;
  assign message_header_c99_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c99_token_we = addr_hit[996] & reg_we & !reg_error;
  assign message_header_c99_token_wd = reg_wdata[27:18];

  assign message_header_c99_field1_we = addr_hit[996] & reg_we & !reg_error;
  assign message_header_c99_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c99_we = addr_hit[997] & reg_we & !reg_error;
  assign message_payload_1_c99_wd = reg_wdata[31:0];

  assign doorbell_c99_intr_we = addr_hit[998] & reg_we & !reg_error;
  assign doorbell_c99_intr_wd = reg_wdata[0];

  assign doorbell_c99_preserve_mask_we = addr_hit[998] & reg_we & !reg_error;
  assign doorbell_c99_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c99_intr_we = addr_hit[999] & reg_we & !reg_error;
  assign completion_interrupt_c99_intr_wd = reg_wdata[0];

  assign completion_interrupt_c99_preserve_mask_we = addr_hit[999] & reg_we & !reg_error;
  assign completion_interrupt_c99_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c100_we = addr_hit[1000] & reg_we & !reg_error;
  assign reserved_1_c100_wd = reg_wdata[31:0];

  assign channel_status_c100_channel_free_we = addr_hit[1001] & reg_we & !reg_error;
  assign channel_status_c100_channel_free_wd = reg_wdata[0];

  assign channel_status_c100_channel_error_we = addr_hit[1001] & reg_we & !reg_error;
  assign channel_status_c100_channel_error_wd = reg_wdata[1];

  assign channel_status_c100_field1_we = addr_hit[1001] & reg_we & !reg_error;
  assign channel_status_c100_field1_wd = reg_wdata[31:2];

  assign reserved_2_c100_we = addr_hit[1002] & reg_we & !reg_error;
  assign reserved_2_c100_wd = reg_wdata[31:0];

  assign channel_flags_c100_intr_enable_we = addr_hit[1004] & reg_we & !reg_error;
  assign channel_flags_c100_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c100_field1_we = addr_hit[1004] & reg_we & !reg_error;
  assign channel_flags_c100_field1_wd = reg_wdata[31:1];

  assign length_c100_we = addr_hit[1005] & reg_we & !reg_error;
  assign length_c100_wd = reg_wdata[31:0];

  assign message_header_c100_message_id_we = addr_hit[1006] & reg_we & !reg_error;
  assign message_header_c100_message_id_wd = reg_wdata[7:0];

  assign message_header_c100_message_type_we = addr_hit[1006] & reg_we & !reg_error;
  assign message_header_c100_message_type_wd = reg_wdata[9:8];

  assign message_header_c100_protocol_id_we = addr_hit[1006] & reg_we & !reg_error;
  assign message_header_c100_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c100_token_we = addr_hit[1006] & reg_we & !reg_error;
  assign message_header_c100_token_wd = reg_wdata[27:18];

  assign message_header_c100_field1_we = addr_hit[1006] & reg_we & !reg_error;
  assign message_header_c100_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c100_we = addr_hit[1007] & reg_we & !reg_error;
  assign message_payload_1_c100_wd = reg_wdata[31:0];

  assign doorbell_c100_intr_we = addr_hit[1008] & reg_we & !reg_error;
  assign doorbell_c100_intr_wd = reg_wdata[0];

  assign doorbell_c100_preserve_mask_we = addr_hit[1008] & reg_we & !reg_error;
  assign doorbell_c100_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c100_intr_we = addr_hit[1009] & reg_we & !reg_error;
  assign completion_interrupt_c100_intr_wd = reg_wdata[0];

  assign completion_interrupt_c100_preserve_mask_we = addr_hit[1009] & reg_we & !reg_error;
  assign completion_interrupt_c100_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c101_we = addr_hit[1010] & reg_we & !reg_error;
  assign reserved_1_c101_wd = reg_wdata[31:0];

  assign channel_status_c101_channel_free_we = addr_hit[1011] & reg_we & !reg_error;
  assign channel_status_c101_channel_free_wd = reg_wdata[0];

  assign channel_status_c101_channel_error_we = addr_hit[1011] & reg_we & !reg_error;
  assign channel_status_c101_channel_error_wd = reg_wdata[1];

  assign channel_status_c101_field1_we = addr_hit[1011] & reg_we & !reg_error;
  assign channel_status_c101_field1_wd = reg_wdata[31:2];

  assign reserved_2_c101_we = addr_hit[1012] & reg_we & !reg_error;
  assign reserved_2_c101_wd = reg_wdata[31:0];

  assign channel_flags_c101_intr_enable_we = addr_hit[1014] & reg_we & !reg_error;
  assign channel_flags_c101_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c101_field1_we = addr_hit[1014] & reg_we & !reg_error;
  assign channel_flags_c101_field1_wd = reg_wdata[31:1];

  assign length_c101_we = addr_hit[1015] & reg_we & !reg_error;
  assign length_c101_wd = reg_wdata[31:0];

  assign message_header_c101_message_id_we = addr_hit[1016] & reg_we & !reg_error;
  assign message_header_c101_message_id_wd = reg_wdata[7:0];

  assign message_header_c101_message_type_we = addr_hit[1016] & reg_we & !reg_error;
  assign message_header_c101_message_type_wd = reg_wdata[9:8];

  assign message_header_c101_protocol_id_we = addr_hit[1016] & reg_we & !reg_error;
  assign message_header_c101_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c101_token_we = addr_hit[1016] & reg_we & !reg_error;
  assign message_header_c101_token_wd = reg_wdata[27:18];

  assign message_header_c101_field1_we = addr_hit[1016] & reg_we & !reg_error;
  assign message_header_c101_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c101_we = addr_hit[1017] & reg_we & !reg_error;
  assign message_payload_1_c101_wd = reg_wdata[31:0];

  assign doorbell_c101_intr_we = addr_hit[1018] & reg_we & !reg_error;
  assign doorbell_c101_intr_wd = reg_wdata[0];

  assign doorbell_c101_preserve_mask_we = addr_hit[1018] & reg_we & !reg_error;
  assign doorbell_c101_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c101_intr_we = addr_hit[1019] & reg_we & !reg_error;
  assign completion_interrupt_c101_intr_wd = reg_wdata[0];

  assign completion_interrupt_c101_preserve_mask_we = addr_hit[1019] & reg_we & !reg_error;
  assign completion_interrupt_c101_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c102_we = addr_hit[1020] & reg_we & !reg_error;
  assign reserved_1_c102_wd = reg_wdata[31:0];

  assign channel_status_c102_channel_free_we = addr_hit[1021] & reg_we & !reg_error;
  assign channel_status_c102_channel_free_wd = reg_wdata[0];

  assign channel_status_c102_channel_error_we = addr_hit[1021] & reg_we & !reg_error;
  assign channel_status_c102_channel_error_wd = reg_wdata[1];

  assign channel_status_c102_field1_we = addr_hit[1021] & reg_we & !reg_error;
  assign channel_status_c102_field1_wd = reg_wdata[31:2];

  assign reserved_2_c102_we = addr_hit[1022] & reg_we & !reg_error;
  assign reserved_2_c102_wd = reg_wdata[31:0];

  assign channel_flags_c102_intr_enable_we = addr_hit[1024] & reg_we & !reg_error;
  assign channel_flags_c102_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c102_field1_we = addr_hit[1024] & reg_we & !reg_error;
  assign channel_flags_c102_field1_wd = reg_wdata[31:1];

  assign length_c102_we = addr_hit[1025] & reg_we & !reg_error;
  assign length_c102_wd = reg_wdata[31:0];

  assign message_header_c102_message_id_we = addr_hit[1026] & reg_we & !reg_error;
  assign message_header_c102_message_id_wd = reg_wdata[7:0];

  assign message_header_c102_message_type_we = addr_hit[1026] & reg_we & !reg_error;
  assign message_header_c102_message_type_wd = reg_wdata[9:8];

  assign message_header_c102_protocol_id_we = addr_hit[1026] & reg_we & !reg_error;
  assign message_header_c102_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c102_token_we = addr_hit[1026] & reg_we & !reg_error;
  assign message_header_c102_token_wd = reg_wdata[27:18];

  assign message_header_c102_field1_we = addr_hit[1026] & reg_we & !reg_error;
  assign message_header_c102_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c102_we = addr_hit[1027] & reg_we & !reg_error;
  assign message_payload_1_c102_wd = reg_wdata[31:0];

  assign doorbell_c102_intr_we = addr_hit[1028] & reg_we & !reg_error;
  assign doorbell_c102_intr_wd = reg_wdata[0];

  assign doorbell_c102_preserve_mask_we = addr_hit[1028] & reg_we & !reg_error;
  assign doorbell_c102_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c102_intr_we = addr_hit[1029] & reg_we & !reg_error;
  assign completion_interrupt_c102_intr_wd = reg_wdata[0];

  assign completion_interrupt_c102_preserve_mask_we = addr_hit[1029] & reg_we & !reg_error;
  assign completion_interrupt_c102_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c103_we = addr_hit[1030] & reg_we & !reg_error;
  assign reserved_1_c103_wd = reg_wdata[31:0];

  assign channel_status_c103_channel_free_we = addr_hit[1031] & reg_we & !reg_error;
  assign channel_status_c103_channel_free_wd = reg_wdata[0];

  assign channel_status_c103_channel_error_we = addr_hit[1031] & reg_we & !reg_error;
  assign channel_status_c103_channel_error_wd = reg_wdata[1];

  assign channel_status_c103_field1_we = addr_hit[1031] & reg_we & !reg_error;
  assign channel_status_c103_field1_wd = reg_wdata[31:2];

  assign reserved_2_c103_we = addr_hit[1032] & reg_we & !reg_error;
  assign reserved_2_c103_wd = reg_wdata[31:0];

  assign channel_flags_c103_intr_enable_we = addr_hit[1034] & reg_we & !reg_error;
  assign channel_flags_c103_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c103_field1_we = addr_hit[1034] & reg_we & !reg_error;
  assign channel_flags_c103_field1_wd = reg_wdata[31:1];

  assign length_c103_we = addr_hit[1035] & reg_we & !reg_error;
  assign length_c103_wd = reg_wdata[31:0];

  assign message_header_c103_message_id_we = addr_hit[1036] & reg_we & !reg_error;
  assign message_header_c103_message_id_wd = reg_wdata[7:0];

  assign message_header_c103_message_type_we = addr_hit[1036] & reg_we & !reg_error;
  assign message_header_c103_message_type_wd = reg_wdata[9:8];

  assign message_header_c103_protocol_id_we = addr_hit[1036] & reg_we & !reg_error;
  assign message_header_c103_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c103_token_we = addr_hit[1036] & reg_we & !reg_error;
  assign message_header_c103_token_wd = reg_wdata[27:18];

  assign message_header_c103_field1_we = addr_hit[1036] & reg_we & !reg_error;
  assign message_header_c103_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c103_we = addr_hit[1037] & reg_we & !reg_error;
  assign message_payload_1_c103_wd = reg_wdata[31:0];

  assign doorbell_c103_intr_we = addr_hit[1038] & reg_we & !reg_error;
  assign doorbell_c103_intr_wd = reg_wdata[0];

  assign doorbell_c103_preserve_mask_we = addr_hit[1038] & reg_we & !reg_error;
  assign doorbell_c103_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c103_intr_we = addr_hit[1039] & reg_we & !reg_error;
  assign completion_interrupt_c103_intr_wd = reg_wdata[0];

  assign completion_interrupt_c103_preserve_mask_we = addr_hit[1039] & reg_we & !reg_error;
  assign completion_interrupt_c103_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c104_we = addr_hit[1040] & reg_we & !reg_error;
  assign reserved_1_c104_wd = reg_wdata[31:0];

  assign channel_status_c104_channel_free_we = addr_hit[1041] & reg_we & !reg_error;
  assign channel_status_c104_channel_free_wd = reg_wdata[0];

  assign channel_status_c104_channel_error_we = addr_hit[1041] & reg_we & !reg_error;
  assign channel_status_c104_channel_error_wd = reg_wdata[1];

  assign channel_status_c104_field1_we = addr_hit[1041] & reg_we & !reg_error;
  assign channel_status_c104_field1_wd = reg_wdata[31:2];

  assign reserved_2_c104_we = addr_hit[1042] & reg_we & !reg_error;
  assign reserved_2_c104_wd = reg_wdata[31:0];

  assign channel_flags_c104_intr_enable_we = addr_hit[1044] & reg_we & !reg_error;
  assign channel_flags_c104_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c104_field1_we = addr_hit[1044] & reg_we & !reg_error;
  assign channel_flags_c104_field1_wd = reg_wdata[31:1];

  assign length_c104_we = addr_hit[1045] & reg_we & !reg_error;
  assign length_c104_wd = reg_wdata[31:0];

  assign message_header_c104_message_id_we = addr_hit[1046] & reg_we & !reg_error;
  assign message_header_c104_message_id_wd = reg_wdata[7:0];

  assign message_header_c104_message_type_we = addr_hit[1046] & reg_we & !reg_error;
  assign message_header_c104_message_type_wd = reg_wdata[9:8];

  assign message_header_c104_protocol_id_we = addr_hit[1046] & reg_we & !reg_error;
  assign message_header_c104_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c104_token_we = addr_hit[1046] & reg_we & !reg_error;
  assign message_header_c104_token_wd = reg_wdata[27:18];

  assign message_header_c104_field1_we = addr_hit[1046] & reg_we & !reg_error;
  assign message_header_c104_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c104_we = addr_hit[1047] & reg_we & !reg_error;
  assign message_payload_1_c104_wd = reg_wdata[31:0];

  assign doorbell_c104_intr_we = addr_hit[1048] & reg_we & !reg_error;
  assign doorbell_c104_intr_wd = reg_wdata[0];

  assign doorbell_c104_preserve_mask_we = addr_hit[1048] & reg_we & !reg_error;
  assign doorbell_c104_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c104_intr_we = addr_hit[1049] & reg_we & !reg_error;
  assign completion_interrupt_c104_intr_wd = reg_wdata[0];

  assign completion_interrupt_c104_preserve_mask_we = addr_hit[1049] & reg_we & !reg_error;
  assign completion_interrupt_c104_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c105_we = addr_hit[1050] & reg_we & !reg_error;
  assign reserved_1_c105_wd = reg_wdata[31:0];

  assign channel_status_c105_channel_free_we = addr_hit[1051] & reg_we & !reg_error;
  assign channel_status_c105_channel_free_wd = reg_wdata[0];

  assign channel_status_c105_channel_error_we = addr_hit[1051] & reg_we & !reg_error;
  assign channel_status_c105_channel_error_wd = reg_wdata[1];

  assign channel_status_c105_field1_we = addr_hit[1051] & reg_we & !reg_error;
  assign channel_status_c105_field1_wd = reg_wdata[31:2];

  assign reserved_2_c105_we = addr_hit[1052] & reg_we & !reg_error;
  assign reserved_2_c105_wd = reg_wdata[31:0];

  assign channel_flags_c105_intr_enable_we = addr_hit[1054] & reg_we & !reg_error;
  assign channel_flags_c105_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c105_field1_we = addr_hit[1054] & reg_we & !reg_error;
  assign channel_flags_c105_field1_wd = reg_wdata[31:1];

  assign length_c105_we = addr_hit[1055] & reg_we & !reg_error;
  assign length_c105_wd = reg_wdata[31:0];

  assign message_header_c105_message_id_we = addr_hit[1056] & reg_we & !reg_error;
  assign message_header_c105_message_id_wd = reg_wdata[7:0];

  assign message_header_c105_message_type_we = addr_hit[1056] & reg_we & !reg_error;
  assign message_header_c105_message_type_wd = reg_wdata[9:8];

  assign message_header_c105_protocol_id_we = addr_hit[1056] & reg_we & !reg_error;
  assign message_header_c105_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c105_token_we = addr_hit[1056] & reg_we & !reg_error;
  assign message_header_c105_token_wd = reg_wdata[27:18];

  assign message_header_c105_field1_we = addr_hit[1056] & reg_we & !reg_error;
  assign message_header_c105_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c105_we = addr_hit[1057] & reg_we & !reg_error;
  assign message_payload_1_c105_wd = reg_wdata[31:0];

  assign doorbell_c105_intr_we = addr_hit[1058] & reg_we & !reg_error;
  assign doorbell_c105_intr_wd = reg_wdata[0];

  assign doorbell_c105_preserve_mask_we = addr_hit[1058] & reg_we & !reg_error;
  assign doorbell_c105_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c105_intr_we = addr_hit[1059] & reg_we & !reg_error;
  assign completion_interrupt_c105_intr_wd = reg_wdata[0];

  assign completion_interrupt_c105_preserve_mask_we = addr_hit[1059] & reg_we & !reg_error;
  assign completion_interrupt_c105_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c106_we = addr_hit[1060] & reg_we & !reg_error;
  assign reserved_1_c106_wd = reg_wdata[31:0];

  assign channel_status_c106_channel_free_we = addr_hit[1061] & reg_we & !reg_error;
  assign channel_status_c106_channel_free_wd = reg_wdata[0];

  assign channel_status_c106_channel_error_we = addr_hit[1061] & reg_we & !reg_error;
  assign channel_status_c106_channel_error_wd = reg_wdata[1];

  assign channel_status_c106_field1_we = addr_hit[1061] & reg_we & !reg_error;
  assign channel_status_c106_field1_wd = reg_wdata[31:2];

  assign reserved_2_c106_we = addr_hit[1062] & reg_we & !reg_error;
  assign reserved_2_c106_wd = reg_wdata[31:0];

  assign channel_flags_c106_intr_enable_we = addr_hit[1064] & reg_we & !reg_error;
  assign channel_flags_c106_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c106_field1_we = addr_hit[1064] & reg_we & !reg_error;
  assign channel_flags_c106_field1_wd = reg_wdata[31:1];

  assign length_c106_we = addr_hit[1065] & reg_we & !reg_error;
  assign length_c106_wd = reg_wdata[31:0];

  assign message_header_c106_message_id_we = addr_hit[1066] & reg_we & !reg_error;
  assign message_header_c106_message_id_wd = reg_wdata[7:0];

  assign message_header_c106_message_type_we = addr_hit[1066] & reg_we & !reg_error;
  assign message_header_c106_message_type_wd = reg_wdata[9:8];

  assign message_header_c106_protocol_id_we = addr_hit[1066] & reg_we & !reg_error;
  assign message_header_c106_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c106_token_we = addr_hit[1066] & reg_we & !reg_error;
  assign message_header_c106_token_wd = reg_wdata[27:18];

  assign message_header_c106_field1_we = addr_hit[1066] & reg_we & !reg_error;
  assign message_header_c106_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c106_we = addr_hit[1067] & reg_we & !reg_error;
  assign message_payload_1_c106_wd = reg_wdata[31:0];

  assign doorbell_c106_intr_we = addr_hit[1068] & reg_we & !reg_error;
  assign doorbell_c106_intr_wd = reg_wdata[0];

  assign doorbell_c106_preserve_mask_we = addr_hit[1068] & reg_we & !reg_error;
  assign doorbell_c106_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c106_intr_we = addr_hit[1069] & reg_we & !reg_error;
  assign completion_interrupt_c106_intr_wd = reg_wdata[0];

  assign completion_interrupt_c106_preserve_mask_we = addr_hit[1069] & reg_we & !reg_error;
  assign completion_interrupt_c106_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c107_we = addr_hit[1070] & reg_we & !reg_error;
  assign reserved_1_c107_wd = reg_wdata[31:0];

  assign channel_status_c107_channel_free_we = addr_hit[1071] & reg_we & !reg_error;
  assign channel_status_c107_channel_free_wd = reg_wdata[0];

  assign channel_status_c107_channel_error_we = addr_hit[1071] & reg_we & !reg_error;
  assign channel_status_c107_channel_error_wd = reg_wdata[1];

  assign channel_status_c107_field1_we = addr_hit[1071] & reg_we & !reg_error;
  assign channel_status_c107_field1_wd = reg_wdata[31:2];

  assign reserved_2_c107_we = addr_hit[1072] & reg_we & !reg_error;
  assign reserved_2_c107_wd = reg_wdata[31:0];

  assign channel_flags_c107_intr_enable_we = addr_hit[1074] & reg_we & !reg_error;
  assign channel_flags_c107_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c107_field1_we = addr_hit[1074] & reg_we & !reg_error;
  assign channel_flags_c107_field1_wd = reg_wdata[31:1];

  assign length_c107_we = addr_hit[1075] & reg_we & !reg_error;
  assign length_c107_wd = reg_wdata[31:0];

  assign message_header_c107_message_id_we = addr_hit[1076] & reg_we & !reg_error;
  assign message_header_c107_message_id_wd = reg_wdata[7:0];

  assign message_header_c107_message_type_we = addr_hit[1076] & reg_we & !reg_error;
  assign message_header_c107_message_type_wd = reg_wdata[9:8];

  assign message_header_c107_protocol_id_we = addr_hit[1076] & reg_we & !reg_error;
  assign message_header_c107_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c107_token_we = addr_hit[1076] & reg_we & !reg_error;
  assign message_header_c107_token_wd = reg_wdata[27:18];

  assign message_header_c107_field1_we = addr_hit[1076] & reg_we & !reg_error;
  assign message_header_c107_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c107_we = addr_hit[1077] & reg_we & !reg_error;
  assign message_payload_1_c107_wd = reg_wdata[31:0];

  assign doorbell_c107_intr_we = addr_hit[1078] & reg_we & !reg_error;
  assign doorbell_c107_intr_wd = reg_wdata[0];

  assign doorbell_c107_preserve_mask_we = addr_hit[1078] & reg_we & !reg_error;
  assign doorbell_c107_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c107_intr_we = addr_hit[1079] & reg_we & !reg_error;
  assign completion_interrupt_c107_intr_wd = reg_wdata[0];

  assign completion_interrupt_c107_preserve_mask_we = addr_hit[1079] & reg_we & !reg_error;
  assign completion_interrupt_c107_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c108_we = addr_hit[1080] & reg_we & !reg_error;
  assign reserved_1_c108_wd = reg_wdata[31:0];

  assign channel_status_c108_channel_free_we = addr_hit[1081] & reg_we & !reg_error;
  assign channel_status_c108_channel_free_wd = reg_wdata[0];

  assign channel_status_c108_channel_error_we = addr_hit[1081] & reg_we & !reg_error;
  assign channel_status_c108_channel_error_wd = reg_wdata[1];

  assign channel_status_c108_field1_we = addr_hit[1081] & reg_we & !reg_error;
  assign channel_status_c108_field1_wd = reg_wdata[31:2];

  assign reserved_2_c108_we = addr_hit[1082] & reg_we & !reg_error;
  assign reserved_2_c108_wd = reg_wdata[31:0];

  assign channel_flags_c108_intr_enable_we = addr_hit[1084] & reg_we & !reg_error;
  assign channel_flags_c108_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c108_field1_we = addr_hit[1084] & reg_we & !reg_error;
  assign channel_flags_c108_field1_wd = reg_wdata[31:1];

  assign length_c108_we = addr_hit[1085] & reg_we & !reg_error;
  assign length_c108_wd = reg_wdata[31:0];

  assign message_header_c108_message_id_we = addr_hit[1086] & reg_we & !reg_error;
  assign message_header_c108_message_id_wd = reg_wdata[7:0];

  assign message_header_c108_message_type_we = addr_hit[1086] & reg_we & !reg_error;
  assign message_header_c108_message_type_wd = reg_wdata[9:8];

  assign message_header_c108_protocol_id_we = addr_hit[1086] & reg_we & !reg_error;
  assign message_header_c108_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c108_token_we = addr_hit[1086] & reg_we & !reg_error;
  assign message_header_c108_token_wd = reg_wdata[27:18];

  assign message_header_c108_field1_we = addr_hit[1086] & reg_we & !reg_error;
  assign message_header_c108_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c108_we = addr_hit[1087] & reg_we & !reg_error;
  assign message_payload_1_c108_wd = reg_wdata[31:0];

  assign doorbell_c108_intr_we = addr_hit[1088] & reg_we & !reg_error;
  assign doorbell_c108_intr_wd = reg_wdata[0];

  assign doorbell_c108_preserve_mask_we = addr_hit[1088] & reg_we & !reg_error;
  assign doorbell_c108_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c108_intr_we = addr_hit[1089] & reg_we & !reg_error;
  assign completion_interrupt_c108_intr_wd = reg_wdata[0];

  assign completion_interrupt_c108_preserve_mask_we = addr_hit[1089] & reg_we & !reg_error;
  assign completion_interrupt_c108_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c109_we = addr_hit[1090] & reg_we & !reg_error;
  assign reserved_1_c109_wd = reg_wdata[31:0];

  assign channel_status_c109_channel_free_we = addr_hit[1091] & reg_we & !reg_error;
  assign channel_status_c109_channel_free_wd = reg_wdata[0];

  assign channel_status_c109_channel_error_we = addr_hit[1091] & reg_we & !reg_error;
  assign channel_status_c109_channel_error_wd = reg_wdata[1];

  assign channel_status_c109_field1_we = addr_hit[1091] & reg_we & !reg_error;
  assign channel_status_c109_field1_wd = reg_wdata[31:2];

  assign reserved_2_c109_we = addr_hit[1092] & reg_we & !reg_error;
  assign reserved_2_c109_wd = reg_wdata[31:0];

  assign channel_flags_c109_intr_enable_we = addr_hit[1094] & reg_we & !reg_error;
  assign channel_flags_c109_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c109_field1_we = addr_hit[1094] & reg_we & !reg_error;
  assign channel_flags_c109_field1_wd = reg_wdata[31:1];

  assign length_c109_we = addr_hit[1095] & reg_we & !reg_error;
  assign length_c109_wd = reg_wdata[31:0];

  assign message_header_c109_message_id_we = addr_hit[1096] & reg_we & !reg_error;
  assign message_header_c109_message_id_wd = reg_wdata[7:0];

  assign message_header_c109_message_type_we = addr_hit[1096] & reg_we & !reg_error;
  assign message_header_c109_message_type_wd = reg_wdata[9:8];

  assign message_header_c109_protocol_id_we = addr_hit[1096] & reg_we & !reg_error;
  assign message_header_c109_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c109_token_we = addr_hit[1096] & reg_we & !reg_error;
  assign message_header_c109_token_wd = reg_wdata[27:18];

  assign message_header_c109_field1_we = addr_hit[1096] & reg_we & !reg_error;
  assign message_header_c109_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c109_we = addr_hit[1097] & reg_we & !reg_error;
  assign message_payload_1_c109_wd = reg_wdata[31:0];

  assign doorbell_c109_intr_we = addr_hit[1098] & reg_we & !reg_error;
  assign doorbell_c109_intr_wd = reg_wdata[0];

  assign doorbell_c109_preserve_mask_we = addr_hit[1098] & reg_we & !reg_error;
  assign doorbell_c109_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c109_intr_we = addr_hit[1099] & reg_we & !reg_error;
  assign completion_interrupt_c109_intr_wd = reg_wdata[0];

  assign completion_interrupt_c109_preserve_mask_we = addr_hit[1099] & reg_we & !reg_error;
  assign completion_interrupt_c109_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c110_we = addr_hit[1100] & reg_we & !reg_error;
  assign reserved_1_c110_wd = reg_wdata[31:0];

  assign channel_status_c110_channel_free_we = addr_hit[1101] & reg_we & !reg_error;
  assign channel_status_c110_channel_free_wd = reg_wdata[0];

  assign channel_status_c110_channel_error_we = addr_hit[1101] & reg_we & !reg_error;
  assign channel_status_c110_channel_error_wd = reg_wdata[1];

  assign channel_status_c110_field1_we = addr_hit[1101] & reg_we & !reg_error;
  assign channel_status_c110_field1_wd = reg_wdata[31:2];

  assign reserved_2_c110_we = addr_hit[1102] & reg_we & !reg_error;
  assign reserved_2_c110_wd = reg_wdata[31:0];

  assign channel_flags_c110_intr_enable_we = addr_hit[1104] & reg_we & !reg_error;
  assign channel_flags_c110_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c110_field1_we = addr_hit[1104] & reg_we & !reg_error;
  assign channel_flags_c110_field1_wd = reg_wdata[31:1];

  assign length_c110_we = addr_hit[1105] & reg_we & !reg_error;
  assign length_c110_wd = reg_wdata[31:0];

  assign message_header_c110_message_id_we = addr_hit[1106] & reg_we & !reg_error;
  assign message_header_c110_message_id_wd = reg_wdata[7:0];

  assign message_header_c110_message_type_we = addr_hit[1106] & reg_we & !reg_error;
  assign message_header_c110_message_type_wd = reg_wdata[9:8];

  assign message_header_c110_protocol_id_we = addr_hit[1106] & reg_we & !reg_error;
  assign message_header_c110_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c110_token_we = addr_hit[1106] & reg_we & !reg_error;
  assign message_header_c110_token_wd = reg_wdata[27:18];

  assign message_header_c110_field1_we = addr_hit[1106] & reg_we & !reg_error;
  assign message_header_c110_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c110_we = addr_hit[1107] & reg_we & !reg_error;
  assign message_payload_1_c110_wd = reg_wdata[31:0];

  assign doorbell_c110_intr_we = addr_hit[1108] & reg_we & !reg_error;
  assign doorbell_c110_intr_wd = reg_wdata[0];

  assign doorbell_c110_preserve_mask_we = addr_hit[1108] & reg_we & !reg_error;
  assign doorbell_c110_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c110_intr_we = addr_hit[1109] & reg_we & !reg_error;
  assign completion_interrupt_c110_intr_wd = reg_wdata[0];

  assign completion_interrupt_c110_preserve_mask_we = addr_hit[1109] & reg_we & !reg_error;
  assign completion_interrupt_c110_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c111_we = addr_hit[1110] & reg_we & !reg_error;
  assign reserved_1_c111_wd = reg_wdata[31:0];

  assign channel_status_c111_channel_free_we = addr_hit[1111] & reg_we & !reg_error;
  assign channel_status_c111_channel_free_wd = reg_wdata[0];

  assign channel_status_c111_channel_error_we = addr_hit[1111] & reg_we & !reg_error;
  assign channel_status_c111_channel_error_wd = reg_wdata[1];

  assign channel_status_c111_field1_we = addr_hit[1111] & reg_we & !reg_error;
  assign channel_status_c111_field1_wd = reg_wdata[31:2];

  assign reserved_2_c111_we = addr_hit[1112] & reg_we & !reg_error;
  assign reserved_2_c111_wd = reg_wdata[31:0];

  assign channel_flags_c111_intr_enable_we = addr_hit[1114] & reg_we & !reg_error;
  assign channel_flags_c111_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c111_field1_we = addr_hit[1114] & reg_we & !reg_error;
  assign channel_flags_c111_field1_wd = reg_wdata[31:1];

  assign length_c111_we = addr_hit[1115] & reg_we & !reg_error;
  assign length_c111_wd = reg_wdata[31:0];

  assign message_header_c111_message_id_we = addr_hit[1116] & reg_we & !reg_error;
  assign message_header_c111_message_id_wd = reg_wdata[7:0];

  assign message_header_c111_message_type_we = addr_hit[1116] & reg_we & !reg_error;
  assign message_header_c111_message_type_wd = reg_wdata[9:8];

  assign message_header_c111_protocol_id_we = addr_hit[1116] & reg_we & !reg_error;
  assign message_header_c111_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c111_token_we = addr_hit[1116] & reg_we & !reg_error;
  assign message_header_c111_token_wd = reg_wdata[27:18];

  assign message_header_c111_field1_we = addr_hit[1116] & reg_we & !reg_error;
  assign message_header_c111_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c111_we = addr_hit[1117] & reg_we & !reg_error;
  assign message_payload_1_c111_wd = reg_wdata[31:0];

  assign doorbell_c111_intr_we = addr_hit[1118] & reg_we & !reg_error;
  assign doorbell_c111_intr_wd = reg_wdata[0];

  assign doorbell_c111_preserve_mask_we = addr_hit[1118] & reg_we & !reg_error;
  assign doorbell_c111_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c111_intr_we = addr_hit[1119] & reg_we & !reg_error;
  assign completion_interrupt_c111_intr_wd = reg_wdata[0];

  assign completion_interrupt_c111_preserve_mask_we = addr_hit[1119] & reg_we & !reg_error;
  assign completion_interrupt_c111_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c112_we = addr_hit[1120] & reg_we & !reg_error;
  assign reserved_1_c112_wd = reg_wdata[31:0];

  assign channel_status_c112_channel_free_we = addr_hit[1121] & reg_we & !reg_error;
  assign channel_status_c112_channel_free_wd = reg_wdata[0];

  assign channel_status_c112_channel_error_we = addr_hit[1121] & reg_we & !reg_error;
  assign channel_status_c112_channel_error_wd = reg_wdata[1];

  assign channel_status_c112_field1_we = addr_hit[1121] & reg_we & !reg_error;
  assign channel_status_c112_field1_wd = reg_wdata[31:2];

  assign reserved_2_c112_we = addr_hit[1122] & reg_we & !reg_error;
  assign reserved_2_c112_wd = reg_wdata[31:0];

  assign channel_flags_c112_intr_enable_we = addr_hit[1124] & reg_we & !reg_error;
  assign channel_flags_c112_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c112_field1_we = addr_hit[1124] & reg_we & !reg_error;
  assign channel_flags_c112_field1_wd = reg_wdata[31:1];

  assign length_c112_we = addr_hit[1125] & reg_we & !reg_error;
  assign length_c112_wd = reg_wdata[31:0];

  assign message_header_c112_message_id_we = addr_hit[1126] & reg_we & !reg_error;
  assign message_header_c112_message_id_wd = reg_wdata[7:0];

  assign message_header_c112_message_type_we = addr_hit[1126] & reg_we & !reg_error;
  assign message_header_c112_message_type_wd = reg_wdata[9:8];

  assign message_header_c112_protocol_id_we = addr_hit[1126] & reg_we & !reg_error;
  assign message_header_c112_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c112_token_we = addr_hit[1126] & reg_we & !reg_error;
  assign message_header_c112_token_wd = reg_wdata[27:18];

  assign message_header_c112_field1_we = addr_hit[1126] & reg_we & !reg_error;
  assign message_header_c112_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c112_we = addr_hit[1127] & reg_we & !reg_error;
  assign message_payload_1_c112_wd = reg_wdata[31:0];

  assign doorbell_c112_intr_we = addr_hit[1128] & reg_we & !reg_error;
  assign doorbell_c112_intr_wd = reg_wdata[0];

  assign doorbell_c112_preserve_mask_we = addr_hit[1128] & reg_we & !reg_error;
  assign doorbell_c112_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c112_intr_we = addr_hit[1129] & reg_we & !reg_error;
  assign completion_interrupt_c112_intr_wd = reg_wdata[0];

  assign completion_interrupt_c112_preserve_mask_we = addr_hit[1129] & reg_we & !reg_error;
  assign completion_interrupt_c112_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c113_we = addr_hit[1130] & reg_we & !reg_error;
  assign reserved_1_c113_wd = reg_wdata[31:0];

  assign channel_status_c113_channel_free_we = addr_hit[1131] & reg_we & !reg_error;
  assign channel_status_c113_channel_free_wd = reg_wdata[0];

  assign channel_status_c113_channel_error_we = addr_hit[1131] & reg_we & !reg_error;
  assign channel_status_c113_channel_error_wd = reg_wdata[1];

  assign channel_status_c113_field1_we = addr_hit[1131] & reg_we & !reg_error;
  assign channel_status_c113_field1_wd = reg_wdata[31:2];

  assign reserved_2_c113_we = addr_hit[1132] & reg_we & !reg_error;
  assign reserved_2_c113_wd = reg_wdata[31:0];

  assign channel_flags_c113_intr_enable_we = addr_hit[1134] & reg_we & !reg_error;
  assign channel_flags_c113_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c113_field1_we = addr_hit[1134] & reg_we & !reg_error;
  assign channel_flags_c113_field1_wd = reg_wdata[31:1];

  assign length_c113_we = addr_hit[1135] & reg_we & !reg_error;
  assign length_c113_wd = reg_wdata[31:0];

  assign message_header_c113_message_id_we = addr_hit[1136] & reg_we & !reg_error;
  assign message_header_c113_message_id_wd = reg_wdata[7:0];

  assign message_header_c113_message_type_we = addr_hit[1136] & reg_we & !reg_error;
  assign message_header_c113_message_type_wd = reg_wdata[9:8];

  assign message_header_c113_protocol_id_we = addr_hit[1136] & reg_we & !reg_error;
  assign message_header_c113_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c113_token_we = addr_hit[1136] & reg_we & !reg_error;
  assign message_header_c113_token_wd = reg_wdata[27:18];

  assign message_header_c113_field1_we = addr_hit[1136] & reg_we & !reg_error;
  assign message_header_c113_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c113_we = addr_hit[1137] & reg_we & !reg_error;
  assign message_payload_1_c113_wd = reg_wdata[31:0];

  assign doorbell_c113_intr_we = addr_hit[1138] & reg_we & !reg_error;
  assign doorbell_c113_intr_wd = reg_wdata[0];

  assign doorbell_c113_preserve_mask_we = addr_hit[1138] & reg_we & !reg_error;
  assign doorbell_c113_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c113_intr_we = addr_hit[1139] & reg_we & !reg_error;
  assign completion_interrupt_c113_intr_wd = reg_wdata[0];

  assign completion_interrupt_c113_preserve_mask_we = addr_hit[1139] & reg_we & !reg_error;
  assign completion_interrupt_c113_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c114_we = addr_hit[1140] & reg_we & !reg_error;
  assign reserved_1_c114_wd = reg_wdata[31:0];

  assign channel_status_c114_channel_free_we = addr_hit[1141] & reg_we & !reg_error;
  assign channel_status_c114_channel_free_wd = reg_wdata[0];

  assign channel_status_c114_channel_error_we = addr_hit[1141] & reg_we & !reg_error;
  assign channel_status_c114_channel_error_wd = reg_wdata[1];

  assign channel_status_c114_field1_we = addr_hit[1141] & reg_we & !reg_error;
  assign channel_status_c114_field1_wd = reg_wdata[31:2];

  assign reserved_2_c114_we = addr_hit[1142] & reg_we & !reg_error;
  assign reserved_2_c114_wd = reg_wdata[31:0];

  assign channel_flags_c114_intr_enable_we = addr_hit[1144] & reg_we & !reg_error;
  assign channel_flags_c114_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c114_field1_we = addr_hit[1144] & reg_we & !reg_error;
  assign channel_flags_c114_field1_wd = reg_wdata[31:1];

  assign length_c114_we = addr_hit[1145] & reg_we & !reg_error;
  assign length_c114_wd = reg_wdata[31:0];

  assign message_header_c114_message_id_we = addr_hit[1146] & reg_we & !reg_error;
  assign message_header_c114_message_id_wd = reg_wdata[7:0];

  assign message_header_c114_message_type_we = addr_hit[1146] & reg_we & !reg_error;
  assign message_header_c114_message_type_wd = reg_wdata[9:8];

  assign message_header_c114_protocol_id_we = addr_hit[1146] & reg_we & !reg_error;
  assign message_header_c114_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c114_token_we = addr_hit[1146] & reg_we & !reg_error;
  assign message_header_c114_token_wd = reg_wdata[27:18];

  assign message_header_c114_field1_we = addr_hit[1146] & reg_we & !reg_error;
  assign message_header_c114_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c114_we = addr_hit[1147] & reg_we & !reg_error;
  assign message_payload_1_c114_wd = reg_wdata[31:0];

  assign doorbell_c114_intr_we = addr_hit[1148] & reg_we & !reg_error;
  assign doorbell_c114_intr_wd = reg_wdata[0];

  assign doorbell_c114_preserve_mask_we = addr_hit[1148] & reg_we & !reg_error;
  assign doorbell_c114_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c114_intr_we = addr_hit[1149] & reg_we & !reg_error;
  assign completion_interrupt_c114_intr_wd = reg_wdata[0];

  assign completion_interrupt_c114_preserve_mask_we = addr_hit[1149] & reg_we & !reg_error;
  assign completion_interrupt_c114_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c115_we = addr_hit[1150] & reg_we & !reg_error;
  assign reserved_1_c115_wd = reg_wdata[31:0];

  assign channel_status_c115_channel_free_we = addr_hit[1151] & reg_we & !reg_error;
  assign channel_status_c115_channel_free_wd = reg_wdata[0];

  assign channel_status_c115_channel_error_we = addr_hit[1151] & reg_we & !reg_error;
  assign channel_status_c115_channel_error_wd = reg_wdata[1];

  assign channel_status_c115_field1_we = addr_hit[1151] & reg_we & !reg_error;
  assign channel_status_c115_field1_wd = reg_wdata[31:2];

  assign reserved_2_c115_we = addr_hit[1152] & reg_we & !reg_error;
  assign reserved_2_c115_wd = reg_wdata[31:0];

  assign channel_flags_c115_intr_enable_we = addr_hit[1154] & reg_we & !reg_error;
  assign channel_flags_c115_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c115_field1_we = addr_hit[1154] & reg_we & !reg_error;
  assign channel_flags_c115_field1_wd = reg_wdata[31:1];

  assign length_c115_we = addr_hit[1155] & reg_we & !reg_error;
  assign length_c115_wd = reg_wdata[31:0];

  assign message_header_c115_message_id_we = addr_hit[1156] & reg_we & !reg_error;
  assign message_header_c115_message_id_wd = reg_wdata[7:0];

  assign message_header_c115_message_type_we = addr_hit[1156] & reg_we & !reg_error;
  assign message_header_c115_message_type_wd = reg_wdata[9:8];

  assign message_header_c115_protocol_id_we = addr_hit[1156] & reg_we & !reg_error;
  assign message_header_c115_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c115_token_we = addr_hit[1156] & reg_we & !reg_error;
  assign message_header_c115_token_wd = reg_wdata[27:18];

  assign message_header_c115_field1_we = addr_hit[1156] & reg_we & !reg_error;
  assign message_header_c115_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c115_we = addr_hit[1157] & reg_we & !reg_error;
  assign message_payload_1_c115_wd = reg_wdata[31:0];

  assign doorbell_c115_intr_we = addr_hit[1158] & reg_we & !reg_error;
  assign doorbell_c115_intr_wd = reg_wdata[0];

  assign doorbell_c115_preserve_mask_we = addr_hit[1158] & reg_we & !reg_error;
  assign doorbell_c115_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c115_intr_we = addr_hit[1159] & reg_we & !reg_error;
  assign completion_interrupt_c115_intr_wd = reg_wdata[0];

  assign completion_interrupt_c115_preserve_mask_we = addr_hit[1159] & reg_we & !reg_error;
  assign completion_interrupt_c115_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c116_we = addr_hit[1160] & reg_we & !reg_error;
  assign reserved_1_c116_wd = reg_wdata[31:0];

  assign channel_status_c116_channel_free_we = addr_hit[1161] & reg_we & !reg_error;
  assign channel_status_c116_channel_free_wd = reg_wdata[0];

  assign channel_status_c116_channel_error_we = addr_hit[1161] & reg_we & !reg_error;
  assign channel_status_c116_channel_error_wd = reg_wdata[1];

  assign channel_status_c116_field1_we = addr_hit[1161] & reg_we & !reg_error;
  assign channel_status_c116_field1_wd = reg_wdata[31:2];

  assign reserved_2_c116_we = addr_hit[1162] & reg_we & !reg_error;
  assign reserved_2_c116_wd = reg_wdata[31:0];

  assign channel_flags_c116_intr_enable_we = addr_hit[1164] & reg_we & !reg_error;
  assign channel_flags_c116_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c116_field1_we = addr_hit[1164] & reg_we & !reg_error;
  assign channel_flags_c116_field1_wd = reg_wdata[31:1];

  assign length_c116_we = addr_hit[1165] & reg_we & !reg_error;
  assign length_c116_wd = reg_wdata[31:0];

  assign message_header_c116_message_id_we = addr_hit[1166] & reg_we & !reg_error;
  assign message_header_c116_message_id_wd = reg_wdata[7:0];

  assign message_header_c116_message_type_we = addr_hit[1166] & reg_we & !reg_error;
  assign message_header_c116_message_type_wd = reg_wdata[9:8];

  assign message_header_c116_protocol_id_we = addr_hit[1166] & reg_we & !reg_error;
  assign message_header_c116_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c116_token_we = addr_hit[1166] & reg_we & !reg_error;
  assign message_header_c116_token_wd = reg_wdata[27:18];

  assign message_header_c116_field1_we = addr_hit[1166] & reg_we & !reg_error;
  assign message_header_c116_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c116_we = addr_hit[1167] & reg_we & !reg_error;
  assign message_payload_1_c116_wd = reg_wdata[31:0];

  assign doorbell_c116_intr_we = addr_hit[1168] & reg_we & !reg_error;
  assign doorbell_c116_intr_wd = reg_wdata[0];

  assign doorbell_c116_preserve_mask_we = addr_hit[1168] & reg_we & !reg_error;
  assign doorbell_c116_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c116_intr_we = addr_hit[1169] & reg_we & !reg_error;
  assign completion_interrupt_c116_intr_wd = reg_wdata[0];

  assign completion_interrupt_c116_preserve_mask_we = addr_hit[1169] & reg_we & !reg_error;
  assign completion_interrupt_c116_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c117_we = addr_hit[1170] & reg_we & !reg_error;
  assign reserved_1_c117_wd = reg_wdata[31:0];

  assign channel_status_c117_channel_free_we = addr_hit[1171] & reg_we & !reg_error;
  assign channel_status_c117_channel_free_wd = reg_wdata[0];

  assign channel_status_c117_channel_error_we = addr_hit[1171] & reg_we & !reg_error;
  assign channel_status_c117_channel_error_wd = reg_wdata[1];

  assign channel_status_c117_field1_we = addr_hit[1171] & reg_we & !reg_error;
  assign channel_status_c117_field1_wd = reg_wdata[31:2];

  assign reserved_2_c117_we = addr_hit[1172] & reg_we & !reg_error;
  assign reserved_2_c117_wd = reg_wdata[31:0];

  assign channel_flags_c117_intr_enable_we = addr_hit[1174] & reg_we & !reg_error;
  assign channel_flags_c117_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c117_field1_we = addr_hit[1174] & reg_we & !reg_error;
  assign channel_flags_c117_field1_wd = reg_wdata[31:1];

  assign length_c117_we = addr_hit[1175] & reg_we & !reg_error;
  assign length_c117_wd = reg_wdata[31:0];

  assign message_header_c117_message_id_we = addr_hit[1176] & reg_we & !reg_error;
  assign message_header_c117_message_id_wd = reg_wdata[7:0];

  assign message_header_c117_message_type_we = addr_hit[1176] & reg_we & !reg_error;
  assign message_header_c117_message_type_wd = reg_wdata[9:8];

  assign message_header_c117_protocol_id_we = addr_hit[1176] & reg_we & !reg_error;
  assign message_header_c117_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c117_token_we = addr_hit[1176] & reg_we & !reg_error;
  assign message_header_c117_token_wd = reg_wdata[27:18];

  assign message_header_c117_field1_we = addr_hit[1176] & reg_we & !reg_error;
  assign message_header_c117_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c117_we = addr_hit[1177] & reg_we & !reg_error;
  assign message_payload_1_c117_wd = reg_wdata[31:0];

  assign doorbell_c117_intr_we = addr_hit[1178] & reg_we & !reg_error;
  assign doorbell_c117_intr_wd = reg_wdata[0];

  assign doorbell_c117_preserve_mask_we = addr_hit[1178] & reg_we & !reg_error;
  assign doorbell_c117_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c117_intr_we = addr_hit[1179] & reg_we & !reg_error;
  assign completion_interrupt_c117_intr_wd = reg_wdata[0];

  assign completion_interrupt_c117_preserve_mask_we = addr_hit[1179] & reg_we & !reg_error;
  assign completion_interrupt_c117_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c118_we = addr_hit[1180] & reg_we & !reg_error;
  assign reserved_1_c118_wd = reg_wdata[31:0];

  assign channel_status_c118_channel_free_we = addr_hit[1181] & reg_we & !reg_error;
  assign channel_status_c118_channel_free_wd = reg_wdata[0];

  assign channel_status_c118_channel_error_we = addr_hit[1181] & reg_we & !reg_error;
  assign channel_status_c118_channel_error_wd = reg_wdata[1];

  assign channel_status_c118_field1_we = addr_hit[1181] & reg_we & !reg_error;
  assign channel_status_c118_field1_wd = reg_wdata[31:2];

  assign reserved_2_c118_we = addr_hit[1182] & reg_we & !reg_error;
  assign reserved_2_c118_wd = reg_wdata[31:0];

  assign channel_flags_c118_intr_enable_we = addr_hit[1184] & reg_we & !reg_error;
  assign channel_flags_c118_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c118_field1_we = addr_hit[1184] & reg_we & !reg_error;
  assign channel_flags_c118_field1_wd = reg_wdata[31:1];

  assign length_c118_we = addr_hit[1185] & reg_we & !reg_error;
  assign length_c118_wd = reg_wdata[31:0];

  assign message_header_c118_message_id_we = addr_hit[1186] & reg_we & !reg_error;
  assign message_header_c118_message_id_wd = reg_wdata[7:0];

  assign message_header_c118_message_type_we = addr_hit[1186] & reg_we & !reg_error;
  assign message_header_c118_message_type_wd = reg_wdata[9:8];

  assign message_header_c118_protocol_id_we = addr_hit[1186] & reg_we & !reg_error;
  assign message_header_c118_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c118_token_we = addr_hit[1186] & reg_we & !reg_error;
  assign message_header_c118_token_wd = reg_wdata[27:18];

  assign message_header_c118_field1_we = addr_hit[1186] & reg_we & !reg_error;
  assign message_header_c118_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c118_we = addr_hit[1187] & reg_we & !reg_error;
  assign message_payload_1_c118_wd = reg_wdata[31:0];

  assign doorbell_c118_intr_we = addr_hit[1188] & reg_we & !reg_error;
  assign doorbell_c118_intr_wd = reg_wdata[0];

  assign doorbell_c118_preserve_mask_we = addr_hit[1188] & reg_we & !reg_error;
  assign doorbell_c118_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c118_intr_we = addr_hit[1189] & reg_we & !reg_error;
  assign completion_interrupt_c118_intr_wd = reg_wdata[0];

  assign completion_interrupt_c118_preserve_mask_we = addr_hit[1189] & reg_we & !reg_error;
  assign completion_interrupt_c118_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c119_we = addr_hit[1190] & reg_we & !reg_error;
  assign reserved_1_c119_wd = reg_wdata[31:0];

  assign channel_status_c119_channel_free_we = addr_hit[1191] & reg_we & !reg_error;
  assign channel_status_c119_channel_free_wd = reg_wdata[0];

  assign channel_status_c119_channel_error_we = addr_hit[1191] & reg_we & !reg_error;
  assign channel_status_c119_channel_error_wd = reg_wdata[1];

  assign channel_status_c119_field1_we = addr_hit[1191] & reg_we & !reg_error;
  assign channel_status_c119_field1_wd = reg_wdata[31:2];

  assign reserved_2_c119_we = addr_hit[1192] & reg_we & !reg_error;
  assign reserved_2_c119_wd = reg_wdata[31:0];

  assign channel_flags_c119_intr_enable_we = addr_hit[1194] & reg_we & !reg_error;
  assign channel_flags_c119_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c119_field1_we = addr_hit[1194] & reg_we & !reg_error;
  assign channel_flags_c119_field1_wd = reg_wdata[31:1];

  assign length_c119_we = addr_hit[1195] & reg_we & !reg_error;
  assign length_c119_wd = reg_wdata[31:0];

  assign message_header_c119_message_id_we = addr_hit[1196] & reg_we & !reg_error;
  assign message_header_c119_message_id_wd = reg_wdata[7:0];

  assign message_header_c119_message_type_we = addr_hit[1196] & reg_we & !reg_error;
  assign message_header_c119_message_type_wd = reg_wdata[9:8];

  assign message_header_c119_protocol_id_we = addr_hit[1196] & reg_we & !reg_error;
  assign message_header_c119_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c119_token_we = addr_hit[1196] & reg_we & !reg_error;
  assign message_header_c119_token_wd = reg_wdata[27:18];

  assign message_header_c119_field1_we = addr_hit[1196] & reg_we & !reg_error;
  assign message_header_c119_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c119_we = addr_hit[1197] & reg_we & !reg_error;
  assign message_payload_1_c119_wd = reg_wdata[31:0];

  assign doorbell_c119_intr_we = addr_hit[1198] & reg_we & !reg_error;
  assign doorbell_c119_intr_wd = reg_wdata[0];

  assign doorbell_c119_preserve_mask_we = addr_hit[1198] & reg_we & !reg_error;
  assign doorbell_c119_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c119_intr_we = addr_hit[1199] & reg_we & !reg_error;
  assign completion_interrupt_c119_intr_wd = reg_wdata[0];

  assign completion_interrupt_c119_preserve_mask_we = addr_hit[1199] & reg_we & !reg_error;
  assign completion_interrupt_c119_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c120_we = addr_hit[1200] & reg_we & !reg_error;
  assign reserved_1_c120_wd = reg_wdata[31:0];

  assign channel_status_c120_channel_free_we = addr_hit[1201] & reg_we & !reg_error;
  assign channel_status_c120_channel_free_wd = reg_wdata[0];

  assign channel_status_c120_channel_error_we = addr_hit[1201] & reg_we & !reg_error;
  assign channel_status_c120_channel_error_wd = reg_wdata[1];

  assign channel_status_c120_field1_we = addr_hit[1201] & reg_we & !reg_error;
  assign channel_status_c120_field1_wd = reg_wdata[31:2];

  assign reserved_2_c120_we = addr_hit[1202] & reg_we & !reg_error;
  assign reserved_2_c120_wd = reg_wdata[31:0];

  assign channel_flags_c120_intr_enable_we = addr_hit[1204] & reg_we & !reg_error;
  assign channel_flags_c120_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c120_field1_we = addr_hit[1204] & reg_we & !reg_error;
  assign channel_flags_c120_field1_wd = reg_wdata[31:1];

  assign length_c120_we = addr_hit[1205] & reg_we & !reg_error;
  assign length_c120_wd = reg_wdata[31:0];

  assign message_header_c120_message_id_we = addr_hit[1206] & reg_we & !reg_error;
  assign message_header_c120_message_id_wd = reg_wdata[7:0];

  assign message_header_c120_message_type_we = addr_hit[1206] & reg_we & !reg_error;
  assign message_header_c120_message_type_wd = reg_wdata[9:8];

  assign message_header_c120_protocol_id_we = addr_hit[1206] & reg_we & !reg_error;
  assign message_header_c120_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c120_token_we = addr_hit[1206] & reg_we & !reg_error;
  assign message_header_c120_token_wd = reg_wdata[27:18];

  assign message_header_c120_field1_we = addr_hit[1206] & reg_we & !reg_error;
  assign message_header_c120_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c120_we = addr_hit[1207] & reg_we & !reg_error;
  assign message_payload_1_c120_wd = reg_wdata[31:0];

  assign doorbell_c120_intr_we = addr_hit[1208] & reg_we & !reg_error;
  assign doorbell_c120_intr_wd = reg_wdata[0];

  assign doorbell_c120_preserve_mask_we = addr_hit[1208] & reg_we & !reg_error;
  assign doorbell_c120_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c120_intr_we = addr_hit[1209] & reg_we & !reg_error;
  assign completion_interrupt_c120_intr_wd = reg_wdata[0];

  assign completion_interrupt_c120_preserve_mask_we = addr_hit[1209] & reg_we & !reg_error;
  assign completion_interrupt_c120_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c121_we = addr_hit[1210] & reg_we & !reg_error;
  assign reserved_1_c121_wd = reg_wdata[31:0];

  assign channel_status_c121_channel_free_we = addr_hit[1211] & reg_we & !reg_error;
  assign channel_status_c121_channel_free_wd = reg_wdata[0];

  assign channel_status_c121_channel_error_we = addr_hit[1211] & reg_we & !reg_error;
  assign channel_status_c121_channel_error_wd = reg_wdata[1];

  assign channel_status_c121_field1_we = addr_hit[1211] & reg_we & !reg_error;
  assign channel_status_c121_field1_wd = reg_wdata[31:2];

  assign reserved_2_c121_we = addr_hit[1212] & reg_we & !reg_error;
  assign reserved_2_c121_wd = reg_wdata[31:0];

  assign channel_flags_c121_intr_enable_we = addr_hit[1214] & reg_we & !reg_error;
  assign channel_flags_c121_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c121_field1_we = addr_hit[1214] & reg_we & !reg_error;
  assign channel_flags_c121_field1_wd = reg_wdata[31:1];

  assign length_c121_we = addr_hit[1215] & reg_we & !reg_error;
  assign length_c121_wd = reg_wdata[31:0];

  assign message_header_c121_message_id_we = addr_hit[1216] & reg_we & !reg_error;
  assign message_header_c121_message_id_wd = reg_wdata[7:0];

  assign message_header_c121_message_type_we = addr_hit[1216] & reg_we & !reg_error;
  assign message_header_c121_message_type_wd = reg_wdata[9:8];

  assign message_header_c121_protocol_id_we = addr_hit[1216] & reg_we & !reg_error;
  assign message_header_c121_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c121_token_we = addr_hit[1216] & reg_we & !reg_error;
  assign message_header_c121_token_wd = reg_wdata[27:18];

  assign message_header_c121_field1_we = addr_hit[1216] & reg_we & !reg_error;
  assign message_header_c121_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c121_we = addr_hit[1217] & reg_we & !reg_error;
  assign message_payload_1_c121_wd = reg_wdata[31:0];

  assign doorbell_c121_intr_we = addr_hit[1218] & reg_we & !reg_error;
  assign doorbell_c121_intr_wd = reg_wdata[0];

  assign doorbell_c121_preserve_mask_we = addr_hit[1218] & reg_we & !reg_error;
  assign doorbell_c121_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c121_intr_we = addr_hit[1219] & reg_we & !reg_error;
  assign completion_interrupt_c121_intr_wd = reg_wdata[0];

  assign completion_interrupt_c121_preserve_mask_we = addr_hit[1219] & reg_we & !reg_error;
  assign completion_interrupt_c121_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c122_we = addr_hit[1220] & reg_we & !reg_error;
  assign reserved_1_c122_wd = reg_wdata[31:0];

  assign channel_status_c122_channel_free_we = addr_hit[1221] & reg_we & !reg_error;
  assign channel_status_c122_channel_free_wd = reg_wdata[0];

  assign channel_status_c122_channel_error_we = addr_hit[1221] & reg_we & !reg_error;
  assign channel_status_c122_channel_error_wd = reg_wdata[1];

  assign channel_status_c122_field1_we = addr_hit[1221] & reg_we & !reg_error;
  assign channel_status_c122_field1_wd = reg_wdata[31:2];

  assign reserved_2_c122_we = addr_hit[1222] & reg_we & !reg_error;
  assign reserved_2_c122_wd = reg_wdata[31:0];

  assign channel_flags_c122_intr_enable_we = addr_hit[1224] & reg_we & !reg_error;
  assign channel_flags_c122_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c122_field1_we = addr_hit[1224] & reg_we & !reg_error;
  assign channel_flags_c122_field1_wd = reg_wdata[31:1];

  assign length_c122_we = addr_hit[1225] & reg_we & !reg_error;
  assign length_c122_wd = reg_wdata[31:0];

  assign message_header_c122_message_id_we = addr_hit[1226] & reg_we & !reg_error;
  assign message_header_c122_message_id_wd = reg_wdata[7:0];

  assign message_header_c122_message_type_we = addr_hit[1226] & reg_we & !reg_error;
  assign message_header_c122_message_type_wd = reg_wdata[9:8];

  assign message_header_c122_protocol_id_we = addr_hit[1226] & reg_we & !reg_error;
  assign message_header_c122_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c122_token_we = addr_hit[1226] & reg_we & !reg_error;
  assign message_header_c122_token_wd = reg_wdata[27:18];

  assign message_header_c122_field1_we = addr_hit[1226] & reg_we & !reg_error;
  assign message_header_c122_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c122_we = addr_hit[1227] & reg_we & !reg_error;
  assign message_payload_1_c122_wd = reg_wdata[31:0];

  assign doorbell_c122_intr_we = addr_hit[1228] & reg_we & !reg_error;
  assign doorbell_c122_intr_wd = reg_wdata[0];

  assign doorbell_c122_preserve_mask_we = addr_hit[1228] & reg_we & !reg_error;
  assign doorbell_c122_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c122_intr_we = addr_hit[1229] & reg_we & !reg_error;
  assign completion_interrupt_c122_intr_wd = reg_wdata[0];

  assign completion_interrupt_c122_preserve_mask_we = addr_hit[1229] & reg_we & !reg_error;
  assign completion_interrupt_c122_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c123_we = addr_hit[1230] & reg_we & !reg_error;
  assign reserved_1_c123_wd = reg_wdata[31:0];

  assign channel_status_c123_channel_free_we = addr_hit[1231] & reg_we & !reg_error;
  assign channel_status_c123_channel_free_wd = reg_wdata[0];

  assign channel_status_c123_channel_error_we = addr_hit[1231] & reg_we & !reg_error;
  assign channel_status_c123_channel_error_wd = reg_wdata[1];

  assign channel_status_c123_field1_we = addr_hit[1231] & reg_we & !reg_error;
  assign channel_status_c123_field1_wd = reg_wdata[31:2];

  assign reserved_2_c123_we = addr_hit[1232] & reg_we & !reg_error;
  assign reserved_2_c123_wd = reg_wdata[31:0];

  assign channel_flags_c123_intr_enable_we = addr_hit[1234] & reg_we & !reg_error;
  assign channel_flags_c123_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c123_field1_we = addr_hit[1234] & reg_we & !reg_error;
  assign channel_flags_c123_field1_wd = reg_wdata[31:1];

  assign length_c123_we = addr_hit[1235] & reg_we & !reg_error;
  assign length_c123_wd = reg_wdata[31:0];

  assign message_header_c123_message_id_we = addr_hit[1236] & reg_we & !reg_error;
  assign message_header_c123_message_id_wd = reg_wdata[7:0];

  assign message_header_c123_message_type_we = addr_hit[1236] & reg_we & !reg_error;
  assign message_header_c123_message_type_wd = reg_wdata[9:8];

  assign message_header_c123_protocol_id_we = addr_hit[1236] & reg_we & !reg_error;
  assign message_header_c123_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c123_token_we = addr_hit[1236] & reg_we & !reg_error;
  assign message_header_c123_token_wd = reg_wdata[27:18];

  assign message_header_c123_field1_we = addr_hit[1236] & reg_we & !reg_error;
  assign message_header_c123_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c123_we = addr_hit[1237] & reg_we & !reg_error;
  assign message_payload_1_c123_wd = reg_wdata[31:0];

  assign doorbell_c123_intr_we = addr_hit[1238] & reg_we & !reg_error;
  assign doorbell_c123_intr_wd = reg_wdata[0];

  assign doorbell_c123_preserve_mask_we = addr_hit[1238] & reg_we & !reg_error;
  assign doorbell_c123_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c123_intr_we = addr_hit[1239] & reg_we & !reg_error;
  assign completion_interrupt_c123_intr_wd = reg_wdata[0];

  assign completion_interrupt_c123_preserve_mask_we = addr_hit[1239] & reg_we & !reg_error;
  assign completion_interrupt_c123_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c124_we = addr_hit[1240] & reg_we & !reg_error;
  assign reserved_1_c124_wd = reg_wdata[31:0];

  assign channel_status_c124_channel_free_we = addr_hit[1241] & reg_we & !reg_error;
  assign channel_status_c124_channel_free_wd = reg_wdata[0];

  assign channel_status_c124_channel_error_we = addr_hit[1241] & reg_we & !reg_error;
  assign channel_status_c124_channel_error_wd = reg_wdata[1];

  assign channel_status_c124_field1_we = addr_hit[1241] & reg_we & !reg_error;
  assign channel_status_c124_field1_wd = reg_wdata[31:2];

  assign reserved_2_c124_we = addr_hit[1242] & reg_we & !reg_error;
  assign reserved_2_c124_wd = reg_wdata[31:0];

  assign channel_flags_c124_intr_enable_we = addr_hit[1244] & reg_we & !reg_error;
  assign channel_flags_c124_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c124_field1_we = addr_hit[1244] & reg_we & !reg_error;
  assign channel_flags_c124_field1_wd = reg_wdata[31:1];

  assign length_c124_we = addr_hit[1245] & reg_we & !reg_error;
  assign length_c124_wd = reg_wdata[31:0];

  assign message_header_c124_message_id_we = addr_hit[1246] & reg_we & !reg_error;
  assign message_header_c124_message_id_wd = reg_wdata[7:0];

  assign message_header_c124_message_type_we = addr_hit[1246] & reg_we & !reg_error;
  assign message_header_c124_message_type_wd = reg_wdata[9:8];

  assign message_header_c124_protocol_id_we = addr_hit[1246] & reg_we & !reg_error;
  assign message_header_c124_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c124_token_we = addr_hit[1246] & reg_we & !reg_error;
  assign message_header_c124_token_wd = reg_wdata[27:18];

  assign message_header_c124_field1_we = addr_hit[1246] & reg_we & !reg_error;
  assign message_header_c124_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c124_we = addr_hit[1247] & reg_we & !reg_error;
  assign message_payload_1_c124_wd = reg_wdata[31:0];

  assign doorbell_c124_intr_we = addr_hit[1248] & reg_we & !reg_error;
  assign doorbell_c124_intr_wd = reg_wdata[0];

  assign doorbell_c124_preserve_mask_we = addr_hit[1248] & reg_we & !reg_error;
  assign doorbell_c124_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c124_intr_we = addr_hit[1249] & reg_we & !reg_error;
  assign completion_interrupt_c124_intr_wd = reg_wdata[0];

  assign completion_interrupt_c124_preserve_mask_we = addr_hit[1249] & reg_we & !reg_error;
  assign completion_interrupt_c124_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c125_we = addr_hit[1250] & reg_we & !reg_error;
  assign reserved_1_c125_wd = reg_wdata[31:0];

  assign channel_status_c125_channel_free_we = addr_hit[1251] & reg_we & !reg_error;
  assign channel_status_c125_channel_free_wd = reg_wdata[0];

  assign channel_status_c125_channel_error_we = addr_hit[1251] & reg_we & !reg_error;
  assign channel_status_c125_channel_error_wd = reg_wdata[1];

  assign channel_status_c125_field1_we = addr_hit[1251] & reg_we & !reg_error;
  assign channel_status_c125_field1_wd = reg_wdata[31:2];

  assign reserved_2_c125_we = addr_hit[1252] & reg_we & !reg_error;
  assign reserved_2_c125_wd = reg_wdata[31:0];

  assign channel_flags_c125_intr_enable_we = addr_hit[1254] & reg_we & !reg_error;
  assign channel_flags_c125_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c125_field1_we = addr_hit[1254] & reg_we & !reg_error;
  assign channel_flags_c125_field1_wd = reg_wdata[31:1];

  assign length_c125_we = addr_hit[1255] & reg_we & !reg_error;
  assign length_c125_wd = reg_wdata[31:0];

  assign message_header_c125_message_id_we = addr_hit[1256] & reg_we & !reg_error;
  assign message_header_c125_message_id_wd = reg_wdata[7:0];

  assign message_header_c125_message_type_we = addr_hit[1256] & reg_we & !reg_error;
  assign message_header_c125_message_type_wd = reg_wdata[9:8];

  assign message_header_c125_protocol_id_we = addr_hit[1256] & reg_we & !reg_error;
  assign message_header_c125_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c125_token_we = addr_hit[1256] & reg_we & !reg_error;
  assign message_header_c125_token_wd = reg_wdata[27:18];

  assign message_header_c125_field1_we = addr_hit[1256] & reg_we & !reg_error;
  assign message_header_c125_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c125_we = addr_hit[1257] & reg_we & !reg_error;
  assign message_payload_1_c125_wd = reg_wdata[31:0];

  assign doorbell_c125_intr_we = addr_hit[1258] & reg_we & !reg_error;
  assign doorbell_c125_intr_wd = reg_wdata[0];

  assign doorbell_c125_preserve_mask_we = addr_hit[1258] & reg_we & !reg_error;
  assign doorbell_c125_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c125_intr_we = addr_hit[1259] & reg_we & !reg_error;
  assign completion_interrupt_c125_intr_wd = reg_wdata[0];

  assign completion_interrupt_c125_preserve_mask_we = addr_hit[1259] & reg_we & !reg_error;
  assign completion_interrupt_c125_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c126_we = addr_hit[1260] & reg_we & !reg_error;
  assign reserved_1_c126_wd = reg_wdata[31:0];

  assign channel_status_c126_channel_free_we = addr_hit[1261] & reg_we & !reg_error;
  assign channel_status_c126_channel_free_wd = reg_wdata[0];

  assign channel_status_c126_channel_error_we = addr_hit[1261] & reg_we & !reg_error;
  assign channel_status_c126_channel_error_wd = reg_wdata[1];

  assign channel_status_c126_field1_we = addr_hit[1261] & reg_we & !reg_error;
  assign channel_status_c126_field1_wd = reg_wdata[31:2];

  assign reserved_2_c126_we = addr_hit[1262] & reg_we & !reg_error;
  assign reserved_2_c126_wd = reg_wdata[31:0];

  assign channel_flags_c126_intr_enable_we = addr_hit[1264] & reg_we & !reg_error;
  assign channel_flags_c126_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c126_field1_we = addr_hit[1264] & reg_we & !reg_error;
  assign channel_flags_c126_field1_wd = reg_wdata[31:1];

  assign length_c126_we = addr_hit[1265] & reg_we & !reg_error;
  assign length_c126_wd = reg_wdata[31:0];

  assign message_header_c126_message_id_we = addr_hit[1266] & reg_we & !reg_error;
  assign message_header_c126_message_id_wd = reg_wdata[7:0];

  assign message_header_c126_message_type_we = addr_hit[1266] & reg_we & !reg_error;
  assign message_header_c126_message_type_wd = reg_wdata[9:8];

  assign message_header_c126_protocol_id_we = addr_hit[1266] & reg_we & !reg_error;
  assign message_header_c126_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c126_token_we = addr_hit[1266] & reg_we & !reg_error;
  assign message_header_c126_token_wd = reg_wdata[27:18];

  assign message_header_c126_field1_we = addr_hit[1266] & reg_we & !reg_error;
  assign message_header_c126_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c126_we = addr_hit[1267] & reg_we & !reg_error;
  assign message_payload_1_c126_wd = reg_wdata[31:0];

  assign doorbell_c126_intr_we = addr_hit[1268] & reg_we & !reg_error;
  assign doorbell_c126_intr_wd = reg_wdata[0];

  assign doorbell_c126_preserve_mask_we = addr_hit[1268] & reg_we & !reg_error;
  assign doorbell_c126_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c126_intr_we = addr_hit[1269] & reg_we & !reg_error;
  assign completion_interrupt_c126_intr_wd = reg_wdata[0];

  assign completion_interrupt_c126_preserve_mask_we = addr_hit[1269] & reg_we & !reg_error;
  assign completion_interrupt_c126_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c127_we = addr_hit[1270] & reg_we & !reg_error;
  assign reserved_1_c127_wd = reg_wdata[31:0];

  assign channel_status_c127_channel_free_we = addr_hit[1271] & reg_we & !reg_error;
  assign channel_status_c127_channel_free_wd = reg_wdata[0];

  assign channel_status_c127_channel_error_we = addr_hit[1271] & reg_we & !reg_error;
  assign channel_status_c127_channel_error_wd = reg_wdata[1];

  assign channel_status_c127_field1_we = addr_hit[1271] & reg_we & !reg_error;
  assign channel_status_c127_field1_wd = reg_wdata[31:2];

  assign reserved_2_c127_we = addr_hit[1272] & reg_we & !reg_error;
  assign reserved_2_c127_wd = reg_wdata[31:0];

  assign channel_flags_c127_intr_enable_we = addr_hit[1274] & reg_we & !reg_error;
  assign channel_flags_c127_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c127_field1_we = addr_hit[1274] & reg_we & !reg_error;
  assign channel_flags_c127_field1_wd = reg_wdata[31:1];

  assign length_c127_we = addr_hit[1275] & reg_we & !reg_error;
  assign length_c127_wd = reg_wdata[31:0];

  assign message_header_c127_message_id_we = addr_hit[1276] & reg_we & !reg_error;
  assign message_header_c127_message_id_wd = reg_wdata[7:0];

  assign message_header_c127_message_type_we = addr_hit[1276] & reg_we & !reg_error;
  assign message_header_c127_message_type_wd = reg_wdata[9:8];

  assign message_header_c127_protocol_id_we = addr_hit[1276] & reg_we & !reg_error;
  assign message_header_c127_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c127_token_we = addr_hit[1276] & reg_we & !reg_error;
  assign message_header_c127_token_wd = reg_wdata[27:18];

  assign message_header_c127_field1_we = addr_hit[1276] & reg_we & !reg_error;
  assign message_header_c127_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c127_we = addr_hit[1277] & reg_we & !reg_error;
  assign message_payload_1_c127_wd = reg_wdata[31:0];

  assign doorbell_c127_intr_we = addr_hit[1278] & reg_we & !reg_error;
  assign doorbell_c127_intr_wd = reg_wdata[0];

  assign doorbell_c127_preserve_mask_we = addr_hit[1278] & reg_we & !reg_error;
  assign doorbell_c127_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c127_intr_we = addr_hit[1279] & reg_we & !reg_error;
  assign completion_interrupt_c127_intr_wd = reg_wdata[0];

  assign completion_interrupt_c127_preserve_mask_we = addr_hit[1279] & reg_we & !reg_error;
  assign completion_interrupt_c127_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c128_we = addr_hit[1280] & reg_we & !reg_error;
  assign reserved_1_c128_wd = reg_wdata[31:0];

  assign channel_status_c128_channel_free_we = addr_hit[1281] & reg_we & !reg_error;
  assign channel_status_c128_channel_free_wd = reg_wdata[0];

  assign channel_status_c128_channel_error_we = addr_hit[1281] & reg_we & !reg_error;
  assign channel_status_c128_channel_error_wd = reg_wdata[1];

  assign channel_status_c128_field1_we = addr_hit[1281] & reg_we & !reg_error;
  assign channel_status_c128_field1_wd = reg_wdata[31:2];

  assign reserved_2_c128_we = addr_hit[1282] & reg_we & !reg_error;
  assign reserved_2_c128_wd = reg_wdata[31:0];

  assign channel_flags_c128_intr_enable_we = addr_hit[1284] & reg_we & !reg_error;
  assign channel_flags_c128_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c128_field1_we = addr_hit[1284] & reg_we & !reg_error;
  assign channel_flags_c128_field1_wd = reg_wdata[31:1];

  assign length_c128_we = addr_hit[1285] & reg_we & !reg_error;
  assign length_c128_wd = reg_wdata[31:0];

  assign message_header_c128_message_id_we = addr_hit[1286] & reg_we & !reg_error;
  assign message_header_c128_message_id_wd = reg_wdata[7:0];

  assign message_header_c128_message_type_we = addr_hit[1286] & reg_we & !reg_error;
  assign message_header_c128_message_type_wd = reg_wdata[9:8];

  assign message_header_c128_protocol_id_we = addr_hit[1286] & reg_we & !reg_error;
  assign message_header_c128_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c128_token_we = addr_hit[1286] & reg_we & !reg_error;
  assign message_header_c128_token_wd = reg_wdata[27:18];

  assign message_header_c128_field1_we = addr_hit[1286] & reg_we & !reg_error;
  assign message_header_c128_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c128_we = addr_hit[1287] & reg_we & !reg_error;
  assign message_payload_1_c128_wd = reg_wdata[31:0];

  assign doorbell_c128_intr_we = addr_hit[1288] & reg_we & !reg_error;
  assign doorbell_c128_intr_wd = reg_wdata[0];

  assign doorbell_c128_preserve_mask_we = addr_hit[1288] & reg_we & !reg_error;
  assign doorbell_c128_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c128_intr_we = addr_hit[1289] & reg_we & !reg_error;
  assign completion_interrupt_c128_intr_wd = reg_wdata[0];

  assign completion_interrupt_c128_preserve_mask_we = addr_hit[1289] & reg_we & !reg_error;
  assign completion_interrupt_c128_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c129_we = addr_hit[1290] & reg_we & !reg_error;
  assign reserved_1_c129_wd = reg_wdata[31:0];

  assign channel_status_c129_channel_free_we = addr_hit[1291] & reg_we & !reg_error;
  assign channel_status_c129_channel_free_wd = reg_wdata[0];

  assign channel_status_c129_channel_error_we = addr_hit[1291] & reg_we & !reg_error;
  assign channel_status_c129_channel_error_wd = reg_wdata[1];

  assign channel_status_c129_field1_we = addr_hit[1291] & reg_we & !reg_error;
  assign channel_status_c129_field1_wd = reg_wdata[31:2];

  assign reserved_2_c129_we = addr_hit[1292] & reg_we & !reg_error;
  assign reserved_2_c129_wd = reg_wdata[31:0];

  assign channel_flags_c129_intr_enable_we = addr_hit[1294] & reg_we & !reg_error;
  assign channel_flags_c129_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c129_field1_we = addr_hit[1294] & reg_we & !reg_error;
  assign channel_flags_c129_field1_wd = reg_wdata[31:1];

  assign length_c129_we = addr_hit[1295] & reg_we & !reg_error;
  assign length_c129_wd = reg_wdata[31:0];

  assign message_header_c129_message_id_we = addr_hit[1296] & reg_we & !reg_error;
  assign message_header_c129_message_id_wd = reg_wdata[7:0];

  assign message_header_c129_message_type_we = addr_hit[1296] & reg_we & !reg_error;
  assign message_header_c129_message_type_wd = reg_wdata[9:8];

  assign message_header_c129_protocol_id_we = addr_hit[1296] & reg_we & !reg_error;
  assign message_header_c129_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c129_token_we = addr_hit[1296] & reg_we & !reg_error;
  assign message_header_c129_token_wd = reg_wdata[27:18];

  assign message_header_c129_field1_we = addr_hit[1296] & reg_we & !reg_error;
  assign message_header_c129_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c129_we = addr_hit[1297] & reg_we & !reg_error;
  assign message_payload_1_c129_wd = reg_wdata[31:0];

  assign doorbell_c129_intr_we = addr_hit[1298] & reg_we & !reg_error;
  assign doorbell_c129_intr_wd = reg_wdata[0];

  assign doorbell_c129_preserve_mask_we = addr_hit[1298] & reg_we & !reg_error;
  assign doorbell_c129_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c129_intr_we = addr_hit[1299] & reg_we & !reg_error;
  assign completion_interrupt_c129_intr_wd = reg_wdata[0];

  assign completion_interrupt_c129_preserve_mask_we = addr_hit[1299] & reg_we & !reg_error;
  assign completion_interrupt_c129_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c130_we = addr_hit[1300] & reg_we & !reg_error;
  assign reserved_1_c130_wd = reg_wdata[31:0];

  assign channel_status_c130_channel_free_we = addr_hit[1301] & reg_we & !reg_error;
  assign channel_status_c130_channel_free_wd = reg_wdata[0];

  assign channel_status_c130_channel_error_we = addr_hit[1301] & reg_we & !reg_error;
  assign channel_status_c130_channel_error_wd = reg_wdata[1];

  assign channel_status_c130_field1_we = addr_hit[1301] & reg_we & !reg_error;
  assign channel_status_c130_field1_wd = reg_wdata[31:2];

  assign reserved_2_c130_we = addr_hit[1302] & reg_we & !reg_error;
  assign reserved_2_c130_wd = reg_wdata[31:0];

  assign channel_flags_c130_intr_enable_we = addr_hit[1304] & reg_we & !reg_error;
  assign channel_flags_c130_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c130_field1_we = addr_hit[1304] & reg_we & !reg_error;
  assign channel_flags_c130_field1_wd = reg_wdata[31:1];

  assign length_c130_we = addr_hit[1305] & reg_we & !reg_error;
  assign length_c130_wd = reg_wdata[31:0];

  assign message_header_c130_message_id_we = addr_hit[1306] & reg_we & !reg_error;
  assign message_header_c130_message_id_wd = reg_wdata[7:0];

  assign message_header_c130_message_type_we = addr_hit[1306] & reg_we & !reg_error;
  assign message_header_c130_message_type_wd = reg_wdata[9:8];

  assign message_header_c130_protocol_id_we = addr_hit[1306] & reg_we & !reg_error;
  assign message_header_c130_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c130_token_we = addr_hit[1306] & reg_we & !reg_error;
  assign message_header_c130_token_wd = reg_wdata[27:18];

  assign message_header_c130_field1_we = addr_hit[1306] & reg_we & !reg_error;
  assign message_header_c130_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c130_we = addr_hit[1307] & reg_we & !reg_error;
  assign message_payload_1_c130_wd = reg_wdata[31:0];

  assign doorbell_c130_intr_we = addr_hit[1308] & reg_we & !reg_error;
  assign doorbell_c130_intr_wd = reg_wdata[0];

  assign doorbell_c130_preserve_mask_we = addr_hit[1308] & reg_we & !reg_error;
  assign doorbell_c130_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c130_intr_we = addr_hit[1309] & reg_we & !reg_error;
  assign completion_interrupt_c130_intr_wd = reg_wdata[0];

  assign completion_interrupt_c130_preserve_mask_we = addr_hit[1309] & reg_we & !reg_error;
  assign completion_interrupt_c130_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c131_we = addr_hit[1310] & reg_we & !reg_error;
  assign reserved_1_c131_wd = reg_wdata[31:0];

  assign channel_status_c131_channel_free_we = addr_hit[1311] & reg_we & !reg_error;
  assign channel_status_c131_channel_free_wd = reg_wdata[0];

  assign channel_status_c131_channel_error_we = addr_hit[1311] & reg_we & !reg_error;
  assign channel_status_c131_channel_error_wd = reg_wdata[1];

  assign channel_status_c131_field1_we = addr_hit[1311] & reg_we & !reg_error;
  assign channel_status_c131_field1_wd = reg_wdata[31:2];

  assign reserved_2_c131_we = addr_hit[1312] & reg_we & !reg_error;
  assign reserved_2_c131_wd = reg_wdata[31:0];

  assign channel_flags_c131_intr_enable_we = addr_hit[1314] & reg_we & !reg_error;
  assign channel_flags_c131_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c131_field1_we = addr_hit[1314] & reg_we & !reg_error;
  assign channel_flags_c131_field1_wd = reg_wdata[31:1];

  assign length_c131_we = addr_hit[1315] & reg_we & !reg_error;
  assign length_c131_wd = reg_wdata[31:0];

  assign message_header_c131_message_id_we = addr_hit[1316] & reg_we & !reg_error;
  assign message_header_c131_message_id_wd = reg_wdata[7:0];

  assign message_header_c131_message_type_we = addr_hit[1316] & reg_we & !reg_error;
  assign message_header_c131_message_type_wd = reg_wdata[9:8];

  assign message_header_c131_protocol_id_we = addr_hit[1316] & reg_we & !reg_error;
  assign message_header_c131_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c131_token_we = addr_hit[1316] & reg_we & !reg_error;
  assign message_header_c131_token_wd = reg_wdata[27:18];

  assign message_header_c131_field1_we = addr_hit[1316] & reg_we & !reg_error;
  assign message_header_c131_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c131_we = addr_hit[1317] & reg_we & !reg_error;
  assign message_payload_1_c131_wd = reg_wdata[31:0];

  assign doorbell_c131_intr_we = addr_hit[1318] & reg_we & !reg_error;
  assign doorbell_c131_intr_wd = reg_wdata[0];

  assign doorbell_c131_preserve_mask_we = addr_hit[1318] & reg_we & !reg_error;
  assign doorbell_c131_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c131_intr_we = addr_hit[1319] & reg_we & !reg_error;
  assign completion_interrupt_c131_intr_wd = reg_wdata[0];

  assign completion_interrupt_c131_preserve_mask_we = addr_hit[1319] & reg_we & !reg_error;
  assign completion_interrupt_c131_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c132_we = addr_hit[1320] & reg_we & !reg_error;
  assign reserved_1_c132_wd = reg_wdata[31:0];

  assign channel_status_c132_channel_free_we = addr_hit[1321] & reg_we & !reg_error;
  assign channel_status_c132_channel_free_wd = reg_wdata[0];

  assign channel_status_c132_channel_error_we = addr_hit[1321] & reg_we & !reg_error;
  assign channel_status_c132_channel_error_wd = reg_wdata[1];

  assign channel_status_c132_field1_we = addr_hit[1321] & reg_we & !reg_error;
  assign channel_status_c132_field1_wd = reg_wdata[31:2];

  assign reserved_2_c132_we = addr_hit[1322] & reg_we & !reg_error;
  assign reserved_2_c132_wd = reg_wdata[31:0];

  assign channel_flags_c132_intr_enable_we = addr_hit[1324] & reg_we & !reg_error;
  assign channel_flags_c132_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c132_field1_we = addr_hit[1324] & reg_we & !reg_error;
  assign channel_flags_c132_field1_wd = reg_wdata[31:1];

  assign length_c132_we = addr_hit[1325] & reg_we & !reg_error;
  assign length_c132_wd = reg_wdata[31:0];

  assign message_header_c132_message_id_we = addr_hit[1326] & reg_we & !reg_error;
  assign message_header_c132_message_id_wd = reg_wdata[7:0];

  assign message_header_c132_message_type_we = addr_hit[1326] & reg_we & !reg_error;
  assign message_header_c132_message_type_wd = reg_wdata[9:8];

  assign message_header_c132_protocol_id_we = addr_hit[1326] & reg_we & !reg_error;
  assign message_header_c132_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c132_token_we = addr_hit[1326] & reg_we & !reg_error;
  assign message_header_c132_token_wd = reg_wdata[27:18];

  assign message_header_c132_field1_we = addr_hit[1326] & reg_we & !reg_error;
  assign message_header_c132_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c132_we = addr_hit[1327] & reg_we & !reg_error;
  assign message_payload_1_c132_wd = reg_wdata[31:0];

  assign doorbell_c132_intr_we = addr_hit[1328] & reg_we & !reg_error;
  assign doorbell_c132_intr_wd = reg_wdata[0];

  assign doorbell_c132_preserve_mask_we = addr_hit[1328] & reg_we & !reg_error;
  assign doorbell_c132_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c132_intr_we = addr_hit[1329] & reg_we & !reg_error;
  assign completion_interrupt_c132_intr_wd = reg_wdata[0];

  assign completion_interrupt_c132_preserve_mask_we = addr_hit[1329] & reg_we & !reg_error;
  assign completion_interrupt_c132_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c133_we = addr_hit[1330] & reg_we & !reg_error;
  assign reserved_1_c133_wd = reg_wdata[31:0];

  assign channel_status_c133_channel_free_we = addr_hit[1331] & reg_we & !reg_error;
  assign channel_status_c133_channel_free_wd = reg_wdata[0];

  assign channel_status_c133_channel_error_we = addr_hit[1331] & reg_we & !reg_error;
  assign channel_status_c133_channel_error_wd = reg_wdata[1];

  assign channel_status_c133_field1_we = addr_hit[1331] & reg_we & !reg_error;
  assign channel_status_c133_field1_wd = reg_wdata[31:2];

  assign reserved_2_c133_we = addr_hit[1332] & reg_we & !reg_error;
  assign reserved_2_c133_wd = reg_wdata[31:0];

  assign channel_flags_c133_intr_enable_we = addr_hit[1334] & reg_we & !reg_error;
  assign channel_flags_c133_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c133_field1_we = addr_hit[1334] & reg_we & !reg_error;
  assign channel_flags_c133_field1_wd = reg_wdata[31:1];

  assign length_c133_we = addr_hit[1335] & reg_we & !reg_error;
  assign length_c133_wd = reg_wdata[31:0];

  assign message_header_c133_message_id_we = addr_hit[1336] & reg_we & !reg_error;
  assign message_header_c133_message_id_wd = reg_wdata[7:0];

  assign message_header_c133_message_type_we = addr_hit[1336] & reg_we & !reg_error;
  assign message_header_c133_message_type_wd = reg_wdata[9:8];

  assign message_header_c133_protocol_id_we = addr_hit[1336] & reg_we & !reg_error;
  assign message_header_c133_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c133_token_we = addr_hit[1336] & reg_we & !reg_error;
  assign message_header_c133_token_wd = reg_wdata[27:18];

  assign message_header_c133_field1_we = addr_hit[1336] & reg_we & !reg_error;
  assign message_header_c133_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c133_we = addr_hit[1337] & reg_we & !reg_error;
  assign message_payload_1_c133_wd = reg_wdata[31:0];

  assign doorbell_c133_intr_we = addr_hit[1338] & reg_we & !reg_error;
  assign doorbell_c133_intr_wd = reg_wdata[0];

  assign doorbell_c133_preserve_mask_we = addr_hit[1338] & reg_we & !reg_error;
  assign doorbell_c133_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c133_intr_we = addr_hit[1339] & reg_we & !reg_error;
  assign completion_interrupt_c133_intr_wd = reg_wdata[0];

  assign completion_interrupt_c133_preserve_mask_we = addr_hit[1339] & reg_we & !reg_error;
  assign completion_interrupt_c133_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c134_we = addr_hit[1340] & reg_we & !reg_error;
  assign reserved_1_c134_wd = reg_wdata[31:0];

  assign channel_status_c134_channel_free_we = addr_hit[1341] & reg_we & !reg_error;
  assign channel_status_c134_channel_free_wd = reg_wdata[0];

  assign channel_status_c134_channel_error_we = addr_hit[1341] & reg_we & !reg_error;
  assign channel_status_c134_channel_error_wd = reg_wdata[1];

  assign channel_status_c134_field1_we = addr_hit[1341] & reg_we & !reg_error;
  assign channel_status_c134_field1_wd = reg_wdata[31:2];

  assign reserved_2_c134_we = addr_hit[1342] & reg_we & !reg_error;
  assign reserved_2_c134_wd = reg_wdata[31:0];

  assign channel_flags_c134_intr_enable_we = addr_hit[1344] & reg_we & !reg_error;
  assign channel_flags_c134_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c134_field1_we = addr_hit[1344] & reg_we & !reg_error;
  assign channel_flags_c134_field1_wd = reg_wdata[31:1];

  assign length_c134_we = addr_hit[1345] & reg_we & !reg_error;
  assign length_c134_wd = reg_wdata[31:0];

  assign message_header_c134_message_id_we = addr_hit[1346] & reg_we & !reg_error;
  assign message_header_c134_message_id_wd = reg_wdata[7:0];

  assign message_header_c134_message_type_we = addr_hit[1346] & reg_we & !reg_error;
  assign message_header_c134_message_type_wd = reg_wdata[9:8];

  assign message_header_c134_protocol_id_we = addr_hit[1346] & reg_we & !reg_error;
  assign message_header_c134_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c134_token_we = addr_hit[1346] & reg_we & !reg_error;
  assign message_header_c134_token_wd = reg_wdata[27:18];

  assign message_header_c134_field1_we = addr_hit[1346] & reg_we & !reg_error;
  assign message_header_c134_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c134_we = addr_hit[1347] & reg_we & !reg_error;
  assign message_payload_1_c134_wd = reg_wdata[31:0];

  assign doorbell_c134_intr_we = addr_hit[1348] & reg_we & !reg_error;
  assign doorbell_c134_intr_wd = reg_wdata[0];

  assign doorbell_c134_preserve_mask_we = addr_hit[1348] & reg_we & !reg_error;
  assign doorbell_c134_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c134_intr_we = addr_hit[1349] & reg_we & !reg_error;
  assign completion_interrupt_c134_intr_wd = reg_wdata[0];

  assign completion_interrupt_c134_preserve_mask_we = addr_hit[1349] & reg_we & !reg_error;
  assign completion_interrupt_c134_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c135_we = addr_hit[1350] & reg_we & !reg_error;
  assign reserved_1_c135_wd = reg_wdata[31:0];

  assign channel_status_c135_channel_free_we = addr_hit[1351] & reg_we & !reg_error;
  assign channel_status_c135_channel_free_wd = reg_wdata[0];

  assign channel_status_c135_channel_error_we = addr_hit[1351] & reg_we & !reg_error;
  assign channel_status_c135_channel_error_wd = reg_wdata[1];

  assign channel_status_c135_field1_we = addr_hit[1351] & reg_we & !reg_error;
  assign channel_status_c135_field1_wd = reg_wdata[31:2];

  assign reserved_2_c135_we = addr_hit[1352] & reg_we & !reg_error;
  assign reserved_2_c135_wd = reg_wdata[31:0];

  assign channel_flags_c135_intr_enable_we = addr_hit[1354] & reg_we & !reg_error;
  assign channel_flags_c135_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c135_field1_we = addr_hit[1354] & reg_we & !reg_error;
  assign channel_flags_c135_field1_wd = reg_wdata[31:1];

  assign length_c135_we = addr_hit[1355] & reg_we & !reg_error;
  assign length_c135_wd = reg_wdata[31:0];

  assign message_header_c135_message_id_we = addr_hit[1356] & reg_we & !reg_error;
  assign message_header_c135_message_id_wd = reg_wdata[7:0];

  assign message_header_c135_message_type_we = addr_hit[1356] & reg_we & !reg_error;
  assign message_header_c135_message_type_wd = reg_wdata[9:8];

  assign message_header_c135_protocol_id_we = addr_hit[1356] & reg_we & !reg_error;
  assign message_header_c135_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c135_token_we = addr_hit[1356] & reg_we & !reg_error;
  assign message_header_c135_token_wd = reg_wdata[27:18];

  assign message_header_c135_field1_we = addr_hit[1356] & reg_we & !reg_error;
  assign message_header_c135_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c135_we = addr_hit[1357] & reg_we & !reg_error;
  assign message_payload_1_c135_wd = reg_wdata[31:0];

  assign doorbell_c135_intr_we = addr_hit[1358] & reg_we & !reg_error;
  assign doorbell_c135_intr_wd = reg_wdata[0];

  assign doorbell_c135_preserve_mask_we = addr_hit[1358] & reg_we & !reg_error;
  assign doorbell_c135_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c135_intr_we = addr_hit[1359] & reg_we & !reg_error;
  assign completion_interrupt_c135_intr_wd = reg_wdata[0];

  assign completion_interrupt_c135_preserve_mask_we = addr_hit[1359] & reg_we & !reg_error;
  assign completion_interrupt_c135_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c136_we = addr_hit[1360] & reg_we & !reg_error;
  assign reserved_1_c136_wd = reg_wdata[31:0];

  assign channel_status_c136_channel_free_we = addr_hit[1361] & reg_we & !reg_error;
  assign channel_status_c136_channel_free_wd = reg_wdata[0];

  assign channel_status_c136_channel_error_we = addr_hit[1361] & reg_we & !reg_error;
  assign channel_status_c136_channel_error_wd = reg_wdata[1];

  assign channel_status_c136_field1_we = addr_hit[1361] & reg_we & !reg_error;
  assign channel_status_c136_field1_wd = reg_wdata[31:2];

  assign reserved_2_c136_we = addr_hit[1362] & reg_we & !reg_error;
  assign reserved_2_c136_wd = reg_wdata[31:0];

  assign channel_flags_c136_intr_enable_we = addr_hit[1364] & reg_we & !reg_error;
  assign channel_flags_c136_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c136_field1_we = addr_hit[1364] & reg_we & !reg_error;
  assign channel_flags_c136_field1_wd = reg_wdata[31:1];

  assign length_c136_we = addr_hit[1365] & reg_we & !reg_error;
  assign length_c136_wd = reg_wdata[31:0];

  assign message_header_c136_message_id_we = addr_hit[1366] & reg_we & !reg_error;
  assign message_header_c136_message_id_wd = reg_wdata[7:0];

  assign message_header_c136_message_type_we = addr_hit[1366] & reg_we & !reg_error;
  assign message_header_c136_message_type_wd = reg_wdata[9:8];

  assign message_header_c136_protocol_id_we = addr_hit[1366] & reg_we & !reg_error;
  assign message_header_c136_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c136_token_we = addr_hit[1366] & reg_we & !reg_error;
  assign message_header_c136_token_wd = reg_wdata[27:18];

  assign message_header_c136_field1_we = addr_hit[1366] & reg_we & !reg_error;
  assign message_header_c136_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c136_we = addr_hit[1367] & reg_we & !reg_error;
  assign message_payload_1_c136_wd = reg_wdata[31:0];

  assign doorbell_c136_intr_we = addr_hit[1368] & reg_we & !reg_error;
  assign doorbell_c136_intr_wd = reg_wdata[0];

  assign doorbell_c136_preserve_mask_we = addr_hit[1368] & reg_we & !reg_error;
  assign doorbell_c136_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c136_intr_we = addr_hit[1369] & reg_we & !reg_error;
  assign completion_interrupt_c136_intr_wd = reg_wdata[0];

  assign completion_interrupt_c136_preserve_mask_we = addr_hit[1369] & reg_we & !reg_error;
  assign completion_interrupt_c136_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c137_we = addr_hit[1370] & reg_we & !reg_error;
  assign reserved_1_c137_wd = reg_wdata[31:0];

  assign channel_status_c137_channel_free_we = addr_hit[1371] & reg_we & !reg_error;
  assign channel_status_c137_channel_free_wd = reg_wdata[0];

  assign channel_status_c137_channel_error_we = addr_hit[1371] & reg_we & !reg_error;
  assign channel_status_c137_channel_error_wd = reg_wdata[1];

  assign channel_status_c137_field1_we = addr_hit[1371] & reg_we & !reg_error;
  assign channel_status_c137_field1_wd = reg_wdata[31:2];

  assign reserved_2_c137_we = addr_hit[1372] & reg_we & !reg_error;
  assign reserved_2_c137_wd = reg_wdata[31:0];

  assign channel_flags_c137_intr_enable_we = addr_hit[1374] & reg_we & !reg_error;
  assign channel_flags_c137_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c137_field1_we = addr_hit[1374] & reg_we & !reg_error;
  assign channel_flags_c137_field1_wd = reg_wdata[31:1];

  assign length_c137_we = addr_hit[1375] & reg_we & !reg_error;
  assign length_c137_wd = reg_wdata[31:0];

  assign message_header_c137_message_id_we = addr_hit[1376] & reg_we & !reg_error;
  assign message_header_c137_message_id_wd = reg_wdata[7:0];

  assign message_header_c137_message_type_we = addr_hit[1376] & reg_we & !reg_error;
  assign message_header_c137_message_type_wd = reg_wdata[9:8];

  assign message_header_c137_protocol_id_we = addr_hit[1376] & reg_we & !reg_error;
  assign message_header_c137_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c137_token_we = addr_hit[1376] & reg_we & !reg_error;
  assign message_header_c137_token_wd = reg_wdata[27:18];

  assign message_header_c137_field1_we = addr_hit[1376] & reg_we & !reg_error;
  assign message_header_c137_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c137_we = addr_hit[1377] & reg_we & !reg_error;
  assign message_payload_1_c137_wd = reg_wdata[31:0];

  assign doorbell_c137_intr_we = addr_hit[1378] & reg_we & !reg_error;
  assign doorbell_c137_intr_wd = reg_wdata[0];

  assign doorbell_c137_preserve_mask_we = addr_hit[1378] & reg_we & !reg_error;
  assign doorbell_c137_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c137_intr_we = addr_hit[1379] & reg_we & !reg_error;
  assign completion_interrupt_c137_intr_wd = reg_wdata[0];

  assign completion_interrupt_c137_preserve_mask_we = addr_hit[1379] & reg_we & !reg_error;
  assign completion_interrupt_c137_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c138_we = addr_hit[1380] & reg_we & !reg_error;
  assign reserved_1_c138_wd = reg_wdata[31:0];

  assign channel_status_c138_channel_free_we = addr_hit[1381] & reg_we & !reg_error;
  assign channel_status_c138_channel_free_wd = reg_wdata[0];

  assign channel_status_c138_channel_error_we = addr_hit[1381] & reg_we & !reg_error;
  assign channel_status_c138_channel_error_wd = reg_wdata[1];

  assign channel_status_c138_field1_we = addr_hit[1381] & reg_we & !reg_error;
  assign channel_status_c138_field1_wd = reg_wdata[31:2];

  assign reserved_2_c138_we = addr_hit[1382] & reg_we & !reg_error;
  assign reserved_2_c138_wd = reg_wdata[31:0];

  assign channel_flags_c138_intr_enable_we = addr_hit[1384] & reg_we & !reg_error;
  assign channel_flags_c138_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c138_field1_we = addr_hit[1384] & reg_we & !reg_error;
  assign channel_flags_c138_field1_wd = reg_wdata[31:1];

  assign length_c138_we = addr_hit[1385] & reg_we & !reg_error;
  assign length_c138_wd = reg_wdata[31:0];

  assign message_header_c138_message_id_we = addr_hit[1386] & reg_we & !reg_error;
  assign message_header_c138_message_id_wd = reg_wdata[7:0];

  assign message_header_c138_message_type_we = addr_hit[1386] & reg_we & !reg_error;
  assign message_header_c138_message_type_wd = reg_wdata[9:8];

  assign message_header_c138_protocol_id_we = addr_hit[1386] & reg_we & !reg_error;
  assign message_header_c138_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c138_token_we = addr_hit[1386] & reg_we & !reg_error;
  assign message_header_c138_token_wd = reg_wdata[27:18];

  assign message_header_c138_field1_we = addr_hit[1386] & reg_we & !reg_error;
  assign message_header_c138_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c138_we = addr_hit[1387] & reg_we & !reg_error;
  assign message_payload_1_c138_wd = reg_wdata[31:0];

  assign doorbell_c138_intr_we = addr_hit[1388] & reg_we & !reg_error;
  assign doorbell_c138_intr_wd = reg_wdata[0];

  assign doorbell_c138_preserve_mask_we = addr_hit[1388] & reg_we & !reg_error;
  assign doorbell_c138_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c138_intr_we = addr_hit[1389] & reg_we & !reg_error;
  assign completion_interrupt_c138_intr_wd = reg_wdata[0];

  assign completion_interrupt_c138_preserve_mask_we = addr_hit[1389] & reg_we & !reg_error;
  assign completion_interrupt_c138_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c139_we = addr_hit[1390] & reg_we & !reg_error;
  assign reserved_1_c139_wd = reg_wdata[31:0];

  assign channel_status_c139_channel_free_we = addr_hit[1391] & reg_we & !reg_error;
  assign channel_status_c139_channel_free_wd = reg_wdata[0];

  assign channel_status_c139_channel_error_we = addr_hit[1391] & reg_we & !reg_error;
  assign channel_status_c139_channel_error_wd = reg_wdata[1];

  assign channel_status_c139_field1_we = addr_hit[1391] & reg_we & !reg_error;
  assign channel_status_c139_field1_wd = reg_wdata[31:2];

  assign reserved_2_c139_we = addr_hit[1392] & reg_we & !reg_error;
  assign reserved_2_c139_wd = reg_wdata[31:0];

  assign channel_flags_c139_intr_enable_we = addr_hit[1394] & reg_we & !reg_error;
  assign channel_flags_c139_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c139_field1_we = addr_hit[1394] & reg_we & !reg_error;
  assign channel_flags_c139_field1_wd = reg_wdata[31:1];

  assign length_c139_we = addr_hit[1395] & reg_we & !reg_error;
  assign length_c139_wd = reg_wdata[31:0];

  assign message_header_c139_message_id_we = addr_hit[1396] & reg_we & !reg_error;
  assign message_header_c139_message_id_wd = reg_wdata[7:0];

  assign message_header_c139_message_type_we = addr_hit[1396] & reg_we & !reg_error;
  assign message_header_c139_message_type_wd = reg_wdata[9:8];

  assign message_header_c139_protocol_id_we = addr_hit[1396] & reg_we & !reg_error;
  assign message_header_c139_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c139_token_we = addr_hit[1396] & reg_we & !reg_error;
  assign message_header_c139_token_wd = reg_wdata[27:18];

  assign message_header_c139_field1_we = addr_hit[1396] & reg_we & !reg_error;
  assign message_header_c139_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c139_we = addr_hit[1397] & reg_we & !reg_error;
  assign message_payload_1_c139_wd = reg_wdata[31:0];

  assign doorbell_c139_intr_we = addr_hit[1398] & reg_we & !reg_error;
  assign doorbell_c139_intr_wd = reg_wdata[0];

  assign doorbell_c139_preserve_mask_we = addr_hit[1398] & reg_we & !reg_error;
  assign doorbell_c139_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c139_intr_we = addr_hit[1399] & reg_we & !reg_error;
  assign completion_interrupt_c139_intr_wd = reg_wdata[0];

  assign completion_interrupt_c139_preserve_mask_we = addr_hit[1399] & reg_we & !reg_error;
  assign completion_interrupt_c139_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c140_we = addr_hit[1400] & reg_we & !reg_error;
  assign reserved_1_c140_wd = reg_wdata[31:0];

  assign channel_status_c140_channel_free_we = addr_hit[1401] & reg_we & !reg_error;
  assign channel_status_c140_channel_free_wd = reg_wdata[0];

  assign channel_status_c140_channel_error_we = addr_hit[1401] & reg_we & !reg_error;
  assign channel_status_c140_channel_error_wd = reg_wdata[1];

  assign channel_status_c140_field1_we = addr_hit[1401] & reg_we & !reg_error;
  assign channel_status_c140_field1_wd = reg_wdata[31:2];

  assign reserved_2_c140_we = addr_hit[1402] & reg_we & !reg_error;
  assign reserved_2_c140_wd = reg_wdata[31:0];

  assign channel_flags_c140_intr_enable_we = addr_hit[1404] & reg_we & !reg_error;
  assign channel_flags_c140_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c140_field1_we = addr_hit[1404] & reg_we & !reg_error;
  assign channel_flags_c140_field1_wd = reg_wdata[31:1];

  assign length_c140_we = addr_hit[1405] & reg_we & !reg_error;
  assign length_c140_wd = reg_wdata[31:0];

  assign message_header_c140_message_id_we = addr_hit[1406] & reg_we & !reg_error;
  assign message_header_c140_message_id_wd = reg_wdata[7:0];

  assign message_header_c140_message_type_we = addr_hit[1406] & reg_we & !reg_error;
  assign message_header_c140_message_type_wd = reg_wdata[9:8];

  assign message_header_c140_protocol_id_we = addr_hit[1406] & reg_we & !reg_error;
  assign message_header_c140_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c140_token_we = addr_hit[1406] & reg_we & !reg_error;
  assign message_header_c140_token_wd = reg_wdata[27:18];

  assign message_header_c140_field1_we = addr_hit[1406] & reg_we & !reg_error;
  assign message_header_c140_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c140_we = addr_hit[1407] & reg_we & !reg_error;
  assign message_payload_1_c140_wd = reg_wdata[31:0];

  assign doorbell_c140_intr_we = addr_hit[1408] & reg_we & !reg_error;
  assign doorbell_c140_intr_wd = reg_wdata[0];

  assign doorbell_c140_preserve_mask_we = addr_hit[1408] & reg_we & !reg_error;
  assign doorbell_c140_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c140_intr_we = addr_hit[1409] & reg_we & !reg_error;
  assign completion_interrupt_c140_intr_wd = reg_wdata[0];

  assign completion_interrupt_c140_preserve_mask_we = addr_hit[1409] & reg_we & !reg_error;
  assign completion_interrupt_c140_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c141_we = addr_hit[1410] & reg_we & !reg_error;
  assign reserved_1_c141_wd = reg_wdata[31:0];

  assign channel_status_c141_channel_free_we = addr_hit[1411] & reg_we & !reg_error;
  assign channel_status_c141_channel_free_wd = reg_wdata[0];

  assign channel_status_c141_channel_error_we = addr_hit[1411] & reg_we & !reg_error;
  assign channel_status_c141_channel_error_wd = reg_wdata[1];

  assign channel_status_c141_field1_we = addr_hit[1411] & reg_we & !reg_error;
  assign channel_status_c141_field1_wd = reg_wdata[31:2];

  assign reserved_2_c141_we = addr_hit[1412] & reg_we & !reg_error;
  assign reserved_2_c141_wd = reg_wdata[31:0];

  assign channel_flags_c141_intr_enable_we = addr_hit[1414] & reg_we & !reg_error;
  assign channel_flags_c141_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c141_field1_we = addr_hit[1414] & reg_we & !reg_error;
  assign channel_flags_c141_field1_wd = reg_wdata[31:1];

  assign length_c141_we = addr_hit[1415] & reg_we & !reg_error;
  assign length_c141_wd = reg_wdata[31:0];

  assign message_header_c141_message_id_we = addr_hit[1416] & reg_we & !reg_error;
  assign message_header_c141_message_id_wd = reg_wdata[7:0];

  assign message_header_c141_message_type_we = addr_hit[1416] & reg_we & !reg_error;
  assign message_header_c141_message_type_wd = reg_wdata[9:8];

  assign message_header_c141_protocol_id_we = addr_hit[1416] & reg_we & !reg_error;
  assign message_header_c141_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c141_token_we = addr_hit[1416] & reg_we & !reg_error;
  assign message_header_c141_token_wd = reg_wdata[27:18];

  assign message_header_c141_field1_we = addr_hit[1416] & reg_we & !reg_error;
  assign message_header_c141_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c141_we = addr_hit[1417] & reg_we & !reg_error;
  assign message_payload_1_c141_wd = reg_wdata[31:0];

  assign doorbell_c141_intr_we = addr_hit[1418] & reg_we & !reg_error;
  assign doorbell_c141_intr_wd = reg_wdata[0];

  assign doorbell_c141_preserve_mask_we = addr_hit[1418] & reg_we & !reg_error;
  assign doorbell_c141_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c141_intr_we = addr_hit[1419] & reg_we & !reg_error;
  assign completion_interrupt_c141_intr_wd = reg_wdata[0];

  assign completion_interrupt_c141_preserve_mask_we = addr_hit[1419] & reg_we & !reg_error;
  assign completion_interrupt_c141_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c142_we = addr_hit[1420] & reg_we & !reg_error;
  assign reserved_1_c142_wd = reg_wdata[31:0];

  assign channel_status_c142_channel_free_we = addr_hit[1421] & reg_we & !reg_error;
  assign channel_status_c142_channel_free_wd = reg_wdata[0];

  assign channel_status_c142_channel_error_we = addr_hit[1421] & reg_we & !reg_error;
  assign channel_status_c142_channel_error_wd = reg_wdata[1];

  assign channel_status_c142_field1_we = addr_hit[1421] & reg_we & !reg_error;
  assign channel_status_c142_field1_wd = reg_wdata[31:2];

  assign reserved_2_c142_we = addr_hit[1422] & reg_we & !reg_error;
  assign reserved_2_c142_wd = reg_wdata[31:0];

  assign channel_flags_c142_intr_enable_we = addr_hit[1424] & reg_we & !reg_error;
  assign channel_flags_c142_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c142_field1_we = addr_hit[1424] & reg_we & !reg_error;
  assign channel_flags_c142_field1_wd = reg_wdata[31:1];

  assign length_c142_we = addr_hit[1425] & reg_we & !reg_error;
  assign length_c142_wd = reg_wdata[31:0];

  assign message_header_c142_message_id_we = addr_hit[1426] & reg_we & !reg_error;
  assign message_header_c142_message_id_wd = reg_wdata[7:0];

  assign message_header_c142_message_type_we = addr_hit[1426] & reg_we & !reg_error;
  assign message_header_c142_message_type_wd = reg_wdata[9:8];

  assign message_header_c142_protocol_id_we = addr_hit[1426] & reg_we & !reg_error;
  assign message_header_c142_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c142_token_we = addr_hit[1426] & reg_we & !reg_error;
  assign message_header_c142_token_wd = reg_wdata[27:18];

  assign message_header_c142_field1_we = addr_hit[1426] & reg_we & !reg_error;
  assign message_header_c142_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c142_we = addr_hit[1427] & reg_we & !reg_error;
  assign message_payload_1_c142_wd = reg_wdata[31:0];

  assign doorbell_c142_intr_we = addr_hit[1428] & reg_we & !reg_error;
  assign doorbell_c142_intr_wd = reg_wdata[0];

  assign doorbell_c142_preserve_mask_we = addr_hit[1428] & reg_we & !reg_error;
  assign doorbell_c142_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c142_intr_we = addr_hit[1429] & reg_we & !reg_error;
  assign completion_interrupt_c142_intr_wd = reg_wdata[0];

  assign completion_interrupt_c142_preserve_mask_we = addr_hit[1429] & reg_we & !reg_error;
  assign completion_interrupt_c142_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c143_we = addr_hit[1430] & reg_we & !reg_error;
  assign reserved_1_c143_wd = reg_wdata[31:0];

  assign channel_status_c143_channel_free_we = addr_hit[1431] & reg_we & !reg_error;
  assign channel_status_c143_channel_free_wd = reg_wdata[0];

  assign channel_status_c143_channel_error_we = addr_hit[1431] & reg_we & !reg_error;
  assign channel_status_c143_channel_error_wd = reg_wdata[1];

  assign channel_status_c143_field1_we = addr_hit[1431] & reg_we & !reg_error;
  assign channel_status_c143_field1_wd = reg_wdata[31:2];

  assign reserved_2_c143_we = addr_hit[1432] & reg_we & !reg_error;
  assign reserved_2_c143_wd = reg_wdata[31:0];

  assign channel_flags_c143_intr_enable_we = addr_hit[1434] & reg_we & !reg_error;
  assign channel_flags_c143_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c143_field1_we = addr_hit[1434] & reg_we & !reg_error;
  assign channel_flags_c143_field1_wd = reg_wdata[31:1];

  assign length_c143_we = addr_hit[1435] & reg_we & !reg_error;
  assign length_c143_wd = reg_wdata[31:0];

  assign message_header_c143_message_id_we = addr_hit[1436] & reg_we & !reg_error;
  assign message_header_c143_message_id_wd = reg_wdata[7:0];

  assign message_header_c143_message_type_we = addr_hit[1436] & reg_we & !reg_error;
  assign message_header_c143_message_type_wd = reg_wdata[9:8];

  assign message_header_c143_protocol_id_we = addr_hit[1436] & reg_we & !reg_error;
  assign message_header_c143_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c143_token_we = addr_hit[1436] & reg_we & !reg_error;
  assign message_header_c143_token_wd = reg_wdata[27:18];

  assign message_header_c143_field1_we = addr_hit[1436] & reg_we & !reg_error;
  assign message_header_c143_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c143_we = addr_hit[1437] & reg_we & !reg_error;
  assign message_payload_1_c143_wd = reg_wdata[31:0];

  assign doorbell_c143_intr_we = addr_hit[1438] & reg_we & !reg_error;
  assign doorbell_c143_intr_wd = reg_wdata[0];

  assign doorbell_c143_preserve_mask_we = addr_hit[1438] & reg_we & !reg_error;
  assign doorbell_c143_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c143_intr_we = addr_hit[1439] & reg_we & !reg_error;
  assign completion_interrupt_c143_intr_wd = reg_wdata[0];

  assign completion_interrupt_c143_preserve_mask_we = addr_hit[1439] & reg_we & !reg_error;
  assign completion_interrupt_c143_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c144_we = addr_hit[1440] & reg_we & !reg_error;
  assign reserved_1_c144_wd = reg_wdata[31:0];

  assign channel_status_c144_channel_free_we = addr_hit[1441] & reg_we & !reg_error;
  assign channel_status_c144_channel_free_wd = reg_wdata[0];

  assign channel_status_c144_channel_error_we = addr_hit[1441] & reg_we & !reg_error;
  assign channel_status_c144_channel_error_wd = reg_wdata[1];

  assign channel_status_c144_field1_we = addr_hit[1441] & reg_we & !reg_error;
  assign channel_status_c144_field1_wd = reg_wdata[31:2];

  assign reserved_2_c144_we = addr_hit[1442] & reg_we & !reg_error;
  assign reserved_2_c144_wd = reg_wdata[31:0];

  assign channel_flags_c144_intr_enable_we = addr_hit[1444] & reg_we & !reg_error;
  assign channel_flags_c144_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c144_field1_we = addr_hit[1444] & reg_we & !reg_error;
  assign channel_flags_c144_field1_wd = reg_wdata[31:1];

  assign length_c144_we = addr_hit[1445] & reg_we & !reg_error;
  assign length_c144_wd = reg_wdata[31:0];

  assign message_header_c144_message_id_we = addr_hit[1446] & reg_we & !reg_error;
  assign message_header_c144_message_id_wd = reg_wdata[7:0];

  assign message_header_c144_message_type_we = addr_hit[1446] & reg_we & !reg_error;
  assign message_header_c144_message_type_wd = reg_wdata[9:8];

  assign message_header_c144_protocol_id_we = addr_hit[1446] & reg_we & !reg_error;
  assign message_header_c144_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c144_token_we = addr_hit[1446] & reg_we & !reg_error;
  assign message_header_c144_token_wd = reg_wdata[27:18];

  assign message_header_c144_field1_we = addr_hit[1446] & reg_we & !reg_error;
  assign message_header_c144_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c144_we = addr_hit[1447] & reg_we & !reg_error;
  assign message_payload_1_c144_wd = reg_wdata[31:0];

  assign doorbell_c144_intr_we = addr_hit[1448] & reg_we & !reg_error;
  assign doorbell_c144_intr_wd = reg_wdata[0];

  assign doorbell_c144_preserve_mask_we = addr_hit[1448] & reg_we & !reg_error;
  assign doorbell_c144_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c144_intr_we = addr_hit[1449] & reg_we & !reg_error;
  assign completion_interrupt_c144_intr_wd = reg_wdata[0];

  assign completion_interrupt_c144_preserve_mask_we = addr_hit[1449] & reg_we & !reg_error;
  assign completion_interrupt_c144_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c145_we = addr_hit[1450] & reg_we & !reg_error;
  assign reserved_1_c145_wd = reg_wdata[31:0];

  assign channel_status_c145_channel_free_we = addr_hit[1451] & reg_we & !reg_error;
  assign channel_status_c145_channel_free_wd = reg_wdata[0];

  assign channel_status_c145_channel_error_we = addr_hit[1451] & reg_we & !reg_error;
  assign channel_status_c145_channel_error_wd = reg_wdata[1];

  assign channel_status_c145_field1_we = addr_hit[1451] & reg_we & !reg_error;
  assign channel_status_c145_field1_wd = reg_wdata[31:2];

  assign reserved_2_c145_we = addr_hit[1452] & reg_we & !reg_error;
  assign reserved_2_c145_wd = reg_wdata[31:0];

  assign channel_flags_c145_intr_enable_we = addr_hit[1454] & reg_we & !reg_error;
  assign channel_flags_c145_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c145_field1_we = addr_hit[1454] & reg_we & !reg_error;
  assign channel_flags_c145_field1_wd = reg_wdata[31:1];

  assign length_c145_we = addr_hit[1455] & reg_we & !reg_error;
  assign length_c145_wd = reg_wdata[31:0];

  assign message_header_c145_message_id_we = addr_hit[1456] & reg_we & !reg_error;
  assign message_header_c145_message_id_wd = reg_wdata[7:0];

  assign message_header_c145_message_type_we = addr_hit[1456] & reg_we & !reg_error;
  assign message_header_c145_message_type_wd = reg_wdata[9:8];

  assign message_header_c145_protocol_id_we = addr_hit[1456] & reg_we & !reg_error;
  assign message_header_c145_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c145_token_we = addr_hit[1456] & reg_we & !reg_error;
  assign message_header_c145_token_wd = reg_wdata[27:18];

  assign message_header_c145_field1_we = addr_hit[1456] & reg_we & !reg_error;
  assign message_header_c145_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c145_we = addr_hit[1457] & reg_we & !reg_error;
  assign message_payload_1_c145_wd = reg_wdata[31:0];

  assign doorbell_c145_intr_we = addr_hit[1458] & reg_we & !reg_error;
  assign doorbell_c145_intr_wd = reg_wdata[0];

  assign doorbell_c145_preserve_mask_we = addr_hit[1458] & reg_we & !reg_error;
  assign doorbell_c145_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c145_intr_we = addr_hit[1459] & reg_we & !reg_error;
  assign completion_interrupt_c145_intr_wd = reg_wdata[0];

  assign completion_interrupt_c145_preserve_mask_we = addr_hit[1459] & reg_we & !reg_error;
  assign completion_interrupt_c145_preserve_mask_wd = reg_wdata[31:1];

  assign reserved_1_c146_we = addr_hit[1460] & reg_we & !reg_error;
  assign reserved_1_c146_wd = reg_wdata[31:0];

  assign channel_status_c146_channel_free_we = addr_hit[1461] & reg_we & !reg_error;
  assign channel_status_c146_channel_free_wd = reg_wdata[0];

  assign channel_status_c146_channel_error_we = addr_hit[1461] & reg_we & !reg_error;
  assign channel_status_c146_channel_error_wd = reg_wdata[1];

  assign channel_status_c146_field1_we = addr_hit[1461] & reg_we & !reg_error;
  assign channel_status_c146_field1_wd = reg_wdata[31:2];

  assign reserved_2_c146_we = addr_hit[1462] & reg_we & !reg_error;
  assign reserved_2_c146_wd = reg_wdata[31:0];

  assign channel_flags_c146_intr_enable_we = addr_hit[1464] & reg_we & !reg_error;
  assign channel_flags_c146_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c146_field1_we = addr_hit[1464] & reg_we & !reg_error;
  assign channel_flags_c146_field1_wd = reg_wdata[31:1];

  assign length_c146_we = addr_hit[1465] & reg_we & !reg_error;
  assign length_c146_wd = reg_wdata[31:0];

  assign message_header_c146_message_id_we = addr_hit[1466] & reg_we & !reg_error;
  assign message_header_c146_message_id_wd = reg_wdata[7:0];

  assign message_header_c146_message_type_we = addr_hit[1466] & reg_we & !reg_error;
  assign message_header_c146_message_type_wd = reg_wdata[9:8];

  assign message_header_c146_protocol_id_we = addr_hit[1466] & reg_we & !reg_error;
  assign message_header_c146_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c146_token_we = addr_hit[1466] & reg_we & !reg_error;
  assign message_header_c146_token_wd = reg_wdata[27:18];

  assign message_header_c146_field1_we = addr_hit[1466] & reg_we & !reg_error;
  assign message_header_c146_field1_wd = reg_wdata[31:28];

  assign message_payload_1_c146_we = addr_hit[1467] & reg_we & !reg_error;
  assign message_payload_1_c146_wd = reg_wdata[31:0];

  assign doorbell_c146_intr_we = addr_hit[1468] & reg_we & !reg_error;
  assign doorbell_c146_intr_wd = reg_wdata[0];

  assign doorbell_c146_preserve_mask_we = addr_hit[1468] & reg_we & !reg_error;
  assign doorbell_c146_preserve_mask_wd = reg_wdata[31:1];

  assign completion_interrupt_c146_intr_we = addr_hit[1469] & reg_we & !reg_error;
  assign completion_interrupt_c146_intr_wd = reg_wdata[0];

  assign completion_interrupt_c146_preserve_mask_we = addr_hit[1469] & reg_we & !reg_error;
  assign completion_interrupt_c146_preserve_mask_wd = reg_wdata[31:1];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = reserved_1_c0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = channel_status_c0_channel_free_qs;
        reg_rdata_next[1] = channel_status_c0_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c0_field1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = reserved_2_c0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = channel_flags_c0_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c0_field1_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = length_c0_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[7:0] = message_header_c0_message_id_qs;
        reg_rdata_next[9:8] = message_header_c0_message_type_qs;
        reg_rdata_next[17:10] = message_header_c0_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c0_token_qs;
        reg_rdata_next[31:28] = message_header_c0_field1_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = message_payload_1_c0_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = doorbell_c0_intr_qs;
        reg_rdata_next[31:1] = doorbell_c0_preserve_mask_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = completion_interrupt_c0_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c0_preserve_mask_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = reserved_1_c1_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = channel_status_c1_channel_free_qs;
        reg_rdata_next[1] = channel_status_c1_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c1_field1_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = reserved_2_c1_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = channel_flags_c1_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c1_field1_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = length_c1_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[7:0] = message_header_c1_message_id_qs;
        reg_rdata_next[9:8] = message_header_c1_message_type_qs;
        reg_rdata_next[17:10] = message_header_c1_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c1_token_qs;
        reg_rdata_next[31:28] = message_header_c1_field1_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = message_payload_1_c1_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = doorbell_c1_intr_qs;
        reg_rdata_next[31:1] = doorbell_c1_preserve_mask_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = completion_interrupt_c1_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c1_preserve_mask_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = reserved_1_c2_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = channel_status_c2_channel_free_qs;
        reg_rdata_next[1] = channel_status_c2_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c2_field1_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = reserved_2_c2_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = channel_flags_c2_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c2_field1_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = length_c2_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[7:0] = message_header_c2_message_id_qs;
        reg_rdata_next[9:8] = message_header_c2_message_type_qs;
        reg_rdata_next[17:10] = message_header_c2_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c2_token_qs;
        reg_rdata_next[31:28] = message_header_c2_field1_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = message_payload_1_c2_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = doorbell_c2_intr_qs;
        reg_rdata_next[31:1] = doorbell_c2_preserve_mask_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = completion_interrupt_c2_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c2_preserve_mask_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = reserved_1_c3_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = channel_status_c3_channel_free_qs;
        reg_rdata_next[1] = channel_status_c3_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c3_field1_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = reserved_2_c3_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = channel_flags_c3_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c3_field1_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = length_c3_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[7:0] = message_header_c3_message_id_qs;
        reg_rdata_next[9:8] = message_header_c3_message_type_qs;
        reg_rdata_next[17:10] = message_header_c3_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c3_token_qs;
        reg_rdata_next[31:28] = message_header_c3_field1_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = message_payload_1_c3_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = doorbell_c3_intr_qs;
        reg_rdata_next[31:1] = doorbell_c3_preserve_mask_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[0] = completion_interrupt_c3_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c3_preserve_mask_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = reserved_1_c4_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[0] = channel_status_c4_channel_free_qs;
        reg_rdata_next[1] = channel_status_c4_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c4_field1_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = reserved_2_c4_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[44]: begin
        reg_rdata_next[0] = channel_flags_c4_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c4_field1_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = length_c4_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[7:0] = message_header_c4_message_id_qs;
        reg_rdata_next[9:8] = message_header_c4_message_type_qs;
        reg_rdata_next[17:10] = message_header_c4_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c4_token_qs;
        reg_rdata_next[31:28] = message_header_c4_field1_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = message_payload_1_c4_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = doorbell_c4_intr_qs;
        reg_rdata_next[31:1] = doorbell_c4_preserve_mask_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[0] = completion_interrupt_c4_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c4_preserve_mask_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[31:0] = reserved_1_c5_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[0] = channel_status_c5_channel_free_qs;
        reg_rdata_next[1] = channel_status_c5_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c5_field1_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = reserved_2_c5_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[54]: begin
        reg_rdata_next[0] = channel_flags_c5_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c5_field1_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = length_c5_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[7:0] = message_header_c5_message_id_qs;
        reg_rdata_next[9:8] = message_header_c5_message_type_qs;
        reg_rdata_next[17:10] = message_header_c5_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c5_token_qs;
        reg_rdata_next[31:28] = message_header_c5_field1_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[31:0] = message_payload_1_c5_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = doorbell_c5_intr_qs;
        reg_rdata_next[31:1] = doorbell_c5_preserve_mask_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[0] = completion_interrupt_c5_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c5_preserve_mask_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[31:0] = reserved_1_c6_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[0] = channel_status_c6_channel_free_qs;
        reg_rdata_next[1] = channel_status_c6_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c6_field1_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[31:0] = reserved_2_c6_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[64]: begin
        reg_rdata_next[0] = channel_flags_c6_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c6_field1_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = length_c6_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[7:0] = message_header_c6_message_id_qs;
        reg_rdata_next[9:8] = message_header_c6_message_type_qs;
        reg_rdata_next[17:10] = message_header_c6_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c6_token_qs;
        reg_rdata_next[31:28] = message_header_c6_field1_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = message_payload_1_c6_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[0] = doorbell_c6_intr_qs;
        reg_rdata_next[31:1] = doorbell_c6_preserve_mask_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[0] = completion_interrupt_c6_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c6_preserve_mask_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[31:0] = reserved_1_c7_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[0] = channel_status_c7_channel_free_qs;
        reg_rdata_next[1] = channel_status_c7_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c7_field1_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[31:0] = reserved_2_c7_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[74]: begin
        reg_rdata_next[0] = channel_flags_c7_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c7_field1_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[31:0] = length_c7_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[7:0] = message_header_c7_message_id_qs;
        reg_rdata_next[9:8] = message_header_c7_message_type_qs;
        reg_rdata_next[17:10] = message_header_c7_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c7_token_qs;
        reg_rdata_next[31:28] = message_header_c7_field1_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[31:0] = message_payload_1_c7_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[0] = doorbell_c7_intr_qs;
        reg_rdata_next[31:1] = doorbell_c7_preserve_mask_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[0] = completion_interrupt_c7_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c7_preserve_mask_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[31:0] = reserved_1_c8_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[0] = channel_status_c8_channel_free_qs;
        reg_rdata_next[1] = channel_status_c8_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c8_field1_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[31:0] = reserved_2_c8_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[84]: begin
        reg_rdata_next[0] = channel_flags_c8_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c8_field1_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[31:0] = length_c8_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[7:0] = message_header_c8_message_id_qs;
        reg_rdata_next[9:8] = message_header_c8_message_type_qs;
        reg_rdata_next[17:10] = message_header_c8_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c8_token_qs;
        reg_rdata_next[31:28] = message_header_c8_field1_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[31:0] = message_payload_1_c8_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[0] = doorbell_c8_intr_qs;
        reg_rdata_next[31:1] = doorbell_c8_preserve_mask_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[0] = completion_interrupt_c8_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c8_preserve_mask_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[31:0] = reserved_1_c9_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[0] = channel_status_c9_channel_free_qs;
        reg_rdata_next[1] = channel_status_c9_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c9_field1_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[31:0] = reserved_2_c9_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[94]: begin
        reg_rdata_next[0] = channel_flags_c9_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c9_field1_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[31:0] = length_c9_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[7:0] = message_header_c9_message_id_qs;
        reg_rdata_next[9:8] = message_header_c9_message_type_qs;
        reg_rdata_next[17:10] = message_header_c9_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c9_token_qs;
        reg_rdata_next[31:28] = message_header_c9_field1_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[31:0] = message_payload_1_c9_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[0] = doorbell_c9_intr_qs;
        reg_rdata_next[31:1] = doorbell_c9_preserve_mask_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[0] = completion_interrupt_c9_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c9_preserve_mask_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[31:0] = reserved_1_c10_qs;
      end

      addr_hit[101]: begin
        reg_rdata_next[0] = channel_status_c10_channel_free_qs;
        reg_rdata_next[1] = channel_status_c10_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c10_field1_qs;
      end

      addr_hit[102]: begin
        reg_rdata_next[31:0] = reserved_2_c10_qs;
      end

      addr_hit[103]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[104]: begin
        reg_rdata_next[0] = channel_flags_c10_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c10_field1_qs;
      end

      addr_hit[105]: begin
        reg_rdata_next[31:0] = length_c10_qs;
      end

      addr_hit[106]: begin
        reg_rdata_next[7:0] = message_header_c10_message_id_qs;
        reg_rdata_next[9:8] = message_header_c10_message_type_qs;
        reg_rdata_next[17:10] = message_header_c10_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c10_token_qs;
        reg_rdata_next[31:28] = message_header_c10_field1_qs;
      end

      addr_hit[107]: begin
        reg_rdata_next[31:0] = message_payload_1_c10_qs;
      end

      addr_hit[108]: begin
        reg_rdata_next[0] = doorbell_c10_intr_qs;
        reg_rdata_next[31:1] = doorbell_c10_preserve_mask_qs;
      end

      addr_hit[109]: begin
        reg_rdata_next[0] = completion_interrupt_c10_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c10_preserve_mask_qs;
      end

      addr_hit[110]: begin
        reg_rdata_next[31:0] = reserved_1_c11_qs;
      end

      addr_hit[111]: begin
        reg_rdata_next[0] = channel_status_c11_channel_free_qs;
        reg_rdata_next[1] = channel_status_c11_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c11_field1_qs;
      end

      addr_hit[112]: begin
        reg_rdata_next[31:0] = reserved_2_c11_qs;
      end

      addr_hit[113]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[114]: begin
        reg_rdata_next[0] = channel_flags_c11_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c11_field1_qs;
      end

      addr_hit[115]: begin
        reg_rdata_next[31:0] = length_c11_qs;
      end

      addr_hit[116]: begin
        reg_rdata_next[7:0] = message_header_c11_message_id_qs;
        reg_rdata_next[9:8] = message_header_c11_message_type_qs;
        reg_rdata_next[17:10] = message_header_c11_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c11_token_qs;
        reg_rdata_next[31:28] = message_header_c11_field1_qs;
      end

      addr_hit[117]: begin
        reg_rdata_next[31:0] = message_payload_1_c11_qs;
      end

      addr_hit[118]: begin
        reg_rdata_next[0] = doorbell_c11_intr_qs;
        reg_rdata_next[31:1] = doorbell_c11_preserve_mask_qs;
      end

      addr_hit[119]: begin
        reg_rdata_next[0] = completion_interrupt_c11_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c11_preserve_mask_qs;
      end

      addr_hit[120]: begin
        reg_rdata_next[31:0] = reserved_1_c12_qs;
      end

      addr_hit[121]: begin
        reg_rdata_next[0] = channel_status_c12_channel_free_qs;
        reg_rdata_next[1] = channel_status_c12_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c12_field1_qs;
      end

      addr_hit[122]: begin
        reg_rdata_next[31:0] = reserved_2_c12_qs;
      end

      addr_hit[123]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[124]: begin
        reg_rdata_next[0] = channel_flags_c12_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c12_field1_qs;
      end

      addr_hit[125]: begin
        reg_rdata_next[31:0] = length_c12_qs;
      end

      addr_hit[126]: begin
        reg_rdata_next[7:0] = message_header_c12_message_id_qs;
        reg_rdata_next[9:8] = message_header_c12_message_type_qs;
        reg_rdata_next[17:10] = message_header_c12_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c12_token_qs;
        reg_rdata_next[31:28] = message_header_c12_field1_qs;
      end

      addr_hit[127]: begin
        reg_rdata_next[31:0] = message_payload_1_c12_qs;
      end

      addr_hit[128]: begin
        reg_rdata_next[0] = doorbell_c12_intr_qs;
        reg_rdata_next[31:1] = doorbell_c12_preserve_mask_qs;
      end

      addr_hit[129]: begin
        reg_rdata_next[0] = completion_interrupt_c12_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c12_preserve_mask_qs;
      end

      addr_hit[130]: begin
        reg_rdata_next[31:0] = reserved_1_c13_qs;
      end

      addr_hit[131]: begin
        reg_rdata_next[0] = channel_status_c13_channel_free_qs;
        reg_rdata_next[1] = channel_status_c13_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c13_field1_qs;
      end

      addr_hit[132]: begin
        reg_rdata_next[31:0] = reserved_2_c13_qs;
      end

      addr_hit[133]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[134]: begin
        reg_rdata_next[0] = channel_flags_c13_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c13_field1_qs;
      end

      addr_hit[135]: begin
        reg_rdata_next[31:0] = length_c13_qs;
      end

      addr_hit[136]: begin
        reg_rdata_next[7:0] = message_header_c13_message_id_qs;
        reg_rdata_next[9:8] = message_header_c13_message_type_qs;
        reg_rdata_next[17:10] = message_header_c13_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c13_token_qs;
        reg_rdata_next[31:28] = message_header_c13_field1_qs;
      end

      addr_hit[137]: begin
        reg_rdata_next[31:0] = message_payload_1_c13_qs;
      end

      addr_hit[138]: begin
        reg_rdata_next[0] = doorbell_c13_intr_qs;
        reg_rdata_next[31:1] = doorbell_c13_preserve_mask_qs;
      end

      addr_hit[139]: begin
        reg_rdata_next[0] = completion_interrupt_c13_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c13_preserve_mask_qs;
      end

      addr_hit[140]: begin
        reg_rdata_next[31:0] = reserved_1_c14_qs;
      end

      addr_hit[141]: begin
        reg_rdata_next[0] = channel_status_c14_channel_free_qs;
        reg_rdata_next[1] = channel_status_c14_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c14_field1_qs;
      end

      addr_hit[142]: begin
        reg_rdata_next[31:0] = reserved_2_c14_qs;
      end

      addr_hit[143]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[144]: begin
        reg_rdata_next[0] = channel_flags_c14_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c14_field1_qs;
      end

      addr_hit[145]: begin
        reg_rdata_next[31:0] = length_c14_qs;
      end

      addr_hit[146]: begin
        reg_rdata_next[7:0] = message_header_c14_message_id_qs;
        reg_rdata_next[9:8] = message_header_c14_message_type_qs;
        reg_rdata_next[17:10] = message_header_c14_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c14_token_qs;
        reg_rdata_next[31:28] = message_header_c14_field1_qs;
      end

      addr_hit[147]: begin
        reg_rdata_next[31:0] = message_payload_1_c14_qs;
      end

      addr_hit[148]: begin
        reg_rdata_next[0] = doorbell_c14_intr_qs;
        reg_rdata_next[31:1] = doorbell_c14_preserve_mask_qs;
      end

      addr_hit[149]: begin
        reg_rdata_next[0] = completion_interrupt_c14_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c14_preserve_mask_qs;
      end

      addr_hit[150]: begin
        reg_rdata_next[31:0] = reserved_1_c15_qs;
      end

      addr_hit[151]: begin
        reg_rdata_next[0] = channel_status_c15_channel_free_qs;
        reg_rdata_next[1] = channel_status_c15_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c15_field1_qs;
      end

      addr_hit[152]: begin
        reg_rdata_next[31:0] = reserved_2_c15_qs;
      end

      addr_hit[153]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[154]: begin
        reg_rdata_next[0] = channel_flags_c15_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c15_field1_qs;
      end

      addr_hit[155]: begin
        reg_rdata_next[31:0] = length_c15_qs;
      end

      addr_hit[156]: begin
        reg_rdata_next[7:0] = message_header_c15_message_id_qs;
        reg_rdata_next[9:8] = message_header_c15_message_type_qs;
        reg_rdata_next[17:10] = message_header_c15_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c15_token_qs;
        reg_rdata_next[31:28] = message_header_c15_field1_qs;
      end

      addr_hit[157]: begin
        reg_rdata_next[31:0] = message_payload_1_c15_qs;
      end

      addr_hit[158]: begin
        reg_rdata_next[0] = doorbell_c15_intr_qs;
        reg_rdata_next[31:1] = doorbell_c15_preserve_mask_qs;
      end

      addr_hit[159]: begin
        reg_rdata_next[0] = completion_interrupt_c15_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c15_preserve_mask_qs;
      end

      addr_hit[160]: begin
        reg_rdata_next[31:0] = reserved_1_c16_qs;
      end

      addr_hit[161]: begin
        reg_rdata_next[0] = channel_status_c16_channel_free_qs;
        reg_rdata_next[1] = channel_status_c16_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c16_field1_qs;
      end

      addr_hit[162]: begin
        reg_rdata_next[31:0] = reserved_2_c16_qs;
      end

      addr_hit[163]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[164]: begin
        reg_rdata_next[0] = channel_flags_c16_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c16_field1_qs;
      end

      addr_hit[165]: begin
        reg_rdata_next[31:0] = length_c16_qs;
      end

      addr_hit[166]: begin
        reg_rdata_next[7:0] = message_header_c16_message_id_qs;
        reg_rdata_next[9:8] = message_header_c16_message_type_qs;
        reg_rdata_next[17:10] = message_header_c16_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c16_token_qs;
        reg_rdata_next[31:28] = message_header_c16_field1_qs;
      end

      addr_hit[167]: begin
        reg_rdata_next[31:0] = message_payload_1_c16_qs;
      end

      addr_hit[168]: begin
        reg_rdata_next[0] = doorbell_c16_intr_qs;
        reg_rdata_next[31:1] = doorbell_c16_preserve_mask_qs;
      end

      addr_hit[169]: begin
        reg_rdata_next[0] = completion_interrupt_c16_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c16_preserve_mask_qs;
      end

      addr_hit[170]: begin
        reg_rdata_next[31:0] = reserved_1_c17_qs;
      end

      addr_hit[171]: begin
        reg_rdata_next[0] = channel_status_c17_channel_free_qs;
        reg_rdata_next[1] = channel_status_c17_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c17_field1_qs;
      end

      addr_hit[172]: begin
        reg_rdata_next[31:0] = reserved_2_c17_qs;
      end

      addr_hit[173]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[174]: begin
        reg_rdata_next[0] = channel_flags_c17_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c17_field1_qs;
      end

      addr_hit[175]: begin
        reg_rdata_next[31:0] = length_c17_qs;
      end

      addr_hit[176]: begin
        reg_rdata_next[7:0] = message_header_c17_message_id_qs;
        reg_rdata_next[9:8] = message_header_c17_message_type_qs;
        reg_rdata_next[17:10] = message_header_c17_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c17_token_qs;
        reg_rdata_next[31:28] = message_header_c17_field1_qs;
      end

      addr_hit[177]: begin
        reg_rdata_next[31:0] = message_payload_1_c17_qs;
      end

      addr_hit[178]: begin
        reg_rdata_next[0] = doorbell_c17_intr_qs;
        reg_rdata_next[31:1] = doorbell_c17_preserve_mask_qs;
      end

      addr_hit[179]: begin
        reg_rdata_next[0] = completion_interrupt_c17_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c17_preserve_mask_qs;
      end

      addr_hit[180]: begin
        reg_rdata_next[31:0] = reserved_1_c18_qs;
      end

      addr_hit[181]: begin
        reg_rdata_next[0] = channel_status_c18_channel_free_qs;
        reg_rdata_next[1] = channel_status_c18_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c18_field1_qs;
      end

      addr_hit[182]: begin
        reg_rdata_next[31:0] = reserved_2_c18_qs;
      end

      addr_hit[183]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[184]: begin
        reg_rdata_next[0] = channel_flags_c18_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c18_field1_qs;
      end

      addr_hit[185]: begin
        reg_rdata_next[31:0] = length_c18_qs;
      end

      addr_hit[186]: begin
        reg_rdata_next[7:0] = message_header_c18_message_id_qs;
        reg_rdata_next[9:8] = message_header_c18_message_type_qs;
        reg_rdata_next[17:10] = message_header_c18_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c18_token_qs;
        reg_rdata_next[31:28] = message_header_c18_field1_qs;
      end

      addr_hit[187]: begin
        reg_rdata_next[31:0] = message_payload_1_c18_qs;
      end

      addr_hit[188]: begin
        reg_rdata_next[0] = doorbell_c18_intr_qs;
        reg_rdata_next[31:1] = doorbell_c18_preserve_mask_qs;
      end

      addr_hit[189]: begin
        reg_rdata_next[0] = completion_interrupt_c18_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c18_preserve_mask_qs;
      end

      addr_hit[190]: begin
        reg_rdata_next[31:0] = reserved_1_c19_qs;
      end

      addr_hit[191]: begin
        reg_rdata_next[0] = channel_status_c19_channel_free_qs;
        reg_rdata_next[1] = channel_status_c19_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c19_field1_qs;
      end

      addr_hit[192]: begin
        reg_rdata_next[31:0] = reserved_2_c19_qs;
      end

      addr_hit[193]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[194]: begin
        reg_rdata_next[0] = channel_flags_c19_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c19_field1_qs;
      end

      addr_hit[195]: begin
        reg_rdata_next[31:0] = length_c19_qs;
      end

      addr_hit[196]: begin
        reg_rdata_next[7:0] = message_header_c19_message_id_qs;
        reg_rdata_next[9:8] = message_header_c19_message_type_qs;
        reg_rdata_next[17:10] = message_header_c19_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c19_token_qs;
        reg_rdata_next[31:28] = message_header_c19_field1_qs;
      end

      addr_hit[197]: begin
        reg_rdata_next[31:0] = message_payload_1_c19_qs;
      end

      addr_hit[198]: begin
        reg_rdata_next[0] = doorbell_c19_intr_qs;
        reg_rdata_next[31:1] = doorbell_c19_preserve_mask_qs;
      end

      addr_hit[199]: begin
        reg_rdata_next[0] = completion_interrupt_c19_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c19_preserve_mask_qs;
      end

      addr_hit[200]: begin
        reg_rdata_next[31:0] = reserved_1_c20_qs;
      end

      addr_hit[201]: begin
        reg_rdata_next[0] = channel_status_c20_channel_free_qs;
        reg_rdata_next[1] = channel_status_c20_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c20_field1_qs;
      end

      addr_hit[202]: begin
        reg_rdata_next[31:0] = reserved_2_c20_qs;
      end

      addr_hit[203]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[204]: begin
        reg_rdata_next[0] = channel_flags_c20_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c20_field1_qs;
      end

      addr_hit[205]: begin
        reg_rdata_next[31:0] = length_c20_qs;
      end

      addr_hit[206]: begin
        reg_rdata_next[7:0] = message_header_c20_message_id_qs;
        reg_rdata_next[9:8] = message_header_c20_message_type_qs;
        reg_rdata_next[17:10] = message_header_c20_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c20_token_qs;
        reg_rdata_next[31:28] = message_header_c20_field1_qs;
      end

      addr_hit[207]: begin
        reg_rdata_next[31:0] = message_payload_1_c20_qs;
      end

      addr_hit[208]: begin
        reg_rdata_next[0] = doorbell_c20_intr_qs;
        reg_rdata_next[31:1] = doorbell_c20_preserve_mask_qs;
      end

      addr_hit[209]: begin
        reg_rdata_next[0] = completion_interrupt_c20_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c20_preserve_mask_qs;
      end

      addr_hit[210]: begin
        reg_rdata_next[31:0] = reserved_1_c21_qs;
      end

      addr_hit[211]: begin
        reg_rdata_next[0] = channel_status_c21_channel_free_qs;
        reg_rdata_next[1] = channel_status_c21_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c21_field1_qs;
      end

      addr_hit[212]: begin
        reg_rdata_next[31:0] = reserved_2_c21_qs;
      end

      addr_hit[213]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[214]: begin
        reg_rdata_next[0] = channel_flags_c21_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c21_field1_qs;
      end

      addr_hit[215]: begin
        reg_rdata_next[31:0] = length_c21_qs;
      end

      addr_hit[216]: begin
        reg_rdata_next[7:0] = message_header_c21_message_id_qs;
        reg_rdata_next[9:8] = message_header_c21_message_type_qs;
        reg_rdata_next[17:10] = message_header_c21_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c21_token_qs;
        reg_rdata_next[31:28] = message_header_c21_field1_qs;
      end

      addr_hit[217]: begin
        reg_rdata_next[31:0] = message_payload_1_c21_qs;
      end

      addr_hit[218]: begin
        reg_rdata_next[0] = doorbell_c21_intr_qs;
        reg_rdata_next[31:1] = doorbell_c21_preserve_mask_qs;
      end

      addr_hit[219]: begin
        reg_rdata_next[0] = completion_interrupt_c21_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c21_preserve_mask_qs;
      end

      addr_hit[220]: begin
        reg_rdata_next[31:0] = reserved_1_c22_qs;
      end

      addr_hit[221]: begin
        reg_rdata_next[0] = channel_status_c22_channel_free_qs;
        reg_rdata_next[1] = channel_status_c22_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c22_field1_qs;
      end

      addr_hit[222]: begin
        reg_rdata_next[31:0] = reserved_2_c22_qs;
      end

      addr_hit[223]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[224]: begin
        reg_rdata_next[0] = channel_flags_c22_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c22_field1_qs;
      end

      addr_hit[225]: begin
        reg_rdata_next[31:0] = length_c22_qs;
      end

      addr_hit[226]: begin
        reg_rdata_next[7:0] = message_header_c22_message_id_qs;
        reg_rdata_next[9:8] = message_header_c22_message_type_qs;
        reg_rdata_next[17:10] = message_header_c22_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c22_token_qs;
        reg_rdata_next[31:28] = message_header_c22_field1_qs;
      end

      addr_hit[227]: begin
        reg_rdata_next[31:0] = message_payload_1_c22_qs;
      end

      addr_hit[228]: begin
        reg_rdata_next[0] = doorbell_c22_intr_qs;
        reg_rdata_next[31:1] = doorbell_c22_preserve_mask_qs;
      end

      addr_hit[229]: begin
        reg_rdata_next[0] = completion_interrupt_c22_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c22_preserve_mask_qs;
      end

      addr_hit[230]: begin
        reg_rdata_next[31:0] = reserved_1_c23_qs;
      end

      addr_hit[231]: begin
        reg_rdata_next[0] = channel_status_c23_channel_free_qs;
        reg_rdata_next[1] = channel_status_c23_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c23_field1_qs;
      end

      addr_hit[232]: begin
        reg_rdata_next[31:0] = reserved_2_c23_qs;
      end

      addr_hit[233]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[234]: begin
        reg_rdata_next[0] = channel_flags_c23_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c23_field1_qs;
      end

      addr_hit[235]: begin
        reg_rdata_next[31:0] = length_c23_qs;
      end

      addr_hit[236]: begin
        reg_rdata_next[7:0] = message_header_c23_message_id_qs;
        reg_rdata_next[9:8] = message_header_c23_message_type_qs;
        reg_rdata_next[17:10] = message_header_c23_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c23_token_qs;
        reg_rdata_next[31:28] = message_header_c23_field1_qs;
      end

      addr_hit[237]: begin
        reg_rdata_next[31:0] = message_payload_1_c23_qs;
      end

      addr_hit[238]: begin
        reg_rdata_next[0] = doorbell_c23_intr_qs;
        reg_rdata_next[31:1] = doorbell_c23_preserve_mask_qs;
      end

      addr_hit[239]: begin
        reg_rdata_next[0] = completion_interrupt_c23_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c23_preserve_mask_qs;
      end

      addr_hit[240]: begin
        reg_rdata_next[31:0] = reserved_1_c24_qs;
      end

      addr_hit[241]: begin
        reg_rdata_next[0] = channel_status_c24_channel_free_qs;
        reg_rdata_next[1] = channel_status_c24_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c24_field1_qs;
      end

      addr_hit[242]: begin
        reg_rdata_next[31:0] = reserved_2_c24_qs;
      end

      addr_hit[243]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[244]: begin
        reg_rdata_next[0] = channel_flags_c24_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c24_field1_qs;
      end

      addr_hit[245]: begin
        reg_rdata_next[31:0] = length_c24_qs;
      end

      addr_hit[246]: begin
        reg_rdata_next[7:0] = message_header_c24_message_id_qs;
        reg_rdata_next[9:8] = message_header_c24_message_type_qs;
        reg_rdata_next[17:10] = message_header_c24_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c24_token_qs;
        reg_rdata_next[31:28] = message_header_c24_field1_qs;
      end

      addr_hit[247]: begin
        reg_rdata_next[31:0] = message_payload_1_c24_qs;
      end

      addr_hit[248]: begin
        reg_rdata_next[0] = doorbell_c24_intr_qs;
        reg_rdata_next[31:1] = doorbell_c24_preserve_mask_qs;
      end

      addr_hit[249]: begin
        reg_rdata_next[0] = completion_interrupt_c24_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c24_preserve_mask_qs;
      end

      addr_hit[250]: begin
        reg_rdata_next[31:0] = reserved_1_c25_qs;
      end

      addr_hit[251]: begin
        reg_rdata_next[0] = channel_status_c25_channel_free_qs;
        reg_rdata_next[1] = channel_status_c25_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c25_field1_qs;
      end

      addr_hit[252]: begin
        reg_rdata_next[31:0] = reserved_2_c25_qs;
      end

      addr_hit[253]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[254]: begin
        reg_rdata_next[0] = channel_flags_c25_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c25_field1_qs;
      end

      addr_hit[255]: begin
        reg_rdata_next[31:0] = length_c25_qs;
      end

      addr_hit[256]: begin
        reg_rdata_next[7:0] = message_header_c25_message_id_qs;
        reg_rdata_next[9:8] = message_header_c25_message_type_qs;
        reg_rdata_next[17:10] = message_header_c25_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c25_token_qs;
        reg_rdata_next[31:28] = message_header_c25_field1_qs;
      end

      addr_hit[257]: begin
        reg_rdata_next[31:0] = message_payload_1_c25_qs;
      end

      addr_hit[258]: begin
        reg_rdata_next[0] = doorbell_c25_intr_qs;
        reg_rdata_next[31:1] = doorbell_c25_preserve_mask_qs;
      end

      addr_hit[259]: begin
        reg_rdata_next[0] = completion_interrupt_c25_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c25_preserve_mask_qs;
      end

      addr_hit[260]: begin
        reg_rdata_next[31:0] = reserved_1_c26_qs;
      end

      addr_hit[261]: begin
        reg_rdata_next[0] = channel_status_c26_channel_free_qs;
        reg_rdata_next[1] = channel_status_c26_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c26_field1_qs;
      end

      addr_hit[262]: begin
        reg_rdata_next[31:0] = reserved_2_c26_qs;
      end

      addr_hit[263]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[264]: begin
        reg_rdata_next[0] = channel_flags_c26_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c26_field1_qs;
      end

      addr_hit[265]: begin
        reg_rdata_next[31:0] = length_c26_qs;
      end

      addr_hit[266]: begin
        reg_rdata_next[7:0] = message_header_c26_message_id_qs;
        reg_rdata_next[9:8] = message_header_c26_message_type_qs;
        reg_rdata_next[17:10] = message_header_c26_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c26_token_qs;
        reg_rdata_next[31:28] = message_header_c26_field1_qs;
      end

      addr_hit[267]: begin
        reg_rdata_next[31:0] = message_payload_1_c26_qs;
      end

      addr_hit[268]: begin
        reg_rdata_next[0] = doorbell_c26_intr_qs;
        reg_rdata_next[31:1] = doorbell_c26_preserve_mask_qs;
      end

      addr_hit[269]: begin
        reg_rdata_next[0] = completion_interrupt_c26_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c26_preserve_mask_qs;
      end

      addr_hit[270]: begin
        reg_rdata_next[31:0] = reserved_1_c27_qs;
      end

      addr_hit[271]: begin
        reg_rdata_next[0] = channel_status_c27_channel_free_qs;
        reg_rdata_next[1] = channel_status_c27_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c27_field1_qs;
      end

      addr_hit[272]: begin
        reg_rdata_next[31:0] = reserved_2_c27_qs;
      end

      addr_hit[273]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[274]: begin
        reg_rdata_next[0] = channel_flags_c27_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c27_field1_qs;
      end

      addr_hit[275]: begin
        reg_rdata_next[31:0] = length_c27_qs;
      end

      addr_hit[276]: begin
        reg_rdata_next[7:0] = message_header_c27_message_id_qs;
        reg_rdata_next[9:8] = message_header_c27_message_type_qs;
        reg_rdata_next[17:10] = message_header_c27_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c27_token_qs;
        reg_rdata_next[31:28] = message_header_c27_field1_qs;
      end

      addr_hit[277]: begin
        reg_rdata_next[31:0] = message_payload_1_c27_qs;
      end

      addr_hit[278]: begin
        reg_rdata_next[0] = doorbell_c27_intr_qs;
        reg_rdata_next[31:1] = doorbell_c27_preserve_mask_qs;
      end

      addr_hit[279]: begin
        reg_rdata_next[0] = completion_interrupt_c27_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c27_preserve_mask_qs;
      end

      addr_hit[280]: begin
        reg_rdata_next[31:0] = reserved_1_c28_qs;
      end

      addr_hit[281]: begin
        reg_rdata_next[0] = channel_status_c28_channel_free_qs;
        reg_rdata_next[1] = channel_status_c28_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c28_field1_qs;
      end

      addr_hit[282]: begin
        reg_rdata_next[31:0] = reserved_2_c28_qs;
      end

      addr_hit[283]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[284]: begin
        reg_rdata_next[0] = channel_flags_c28_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c28_field1_qs;
      end

      addr_hit[285]: begin
        reg_rdata_next[31:0] = length_c28_qs;
      end

      addr_hit[286]: begin
        reg_rdata_next[7:0] = message_header_c28_message_id_qs;
        reg_rdata_next[9:8] = message_header_c28_message_type_qs;
        reg_rdata_next[17:10] = message_header_c28_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c28_token_qs;
        reg_rdata_next[31:28] = message_header_c28_field1_qs;
      end

      addr_hit[287]: begin
        reg_rdata_next[31:0] = message_payload_1_c28_qs;
      end

      addr_hit[288]: begin
        reg_rdata_next[0] = doorbell_c28_intr_qs;
        reg_rdata_next[31:1] = doorbell_c28_preserve_mask_qs;
      end

      addr_hit[289]: begin
        reg_rdata_next[0] = completion_interrupt_c28_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c28_preserve_mask_qs;
      end

      addr_hit[290]: begin
        reg_rdata_next[31:0] = reserved_1_c29_qs;
      end

      addr_hit[291]: begin
        reg_rdata_next[0] = channel_status_c29_channel_free_qs;
        reg_rdata_next[1] = channel_status_c29_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c29_field1_qs;
      end

      addr_hit[292]: begin
        reg_rdata_next[31:0] = reserved_2_c29_qs;
      end

      addr_hit[293]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[294]: begin
        reg_rdata_next[0] = channel_flags_c29_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c29_field1_qs;
      end

      addr_hit[295]: begin
        reg_rdata_next[31:0] = length_c29_qs;
      end

      addr_hit[296]: begin
        reg_rdata_next[7:0] = message_header_c29_message_id_qs;
        reg_rdata_next[9:8] = message_header_c29_message_type_qs;
        reg_rdata_next[17:10] = message_header_c29_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c29_token_qs;
        reg_rdata_next[31:28] = message_header_c29_field1_qs;
      end

      addr_hit[297]: begin
        reg_rdata_next[31:0] = message_payload_1_c29_qs;
      end

      addr_hit[298]: begin
        reg_rdata_next[0] = doorbell_c29_intr_qs;
        reg_rdata_next[31:1] = doorbell_c29_preserve_mask_qs;
      end

      addr_hit[299]: begin
        reg_rdata_next[0] = completion_interrupt_c29_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c29_preserve_mask_qs;
      end

      addr_hit[300]: begin
        reg_rdata_next[31:0] = reserved_1_c30_qs;
      end

      addr_hit[301]: begin
        reg_rdata_next[0] = channel_status_c30_channel_free_qs;
        reg_rdata_next[1] = channel_status_c30_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c30_field1_qs;
      end

      addr_hit[302]: begin
        reg_rdata_next[31:0] = reserved_2_c30_qs;
      end

      addr_hit[303]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[304]: begin
        reg_rdata_next[0] = channel_flags_c30_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c30_field1_qs;
      end

      addr_hit[305]: begin
        reg_rdata_next[31:0] = length_c30_qs;
      end

      addr_hit[306]: begin
        reg_rdata_next[7:0] = message_header_c30_message_id_qs;
        reg_rdata_next[9:8] = message_header_c30_message_type_qs;
        reg_rdata_next[17:10] = message_header_c30_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c30_token_qs;
        reg_rdata_next[31:28] = message_header_c30_field1_qs;
      end

      addr_hit[307]: begin
        reg_rdata_next[31:0] = message_payload_1_c30_qs;
      end

      addr_hit[308]: begin
        reg_rdata_next[0] = doorbell_c30_intr_qs;
        reg_rdata_next[31:1] = doorbell_c30_preserve_mask_qs;
      end

      addr_hit[309]: begin
        reg_rdata_next[0] = completion_interrupt_c30_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c30_preserve_mask_qs;
      end

      addr_hit[310]: begin
        reg_rdata_next[31:0] = reserved_1_c31_qs;
      end

      addr_hit[311]: begin
        reg_rdata_next[0] = channel_status_c31_channel_free_qs;
        reg_rdata_next[1] = channel_status_c31_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c31_field1_qs;
      end

      addr_hit[312]: begin
        reg_rdata_next[31:0] = reserved_2_c31_qs;
      end

      addr_hit[313]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[314]: begin
        reg_rdata_next[0] = channel_flags_c31_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c31_field1_qs;
      end

      addr_hit[315]: begin
        reg_rdata_next[31:0] = length_c31_qs;
      end

      addr_hit[316]: begin
        reg_rdata_next[7:0] = message_header_c31_message_id_qs;
        reg_rdata_next[9:8] = message_header_c31_message_type_qs;
        reg_rdata_next[17:10] = message_header_c31_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c31_token_qs;
        reg_rdata_next[31:28] = message_header_c31_field1_qs;
      end

      addr_hit[317]: begin
        reg_rdata_next[31:0] = message_payload_1_c31_qs;
      end

      addr_hit[318]: begin
        reg_rdata_next[0] = doorbell_c31_intr_qs;
        reg_rdata_next[31:1] = doorbell_c31_preserve_mask_qs;
      end

      addr_hit[319]: begin
        reg_rdata_next[0] = completion_interrupt_c31_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c31_preserve_mask_qs;
      end

      addr_hit[320]: begin
        reg_rdata_next[31:0] = reserved_1_c32_qs;
      end

      addr_hit[321]: begin
        reg_rdata_next[0] = channel_status_c32_channel_free_qs;
        reg_rdata_next[1] = channel_status_c32_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c32_field1_qs;
      end

      addr_hit[322]: begin
        reg_rdata_next[31:0] = reserved_2_c32_qs;
      end

      addr_hit[323]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[324]: begin
        reg_rdata_next[0] = channel_flags_c32_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c32_field1_qs;
      end

      addr_hit[325]: begin
        reg_rdata_next[31:0] = length_c32_qs;
      end

      addr_hit[326]: begin
        reg_rdata_next[7:0] = message_header_c32_message_id_qs;
        reg_rdata_next[9:8] = message_header_c32_message_type_qs;
        reg_rdata_next[17:10] = message_header_c32_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c32_token_qs;
        reg_rdata_next[31:28] = message_header_c32_field1_qs;
      end

      addr_hit[327]: begin
        reg_rdata_next[31:0] = message_payload_1_c32_qs;
      end

      addr_hit[328]: begin
        reg_rdata_next[0] = doorbell_c32_intr_qs;
        reg_rdata_next[31:1] = doorbell_c32_preserve_mask_qs;
      end

      addr_hit[329]: begin
        reg_rdata_next[0] = completion_interrupt_c32_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c32_preserve_mask_qs;
      end

      addr_hit[330]: begin
        reg_rdata_next[31:0] = reserved_1_c33_qs;
      end

      addr_hit[331]: begin
        reg_rdata_next[0] = channel_status_c33_channel_free_qs;
        reg_rdata_next[1] = channel_status_c33_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c33_field1_qs;
      end

      addr_hit[332]: begin
        reg_rdata_next[31:0] = reserved_2_c33_qs;
      end

      addr_hit[333]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[334]: begin
        reg_rdata_next[0] = channel_flags_c33_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c33_field1_qs;
      end

      addr_hit[335]: begin
        reg_rdata_next[31:0] = length_c33_qs;
      end

      addr_hit[336]: begin
        reg_rdata_next[7:0] = message_header_c33_message_id_qs;
        reg_rdata_next[9:8] = message_header_c33_message_type_qs;
        reg_rdata_next[17:10] = message_header_c33_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c33_token_qs;
        reg_rdata_next[31:28] = message_header_c33_field1_qs;
      end

      addr_hit[337]: begin
        reg_rdata_next[31:0] = message_payload_1_c33_qs;
      end

      addr_hit[338]: begin
        reg_rdata_next[0] = doorbell_c33_intr_qs;
        reg_rdata_next[31:1] = doorbell_c33_preserve_mask_qs;
      end

      addr_hit[339]: begin
        reg_rdata_next[0] = completion_interrupt_c33_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c33_preserve_mask_qs;
      end

      addr_hit[340]: begin
        reg_rdata_next[31:0] = reserved_1_c34_qs;
      end

      addr_hit[341]: begin
        reg_rdata_next[0] = channel_status_c34_channel_free_qs;
        reg_rdata_next[1] = channel_status_c34_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c34_field1_qs;
      end

      addr_hit[342]: begin
        reg_rdata_next[31:0] = reserved_2_c34_qs;
      end

      addr_hit[343]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[344]: begin
        reg_rdata_next[0] = channel_flags_c34_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c34_field1_qs;
      end

      addr_hit[345]: begin
        reg_rdata_next[31:0] = length_c34_qs;
      end

      addr_hit[346]: begin
        reg_rdata_next[7:0] = message_header_c34_message_id_qs;
        reg_rdata_next[9:8] = message_header_c34_message_type_qs;
        reg_rdata_next[17:10] = message_header_c34_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c34_token_qs;
        reg_rdata_next[31:28] = message_header_c34_field1_qs;
      end

      addr_hit[347]: begin
        reg_rdata_next[31:0] = message_payload_1_c34_qs;
      end

      addr_hit[348]: begin
        reg_rdata_next[0] = doorbell_c34_intr_qs;
        reg_rdata_next[31:1] = doorbell_c34_preserve_mask_qs;
      end

      addr_hit[349]: begin
        reg_rdata_next[0] = completion_interrupt_c34_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c34_preserve_mask_qs;
      end

      addr_hit[350]: begin
        reg_rdata_next[31:0] = reserved_1_c35_qs;
      end

      addr_hit[351]: begin
        reg_rdata_next[0] = channel_status_c35_channel_free_qs;
        reg_rdata_next[1] = channel_status_c35_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c35_field1_qs;
      end

      addr_hit[352]: begin
        reg_rdata_next[31:0] = reserved_2_c35_qs;
      end

      addr_hit[353]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[354]: begin
        reg_rdata_next[0] = channel_flags_c35_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c35_field1_qs;
      end

      addr_hit[355]: begin
        reg_rdata_next[31:0] = length_c35_qs;
      end

      addr_hit[356]: begin
        reg_rdata_next[7:0] = message_header_c35_message_id_qs;
        reg_rdata_next[9:8] = message_header_c35_message_type_qs;
        reg_rdata_next[17:10] = message_header_c35_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c35_token_qs;
        reg_rdata_next[31:28] = message_header_c35_field1_qs;
      end

      addr_hit[357]: begin
        reg_rdata_next[31:0] = message_payload_1_c35_qs;
      end

      addr_hit[358]: begin
        reg_rdata_next[0] = doorbell_c35_intr_qs;
        reg_rdata_next[31:1] = doorbell_c35_preserve_mask_qs;
      end

      addr_hit[359]: begin
        reg_rdata_next[0] = completion_interrupt_c35_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c35_preserve_mask_qs;
      end

      addr_hit[360]: begin
        reg_rdata_next[31:0] = reserved_1_c36_qs;
      end

      addr_hit[361]: begin
        reg_rdata_next[0] = channel_status_c36_channel_free_qs;
        reg_rdata_next[1] = channel_status_c36_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c36_field1_qs;
      end

      addr_hit[362]: begin
        reg_rdata_next[31:0] = reserved_2_c36_qs;
      end

      addr_hit[363]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[364]: begin
        reg_rdata_next[0] = channel_flags_c36_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c36_field1_qs;
      end

      addr_hit[365]: begin
        reg_rdata_next[31:0] = length_c36_qs;
      end

      addr_hit[366]: begin
        reg_rdata_next[7:0] = message_header_c36_message_id_qs;
        reg_rdata_next[9:8] = message_header_c36_message_type_qs;
        reg_rdata_next[17:10] = message_header_c36_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c36_token_qs;
        reg_rdata_next[31:28] = message_header_c36_field1_qs;
      end

      addr_hit[367]: begin
        reg_rdata_next[31:0] = message_payload_1_c36_qs;
      end

      addr_hit[368]: begin
        reg_rdata_next[0] = doorbell_c36_intr_qs;
        reg_rdata_next[31:1] = doorbell_c36_preserve_mask_qs;
      end

      addr_hit[369]: begin
        reg_rdata_next[0] = completion_interrupt_c36_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c36_preserve_mask_qs;
      end

      addr_hit[370]: begin
        reg_rdata_next[31:0] = reserved_1_c37_qs;
      end

      addr_hit[371]: begin
        reg_rdata_next[0] = channel_status_c37_channel_free_qs;
        reg_rdata_next[1] = channel_status_c37_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c37_field1_qs;
      end

      addr_hit[372]: begin
        reg_rdata_next[31:0] = reserved_2_c37_qs;
      end

      addr_hit[373]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[374]: begin
        reg_rdata_next[0] = channel_flags_c37_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c37_field1_qs;
      end

      addr_hit[375]: begin
        reg_rdata_next[31:0] = length_c37_qs;
      end

      addr_hit[376]: begin
        reg_rdata_next[7:0] = message_header_c37_message_id_qs;
        reg_rdata_next[9:8] = message_header_c37_message_type_qs;
        reg_rdata_next[17:10] = message_header_c37_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c37_token_qs;
        reg_rdata_next[31:28] = message_header_c37_field1_qs;
      end

      addr_hit[377]: begin
        reg_rdata_next[31:0] = message_payload_1_c37_qs;
      end

      addr_hit[378]: begin
        reg_rdata_next[0] = doorbell_c37_intr_qs;
        reg_rdata_next[31:1] = doorbell_c37_preserve_mask_qs;
      end

      addr_hit[379]: begin
        reg_rdata_next[0] = completion_interrupt_c37_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c37_preserve_mask_qs;
      end

      addr_hit[380]: begin
        reg_rdata_next[31:0] = reserved_1_c38_qs;
      end

      addr_hit[381]: begin
        reg_rdata_next[0] = channel_status_c38_channel_free_qs;
        reg_rdata_next[1] = channel_status_c38_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c38_field1_qs;
      end

      addr_hit[382]: begin
        reg_rdata_next[31:0] = reserved_2_c38_qs;
      end

      addr_hit[383]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[384]: begin
        reg_rdata_next[0] = channel_flags_c38_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c38_field1_qs;
      end

      addr_hit[385]: begin
        reg_rdata_next[31:0] = length_c38_qs;
      end

      addr_hit[386]: begin
        reg_rdata_next[7:0] = message_header_c38_message_id_qs;
        reg_rdata_next[9:8] = message_header_c38_message_type_qs;
        reg_rdata_next[17:10] = message_header_c38_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c38_token_qs;
        reg_rdata_next[31:28] = message_header_c38_field1_qs;
      end

      addr_hit[387]: begin
        reg_rdata_next[31:0] = message_payload_1_c38_qs;
      end

      addr_hit[388]: begin
        reg_rdata_next[0] = doorbell_c38_intr_qs;
        reg_rdata_next[31:1] = doorbell_c38_preserve_mask_qs;
      end

      addr_hit[389]: begin
        reg_rdata_next[0] = completion_interrupt_c38_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c38_preserve_mask_qs;
      end

      addr_hit[390]: begin
        reg_rdata_next[31:0] = reserved_1_c39_qs;
      end

      addr_hit[391]: begin
        reg_rdata_next[0] = channel_status_c39_channel_free_qs;
        reg_rdata_next[1] = channel_status_c39_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c39_field1_qs;
      end

      addr_hit[392]: begin
        reg_rdata_next[31:0] = reserved_2_c39_qs;
      end

      addr_hit[393]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[394]: begin
        reg_rdata_next[0] = channel_flags_c39_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c39_field1_qs;
      end

      addr_hit[395]: begin
        reg_rdata_next[31:0] = length_c39_qs;
      end

      addr_hit[396]: begin
        reg_rdata_next[7:0] = message_header_c39_message_id_qs;
        reg_rdata_next[9:8] = message_header_c39_message_type_qs;
        reg_rdata_next[17:10] = message_header_c39_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c39_token_qs;
        reg_rdata_next[31:28] = message_header_c39_field1_qs;
      end

      addr_hit[397]: begin
        reg_rdata_next[31:0] = message_payload_1_c39_qs;
      end

      addr_hit[398]: begin
        reg_rdata_next[0] = doorbell_c39_intr_qs;
        reg_rdata_next[31:1] = doorbell_c39_preserve_mask_qs;
      end

      addr_hit[399]: begin
        reg_rdata_next[0] = completion_interrupt_c39_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c39_preserve_mask_qs;
      end

      addr_hit[400]: begin
        reg_rdata_next[31:0] = reserved_1_c40_qs;
      end

      addr_hit[401]: begin
        reg_rdata_next[0] = channel_status_c40_channel_free_qs;
        reg_rdata_next[1] = channel_status_c40_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c40_field1_qs;
      end

      addr_hit[402]: begin
        reg_rdata_next[31:0] = reserved_2_c40_qs;
      end

      addr_hit[403]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[404]: begin
        reg_rdata_next[0] = channel_flags_c40_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c40_field1_qs;
      end

      addr_hit[405]: begin
        reg_rdata_next[31:0] = length_c40_qs;
      end

      addr_hit[406]: begin
        reg_rdata_next[7:0] = message_header_c40_message_id_qs;
        reg_rdata_next[9:8] = message_header_c40_message_type_qs;
        reg_rdata_next[17:10] = message_header_c40_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c40_token_qs;
        reg_rdata_next[31:28] = message_header_c40_field1_qs;
      end

      addr_hit[407]: begin
        reg_rdata_next[31:0] = message_payload_1_c40_qs;
      end

      addr_hit[408]: begin
        reg_rdata_next[0] = doorbell_c40_intr_qs;
        reg_rdata_next[31:1] = doorbell_c40_preserve_mask_qs;
      end

      addr_hit[409]: begin
        reg_rdata_next[0] = completion_interrupt_c40_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c40_preserve_mask_qs;
      end

      addr_hit[410]: begin
        reg_rdata_next[31:0] = reserved_1_c41_qs;
      end

      addr_hit[411]: begin
        reg_rdata_next[0] = channel_status_c41_channel_free_qs;
        reg_rdata_next[1] = channel_status_c41_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c41_field1_qs;
      end

      addr_hit[412]: begin
        reg_rdata_next[31:0] = reserved_2_c41_qs;
      end

      addr_hit[413]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[414]: begin
        reg_rdata_next[0] = channel_flags_c41_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c41_field1_qs;
      end

      addr_hit[415]: begin
        reg_rdata_next[31:0] = length_c41_qs;
      end

      addr_hit[416]: begin
        reg_rdata_next[7:0] = message_header_c41_message_id_qs;
        reg_rdata_next[9:8] = message_header_c41_message_type_qs;
        reg_rdata_next[17:10] = message_header_c41_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c41_token_qs;
        reg_rdata_next[31:28] = message_header_c41_field1_qs;
      end

      addr_hit[417]: begin
        reg_rdata_next[31:0] = message_payload_1_c41_qs;
      end

      addr_hit[418]: begin
        reg_rdata_next[0] = doorbell_c41_intr_qs;
        reg_rdata_next[31:1] = doorbell_c41_preserve_mask_qs;
      end

      addr_hit[419]: begin
        reg_rdata_next[0] = completion_interrupt_c41_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c41_preserve_mask_qs;
      end

      addr_hit[420]: begin
        reg_rdata_next[31:0] = reserved_1_c42_qs;
      end

      addr_hit[421]: begin
        reg_rdata_next[0] = channel_status_c42_channel_free_qs;
        reg_rdata_next[1] = channel_status_c42_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c42_field1_qs;
      end

      addr_hit[422]: begin
        reg_rdata_next[31:0] = reserved_2_c42_qs;
      end

      addr_hit[423]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[424]: begin
        reg_rdata_next[0] = channel_flags_c42_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c42_field1_qs;
      end

      addr_hit[425]: begin
        reg_rdata_next[31:0] = length_c42_qs;
      end

      addr_hit[426]: begin
        reg_rdata_next[7:0] = message_header_c42_message_id_qs;
        reg_rdata_next[9:8] = message_header_c42_message_type_qs;
        reg_rdata_next[17:10] = message_header_c42_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c42_token_qs;
        reg_rdata_next[31:28] = message_header_c42_field1_qs;
      end

      addr_hit[427]: begin
        reg_rdata_next[31:0] = message_payload_1_c42_qs;
      end

      addr_hit[428]: begin
        reg_rdata_next[0] = doorbell_c42_intr_qs;
        reg_rdata_next[31:1] = doorbell_c42_preserve_mask_qs;
      end

      addr_hit[429]: begin
        reg_rdata_next[0] = completion_interrupt_c42_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c42_preserve_mask_qs;
      end

      addr_hit[430]: begin
        reg_rdata_next[31:0] = reserved_1_c43_qs;
      end

      addr_hit[431]: begin
        reg_rdata_next[0] = channel_status_c43_channel_free_qs;
        reg_rdata_next[1] = channel_status_c43_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c43_field1_qs;
      end

      addr_hit[432]: begin
        reg_rdata_next[31:0] = reserved_2_c43_qs;
      end

      addr_hit[433]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[434]: begin
        reg_rdata_next[0] = channel_flags_c43_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c43_field1_qs;
      end

      addr_hit[435]: begin
        reg_rdata_next[31:0] = length_c43_qs;
      end

      addr_hit[436]: begin
        reg_rdata_next[7:0] = message_header_c43_message_id_qs;
        reg_rdata_next[9:8] = message_header_c43_message_type_qs;
        reg_rdata_next[17:10] = message_header_c43_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c43_token_qs;
        reg_rdata_next[31:28] = message_header_c43_field1_qs;
      end

      addr_hit[437]: begin
        reg_rdata_next[31:0] = message_payload_1_c43_qs;
      end

      addr_hit[438]: begin
        reg_rdata_next[0] = doorbell_c43_intr_qs;
        reg_rdata_next[31:1] = doorbell_c43_preserve_mask_qs;
      end

      addr_hit[439]: begin
        reg_rdata_next[0] = completion_interrupt_c43_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c43_preserve_mask_qs;
      end

      addr_hit[440]: begin
        reg_rdata_next[31:0] = reserved_1_c44_qs;
      end

      addr_hit[441]: begin
        reg_rdata_next[0] = channel_status_c44_channel_free_qs;
        reg_rdata_next[1] = channel_status_c44_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c44_field1_qs;
      end

      addr_hit[442]: begin
        reg_rdata_next[31:0] = reserved_2_c44_qs;
      end

      addr_hit[443]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[444]: begin
        reg_rdata_next[0] = channel_flags_c44_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c44_field1_qs;
      end

      addr_hit[445]: begin
        reg_rdata_next[31:0] = length_c44_qs;
      end

      addr_hit[446]: begin
        reg_rdata_next[7:0] = message_header_c44_message_id_qs;
        reg_rdata_next[9:8] = message_header_c44_message_type_qs;
        reg_rdata_next[17:10] = message_header_c44_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c44_token_qs;
        reg_rdata_next[31:28] = message_header_c44_field1_qs;
      end

      addr_hit[447]: begin
        reg_rdata_next[31:0] = message_payload_1_c44_qs;
      end

      addr_hit[448]: begin
        reg_rdata_next[0] = doorbell_c44_intr_qs;
        reg_rdata_next[31:1] = doorbell_c44_preserve_mask_qs;
      end

      addr_hit[449]: begin
        reg_rdata_next[0] = completion_interrupt_c44_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c44_preserve_mask_qs;
      end

      addr_hit[450]: begin
        reg_rdata_next[31:0] = reserved_1_c45_qs;
      end

      addr_hit[451]: begin
        reg_rdata_next[0] = channel_status_c45_channel_free_qs;
        reg_rdata_next[1] = channel_status_c45_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c45_field1_qs;
      end

      addr_hit[452]: begin
        reg_rdata_next[31:0] = reserved_2_c45_qs;
      end

      addr_hit[453]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[454]: begin
        reg_rdata_next[0] = channel_flags_c45_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c45_field1_qs;
      end

      addr_hit[455]: begin
        reg_rdata_next[31:0] = length_c45_qs;
      end

      addr_hit[456]: begin
        reg_rdata_next[7:0] = message_header_c45_message_id_qs;
        reg_rdata_next[9:8] = message_header_c45_message_type_qs;
        reg_rdata_next[17:10] = message_header_c45_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c45_token_qs;
        reg_rdata_next[31:28] = message_header_c45_field1_qs;
      end

      addr_hit[457]: begin
        reg_rdata_next[31:0] = message_payload_1_c45_qs;
      end

      addr_hit[458]: begin
        reg_rdata_next[0] = doorbell_c45_intr_qs;
        reg_rdata_next[31:1] = doorbell_c45_preserve_mask_qs;
      end

      addr_hit[459]: begin
        reg_rdata_next[0] = completion_interrupt_c45_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c45_preserve_mask_qs;
      end

      addr_hit[460]: begin
        reg_rdata_next[31:0] = reserved_1_c46_qs;
      end

      addr_hit[461]: begin
        reg_rdata_next[0] = channel_status_c46_channel_free_qs;
        reg_rdata_next[1] = channel_status_c46_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c46_field1_qs;
      end

      addr_hit[462]: begin
        reg_rdata_next[31:0] = reserved_2_c46_qs;
      end

      addr_hit[463]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[464]: begin
        reg_rdata_next[0] = channel_flags_c46_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c46_field1_qs;
      end

      addr_hit[465]: begin
        reg_rdata_next[31:0] = length_c46_qs;
      end

      addr_hit[466]: begin
        reg_rdata_next[7:0] = message_header_c46_message_id_qs;
        reg_rdata_next[9:8] = message_header_c46_message_type_qs;
        reg_rdata_next[17:10] = message_header_c46_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c46_token_qs;
        reg_rdata_next[31:28] = message_header_c46_field1_qs;
      end

      addr_hit[467]: begin
        reg_rdata_next[31:0] = message_payload_1_c46_qs;
      end

      addr_hit[468]: begin
        reg_rdata_next[0] = doorbell_c46_intr_qs;
        reg_rdata_next[31:1] = doorbell_c46_preserve_mask_qs;
      end

      addr_hit[469]: begin
        reg_rdata_next[0] = completion_interrupt_c46_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c46_preserve_mask_qs;
      end

      addr_hit[470]: begin
        reg_rdata_next[31:0] = reserved_1_c47_qs;
      end

      addr_hit[471]: begin
        reg_rdata_next[0] = channel_status_c47_channel_free_qs;
        reg_rdata_next[1] = channel_status_c47_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c47_field1_qs;
      end

      addr_hit[472]: begin
        reg_rdata_next[31:0] = reserved_2_c47_qs;
      end

      addr_hit[473]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[474]: begin
        reg_rdata_next[0] = channel_flags_c47_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c47_field1_qs;
      end

      addr_hit[475]: begin
        reg_rdata_next[31:0] = length_c47_qs;
      end

      addr_hit[476]: begin
        reg_rdata_next[7:0] = message_header_c47_message_id_qs;
        reg_rdata_next[9:8] = message_header_c47_message_type_qs;
        reg_rdata_next[17:10] = message_header_c47_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c47_token_qs;
        reg_rdata_next[31:28] = message_header_c47_field1_qs;
      end

      addr_hit[477]: begin
        reg_rdata_next[31:0] = message_payload_1_c47_qs;
      end

      addr_hit[478]: begin
        reg_rdata_next[0] = doorbell_c47_intr_qs;
        reg_rdata_next[31:1] = doorbell_c47_preserve_mask_qs;
      end

      addr_hit[479]: begin
        reg_rdata_next[0] = completion_interrupt_c47_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c47_preserve_mask_qs;
      end

      addr_hit[480]: begin
        reg_rdata_next[31:0] = reserved_1_c48_qs;
      end

      addr_hit[481]: begin
        reg_rdata_next[0] = channel_status_c48_channel_free_qs;
        reg_rdata_next[1] = channel_status_c48_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c48_field1_qs;
      end

      addr_hit[482]: begin
        reg_rdata_next[31:0] = reserved_2_c48_qs;
      end

      addr_hit[483]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[484]: begin
        reg_rdata_next[0] = channel_flags_c48_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c48_field1_qs;
      end

      addr_hit[485]: begin
        reg_rdata_next[31:0] = length_c48_qs;
      end

      addr_hit[486]: begin
        reg_rdata_next[7:0] = message_header_c48_message_id_qs;
        reg_rdata_next[9:8] = message_header_c48_message_type_qs;
        reg_rdata_next[17:10] = message_header_c48_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c48_token_qs;
        reg_rdata_next[31:28] = message_header_c48_field1_qs;
      end

      addr_hit[487]: begin
        reg_rdata_next[31:0] = message_payload_1_c48_qs;
      end

      addr_hit[488]: begin
        reg_rdata_next[0] = doorbell_c48_intr_qs;
        reg_rdata_next[31:1] = doorbell_c48_preserve_mask_qs;
      end

      addr_hit[489]: begin
        reg_rdata_next[0] = completion_interrupt_c48_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c48_preserve_mask_qs;
      end

      addr_hit[490]: begin
        reg_rdata_next[31:0] = reserved_1_c49_qs;
      end

      addr_hit[491]: begin
        reg_rdata_next[0] = channel_status_c49_channel_free_qs;
        reg_rdata_next[1] = channel_status_c49_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c49_field1_qs;
      end

      addr_hit[492]: begin
        reg_rdata_next[31:0] = reserved_2_c49_qs;
      end

      addr_hit[493]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[494]: begin
        reg_rdata_next[0] = channel_flags_c49_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c49_field1_qs;
      end

      addr_hit[495]: begin
        reg_rdata_next[31:0] = length_c49_qs;
      end

      addr_hit[496]: begin
        reg_rdata_next[7:0] = message_header_c49_message_id_qs;
        reg_rdata_next[9:8] = message_header_c49_message_type_qs;
        reg_rdata_next[17:10] = message_header_c49_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c49_token_qs;
        reg_rdata_next[31:28] = message_header_c49_field1_qs;
      end

      addr_hit[497]: begin
        reg_rdata_next[31:0] = message_payload_1_c49_qs;
      end

      addr_hit[498]: begin
        reg_rdata_next[0] = doorbell_c49_intr_qs;
        reg_rdata_next[31:1] = doorbell_c49_preserve_mask_qs;
      end

      addr_hit[499]: begin
        reg_rdata_next[0] = completion_interrupt_c49_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c49_preserve_mask_qs;
      end

      addr_hit[500]: begin
        reg_rdata_next[31:0] = reserved_1_c50_qs;
      end

      addr_hit[501]: begin
        reg_rdata_next[0] = channel_status_c50_channel_free_qs;
        reg_rdata_next[1] = channel_status_c50_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c50_field1_qs;
      end

      addr_hit[502]: begin
        reg_rdata_next[31:0] = reserved_2_c50_qs;
      end

      addr_hit[503]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[504]: begin
        reg_rdata_next[0] = channel_flags_c50_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c50_field1_qs;
      end

      addr_hit[505]: begin
        reg_rdata_next[31:0] = length_c50_qs;
      end

      addr_hit[506]: begin
        reg_rdata_next[7:0] = message_header_c50_message_id_qs;
        reg_rdata_next[9:8] = message_header_c50_message_type_qs;
        reg_rdata_next[17:10] = message_header_c50_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c50_token_qs;
        reg_rdata_next[31:28] = message_header_c50_field1_qs;
      end

      addr_hit[507]: begin
        reg_rdata_next[31:0] = message_payload_1_c50_qs;
      end

      addr_hit[508]: begin
        reg_rdata_next[0] = doorbell_c50_intr_qs;
        reg_rdata_next[31:1] = doorbell_c50_preserve_mask_qs;
      end

      addr_hit[509]: begin
        reg_rdata_next[0] = completion_interrupt_c50_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c50_preserve_mask_qs;
      end

      addr_hit[510]: begin
        reg_rdata_next[31:0] = reserved_1_c51_qs;
      end

      addr_hit[511]: begin
        reg_rdata_next[0] = channel_status_c51_channel_free_qs;
        reg_rdata_next[1] = channel_status_c51_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c51_field1_qs;
      end

      addr_hit[512]: begin
        reg_rdata_next[31:0] = reserved_2_c51_qs;
      end

      addr_hit[513]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[514]: begin
        reg_rdata_next[0] = channel_flags_c51_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c51_field1_qs;
      end

      addr_hit[515]: begin
        reg_rdata_next[31:0] = length_c51_qs;
      end

      addr_hit[516]: begin
        reg_rdata_next[7:0] = message_header_c51_message_id_qs;
        reg_rdata_next[9:8] = message_header_c51_message_type_qs;
        reg_rdata_next[17:10] = message_header_c51_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c51_token_qs;
        reg_rdata_next[31:28] = message_header_c51_field1_qs;
      end

      addr_hit[517]: begin
        reg_rdata_next[31:0] = message_payload_1_c51_qs;
      end

      addr_hit[518]: begin
        reg_rdata_next[0] = doorbell_c51_intr_qs;
        reg_rdata_next[31:1] = doorbell_c51_preserve_mask_qs;
      end

      addr_hit[519]: begin
        reg_rdata_next[0] = completion_interrupt_c51_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c51_preserve_mask_qs;
      end

      addr_hit[520]: begin
        reg_rdata_next[31:0] = reserved_1_c52_qs;
      end

      addr_hit[521]: begin
        reg_rdata_next[0] = channel_status_c52_channel_free_qs;
        reg_rdata_next[1] = channel_status_c52_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c52_field1_qs;
      end

      addr_hit[522]: begin
        reg_rdata_next[31:0] = reserved_2_c52_qs;
      end

      addr_hit[523]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[524]: begin
        reg_rdata_next[0] = channel_flags_c52_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c52_field1_qs;
      end

      addr_hit[525]: begin
        reg_rdata_next[31:0] = length_c52_qs;
      end

      addr_hit[526]: begin
        reg_rdata_next[7:0] = message_header_c52_message_id_qs;
        reg_rdata_next[9:8] = message_header_c52_message_type_qs;
        reg_rdata_next[17:10] = message_header_c52_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c52_token_qs;
        reg_rdata_next[31:28] = message_header_c52_field1_qs;
      end

      addr_hit[527]: begin
        reg_rdata_next[31:0] = message_payload_1_c52_qs;
      end

      addr_hit[528]: begin
        reg_rdata_next[0] = doorbell_c52_intr_qs;
        reg_rdata_next[31:1] = doorbell_c52_preserve_mask_qs;
      end

      addr_hit[529]: begin
        reg_rdata_next[0] = completion_interrupt_c52_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c52_preserve_mask_qs;
      end

      addr_hit[530]: begin
        reg_rdata_next[31:0] = reserved_1_c53_qs;
      end

      addr_hit[531]: begin
        reg_rdata_next[0] = channel_status_c53_channel_free_qs;
        reg_rdata_next[1] = channel_status_c53_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c53_field1_qs;
      end

      addr_hit[532]: begin
        reg_rdata_next[31:0] = reserved_2_c53_qs;
      end

      addr_hit[533]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[534]: begin
        reg_rdata_next[0] = channel_flags_c53_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c53_field1_qs;
      end

      addr_hit[535]: begin
        reg_rdata_next[31:0] = length_c53_qs;
      end

      addr_hit[536]: begin
        reg_rdata_next[7:0] = message_header_c53_message_id_qs;
        reg_rdata_next[9:8] = message_header_c53_message_type_qs;
        reg_rdata_next[17:10] = message_header_c53_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c53_token_qs;
        reg_rdata_next[31:28] = message_header_c53_field1_qs;
      end

      addr_hit[537]: begin
        reg_rdata_next[31:0] = message_payload_1_c53_qs;
      end

      addr_hit[538]: begin
        reg_rdata_next[0] = doorbell_c53_intr_qs;
        reg_rdata_next[31:1] = doorbell_c53_preserve_mask_qs;
      end

      addr_hit[539]: begin
        reg_rdata_next[0] = completion_interrupt_c53_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c53_preserve_mask_qs;
      end

      addr_hit[540]: begin
        reg_rdata_next[31:0] = reserved_1_c54_qs;
      end

      addr_hit[541]: begin
        reg_rdata_next[0] = channel_status_c54_channel_free_qs;
        reg_rdata_next[1] = channel_status_c54_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c54_field1_qs;
      end

      addr_hit[542]: begin
        reg_rdata_next[31:0] = reserved_2_c54_qs;
      end

      addr_hit[543]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[544]: begin
        reg_rdata_next[0] = channel_flags_c54_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c54_field1_qs;
      end

      addr_hit[545]: begin
        reg_rdata_next[31:0] = length_c54_qs;
      end

      addr_hit[546]: begin
        reg_rdata_next[7:0] = message_header_c54_message_id_qs;
        reg_rdata_next[9:8] = message_header_c54_message_type_qs;
        reg_rdata_next[17:10] = message_header_c54_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c54_token_qs;
        reg_rdata_next[31:28] = message_header_c54_field1_qs;
      end

      addr_hit[547]: begin
        reg_rdata_next[31:0] = message_payload_1_c54_qs;
      end

      addr_hit[548]: begin
        reg_rdata_next[0] = doorbell_c54_intr_qs;
        reg_rdata_next[31:1] = doorbell_c54_preserve_mask_qs;
      end

      addr_hit[549]: begin
        reg_rdata_next[0] = completion_interrupt_c54_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c54_preserve_mask_qs;
      end

      addr_hit[550]: begin
        reg_rdata_next[31:0] = reserved_1_c55_qs;
      end

      addr_hit[551]: begin
        reg_rdata_next[0] = channel_status_c55_channel_free_qs;
        reg_rdata_next[1] = channel_status_c55_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c55_field1_qs;
      end

      addr_hit[552]: begin
        reg_rdata_next[31:0] = reserved_2_c55_qs;
      end

      addr_hit[553]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[554]: begin
        reg_rdata_next[0] = channel_flags_c55_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c55_field1_qs;
      end

      addr_hit[555]: begin
        reg_rdata_next[31:0] = length_c55_qs;
      end

      addr_hit[556]: begin
        reg_rdata_next[7:0] = message_header_c55_message_id_qs;
        reg_rdata_next[9:8] = message_header_c55_message_type_qs;
        reg_rdata_next[17:10] = message_header_c55_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c55_token_qs;
        reg_rdata_next[31:28] = message_header_c55_field1_qs;
      end

      addr_hit[557]: begin
        reg_rdata_next[31:0] = message_payload_1_c55_qs;
      end

      addr_hit[558]: begin
        reg_rdata_next[0] = doorbell_c55_intr_qs;
        reg_rdata_next[31:1] = doorbell_c55_preserve_mask_qs;
      end

      addr_hit[559]: begin
        reg_rdata_next[0] = completion_interrupt_c55_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c55_preserve_mask_qs;
      end

      addr_hit[560]: begin
        reg_rdata_next[31:0] = reserved_1_c56_qs;
      end

      addr_hit[561]: begin
        reg_rdata_next[0] = channel_status_c56_channel_free_qs;
        reg_rdata_next[1] = channel_status_c56_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c56_field1_qs;
      end

      addr_hit[562]: begin
        reg_rdata_next[31:0] = reserved_2_c56_qs;
      end

      addr_hit[563]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[564]: begin
        reg_rdata_next[0] = channel_flags_c56_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c56_field1_qs;
      end

      addr_hit[565]: begin
        reg_rdata_next[31:0] = length_c56_qs;
      end

      addr_hit[566]: begin
        reg_rdata_next[7:0] = message_header_c56_message_id_qs;
        reg_rdata_next[9:8] = message_header_c56_message_type_qs;
        reg_rdata_next[17:10] = message_header_c56_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c56_token_qs;
        reg_rdata_next[31:28] = message_header_c56_field1_qs;
      end

      addr_hit[567]: begin
        reg_rdata_next[31:0] = message_payload_1_c56_qs;
      end

      addr_hit[568]: begin
        reg_rdata_next[0] = doorbell_c56_intr_qs;
        reg_rdata_next[31:1] = doorbell_c56_preserve_mask_qs;
      end

      addr_hit[569]: begin
        reg_rdata_next[0] = completion_interrupt_c56_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c56_preserve_mask_qs;
      end

      addr_hit[570]: begin
        reg_rdata_next[31:0] = reserved_1_c57_qs;
      end

      addr_hit[571]: begin
        reg_rdata_next[0] = channel_status_c57_channel_free_qs;
        reg_rdata_next[1] = channel_status_c57_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c57_field1_qs;
      end

      addr_hit[572]: begin
        reg_rdata_next[31:0] = reserved_2_c57_qs;
      end

      addr_hit[573]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[574]: begin
        reg_rdata_next[0] = channel_flags_c57_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c57_field1_qs;
      end

      addr_hit[575]: begin
        reg_rdata_next[31:0] = length_c57_qs;
      end

      addr_hit[576]: begin
        reg_rdata_next[7:0] = message_header_c57_message_id_qs;
        reg_rdata_next[9:8] = message_header_c57_message_type_qs;
        reg_rdata_next[17:10] = message_header_c57_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c57_token_qs;
        reg_rdata_next[31:28] = message_header_c57_field1_qs;
      end

      addr_hit[577]: begin
        reg_rdata_next[31:0] = message_payload_1_c57_qs;
      end

      addr_hit[578]: begin
        reg_rdata_next[0] = doorbell_c57_intr_qs;
        reg_rdata_next[31:1] = doorbell_c57_preserve_mask_qs;
      end

      addr_hit[579]: begin
        reg_rdata_next[0] = completion_interrupt_c57_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c57_preserve_mask_qs;
      end

      addr_hit[580]: begin
        reg_rdata_next[31:0] = reserved_1_c58_qs;
      end

      addr_hit[581]: begin
        reg_rdata_next[0] = channel_status_c58_channel_free_qs;
        reg_rdata_next[1] = channel_status_c58_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c58_field1_qs;
      end

      addr_hit[582]: begin
        reg_rdata_next[31:0] = reserved_2_c58_qs;
      end

      addr_hit[583]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[584]: begin
        reg_rdata_next[0] = channel_flags_c58_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c58_field1_qs;
      end

      addr_hit[585]: begin
        reg_rdata_next[31:0] = length_c58_qs;
      end

      addr_hit[586]: begin
        reg_rdata_next[7:0] = message_header_c58_message_id_qs;
        reg_rdata_next[9:8] = message_header_c58_message_type_qs;
        reg_rdata_next[17:10] = message_header_c58_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c58_token_qs;
        reg_rdata_next[31:28] = message_header_c58_field1_qs;
      end

      addr_hit[587]: begin
        reg_rdata_next[31:0] = message_payload_1_c58_qs;
      end

      addr_hit[588]: begin
        reg_rdata_next[0] = doorbell_c58_intr_qs;
        reg_rdata_next[31:1] = doorbell_c58_preserve_mask_qs;
      end

      addr_hit[589]: begin
        reg_rdata_next[0] = completion_interrupt_c58_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c58_preserve_mask_qs;
      end

      addr_hit[590]: begin
        reg_rdata_next[31:0] = reserved_1_c59_qs;
      end

      addr_hit[591]: begin
        reg_rdata_next[0] = channel_status_c59_channel_free_qs;
        reg_rdata_next[1] = channel_status_c59_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c59_field1_qs;
      end

      addr_hit[592]: begin
        reg_rdata_next[31:0] = reserved_2_c59_qs;
      end

      addr_hit[593]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[594]: begin
        reg_rdata_next[0] = channel_flags_c59_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c59_field1_qs;
      end

      addr_hit[595]: begin
        reg_rdata_next[31:0] = length_c59_qs;
      end

      addr_hit[596]: begin
        reg_rdata_next[7:0] = message_header_c59_message_id_qs;
        reg_rdata_next[9:8] = message_header_c59_message_type_qs;
        reg_rdata_next[17:10] = message_header_c59_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c59_token_qs;
        reg_rdata_next[31:28] = message_header_c59_field1_qs;
      end

      addr_hit[597]: begin
        reg_rdata_next[31:0] = message_payload_1_c59_qs;
      end

      addr_hit[598]: begin
        reg_rdata_next[0] = doorbell_c59_intr_qs;
        reg_rdata_next[31:1] = doorbell_c59_preserve_mask_qs;
      end

      addr_hit[599]: begin
        reg_rdata_next[0] = completion_interrupt_c59_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c59_preserve_mask_qs;
      end

      addr_hit[600]: begin
        reg_rdata_next[31:0] = reserved_1_c60_qs;
      end

      addr_hit[601]: begin
        reg_rdata_next[0] = channel_status_c60_channel_free_qs;
        reg_rdata_next[1] = channel_status_c60_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c60_field1_qs;
      end

      addr_hit[602]: begin
        reg_rdata_next[31:0] = reserved_2_c60_qs;
      end

      addr_hit[603]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[604]: begin
        reg_rdata_next[0] = channel_flags_c60_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c60_field1_qs;
      end

      addr_hit[605]: begin
        reg_rdata_next[31:0] = length_c60_qs;
      end

      addr_hit[606]: begin
        reg_rdata_next[7:0] = message_header_c60_message_id_qs;
        reg_rdata_next[9:8] = message_header_c60_message_type_qs;
        reg_rdata_next[17:10] = message_header_c60_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c60_token_qs;
        reg_rdata_next[31:28] = message_header_c60_field1_qs;
      end

      addr_hit[607]: begin
        reg_rdata_next[31:0] = message_payload_1_c60_qs;
      end

      addr_hit[608]: begin
        reg_rdata_next[0] = doorbell_c60_intr_qs;
        reg_rdata_next[31:1] = doorbell_c60_preserve_mask_qs;
      end

      addr_hit[609]: begin
        reg_rdata_next[0] = completion_interrupt_c60_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c60_preserve_mask_qs;
      end

      addr_hit[610]: begin
        reg_rdata_next[31:0] = reserved_1_c61_qs;
      end

      addr_hit[611]: begin
        reg_rdata_next[0] = channel_status_c61_channel_free_qs;
        reg_rdata_next[1] = channel_status_c61_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c61_field1_qs;
      end

      addr_hit[612]: begin
        reg_rdata_next[31:0] = reserved_2_c61_qs;
      end

      addr_hit[613]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[614]: begin
        reg_rdata_next[0] = channel_flags_c61_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c61_field1_qs;
      end

      addr_hit[615]: begin
        reg_rdata_next[31:0] = length_c61_qs;
      end

      addr_hit[616]: begin
        reg_rdata_next[7:0] = message_header_c61_message_id_qs;
        reg_rdata_next[9:8] = message_header_c61_message_type_qs;
        reg_rdata_next[17:10] = message_header_c61_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c61_token_qs;
        reg_rdata_next[31:28] = message_header_c61_field1_qs;
      end

      addr_hit[617]: begin
        reg_rdata_next[31:0] = message_payload_1_c61_qs;
      end

      addr_hit[618]: begin
        reg_rdata_next[0] = doorbell_c61_intr_qs;
        reg_rdata_next[31:1] = doorbell_c61_preserve_mask_qs;
      end

      addr_hit[619]: begin
        reg_rdata_next[0] = completion_interrupt_c61_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c61_preserve_mask_qs;
      end

      addr_hit[620]: begin
        reg_rdata_next[31:0] = reserved_1_c62_qs;
      end

      addr_hit[621]: begin
        reg_rdata_next[0] = channel_status_c62_channel_free_qs;
        reg_rdata_next[1] = channel_status_c62_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c62_field1_qs;
      end

      addr_hit[622]: begin
        reg_rdata_next[31:0] = reserved_2_c62_qs;
      end

      addr_hit[623]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[624]: begin
        reg_rdata_next[0] = channel_flags_c62_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c62_field1_qs;
      end

      addr_hit[625]: begin
        reg_rdata_next[31:0] = length_c62_qs;
      end

      addr_hit[626]: begin
        reg_rdata_next[7:0] = message_header_c62_message_id_qs;
        reg_rdata_next[9:8] = message_header_c62_message_type_qs;
        reg_rdata_next[17:10] = message_header_c62_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c62_token_qs;
        reg_rdata_next[31:28] = message_header_c62_field1_qs;
      end

      addr_hit[627]: begin
        reg_rdata_next[31:0] = message_payload_1_c62_qs;
      end

      addr_hit[628]: begin
        reg_rdata_next[0] = doorbell_c62_intr_qs;
        reg_rdata_next[31:1] = doorbell_c62_preserve_mask_qs;
      end

      addr_hit[629]: begin
        reg_rdata_next[0] = completion_interrupt_c62_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c62_preserve_mask_qs;
      end

      addr_hit[630]: begin
        reg_rdata_next[31:0] = reserved_1_c63_qs;
      end

      addr_hit[631]: begin
        reg_rdata_next[0] = channel_status_c63_channel_free_qs;
        reg_rdata_next[1] = channel_status_c63_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c63_field1_qs;
      end

      addr_hit[632]: begin
        reg_rdata_next[31:0] = reserved_2_c63_qs;
      end

      addr_hit[633]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[634]: begin
        reg_rdata_next[0] = channel_flags_c63_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c63_field1_qs;
      end

      addr_hit[635]: begin
        reg_rdata_next[31:0] = length_c63_qs;
      end

      addr_hit[636]: begin
        reg_rdata_next[7:0] = message_header_c63_message_id_qs;
        reg_rdata_next[9:8] = message_header_c63_message_type_qs;
        reg_rdata_next[17:10] = message_header_c63_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c63_token_qs;
        reg_rdata_next[31:28] = message_header_c63_field1_qs;
      end

      addr_hit[637]: begin
        reg_rdata_next[31:0] = message_payload_1_c63_qs;
      end

      addr_hit[638]: begin
        reg_rdata_next[0] = doorbell_c63_intr_qs;
        reg_rdata_next[31:1] = doorbell_c63_preserve_mask_qs;
      end

      addr_hit[639]: begin
        reg_rdata_next[0] = completion_interrupt_c63_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c63_preserve_mask_qs;
      end

      addr_hit[640]: begin
        reg_rdata_next[31:0] = reserved_1_c64_qs;
      end

      addr_hit[641]: begin
        reg_rdata_next[0] = channel_status_c64_channel_free_qs;
        reg_rdata_next[1] = channel_status_c64_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c64_field1_qs;
      end

      addr_hit[642]: begin
        reg_rdata_next[31:0] = reserved_2_c64_qs;
      end

      addr_hit[643]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[644]: begin
        reg_rdata_next[0] = channel_flags_c64_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c64_field1_qs;
      end

      addr_hit[645]: begin
        reg_rdata_next[31:0] = length_c64_qs;
      end

      addr_hit[646]: begin
        reg_rdata_next[7:0] = message_header_c64_message_id_qs;
        reg_rdata_next[9:8] = message_header_c64_message_type_qs;
        reg_rdata_next[17:10] = message_header_c64_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c64_token_qs;
        reg_rdata_next[31:28] = message_header_c64_field1_qs;
      end

      addr_hit[647]: begin
        reg_rdata_next[31:0] = message_payload_1_c64_qs;
      end

      addr_hit[648]: begin
        reg_rdata_next[0] = doorbell_c64_intr_qs;
        reg_rdata_next[31:1] = doorbell_c64_preserve_mask_qs;
      end

      addr_hit[649]: begin
        reg_rdata_next[0] = completion_interrupt_c64_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c64_preserve_mask_qs;
      end

      addr_hit[650]: begin
        reg_rdata_next[31:0] = reserved_1_c65_qs;
      end

      addr_hit[651]: begin
        reg_rdata_next[0] = channel_status_c65_channel_free_qs;
        reg_rdata_next[1] = channel_status_c65_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c65_field1_qs;
      end

      addr_hit[652]: begin
        reg_rdata_next[31:0] = reserved_2_c65_qs;
      end

      addr_hit[653]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[654]: begin
        reg_rdata_next[0] = channel_flags_c65_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c65_field1_qs;
      end

      addr_hit[655]: begin
        reg_rdata_next[31:0] = length_c65_qs;
      end

      addr_hit[656]: begin
        reg_rdata_next[7:0] = message_header_c65_message_id_qs;
        reg_rdata_next[9:8] = message_header_c65_message_type_qs;
        reg_rdata_next[17:10] = message_header_c65_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c65_token_qs;
        reg_rdata_next[31:28] = message_header_c65_field1_qs;
      end

      addr_hit[657]: begin
        reg_rdata_next[31:0] = message_payload_1_c65_qs;
      end

      addr_hit[658]: begin
        reg_rdata_next[0] = doorbell_c65_intr_qs;
        reg_rdata_next[31:1] = doorbell_c65_preserve_mask_qs;
      end

      addr_hit[659]: begin
        reg_rdata_next[0] = completion_interrupt_c65_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c65_preserve_mask_qs;
      end

      addr_hit[660]: begin
        reg_rdata_next[31:0] = reserved_1_c66_qs;
      end

      addr_hit[661]: begin
        reg_rdata_next[0] = channel_status_c66_channel_free_qs;
        reg_rdata_next[1] = channel_status_c66_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c66_field1_qs;
      end

      addr_hit[662]: begin
        reg_rdata_next[31:0] = reserved_2_c66_qs;
      end

      addr_hit[663]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[664]: begin
        reg_rdata_next[0] = channel_flags_c66_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c66_field1_qs;
      end

      addr_hit[665]: begin
        reg_rdata_next[31:0] = length_c66_qs;
      end

      addr_hit[666]: begin
        reg_rdata_next[7:0] = message_header_c66_message_id_qs;
        reg_rdata_next[9:8] = message_header_c66_message_type_qs;
        reg_rdata_next[17:10] = message_header_c66_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c66_token_qs;
        reg_rdata_next[31:28] = message_header_c66_field1_qs;
      end

      addr_hit[667]: begin
        reg_rdata_next[31:0] = message_payload_1_c66_qs;
      end

      addr_hit[668]: begin
        reg_rdata_next[0] = doorbell_c66_intr_qs;
        reg_rdata_next[31:1] = doorbell_c66_preserve_mask_qs;
      end

      addr_hit[669]: begin
        reg_rdata_next[0] = completion_interrupt_c66_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c66_preserve_mask_qs;
      end

      addr_hit[670]: begin
        reg_rdata_next[31:0] = reserved_1_c67_qs;
      end

      addr_hit[671]: begin
        reg_rdata_next[0] = channel_status_c67_channel_free_qs;
        reg_rdata_next[1] = channel_status_c67_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c67_field1_qs;
      end

      addr_hit[672]: begin
        reg_rdata_next[31:0] = reserved_2_c67_qs;
      end

      addr_hit[673]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[674]: begin
        reg_rdata_next[0] = channel_flags_c67_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c67_field1_qs;
      end

      addr_hit[675]: begin
        reg_rdata_next[31:0] = length_c67_qs;
      end

      addr_hit[676]: begin
        reg_rdata_next[7:0] = message_header_c67_message_id_qs;
        reg_rdata_next[9:8] = message_header_c67_message_type_qs;
        reg_rdata_next[17:10] = message_header_c67_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c67_token_qs;
        reg_rdata_next[31:28] = message_header_c67_field1_qs;
      end

      addr_hit[677]: begin
        reg_rdata_next[31:0] = message_payload_1_c67_qs;
      end

      addr_hit[678]: begin
        reg_rdata_next[0] = doorbell_c67_intr_qs;
        reg_rdata_next[31:1] = doorbell_c67_preserve_mask_qs;
      end

      addr_hit[679]: begin
        reg_rdata_next[0] = completion_interrupt_c67_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c67_preserve_mask_qs;
      end

      addr_hit[680]: begin
        reg_rdata_next[31:0] = reserved_1_c68_qs;
      end

      addr_hit[681]: begin
        reg_rdata_next[0] = channel_status_c68_channel_free_qs;
        reg_rdata_next[1] = channel_status_c68_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c68_field1_qs;
      end

      addr_hit[682]: begin
        reg_rdata_next[31:0] = reserved_2_c68_qs;
      end

      addr_hit[683]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[684]: begin
        reg_rdata_next[0] = channel_flags_c68_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c68_field1_qs;
      end

      addr_hit[685]: begin
        reg_rdata_next[31:0] = length_c68_qs;
      end

      addr_hit[686]: begin
        reg_rdata_next[7:0] = message_header_c68_message_id_qs;
        reg_rdata_next[9:8] = message_header_c68_message_type_qs;
        reg_rdata_next[17:10] = message_header_c68_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c68_token_qs;
        reg_rdata_next[31:28] = message_header_c68_field1_qs;
      end

      addr_hit[687]: begin
        reg_rdata_next[31:0] = message_payload_1_c68_qs;
      end

      addr_hit[688]: begin
        reg_rdata_next[0] = doorbell_c68_intr_qs;
        reg_rdata_next[31:1] = doorbell_c68_preserve_mask_qs;
      end

      addr_hit[689]: begin
        reg_rdata_next[0] = completion_interrupt_c68_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c68_preserve_mask_qs;
      end

      addr_hit[690]: begin
        reg_rdata_next[31:0] = reserved_1_c69_qs;
      end

      addr_hit[691]: begin
        reg_rdata_next[0] = channel_status_c69_channel_free_qs;
        reg_rdata_next[1] = channel_status_c69_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c69_field1_qs;
      end

      addr_hit[692]: begin
        reg_rdata_next[31:0] = reserved_2_c69_qs;
      end

      addr_hit[693]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[694]: begin
        reg_rdata_next[0] = channel_flags_c69_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c69_field1_qs;
      end

      addr_hit[695]: begin
        reg_rdata_next[31:0] = length_c69_qs;
      end

      addr_hit[696]: begin
        reg_rdata_next[7:0] = message_header_c69_message_id_qs;
        reg_rdata_next[9:8] = message_header_c69_message_type_qs;
        reg_rdata_next[17:10] = message_header_c69_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c69_token_qs;
        reg_rdata_next[31:28] = message_header_c69_field1_qs;
      end

      addr_hit[697]: begin
        reg_rdata_next[31:0] = message_payload_1_c69_qs;
      end

      addr_hit[698]: begin
        reg_rdata_next[0] = doorbell_c69_intr_qs;
        reg_rdata_next[31:1] = doorbell_c69_preserve_mask_qs;
      end

      addr_hit[699]: begin
        reg_rdata_next[0] = completion_interrupt_c69_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c69_preserve_mask_qs;
      end

      addr_hit[700]: begin
        reg_rdata_next[31:0] = reserved_1_c70_qs;
      end

      addr_hit[701]: begin
        reg_rdata_next[0] = channel_status_c70_channel_free_qs;
        reg_rdata_next[1] = channel_status_c70_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c70_field1_qs;
      end

      addr_hit[702]: begin
        reg_rdata_next[31:0] = reserved_2_c70_qs;
      end

      addr_hit[703]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[704]: begin
        reg_rdata_next[0] = channel_flags_c70_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c70_field1_qs;
      end

      addr_hit[705]: begin
        reg_rdata_next[31:0] = length_c70_qs;
      end

      addr_hit[706]: begin
        reg_rdata_next[7:0] = message_header_c70_message_id_qs;
        reg_rdata_next[9:8] = message_header_c70_message_type_qs;
        reg_rdata_next[17:10] = message_header_c70_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c70_token_qs;
        reg_rdata_next[31:28] = message_header_c70_field1_qs;
      end

      addr_hit[707]: begin
        reg_rdata_next[31:0] = message_payload_1_c70_qs;
      end

      addr_hit[708]: begin
        reg_rdata_next[0] = doorbell_c70_intr_qs;
        reg_rdata_next[31:1] = doorbell_c70_preserve_mask_qs;
      end

      addr_hit[709]: begin
        reg_rdata_next[0] = completion_interrupt_c70_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c70_preserve_mask_qs;
      end

      addr_hit[710]: begin
        reg_rdata_next[31:0] = reserved_1_c71_qs;
      end

      addr_hit[711]: begin
        reg_rdata_next[0] = channel_status_c71_channel_free_qs;
        reg_rdata_next[1] = channel_status_c71_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c71_field1_qs;
      end

      addr_hit[712]: begin
        reg_rdata_next[31:0] = reserved_2_c71_qs;
      end

      addr_hit[713]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[714]: begin
        reg_rdata_next[0] = channel_flags_c71_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c71_field1_qs;
      end

      addr_hit[715]: begin
        reg_rdata_next[31:0] = length_c71_qs;
      end

      addr_hit[716]: begin
        reg_rdata_next[7:0] = message_header_c71_message_id_qs;
        reg_rdata_next[9:8] = message_header_c71_message_type_qs;
        reg_rdata_next[17:10] = message_header_c71_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c71_token_qs;
        reg_rdata_next[31:28] = message_header_c71_field1_qs;
      end

      addr_hit[717]: begin
        reg_rdata_next[31:0] = message_payload_1_c71_qs;
      end

      addr_hit[718]: begin
        reg_rdata_next[0] = doorbell_c71_intr_qs;
        reg_rdata_next[31:1] = doorbell_c71_preserve_mask_qs;
      end

      addr_hit[719]: begin
        reg_rdata_next[0] = completion_interrupt_c71_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c71_preserve_mask_qs;
      end

      addr_hit[720]: begin
        reg_rdata_next[31:0] = reserved_1_c72_qs;
      end

      addr_hit[721]: begin
        reg_rdata_next[0] = channel_status_c72_channel_free_qs;
        reg_rdata_next[1] = channel_status_c72_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c72_field1_qs;
      end

      addr_hit[722]: begin
        reg_rdata_next[31:0] = reserved_2_c72_qs;
      end

      addr_hit[723]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[724]: begin
        reg_rdata_next[0] = channel_flags_c72_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c72_field1_qs;
      end

      addr_hit[725]: begin
        reg_rdata_next[31:0] = length_c72_qs;
      end

      addr_hit[726]: begin
        reg_rdata_next[7:0] = message_header_c72_message_id_qs;
        reg_rdata_next[9:8] = message_header_c72_message_type_qs;
        reg_rdata_next[17:10] = message_header_c72_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c72_token_qs;
        reg_rdata_next[31:28] = message_header_c72_field1_qs;
      end

      addr_hit[727]: begin
        reg_rdata_next[31:0] = message_payload_1_c72_qs;
      end

      addr_hit[728]: begin
        reg_rdata_next[0] = doorbell_c72_intr_qs;
        reg_rdata_next[31:1] = doorbell_c72_preserve_mask_qs;
      end

      addr_hit[729]: begin
        reg_rdata_next[0] = completion_interrupt_c72_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c72_preserve_mask_qs;
      end

      addr_hit[730]: begin
        reg_rdata_next[31:0] = reserved_1_c73_qs;
      end

      addr_hit[731]: begin
        reg_rdata_next[0] = channel_status_c73_channel_free_qs;
        reg_rdata_next[1] = channel_status_c73_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c73_field1_qs;
      end

      addr_hit[732]: begin
        reg_rdata_next[31:0] = reserved_2_c73_qs;
      end

      addr_hit[733]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[734]: begin
        reg_rdata_next[0] = channel_flags_c73_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c73_field1_qs;
      end

      addr_hit[735]: begin
        reg_rdata_next[31:0] = length_c73_qs;
      end

      addr_hit[736]: begin
        reg_rdata_next[7:0] = message_header_c73_message_id_qs;
        reg_rdata_next[9:8] = message_header_c73_message_type_qs;
        reg_rdata_next[17:10] = message_header_c73_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c73_token_qs;
        reg_rdata_next[31:28] = message_header_c73_field1_qs;
      end

      addr_hit[737]: begin
        reg_rdata_next[31:0] = message_payload_1_c73_qs;
      end

      addr_hit[738]: begin
        reg_rdata_next[0] = doorbell_c73_intr_qs;
        reg_rdata_next[31:1] = doorbell_c73_preserve_mask_qs;
      end

      addr_hit[739]: begin
        reg_rdata_next[0] = completion_interrupt_c73_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c73_preserve_mask_qs;
      end

      addr_hit[740]: begin
        reg_rdata_next[31:0] = reserved_1_c74_qs;
      end

      addr_hit[741]: begin
        reg_rdata_next[0] = channel_status_c74_channel_free_qs;
        reg_rdata_next[1] = channel_status_c74_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c74_field1_qs;
      end

      addr_hit[742]: begin
        reg_rdata_next[31:0] = reserved_2_c74_qs;
      end

      addr_hit[743]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[744]: begin
        reg_rdata_next[0] = channel_flags_c74_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c74_field1_qs;
      end

      addr_hit[745]: begin
        reg_rdata_next[31:0] = length_c74_qs;
      end

      addr_hit[746]: begin
        reg_rdata_next[7:0] = message_header_c74_message_id_qs;
        reg_rdata_next[9:8] = message_header_c74_message_type_qs;
        reg_rdata_next[17:10] = message_header_c74_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c74_token_qs;
        reg_rdata_next[31:28] = message_header_c74_field1_qs;
      end

      addr_hit[747]: begin
        reg_rdata_next[31:0] = message_payload_1_c74_qs;
      end

      addr_hit[748]: begin
        reg_rdata_next[0] = doorbell_c74_intr_qs;
        reg_rdata_next[31:1] = doorbell_c74_preserve_mask_qs;
      end

      addr_hit[749]: begin
        reg_rdata_next[0] = completion_interrupt_c74_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c74_preserve_mask_qs;
      end

      addr_hit[750]: begin
        reg_rdata_next[31:0] = reserved_1_c75_qs;
      end

      addr_hit[751]: begin
        reg_rdata_next[0] = channel_status_c75_channel_free_qs;
        reg_rdata_next[1] = channel_status_c75_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c75_field1_qs;
      end

      addr_hit[752]: begin
        reg_rdata_next[31:0] = reserved_2_c75_qs;
      end

      addr_hit[753]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[754]: begin
        reg_rdata_next[0] = channel_flags_c75_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c75_field1_qs;
      end

      addr_hit[755]: begin
        reg_rdata_next[31:0] = length_c75_qs;
      end

      addr_hit[756]: begin
        reg_rdata_next[7:0] = message_header_c75_message_id_qs;
        reg_rdata_next[9:8] = message_header_c75_message_type_qs;
        reg_rdata_next[17:10] = message_header_c75_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c75_token_qs;
        reg_rdata_next[31:28] = message_header_c75_field1_qs;
      end

      addr_hit[757]: begin
        reg_rdata_next[31:0] = message_payload_1_c75_qs;
      end

      addr_hit[758]: begin
        reg_rdata_next[0] = doorbell_c75_intr_qs;
        reg_rdata_next[31:1] = doorbell_c75_preserve_mask_qs;
      end

      addr_hit[759]: begin
        reg_rdata_next[0] = completion_interrupt_c75_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c75_preserve_mask_qs;
      end

      addr_hit[760]: begin
        reg_rdata_next[31:0] = reserved_1_c76_qs;
      end

      addr_hit[761]: begin
        reg_rdata_next[0] = channel_status_c76_channel_free_qs;
        reg_rdata_next[1] = channel_status_c76_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c76_field1_qs;
      end

      addr_hit[762]: begin
        reg_rdata_next[31:0] = reserved_2_c76_qs;
      end

      addr_hit[763]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[764]: begin
        reg_rdata_next[0] = channel_flags_c76_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c76_field1_qs;
      end

      addr_hit[765]: begin
        reg_rdata_next[31:0] = length_c76_qs;
      end

      addr_hit[766]: begin
        reg_rdata_next[7:0] = message_header_c76_message_id_qs;
        reg_rdata_next[9:8] = message_header_c76_message_type_qs;
        reg_rdata_next[17:10] = message_header_c76_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c76_token_qs;
        reg_rdata_next[31:28] = message_header_c76_field1_qs;
      end

      addr_hit[767]: begin
        reg_rdata_next[31:0] = message_payload_1_c76_qs;
      end

      addr_hit[768]: begin
        reg_rdata_next[0] = doorbell_c76_intr_qs;
        reg_rdata_next[31:1] = doorbell_c76_preserve_mask_qs;
      end

      addr_hit[769]: begin
        reg_rdata_next[0] = completion_interrupt_c76_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c76_preserve_mask_qs;
      end

      addr_hit[770]: begin
        reg_rdata_next[31:0] = reserved_1_c77_qs;
      end

      addr_hit[771]: begin
        reg_rdata_next[0] = channel_status_c77_channel_free_qs;
        reg_rdata_next[1] = channel_status_c77_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c77_field1_qs;
      end

      addr_hit[772]: begin
        reg_rdata_next[31:0] = reserved_2_c77_qs;
      end

      addr_hit[773]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[774]: begin
        reg_rdata_next[0] = channel_flags_c77_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c77_field1_qs;
      end

      addr_hit[775]: begin
        reg_rdata_next[31:0] = length_c77_qs;
      end

      addr_hit[776]: begin
        reg_rdata_next[7:0] = message_header_c77_message_id_qs;
        reg_rdata_next[9:8] = message_header_c77_message_type_qs;
        reg_rdata_next[17:10] = message_header_c77_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c77_token_qs;
        reg_rdata_next[31:28] = message_header_c77_field1_qs;
      end

      addr_hit[777]: begin
        reg_rdata_next[31:0] = message_payload_1_c77_qs;
      end

      addr_hit[778]: begin
        reg_rdata_next[0] = doorbell_c77_intr_qs;
        reg_rdata_next[31:1] = doorbell_c77_preserve_mask_qs;
      end

      addr_hit[779]: begin
        reg_rdata_next[0] = completion_interrupt_c77_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c77_preserve_mask_qs;
      end

      addr_hit[780]: begin
        reg_rdata_next[31:0] = reserved_1_c78_qs;
      end

      addr_hit[781]: begin
        reg_rdata_next[0] = channel_status_c78_channel_free_qs;
        reg_rdata_next[1] = channel_status_c78_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c78_field1_qs;
      end

      addr_hit[782]: begin
        reg_rdata_next[31:0] = reserved_2_c78_qs;
      end

      addr_hit[783]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[784]: begin
        reg_rdata_next[0] = channel_flags_c78_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c78_field1_qs;
      end

      addr_hit[785]: begin
        reg_rdata_next[31:0] = length_c78_qs;
      end

      addr_hit[786]: begin
        reg_rdata_next[7:0] = message_header_c78_message_id_qs;
        reg_rdata_next[9:8] = message_header_c78_message_type_qs;
        reg_rdata_next[17:10] = message_header_c78_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c78_token_qs;
        reg_rdata_next[31:28] = message_header_c78_field1_qs;
      end

      addr_hit[787]: begin
        reg_rdata_next[31:0] = message_payload_1_c78_qs;
      end

      addr_hit[788]: begin
        reg_rdata_next[0] = doorbell_c78_intr_qs;
        reg_rdata_next[31:1] = doorbell_c78_preserve_mask_qs;
      end

      addr_hit[789]: begin
        reg_rdata_next[0] = completion_interrupt_c78_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c78_preserve_mask_qs;
      end

      addr_hit[790]: begin
        reg_rdata_next[31:0] = reserved_1_c79_qs;
      end

      addr_hit[791]: begin
        reg_rdata_next[0] = channel_status_c79_channel_free_qs;
        reg_rdata_next[1] = channel_status_c79_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c79_field1_qs;
      end

      addr_hit[792]: begin
        reg_rdata_next[31:0] = reserved_2_c79_qs;
      end

      addr_hit[793]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[794]: begin
        reg_rdata_next[0] = channel_flags_c79_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c79_field1_qs;
      end

      addr_hit[795]: begin
        reg_rdata_next[31:0] = length_c79_qs;
      end

      addr_hit[796]: begin
        reg_rdata_next[7:0] = message_header_c79_message_id_qs;
        reg_rdata_next[9:8] = message_header_c79_message_type_qs;
        reg_rdata_next[17:10] = message_header_c79_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c79_token_qs;
        reg_rdata_next[31:28] = message_header_c79_field1_qs;
      end

      addr_hit[797]: begin
        reg_rdata_next[31:0] = message_payload_1_c79_qs;
      end

      addr_hit[798]: begin
        reg_rdata_next[0] = doorbell_c79_intr_qs;
        reg_rdata_next[31:1] = doorbell_c79_preserve_mask_qs;
      end

      addr_hit[799]: begin
        reg_rdata_next[0] = completion_interrupt_c79_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c79_preserve_mask_qs;
      end

      addr_hit[800]: begin
        reg_rdata_next[31:0] = reserved_1_c80_qs;
      end

      addr_hit[801]: begin
        reg_rdata_next[0] = channel_status_c80_channel_free_qs;
        reg_rdata_next[1] = channel_status_c80_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c80_field1_qs;
      end

      addr_hit[802]: begin
        reg_rdata_next[31:0] = reserved_2_c80_qs;
      end

      addr_hit[803]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[804]: begin
        reg_rdata_next[0] = channel_flags_c80_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c80_field1_qs;
      end

      addr_hit[805]: begin
        reg_rdata_next[31:0] = length_c80_qs;
      end

      addr_hit[806]: begin
        reg_rdata_next[7:0] = message_header_c80_message_id_qs;
        reg_rdata_next[9:8] = message_header_c80_message_type_qs;
        reg_rdata_next[17:10] = message_header_c80_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c80_token_qs;
        reg_rdata_next[31:28] = message_header_c80_field1_qs;
      end

      addr_hit[807]: begin
        reg_rdata_next[31:0] = message_payload_1_c80_qs;
      end

      addr_hit[808]: begin
        reg_rdata_next[0] = doorbell_c80_intr_qs;
        reg_rdata_next[31:1] = doorbell_c80_preserve_mask_qs;
      end

      addr_hit[809]: begin
        reg_rdata_next[0] = completion_interrupt_c80_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c80_preserve_mask_qs;
      end

      addr_hit[810]: begin
        reg_rdata_next[31:0] = reserved_1_c81_qs;
      end

      addr_hit[811]: begin
        reg_rdata_next[0] = channel_status_c81_channel_free_qs;
        reg_rdata_next[1] = channel_status_c81_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c81_field1_qs;
      end

      addr_hit[812]: begin
        reg_rdata_next[31:0] = reserved_2_c81_qs;
      end

      addr_hit[813]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[814]: begin
        reg_rdata_next[0] = channel_flags_c81_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c81_field1_qs;
      end

      addr_hit[815]: begin
        reg_rdata_next[31:0] = length_c81_qs;
      end

      addr_hit[816]: begin
        reg_rdata_next[7:0] = message_header_c81_message_id_qs;
        reg_rdata_next[9:8] = message_header_c81_message_type_qs;
        reg_rdata_next[17:10] = message_header_c81_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c81_token_qs;
        reg_rdata_next[31:28] = message_header_c81_field1_qs;
      end

      addr_hit[817]: begin
        reg_rdata_next[31:0] = message_payload_1_c81_qs;
      end

      addr_hit[818]: begin
        reg_rdata_next[0] = doorbell_c81_intr_qs;
        reg_rdata_next[31:1] = doorbell_c81_preserve_mask_qs;
      end

      addr_hit[819]: begin
        reg_rdata_next[0] = completion_interrupt_c81_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c81_preserve_mask_qs;
      end

      addr_hit[820]: begin
        reg_rdata_next[31:0] = reserved_1_c82_qs;
      end

      addr_hit[821]: begin
        reg_rdata_next[0] = channel_status_c82_channel_free_qs;
        reg_rdata_next[1] = channel_status_c82_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c82_field1_qs;
      end

      addr_hit[822]: begin
        reg_rdata_next[31:0] = reserved_2_c82_qs;
      end

      addr_hit[823]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[824]: begin
        reg_rdata_next[0] = channel_flags_c82_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c82_field1_qs;
      end

      addr_hit[825]: begin
        reg_rdata_next[31:0] = length_c82_qs;
      end

      addr_hit[826]: begin
        reg_rdata_next[7:0] = message_header_c82_message_id_qs;
        reg_rdata_next[9:8] = message_header_c82_message_type_qs;
        reg_rdata_next[17:10] = message_header_c82_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c82_token_qs;
        reg_rdata_next[31:28] = message_header_c82_field1_qs;
      end

      addr_hit[827]: begin
        reg_rdata_next[31:0] = message_payload_1_c82_qs;
      end

      addr_hit[828]: begin
        reg_rdata_next[0] = doorbell_c82_intr_qs;
        reg_rdata_next[31:1] = doorbell_c82_preserve_mask_qs;
      end

      addr_hit[829]: begin
        reg_rdata_next[0] = completion_interrupt_c82_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c82_preserve_mask_qs;
      end

      addr_hit[830]: begin
        reg_rdata_next[31:0] = reserved_1_c83_qs;
      end

      addr_hit[831]: begin
        reg_rdata_next[0] = channel_status_c83_channel_free_qs;
        reg_rdata_next[1] = channel_status_c83_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c83_field1_qs;
      end

      addr_hit[832]: begin
        reg_rdata_next[31:0] = reserved_2_c83_qs;
      end

      addr_hit[833]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[834]: begin
        reg_rdata_next[0] = channel_flags_c83_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c83_field1_qs;
      end

      addr_hit[835]: begin
        reg_rdata_next[31:0] = length_c83_qs;
      end

      addr_hit[836]: begin
        reg_rdata_next[7:0] = message_header_c83_message_id_qs;
        reg_rdata_next[9:8] = message_header_c83_message_type_qs;
        reg_rdata_next[17:10] = message_header_c83_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c83_token_qs;
        reg_rdata_next[31:28] = message_header_c83_field1_qs;
      end

      addr_hit[837]: begin
        reg_rdata_next[31:0] = message_payload_1_c83_qs;
      end

      addr_hit[838]: begin
        reg_rdata_next[0] = doorbell_c83_intr_qs;
        reg_rdata_next[31:1] = doorbell_c83_preserve_mask_qs;
      end

      addr_hit[839]: begin
        reg_rdata_next[0] = completion_interrupt_c83_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c83_preserve_mask_qs;
      end

      addr_hit[840]: begin
        reg_rdata_next[31:0] = reserved_1_c84_qs;
      end

      addr_hit[841]: begin
        reg_rdata_next[0] = channel_status_c84_channel_free_qs;
        reg_rdata_next[1] = channel_status_c84_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c84_field1_qs;
      end

      addr_hit[842]: begin
        reg_rdata_next[31:0] = reserved_2_c84_qs;
      end

      addr_hit[843]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[844]: begin
        reg_rdata_next[0] = channel_flags_c84_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c84_field1_qs;
      end

      addr_hit[845]: begin
        reg_rdata_next[31:0] = length_c84_qs;
      end

      addr_hit[846]: begin
        reg_rdata_next[7:0] = message_header_c84_message_id_qs;
        reg_rdata_next[9:8] = message_header_c84_message_type_qs;
        reg_rdata_next[17:10] = message_header_c84_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c84_token_qs;
        reg_rdata_next[31:28] = message_header_c84_field1_qs;
      end

      addr_hit[847]: begin
        reg_rdata_next[31:0] = message_payload_1_c84_qs;
      end

      addr_hit[848]: begin
        reg_rdata_next[0] = doorbell_c84_intr_qs;
        reg_rdata_next[31:1] = doorbell_c84_preserve_mask_qs;
      end

      addr_hit[849]: begin
        reg_rdata_next[0] = completion_interrupt_c84_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c84_preserve_mask_qs;
      end

      addr_hit[850]: begin
        reg_rdata_next[31:0] = reserved_1_c85_qs;
      end

      addr_hit[851]: begin
        reg_rdata_next[0] = channel_status_c85_channel_free_qs;
        reg_rdata_next[1] = channel_status_c85_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c85_field1_qs;
      end

      addr_hit[852]: begin
        reg_rdata_next[31:0] = reserved_2_c85_qs;
      end

      addr_hit[853]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[854]: begin
        reg_rdata_next[0] = channel_flags_c85_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c85_field1_qs;
      end

      addr_hit[855]: begin
        reg_rdata_next[31:0] = length_c85_qs;
      end

      addr_hit[856]: begin
        reg_rdata_next[7:0] = message_header_c85_message_id_qs;
        reg_rdata_next[9:8] = message_header_c85_message_type_qs;
        reg_rdata_next[17:10] = message_header_c85_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c85_token_qs;
        reg_rdata_next[31:28] = message_header_c85_field1_qs;
      end

      addr_hit[857]: begin
        reg_rdata_next[31:0] = message_payload_1_c85_qs;
      end

      addr_hit[858]: begin
        reg_rdata_next[0] = doorbell_c85_intr_qs;
        reg_rdata_next[31:1] = doorbell_c85_preserve_mask_qs;
      end

      addr_hit[859]: begin
        reg_rdata_next[0] = completion_interrupt_c85_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c85_preserve_mask_qs;
      end

      addr_hit[860]: begin
        reg_rdata_next[31:0] = reserved_1_c86_qs;
      end

      addr_hit[861]: begin
        reg_rdata_next[0] = channel_status_c86_channel_free_qs;
        reg_rdata_next[1] = channel_status_c86_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c86_field1_qs;
      end

      addr_hit[862]: begin
        reg_rdata_next[31:0] = reserved_2_c86_qs;
      end

      addr_hit[863]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[864]: begin
        reg_rdata_next[0] = channel_flags_c86_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c86_field1_qs;
      end

      addr_hit[865]: begin
        reg_rdata_next[31:0] = length_c86_qs;
      end

      addr_hit[866]: begin
        reg_rdata_next[7:0] = message_header_c86_message_id_qs;
        reg_rdata_next[9:8] = message_header_c86_message_type_qs;
        reg_rdata_next[17:10] = message_header_c86_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c86_token_qs;
        reg_rdata_next[31:28] = message_header_c86_field1_qs;
      end

      addr_hit[867]: begin
        reg_rdata_next[31:0] = message_payload_1_c86_qs;
      end

      addr_hit[868]: begin
        reg_rdata_next[0] = doorbell_c86_intr_qs;
        reg_rdata_next[31:1] = doorbell_c86_preserve_mask_qs;
      end

      addr_hit[869]: begin
        reg_rdata_next[0] = completion_interrupt_c86_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c86_preserve_mask_qs;
      end

      addr_hit[870]: begin
        reg_rdata_next[31:0] = reserved_1_c87_qs;
      end

      addr_hit[871]: begin
        reg_rdata_next[0] = channel_status_c87_channel_free_qs;
        reg_rdata_next[1] = channel_status_c87_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c87_field1_qs;
      end

      addr_hit[872]: begin
        reg_rdata_next[31:0] = reserved_2_c87_qs;
      end

      addr_hit[873]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[874]: begin
        reg_rdata_next[0] = channel_flags_c87_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c87_field1_qs;
      end

      addr_hit[875]: begin
        reg_rdata_next[31:0] = length_c87_qs;
      end

      addr_hit[876]: begin
        reg_rdata_next[7:0] = message_header_c87_message_id_qs;
        reg_rdata_next[9:8] = message_header_c87_message_type_qs;
        reg_rdata_next[17:10] = message_header_c87_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c87_token_qs;
        reg_rdata_next[31:28] = message_header_c87_field1_qs;
      end

      addr_hit[877]: begin
        reg_rdata_next[31:0] = message_payload_1_c87_qs;
      end

      addr_hit[878]: begin
        reg_rdata_next[0] = doorbell_c87_intr_qs;
        reg_rdata_next[31:1] = doorbell_c87_preserve_mask_qs;
      end

      addr_hit[879]: begin
        reg_rdata_next[0] = completion_interrupt_c87_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c87_preserve_mask_qs;
      end

      addr_hit[880]: begin
        reg_rdata_next[31:0] = reserved_1_c88_qs;
      end

      addr_hit[881]: begin
        reg_rdata_next[0] = channel_status_c88_channel_free_qs;
        reg_rdata_next[1] = channel_status_c88_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c88_field1_qs;
      end

      addr_hit[882]: begin
        reg_rdata_next[31:0] = reserved_2_c88_qs;
      end

      addr_hit[883]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[884]: begin
        reg_rdata_next[0] = channel_flags_c88_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c88_field1_qs;
      end

      addr_hit[885]: begin
        reg_rdata_next[31:0] = length_c88_qs;
      end

      addr_hit[886]: begin
        reg_rdata_next[7:0] = message_header_c88_message_id_qs;
        reg_rdata_next[9:8] = message_header_c88_message_type_qs;
        reg_rdata_next[17:10] = message_header_c88_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c88_token_qs;
        reg_rdata_next[31:28] = message_header_c88_field1_qs;
      end

      addr_hit[887]: begin
        reg_rdata_next[31:0] = message_payload_1_c88_qs;
      end

      addr_hit[888]: begin
        reg_rdata_next[0] = doorbell_c88_intr_qs;
        reg_rdata_next[31:1] = doorbell_c88_preserve_mask_qs;
      end

      addr_hit[889]: begin
        reg_rdata_next[0] = completion_interrupt_c88_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c88_preserve_mask_qs;
      end

      addr_hit[890]: begin
        reg_rdata_next[31:0] = reserved_1_c89_qs;
      end

      addr_hit[891]: begin
        reg_rdata_next[0] = channel_status_c89_channel_free_qs;
        reg_rdata_next[1] = channel_status_c89_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c89_field1_qs;
      end

      addr_hit[892]: begin
        reg_rdata_next[31:0] = reserved_2_c89_qs;
      end

      addr_hit[893]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[894]: begin
        reg_rdata_next[0] = channel_flags_c89_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c89_field1_qs;
      end

      addr_hit[895]: begin
        reg_rdata_next[31:0] = length_c89_qs;
      end

      addr_hit[896]: begin
        reg_rdata_next[7:0] = message_header_c89_message_id_qs;
        reg_rdata_next[9:8] = message_header_c89_message_type_qs;
        reg_rdata_next[17:10] = message_header_c89_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c89_token_qs;
        reg_rdata_next[31:28] = message_header_c89_field1_qs;
      end

      addr_hit[897]: begin
        reg_rdata_next[31:0] = message_payload_1_c89_qs;
      end

      addr_hit[898]: begin
        reg_rdata_next[0] = doorbell_c89_intr_qs;
        reg_rdata_next[31:1] = doorbell_c89_preserve_mask_qs;
      end

      addr_hit[899]: begin
        reg_rdata_next[0] = completion_interrupt_c89_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c89_preserve_mask_qs;
      end

      addr_hit[900]: begin
        reg_rdata_next[31:0] = reserved_1_c90_qs;
      end

      addr_hit[901]: begin
        reg_rdata_next[0] = channel_status_c90_channel_free_qs;
        reg_rdata_next[1] = channel_status_c90_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c90_field1_qs;
      end

      addr_hit[902]: begin
        reg_rdata_next[31:0] = reserved_2_c90_qs;
      end

      addr_hit[903]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[904]: begin
        reg_rdata_next[0] = channel_flags_c90_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c90_field1_qs;
      end

      addr_hit[905]: begin
        reg_rdata_next[31:0] = length_c90_qs;
      end

      addr_hit[906]: begin
        reg_rdata_next[7:0] = message_header_c90_message_id_qs;
        reg_rdata_next[9:8] = message_header_c90_message_type_qs;
        reg_rdata_next[17:10] = message_header_c90_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c90_token_qs;
        reg_rdata_next[31:28] = message_header_c90_field1_qs;
      end

      addr_hit[907]: begin
        reg_rdata_next[31:0] = message_payload_1_c90_qs;
      end

      addr_hit[908]: begin
        reg_rdata_next[0] = doorbell_c90_intr_qs;
        reg_rdata_next[31:1] = doorbell_c90_preserve_mask_qs;
      end

      addr_hit[909]: begin
        reg_rdata_next[0] = completion_interrupt_c90_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c90_preserve_mask_qs;
      end

      addr_hit[910]: begin
        reg_rdata_next[31:0] = reserved_1_c91_qs;
      end

      addr_hit[911]: begin
        reg_rdata_next[0] = channel_status_c91_channel_free_qs;
        reg_rdata_next[1] = channel_status_c91_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c91_field1_qs;
      end

      addr_hit[912]: begin
        reg_rdata_next[31:0] = reserved_2_c91_qs;
      end

      addr_hit[913]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[914]: begin
        reg_rdata_next[0] = channel_flags_c91_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c91_field1_qs;
      end

      addr_hit[915]: begin
        reg_rdata_next[31:0] = length_c91_qs;
      end

      addr_hit[916]: begin
        reg_rdata_next[7:0] = message_header_c91_message_id_qs;
        reg_rdata_next[9:8] = message_header_c91_message_type_qs;
        reg_rdata_next[17:10] = message_header_c91_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c91_token_qs;
        reg_rdata_next[31:28] = message_header_c91_field1_qs;
      end

      addr_hit[917]: begin
        reg_rdata_next[31:0] = message_payload_1_c91_qs;
      end

      addr_hit[918]: begin
        reg_rdata_next[0] = doorbell_c91_intr_qs;
        reg_rdata_next[31:1] = doorbell_c91_preserve_mask_qs;
      end

      addr_hit[919]: begin
        reg_rdata_next[0] = completion_interrupt_c91_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c91_preserve_mask_qs;
      end

      addr_hit[920]: begin
        reg_rdata_next[31:0] = reserved_1_c92_qs;
      end

      addr_hit[921]: begin
        reg_rdata_next[0] = channel_status_c92_channel_free_qs;
        reg_rdata_next[1] = channel_status_c92_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c92_field1_qs;
      end

      addr_hit[922]: begin
        reg_rdata_next[31:0] = reserved_2_c92_qs;
      end

      addr_hit[923]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[924]: begin
        reg_rdata_next[0] = channel_flags_c92_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c92_field1_qs;
      end

      addr_hit[925]: begin
        reg_rdata_next[31:0] = length_c92_qs;
      end

      addr_hit[926]: begin
        reg_rdata_next[7:0] = message_header_c92_message_id_qs;
        reg_rdata_next[9:8] = message_header_c92_message_type_qs;
        reg_rdata_next[17:10] = message_header_c92_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c92_token_qs;
        reg_rdata_next[31:28] = message_header_c92_field1_qs;
      end

      addr_hit[927]: begin
        reg_rdata_next[31:0] = message_payload_1_c92_qs;
      end

      addr_hit[928]: begin
        reg_rdata_next[0] = doorbell_c92_intr_qs;
        reg_rdata_next[31:1] = doorbell_c92_preserve_mask_qs;
      end

      addr_hit[929]: begin
        reg_rdata_next[0] = completion_interrupt_c92_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c92_preserve_mask_qs;
      end

      addr_hit[930]: begin
        reg_rdata_next[31:0] = reserved_1_c93_qs;
      end

      addr_hit[931]: begin
        reg_rdata_next[0] = channel_status_c93_channel_free_qs;
        reg_rdata_next[1] = channel_status_c93_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c93_field1_qs;
      end

      addr_hit[932]: begin
        reg_rdata_next[31:0] = reserved_2_c93_qs;
      end

      addr_hit[933]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[934]: begin
        reg_rdata_next[0] = channel_flags_c93_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c93_field1_qs;
      end

      addr_hit[935]: begin
        reg_rdata_next[31:0] = length_c93_qs;
      end

      addr_hit[936]: begin
        reg_rdata_next[7:0] = message_header_c93_message_id_qs;
        reg_rdata_next[9:8] = message_header_c93_message_type_qs;
        reg_rdata_next[17:10] = message_header_c93_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c93_token_qs;
        reg_rdata_next[31:28] = message_header_c93_field1_qs;
      end

      addr_hit[937]: begin
        reg_rdata_next[31:0] = message_payload_1_c93_qs;
      end

      addr_hit[938]: begin
        reg_rdata_next[0] = doorbell_c93_intr_qs;
        reg_rdata_next[31:1] = doorbell_c93_preserve_mask_qs;
      end

      addr_hit[939]: begin
        reg_rdata_next[0] = completion_interrupt_c93_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c93_preserve_mask_qs;
      end

      addr_hit[940]: begin
        reg_rdata_next[31:0] = reserved_1_c94_qs;
      end

      addr_hit[941]: begin
        reg_rdata_next[0] = channel_status_c94_channel_free_qs;
        reg_rdata_next[1] = channel_status_c94_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c94_field1_qs;
      end

      addr_hit[942]: begin
        reg_rdata_next[31:0] = reserved_2_c94_qs;
      end

      addr_hit[943]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[944]: begin
        reg_rdata_next[0] = channel_flags_c94_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c94_field1_qs;
      end

      addr_hit[945]: begin
        reg_rdata_next[31:0] = length_c94_qs;
      end

      addr_hit[946]: begin
        reg_rdata_next[7:0] = message_header_c94_message_id_qs;
        reg_rdata_next[9:8] = message_header_c94_message_type_qs;
        reg_rdata_next[17:10] = message_header_c94_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c94_token_qs;
        reg_rdata_next[31:28] = message_header_c94_field1_qs;
      end

      addr_hit[947]: begin
        reg_rdata_next[31:0] = message_payload_1_c94_qs;
      end

      addr_hit[948]: begin
        reg_rdata_next[0] = doorbell_c94_intr_qs;
        reg_rdata_next[31:1] = doorbell_c94_preserve_mask_qs;
      end

      addr_hit[949]: begin
        reg_rdata_next[0] = completion_interrupt_c94_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c94_preserve_mask_qs;
      end

      addr_hit[950]: begin
        reg_rdata_next[31:0] = reserved_1_c95_qs;
      end

      addr_hit[951]: begin
        reg_rdata_next[0] = channel_status_c95_channel_free_qs;
        reg_rdata_next[1] = channel_status_c95_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c95_field1_qs;
      end

      addr_hit[952]: begin
        reg_rdata_next[31:0] = reserved_2_c95_qs;
      end

      addr_hit[953]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[954]: begin
        reg_rdata_next[0] = channel_flags_c95_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c95_field1_qs;
      end

      addr_hit[955]: begin
        reg_rdata_next[31:0] = length_c95_qs;
      end

      addr_hit[956]: begin
        reg_rdata_next[7:0] = message_header_c95_message_id_qs;
        reg_rdata_next[9:8] = message_header_c95_message_type_qs;
        reg_rdata_next[17:10] = message_header_c95_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c95_token_qs;
        reg_rdata_next[31:28] = message_header_c95_field1_qs;
      end

      addr_hit[957]: begin
        reg_rdata_next[31:0] = message_payload_1_c95_qs;
      end

      addr_hit[958]: begin
        reg_rdata_next[0] = doorbell_c95_intr_qs;
        reg_rdata_next[31:1] = doorbell_c95_preserve_mask_qs;
      end

      addr_hit[959]: begin
        reg_rdata_next[0] = completion_interrupt_c95_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c95_preserve_mask_qs;
      end

      addr_hit[960]: begin
        reg_rdata_next[31:0] = reserved_1_c96_qs;
      end

      addr_hit[961]: begin
        reg_rdata_next[0] = channel_status_c96_channel_free_qs;
        reg_rdata_next[1] = channel_status_c96_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c96_field1_qs;
      end

      addr_hit[962]: begin
        reg_rdata_next[31:0] = reserved_2_c96_qs;
      end

      addr_hit[963]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[964]: begin
        reg_rdata_next[0] = channel_flags_c96_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c96_field1_qs;
      end

      addr_hit[965]: begin
        reg_rdata_next[31:0] = length_c96_qs;
      end

      addr_hit[966]: begin
        reg_rdata_next[7:0] = message_header_c96_message_id_qs;
        reg_rdata_next[9:8] = message_header_c96_message_type_qs;
        reg_rdata_next[17:10] = message_header_c96_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c96_token_qs;
        reg_rdata_next[31:28] = message_header_c96_field1_qs;
      end

      addr_hit[967]: begin
        reg_rdata_next[31:0] = message_payload_1_c96_qs;
      end

      addr_hit[968]: begin
        reg_rdata_next[0] = doorbell_c96_intr_qs;
        reg_rdata_next[31:1] = doorbell_c96_preserve_mask_qs;
      end

      addr_hit[969]: begin
        reg_rdata_next[0] = completion_interrupt_c96_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c96_preserve_mask_qs;
      end

      addr_hit[970]: begin
        reg_rdata_next[31:0] = reserved_1_c97_qs;
      end

      addr_hit[971]: begin
        reg_rdata_next[0] = channel_status_c97_channel_free_qs;
        reg_rdata_next[1] = channel_status_c97_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c97_field1_qs;
      end

      addr_hit[972]: begin
        reg_rdata_next[31:0] = reserved_2_c97_qs;
      end

      addr_hit[973]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[974]: begin
        reg_rdata_next[0] = channel_flags_c97_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c97_field1_qs;
      end

      addr_hit[975]: begin
        reg_rdata_next[31:0] = length_c97_qs;
      end

      addr_hit[976]: begin
        reg_rdata_next[7:0] = message_header_c97_message_id_qs;
        reg_rdata_next[9:8] = message_header_c97_message_type_qs;
        reg_rdata_next[17:10] = message_header_c97_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c97_token_qs;
        reg_rdata_next[31:28] = message_header_c97_field1_qs;
      end

      addr_hit[977]: begin
        reg_rdata_next[31:0] = message_payload_1_c97_qs;
      end

      addr_hit[978]: begin
        reg_rdata_next[0] = doorbell_c97_intr_qs;
        reg_rdata_next[31:1] = doorbell_c97_preserve_mask_qs;
      end

      addr_hit[979]: begin
        reg_rdata_next[0] = completion_interrupt_c97_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c97_preserve_mask_qs;
      end

      addr_hit[980]: begin
        reg_rdata_next[31:0] = reserved_1_c98_qs;
      end

      addr_hit[981]: begin
        reg_rdata_next[0] = channel_status_c98_channel_free_qs;
        reg_rdata_next[1] = channel_status_c98_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c98_field1_qs;
      end

      addr_hit[982]: begin
        reg_rdata_next[31:0] = reserved_2_c98_qs;
      end

      addr_hit[983]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[984]: begin
        reg_rdata_next[0] = channel_flags_c98_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c98_field1_qs;
      end

      addr_hit[985]: begin
        reg_rdata_next[31:0] = length_c98_qs;
      end

      addr_hit[986]: begin
        reg_rdata_next[7:0] = message_header_c98_message_id_qs;
        reg_rdata_next[9:8] = message_header_c98_message_type_qs;
        reg_rdata_next[17:10] = message_header_c98_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c98_token_qs;
        reg_rdata_next[31:28] = message_header_c98_field1_qs;
      end

      addr_hit[987]: begin
        reg_rdata_next[31:0] = message_payload_1_c98_qs;
      end

      addr_hit[988]: begin
        reg_rdata_next[0] = doorbell_c98_intr_qs;
        reg_rdata_next[31:1] = doorbell_c98_preserve_mask_qs;
      end

      addr_hit[989]: begin
        reg_rdata_next[0] = completion_interrupt_c98_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c98_preserve_mask_qs;
      end

      addr_hit[990]: begin
        reg_rdata_next[31:0] = reserved_1_c99_qs;
      end

      addr_hit[991]: begin
        reg_rdata_next[0] = channel_status_c99_channel_free_qs;
        reg_rdata_next[1] = channel_status_c99_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c99_field1_qs;
      end

      addr_hit[992]: begin
        reg_rdata_next[31:0] = reserved_2_c99_qs;
      end

      addr_hit[993]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[994]: begin
        reg_rdata_next[0] = channel_flags_c99_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c99_field1_qs;
      end

      addr_hit[995]: begin
        reg_rdata_next[31:0] = length_c99_qs;
      end

      addr_hit[996]: begin
        reg_rdata_next[7:0] = message_header_c99_message_id_qs;
        reg_rdata_next[9:8] = message_header_c99_message_type_qs;
        reg_rdata_next[17:10] = message_header_c99_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c99_token_qs;
        reg_rdata_next[31:28] = message_header_c99_field1_qs;
      end

      addr_hit[997]: begin
        reg_rdata_next[31:0] = message_payload_1_c99_qs;
      end

      addr_hit[998]: begin
        reg_rdata_next[0] = doorbell_c99_intr_qs;
        reg_rdata_next[31:1] = doorbell_c99_preserve_mask_qs;
      end

      addr_hit[999]: begin
        reg_rdata_next[0] = completion_interrupt_c99_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c99_preserve_mask_qs;
      end

      addr_hit[1000]: begin
        reg_rdata_next[31:0] = reserved_1_c100_qs;
      end

      addr_hit[1001]: begin
        reg_rdata_next[0] = channel_status_c100_channel_free_qs;
        reg_rdata_next[1] = channel_status_c100_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c100_field1_qs;
      end

      addr_hit[1002]: begin
        reg_rdata_next[31:0] = reserved_2_c100_qs;
      end

      addr_hit[1003]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1004]: begin
        reg_rdata_next[0] = channel_flags_c100_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c100_field1_qs;
      end

      addr_hit[1005]: begin
        reg_rdata_next[31:0] = length_c100_qs;
      end

      addr_hit[1006]: begin
        reg_rdata_next[7:0] = message_header_c100_message_id_qs;
        reg_rdata_next[9:8] = message_header_c100_message_type_qs;
        reg_rdata_next[17:10] = message_header_c100_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c100_token_qs;
        reg_rdata_next[31:28] = message_header_c100_field1_qs;
      end

      addr_hit[1007]: begin
        reg_rdata_next[31:0] = message_payload_1_c100_qs;
      end

      addr_hit[1008]: begin
        reg_rdata_next[0] = doorbell_c100_intr_qs;
        reg_rdata_next[31:1] = doorbell_c100_preserve_mask_qs;
      end

      addr_hit[1009]: begin
        reg_rdata_next[0] = completion_interrupt_c100_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c100_preserve_mask_qs;
      end

      addr_hit[1010]: begin
        reg_rdata_next[31:0] = reserved_1_c101_qs;
      end

      addr_hit[1011]: begin
        reg_rdata_next[0] = channel_status_c101_channel_free_qs;
        reg_rdata_next[1] = channel_status_c101_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c101_field1_qs;
      end

      addr_hit[1012]: begin
        reg_rdata_next[31:0] = reserved_2_c101_qs;
      end

      addr_hit[1013]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1014]: begin
        reg_rdata_next[0] = channel_flags_c101_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c101_field1_qs;
      end

      addr_hit[1015]: begin
        reg_rdata_next[31:0] = length_c101_qs;
      end

      addr_hit[1016]: begin
        reg_rdata_next[7:0] = message_header_c101_message_id_qs;
        reg_rdata_next[9:8] = message_header_c101_message_type_qs;
        reg_rdata_next[17:10] = message_header_c101_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c101_token_qs;
        reg_rdata_next[31:28] = message_header_c101_field1_qs;
      end

      addr_hit[1017]: begin
        reg_rdata_next[31:0] = message_payload_1_c101_qs;
      end

      addr_hit[1018]: begin
        reg_rdata_next[0] = doorbell_c101_intr_qs;
        reg_rdata_next[31:1] = doorbell_c101_preserve_mask_qs;
      end

      addr_hit[1019]: begin
        reg_rdata_next[0] = completion_interrupt_c101_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c101_preserve_mask_qs;
      end

      addr_hit[1020]: begin
        reg_rdata_next[31:0] = reserved_1_c102_qs;
      end

      addr_hit[1021]: begin
        reg_rdata_next[0] = channel_status_c102_channel_free_qs;
        reg_rdata_next[1] = channel_status_c102_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c102_field1_qs;
      end

      addr_hit[1022]: begin
        reg_rdata_next[31:0] = reserved_2_c102_qs;
      end

      addr_hit[1023]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1024]: begin
        reg_rdata_next[0] = channel_flags_c102_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c102_field1_qs;
      end

      addr_hit[1025]: begin
        reg_rdata_next[31:0] = length_c102_qs;
      end

      addr_hit[1026]: begin
        reg_rdata_next[7:0] = message_header_c102_message_id_qs;
        reg_rdata_next[9:8] = message_header_c102_message_type_qs;
        reg_rdata_next[17:10] = message_header_c102_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c102_token_qs;
        reg_rdata_next[31:28] = message_header_c102_field1_qs;
      end

      addr_hit[1027]: begin
        reg_rdata_next[31:0] = message_payload_1_c102_qs;
      end

      addr_hit[1028]: begin
        reg_rdata_next[0] = doorbell_c102_intr_qs;
        reg_rdata_next[31:1] = doorbell_c102_preserve_mask_qs;
      end

      addr_hit[1029]: begin
        reg_rdata_next[0] = completion_interrupt_c102_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c102_preserve_mask_qs;
      end

      addr_hit[1030]: begin
        reg_rdata_next[31:0] = reserved_1_c103_qs;
      end

      addr_hit[1031]: begin
        reg_rdata_next[0] = channel_status_c103_channel_free_qs;
        reg_rdata_next[1] = channel_status_c103_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c103_field1_qs;
      end

      addr_hit[1032]: begin
        reg_rdata_next[31:0] = reserved_2_c103_qs;
      end

      addr_hit[1033]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1034]: begin
        reg_rdata_next[0] = channel_flags_c103_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c103_field1_qs;
      end

      addr_hit[1035]: begin
        reg_rdata_next[31:0] = length_c103_qs;
      end

      addr_hit[1036]: begin
        reg_rdata_next[7:0] = message_header_c103_message_id_qs;
        reg_rdata_next[9:8] = message_header_c103_message_type_qs;
        reg_rdata_next[17:10] = message_header_c103_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c103_token_qs;
        reg_rdata_next[31:28] = message_header_c103_field1_qs;
      end

      addr_hit[1037]: begin
        reg_rdata_next[31:0] = message_payload_1_c103_qs;
      end

      addr_hit[1038]: begin
        reg_rdata_next[0] = doorbell_c103_intr_qs;
        reg_rdata_next[31:1] = doorbell_c103_preserve_mask_qs;
      end

      addr_hit[1039]: begin
        reg_rdata_next[0] = completion_interrupt_c103_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c103_preserve_mask_qs;
      end

      addr_hit[1040]: begin
        reg_rdata_next[31:0] = reserved_1_c104_qs;
      end

      addr_hit[1041]: begin
        reg_rdata_next[0] = channel_status_c104_channel_free_qs;
        reg_rdata_next[1] = channel_status_c104_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c104_field1_qs;
      end

      addr_hit[1042]: begin
        reg_rdata_next[31:0] = reserved_2_c104_qs;
      end

      addr_hit[1043]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1044]: begin
        reg_rdata_next[0] = channel_flags_c104_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c104_field1_qs;
      end

      addr_hit[1045]: begin
        reg_rdata_next[31:0] = length_c104_qs;
      end

      addr_hit[1046]: begin
        reg_rdata_next[7:0] = message_header_c104_message_id_qs;
        reg_rdata_next[9:8] = message_header_c104_message_type_qs;
        reg_rdata_next[17:10] = message_header_c104_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c104_token_qs;
        reg_rdata_next[31:28] = message_header_c104_field1_qs;
      end

      addr_hit[1047]: begin
        reg_rdata_next[31:0] = message_payload_1_c104_qs;
      end

      addr_hit[1048]: begin
        reg_rdata_next[0] = doorbell_c104_intr_qs;
        reg_rdata_next[31:1] = doorbell_c104_preserve_mask_qs;
      end

      addr_hit[1049]: begin
        reg_rdata_next[0] = completion_interrupt_c104_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c104_preserve_mask_qs;
      end

      addr_hit[1050]: begin
        reg_rdata_next[31:0] = reserved_1_c105_qs;
      end

      addr_hit[1051]: begin
        reg_rdata_next[0] = channel_status_c105_channel_free_qs;
        reg_rdata_next[1] = channel_status_c105_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c105_field1_qs;
      end

      addr_hit[1052]: begin
        reg_rdata_next[31:0] = reserved_2_c105_qs;
      end

      addr_hit[1053]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1054]: begin
        reg_rdata_next[0] = channel_flags_c105_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c105_field1_qs;
      end

      addr_hit[1055]: begin
        reg_rdata_next[31:0] = length_c105_qs;
      end

      addr_hit[1056]: begin
        reg_rdata_next[7:0] = message_header_c105_message_id_qs;
        reg_rdata_next[9:8] = message_header_c105_message_type_qs;
        reg_rdata_next[17:10] = message_header_c105_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c105_token_qs;
        reg_rdata_next[31:28] = message_header_c105_field1_qs;
      end

      addr_hit[1057]: begin
        reg_rdata_next[31:0] = message_payload_1_c105_qs;
      end

      addr_hit[1058]: begin
        reg_rdata_next[0] = doorbell_c105_intr_qs;
        reg_rdata_next[31:1] = doorbell_c105_preserve_mask_qs;
      end

      addr_hit[1059]: begin
        reg_rdata_next[0] = completion_interrupt_c105_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c105_preserve_mask_qs;
      end

      addr_hit[1060]: begin
        reg_rdata_next[31:0] = reserved_1_c106_qs;
      end

      addr_hit[1061]: begin
        reg_rdata_next[0] = channel_status_c106_channel_free_qs;
        reg_rdata_next[1] = channel_status_c106_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c106_field1_qs;
      end

      addr_hit[1062]: begin
        reg_rdata_next[31:0] = reserved_2_c106_qs;
      end

      addr_hit[1063]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1064]: begin
        reg_rdata_next[0] = channel_flags_c106_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c106_field1_qs;
      end

      addr_hit[1065]: begin
        reg_rdata_next[31:0] = length_c106_qs;
      end

      addr_hit[1066]: begin
        reg_rdata_next[7:0] = message_header_c106_message_id_qs;
        reg_rdata_next[9:8] = message_header_c106_message_type_qs;
        reg_rdata_next[17:10] = message_header_c106_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c106_token_qs;
        reg_rdata_next[31:28] = message_header_c106_field1_qs;
      end

      addr_hit[1067]: begin
        reg_rdata_next[31:0] = message_payload_1_c106_qs;
      end

      addr_hit[1068]: begin
        reg_rdata_next[0] = doorbell_c106_intr_qs;
        reg_rdata_next[31:1] = doorbell_c106_preserve_mask_qs;
      end

      addr_hit[1069]: begin
        reg_rdata_next[0] = completion_interrupt_c106_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c106_preserve_mask_qs;
      end

      addr_hit[1070]: begin
        reg_rdata_next[31:0] = reserved_1_c107_qs;
      end

      addr_hit[1071]: begin
        reg_rdata_next[0] = channel_status_c107_channel_free_qs;
        reg_rdata_next[1] = channel_status_c107_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c107_field1_qs;
      end

      addr_hit[1072]: begin
        reg_rdata_next[31:0] = reserved_2_c107_qs;
      end

      addr_hit[1073]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1074]: begin
        reg_rdata_next[0] = channel_flags_c107_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c107_field1_qs;
      end

      addr_hit[1075]: begin
        reg_rdata_next[31:0] = length_c107_qs;
      end

      addr_hit[1076]: begin
        reg_rdata_next[7:0] = message_header_c107_message_id_qs;
        reg_rdata_next[9:8] = message_header_c107_message_type_qs;
        reg_rdata_next[17:10] = message_header_c107_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c107_token_qs;
        reg_rdata_next[31:28] = message_header_c107_field1_qs;
      end

      addr_hit[1077]: begin
        reg_rdata_next[31:0] = message_payload_1_c107_qs;
      end

      addr_hit[1078]: begin
        reg_rdata_next[0] = doorbell_c107_intr_qs;
        reg_rdata_next[31:1] = doorbell_c107_preserve_mask_qs;
      end

      addr_hit[1079]: begin
        reg_rdata_next[0] = completion_interrupt_c107_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c107_preserve_mask_qs;
      end

      addr_hit[1080]: begin
        reg_rdata_next[31:0] = reserved_1_c108_qs;
      end

      addr_hit[1081]: begin
        reg_rdata_next[0] = channel_status_c108_channel_free_qs;
        reg_rdata_next[1] = channel_status_c108_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c108_field1_qs;
      end

      addr_hit[1082]: begin
        reg_rdata_next[31:0] = reserved_2_c108_qs;
      end

      addr_hit[1083]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1084]: begin
        reg_rdata_next[0] = channel_flags_c108_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c108_field1_qs;
      end

      addr_hit[1085]: begin
        reg_rdata_next[31:0] = length_c108_qs;
      end

      addr_hit[1086]: begin
        reg_rdata_next[7:0] = message_header_c108_message_id_qs;
        reg_rdata_next[9:8] = message_header_c108_message_type_qs;
        reg_rdata_next[17:10] = message_header_c108_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c108_token_qs;
        reg_rdata_next[31:28] = message_header_c108_field1_qs;
      end

      addr_hit[1087]: begin
        reg_rdata_next[31:0] = message_payload_1_c108_qs;
      end

      addr_hit[1088]: begin
        reg_rdata_next[0] = doorbell_c108_intr_qs;
        reg_rdata_next[31:1] = doorbell_c108_preserve_mask_qs;
      end

      addr_hit[1089]: begin
        reg_rdata_next[0] = completion_interrupt_c108_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c108_preserve_mask_qs;
      end

      addr_hit[1090]: begin
        reg_rdata_next[31:0] = reserved_1_c109_qs;
      end

      addr_hit[1091]: begin
        reg_rdata_next[0] = channel_status_c109_channel_free_qs;
        reg_rdata_next[1] = channel_status_c109_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c109_field1_qs;
      end

      addr_hit[1092]: begin
        reg_rdata_next[31:0] = reserved_2_c109_qs;
      end

      addr_hit[1093]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1094]: begin
        reg_rdata_next[0] = channel_flags_c109_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c109_field1_qs;
      end

      addr_hit[1095]: begin
        reg_rdata_next[31:0] = length_c109_qs;
      end

      addr_hit[1096]: begin
        reg_rdata_next[7:0] = message_header_c109_message_id_qs;
        reg_rdata_next[9:8] = message_header_c109_message_type_qs;
        reg_rdata_next[17:10] = message_header_c109_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c109_token_qs;
        reg_rdata_next[31:28] = message_header_c109_field1_qs;
      end

      addr_hit[1097]: begin
        reg_rdata_next[31:0] = message_payload_1_c109_qs;
      end

      addr_hit[1098]: begin
        reg_rdata_next[0] = doorbell_c109_intr_qs;
        reg_rdata_next[31:1] = doorbell_c109_preserve_mask_qs;
      end

      addr_hit[1099]: begin
        reg_rdata_next[0] = completion_interrupt_c109_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c109_preserve_mask_qs;
      end

      addr_hit[1100]: begin
        reg_rdata_next[31:0] = reserved_1_c110_qs;
      end

      addr_hit[1101]: begin
        reg_rdata_next[0] = channel_status_c110_channel_free_qs;
        reg_rdata_next[1] = channel_status_c110_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c110_field1_qs;
      end

      addr_hit[1102]: begin
        reg_rdata_next[31:0] = reserved_2_c110_qs;
      end

      addr_hit[1103]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1104]: begin
        reg_rdata_next[0] = channel_flags_c110_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c110_field1_qs;
      end

      addr_hit[1105]: begin
        reg_rdata_next[31:0] = length_c110_qs;
      end

      addr_hit[1106]: begin
        reg_rdata_next[7:0] = message_header_c110_message_id_qs;
        reg_rdata_next[9:8] = message_header_c110_message_type_qs;
        reg_rdata_next[17:10] = message_header_c110_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c110_token_qs;
        reg_rdata_next[31:28] = message_header_c110_field1_qs;
      end

      addr_hit[1107]: begin
        reg_rdata_next[31:0] = message_payload_1_c110_qs;
      end

      addr_hit[1108]: begin
        reg_rdata_next[0] = doorbell_c110_intr_qs;
        reg_rdata_next[31:1] = doorbell_c110_preserve_mask_qs;
      end

      addr_hit[1109]: begin
        reg_rdata_next[0] = completion_interrupt_c110_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c110_preserve_mask_qs;
      end

      addr_hit[1110]: begin
        reg_rdata_next[31:0] = reserved_1_c111_qs;
      end

      addr_hit[1111]: begin
        reg_rdata_next[0] = channel_status_c111_channel_free_qs;
        reg_rdata_next[1] = channel_status_c111_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c111_field1_qs;
      end

      addr_hit[1112]: begin
        reg_rdata_next[31:0] = reserved_2_c111_qs;
      end

      addr_hit[1113]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1114]: begin
        reg_rdata_next[0] = channel_flags_c111_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c111_field1_qs;
      end

      addr_hit[1115]: begin
        reg_rdata_next[31:0] = length_c111_qs;
      end

      addr_hit[1116]: begin
        reg_rdata_next[7:0] = message_header_c111_message_id_qs;
        reg_rdata_next[9:8] = message_header_c111_message_type_qs;
        reg_rdata_next[17:10] = message_header_c111_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c111_token_qs;
        reg_rdata_next[31:28] = message_header_c111_field1_qs;
      end

      addr_hit[1117]: begin
        reg_rdata_next[31:0] = message_payload_1_c111_qs;
      end

      addr_hit[1118]: begin
        reg_rdata_next[0] = doorbell_c111_intr_qs;
        reg_rdata_next[31:1] = doorbell_c111_preserve_mask_qs;
      end

      addr_hit[1119]: begin
        reg_rdata_next[0] = completion_interrupt_c111_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c111_preserve_mask_qs;
      end

      addr_hit[1120]: begin
        reg_rdata_next[31:0] = reserved_1_c112_qs;
      end

      addr_hit[1121]: begin
        reg_rdata_next[0] = channel_status_c112_channel_free_qs;
        reg_rdata_next[1] = channel_status_c112_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c112_field1_qs;
      end

      addr_hit[1122]: begin
        reg_rdata_next[31:0] = reserved_2_c112_qs;
      end

      addr_hit[1123]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1124]: begin
        reg_rdata_next[0] = channel_flags_c112_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c112_field1_qs;
      end

      addr_hit[1125]: begin
        reg_rdata_next[31:0] = length_c112_qs;
      end

      addr_hit[1126]: begin
        reg_rdata_next[7:0] = message_header_c112_message_id_qs;
        reg_rdata_next[9:8] = message_header_c112_message_type_qs;
        reg_rdata_next[17:10] = message_header_c112_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c112_token_qs;
        reg_rdata_next[31:28] = message_header_c112_field1_qs;
      end

      addr_hit[1127]: begin
        reg_rdata_next[31:0] = message_payload_1_c112_qs;
      end

      addr_hit[1128]: begin
        reg_rdata_next[0] = doorbell_c112_intr_qs;
        reg_rdata_next[31:1] = doorbell_c112_preserve_mask_qs;
      end

      addr_hit[1129]: begin
        reg_rdata_next[0] = completion_interrupt_c112_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c112_preserve_mask_qs;
      end

      addr_hit[1130]: begin
        reg_rdata_next[31:0] = reserved_1_c113_qs;
      end

      addr_hit[1131]: begin
        reg_rdata_next[0] = channel_status_c113_channel_free_qs;
        reg_rdata_next[1] = channel_status_c113_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c113_field1_qs;
      end

      addr_hit[1132]: begin
        reg_rdata_next[31:0] = reserved_2_c113_qs;
      end

      addr_hit[1133]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1134]: begin
        reg_rdata_next[0] = channel_flags_c113_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c113_field1_qs;
      end

      addr_hit[1135]: begin
        reg_rdata_next[31:0] = length_c113_qs;
      end

      addr_hit[1136]: begin
        reg_rdata_next[7:0] = message_header_c113_message_id_qs;
        reg_rdata_next[9:8] = message_header_c113_message_type_qs;
        reg_rdata_next[17:10] = message_header_c113_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c113_token_qs;
        reg_rdata_next[31:28] = message_header_c113_field1_qs;
      end

      addr_hit[1137]: begin
        reg_rdata_next[31:0] = message_payload_1_c113_qs;
      end

      addr_hit[1138]: begin
        reg_rdata_next[0] = doorbell_c113_intr_qs;
        reg_rdata_next[31:1] = doorbell_c113_preserve_mask_qs;
      end

      addr_hit[1139]: begin
        reg_rdata_next[0] = completion_interrupt_c113_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c113_preserve_mask_qs;
      end

      addr_hit[1140]: begin
        reg_rdata_next[31:0] = reserved_1_c114_qs;
      end

      addr_hit[1141]: begin
        reg_rdata_next[0] = channel_status_c114_channel_free_qs;
        reg_rdata_next[1] = channel_status_c114_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c114_field1_qs;
      end

      addr_hit[1142]: begin
        reg_rdata_next[31:0] = reserved_2_c114_qs;
      end

      addr_hit[1143]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1144]: begin
        reg_rdata_next[0] = channel_flags_c114_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c114_field1_qs;
      end

      addr_hit[1145]: begin
        reg_rdata_next[31:0] = length_c114_qs;
      end

      addr_hit[1146]: begin
        reg_rdata_next[7:0] = message_header_c114_message_id_qs;
        reg_rdata_next[9:8] = message_header_c114_message_type_qs;
        reg_rdata_next[17:10] = message_header_c114_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c114_token_qs;
        reg_rdata_next[31:28] = message_header_c114_field1_qs;
      end

      addr_hit[1147]: begin
        reg_rdata_next[31:0] = message_payload_1_c114_qs;
      end

      addr_hit[1148]: begin
        reg_rdata_next[0] = doorbell_c114_intr_qs;
        reg_rdata_next[31:1] = doorbell_c114_preserve_mask_qs;
      end

      addr_hit[1149]: begin
        reg_rdata_next[0] = completion_interrupt_c114_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c114_preserve_mask_qs;
      end

      addr_hit[1150]: begin
        reg_rdata_next[31:0] = reserved_1_c115_qs;
      end

      addr_hit[1151]: begin
        reg_rdata_next[0] = channel_status_c115_channel_free_qs;
        reg_rdata_next[1] = channel_status_c115_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c115_field1_qs;
      end

      addr_hit[1152]: begin
        reg_rdata_next[31:0] = reserved_2_c115_qs;
      end

      addr_hit[1153]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1154]: begin
        reg_rdata_next[0] = channel_flags_c115_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c115_field1_qs;
      end

      addr_hit[1155]: begin
        reg_rdata_next[31:0] = length_c115_qs;
      end

      addr_hit[1156]: begin
        reg_rdata_next[7:0] = message_header_c115_message_id_qs;
        reg_rdata_next[9:8] = message_header_c115_message_type_qs;
        reg_rdata_next[17:10] = message_header_c115_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c115_token_qs;
        reg_rdata_next[31:28] = message_header_c115_field1_qs;
      end

      addr_hit[1157]: begin
        reg_rdata_next[31:0] = message_payload_1_c115_qs;
      end

      addr_hit[1158]: begin
        reg_rdata_next[0] = doorbell_c115_intr_qs;
        reg_rdata_next[31:1] = doorbell_c115_preserve_mask_qs;
      end

      addr_hit[1159]: begin
        reg_rdata_next[0] = completion_interrupt_c115_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c115_preserve_mask_qs;
      end

      addr_hit[1160]: begin
        reg_rdata_next[31:0] = reserved_1_c116_qs;
      end

      addr_hit[1161]: begin
        reg_rdata_next[0] = channel_status_c116_channel_free_qs;
        reg_rdata_next[1] = channel_status_c116_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c116_field1_qs;
      end

      addr_hit[1162]: begin
        reg_rdata_next[31:0] = reserved_2_c116_qs;
      end

      addr_hit[1163]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1164]: begin
        reg_rdata_next[0] = channel_flags_c116_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c116_field1_qs;
      end

      addr_hit[1165]: begin
        reg_rdata_next[31:0] = length_c116_qs;
      end

      addr_hit[1166]: begin
        reg_rdata_next[7:0] = message_header_c116_message_id_qs;
        reg_rdata_next[9:8] = message_header_c116_message_type_qs;
        reg_rdata_next[17:10] = message_header_c116_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c116_token_qs;
        reg_rdata_next[31:28] = message_header_c116_field1_qs;
      end

      addr_hit[1167]: begin
        reg_rdata_next[31:0] = message_payload_1_c116_qs;
      end

      addr_hit[1168]: begin
        reg_rdata_next[0] = doorbell_c116_intr_qs;
        reg_rdata_next[31:1] = doorbell_c116_preserve_mask_qs;
      end

      addr_hit[1169]: begin
        reg_rdata_next[0] = completion_interrupt_c116_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c116_preserve_mask_qs;
      end

      addr_hit[1170]: begin
        reg_rdata_next[31:0] = reserved_1_c117_qs;
      end

      addr_hit[1171]: begin
        reg_rdata_next[0] = channel_status_c117_channel_free_qs;
        reg_rdata_next[1] = channel_status_c117_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c117_field1_qs;
      end

      addr_hit[1172]: begin
        reg_rdata_next[31:0] = reserved_2_c117_qs;
      end

      addr_hit[1173]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1174]: begin
        reg_rdata_next[0] = channel_flags_c117_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c117_field1_qs;
      end

      addr_hit[1175]: begin
        reg_rdata_next[31:0] = length_c117_qs;
      end

      addr_hit[1176]: begin
        reg_rdata_next[7:0] = message_header_c117_message_id_qs;
        reg_rdata_next[9:8] = message_header_c117_message_type_qs;
        reg_rdata_next[17:10] = message_header_c117_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c117_token_qs;
        reg_rdata_next[31:28] = message_header_c117_field1_qs;
      end

      addr_hit[1177]: begin
        reg_rdata_next[31:0] = message_payload_1_c117_qs;
      end

      addr_hit[1178]: begin
        reg_rdata_next[0] = doorbell_c117_intr_qs;
        reg_rdata_next[31:1] = doorbell_c117_preserve_mask_qs;
      end

      addr_hit[1179]: begin
        reg_rdata_next[0] = completion_interrupt_c117_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c117_preserve_mask_qs;
      end

      addr_hit[1180]: begin
        reg_rdata_next[31:0] = reserved_1_c118_qs;
      end

      addr_hit[1181]: begin
        reg_rdata_next[0] = channel_status_c118_channel_free_qs;
        reg_rdata_next[1] = channel_status_c118_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c118_field1_qs;
      end

      addr_hit[1182]: begin
        reg_rdata_next[31:0] = reserved_2_c118_qs;
      end

      addr_hit[1183]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1184]: begin
        reg_rdata_next[0] = channel_flags_c118_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c118_field1_qs;
      end

      addr_hit[1185]: begin
        reg_rdata_next[31:0] = length_c118_qs;
      end

      addr_hit[1186]: begin
        reg_rdata_next[7:0] = message_header_c118_message_id_qs;
        reg_rdata_next[9:8] = message_header_c118_message_type_qs;
        reg_rdata_next[17:10] = message_header_c118_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c118_token_qs;
        reg_rdata_next[31:28] = message_header_c118_field1_qs;
      end

      addr_hit[1187]: begin
        reg_rdata_next[31:0] = message_payload_1_c118_qs;
      end

      addr_hit[1188]: begin
        reg_rdata_next[0] = doorbell_c118_intr_qs;
        reg_rdata_next[31:1] = doorbell_c118_preserve_mask_qs;
      end

      addr_hit[1189]: begin
        reg_rdata_next[0] = completion_interrupt_c118_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c118_preserve_mask_qs;
      end

      addr_hit[1190]: begin
        reg_rdata_next[31:0] = reserved_1_c119_qs;
      end

      addr_hit[1191]: begin
        reg_rdata_next[0] = channel_status_c119_channel_free_qs;
        reg_rdata_next[1] = channel_status_c119_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c119_field1_qs;
      end

      addr_hit[1192]: begin
        reg_rdata_next[31:0] = reserved_2_c119_qs;
      end

      addr_hit[1193]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1194]: begin
        reg_rdata_next[0] = channel_flags_c119_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c119_field1_qs;
      end

      addr_hit[1195]: begin
        reg_rdata_next[31:0] = length_c119_qs;
      end

      addr_hit[1196]: begin
        reg_rdata_next[7:0] = message_header_c119_message_id_qs;
        reg_rdata_next[9:8] = message_header_c119_message_type_qs;
        reg_rdata_next[17:10] = message_header_c119_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c119_token_qs;
        reg_rdata_next[31:28] = message_header_c119_field1_qs;
      end

      addr_hit[1197]: begin
        reg_rdata_next[31:0] = message_payload_1_c119_qs;
      end

      addr_hit[1198]: begin
        reg_rdata_next[0] = doorbell_c119_intr_qs;
        reg_rdata_next[31:1] = doorbell_c119_preserve_mask_qs;
      end

      addr_hit[1199]: begin
        reg_rdata_next[0] = completion_interrupt_c119_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c119_preserve_mask_qs;
      end

      addr_hit[1200]: begin
        reg_rdata_next[31:0] = reserved_1_c120_qs;
      end

      addr_hit[1201]: begin
        reg_rdata_next[0] = channel_status_c120_channel_free_qs;
        reg_rdata_next[1] = channel_status_c120_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c120_field1_qs;
      end

      addr_hit[1202]: begin
        reg_rdata_next[31:0] = reserved_2_c120_qs;
      end

      addr_hit[1203]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1204]: begin
        reg_rdata_next[0] = channel_flags_c120_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c120_field1_qs;
      end

      addr_hit[1205]: begin
        reg_rdata_next[31:0] = length_c120_qs;
      end

      addr_hit[1206]: begin
        reg_rdata_next[7:0] = message_header_c120_message_id_qs;
        reg_rdata_next[9:8] = message_header_c120_message_type_qs;
        reg_rdata_next[17:10] = message_header_c120_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c120_token_qs;
        reg_rdata_next[31:28] = message_header_c120_field1_qs;
      end

      addr_hit[1207]: begin
        reg_rdata_next[31:0] = message_payload_1_c120_qs;
      end

      addr_hit[1208]: begin
        reg_rdata_next[0] = doorbell_c120_intr_qs;
        reg_rdata_next[31:1] = doorbell_c120_preserve_mask_qs;
      end

      addr_hit[1209]: begin
        reg_rdata_next[0] = completion_interrupt_c120_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c120_preserve_mask_qs;
      end

      addr_hit[1210]: begin
        reg_rdata_next[31:0] = reserved_1_c121_qs;
      end

      addr_hit[1211]: begin
        reg_rdata_next[0] = channel_status_c121_channel_free_qs;
        reg_rdata_next[1] = channel_status_c121_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c121_field1_qs;
      end

      addr_hit[1212]: begin
        reg_rdata_next[31:0] = reserved_2_c121_qs;
      end

      addr_hit[1213]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1214]: begin
        reg_rdata_next[0] = channel_flags_c121_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c121_field1_qs;
      end

      addr_hit[1215]: begin
        reg_rdata_next[31:0] = length_c121_qs;
      end

      addr_hit[1216]: begin
        reg_rdata_next[7:0] = message_header_c121_message_id_qs;
        reg_rdata_next[9:8] = message_header_c121_message_type_qs;
        reg_rdata_next[17:10] = message_header_c121_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c121_token_qs;
        reg_rdata_next[31:28] = message_header_c121_field1_qs;
      end

      addr_hit[1217]: begin
        reg_rdata_next[31:0] = message_payload_1_c121_qs;
      end

      addr_hit[1218]: begin
        reg_rdata_next[0] = doorbell_c121_intr_qs;
        reg_rdata_next[31:1] = doorbell_c121_preserve_mask_qs;
      end

      addr_hit[1219]: begin
        reg_rdata_next[0] = completion_interrupt_c121_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c121_preserve_mask_qs;
      end

      addr_hit[1220]: begin
        reg_rdata_next[31:0] = reserved_1_c122_qs;
      end

      addr_hit[1221]: begin
        reg_rdata_next[0] = channel_status_c122_channel_free_qs;
        reg_rdata_next[1] = channel_status_c122_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c122_field1_qs;
      end

      addr_hit[1222]: begin
        reg_rdata_next[31:0] = reserved_2_c122_qs;
      end

      addr_hit[1223]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1224]: begin
        reg_rdata_next[0] = channel_flags_c122_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c122_field1_qs;
      end

      addr_hit[1225]: begin
        reg_rdata_next[31:0] = length_c122_qs;
      end

      addr_hit[1226]: begin
        reg_rdata_next[7:0] = message_header_c122_message_id_qs;
        reg_rdata_next[9:8] = message_header_c122_message_type_qs;
        reg_rdata_next[17:10] = message_header_c122_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c122_token_qs;
        reg_rdata_next[31:28] = message_header_c122_field1_qs;
      end

      addr_hit[1227]: begin
        reg_rdata_next[31:0] = message_payload_1_c122_qs;
      end

      addr_hit[1228]: begin
        reg_rdata_next[0] = doorbell_c122_intr_qs;
        reg_rdata_next[31:1] = doorbell_c122_preserve_mask_qs;
      end

      addr_hit[1229]: begin
        reg_rdata_next[0] = completion_interrupt_c122_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c122_preserve_mask_qs;
      end

      addr_hit[1230]: begin
        reg_rdata_next[31:0] = reserved_1_c123_qs;
      end

      addr_hit[1231]: begin
        reg_rdata_next[0] = channel_status_c123_channel_free_qs;
        reg_rdata_next[1] = channel_status_c123_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c123_field1_qs;
      end

      addr_hit[1232]: begin
        reg_rdata_next[31:0] = reserved_2_c123_qs;
      end

      addr_hit[1233]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1234]: begin
        reg_rdata_next[0] = channel_flags_c123_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c123_field1_qs;
      end

      addr_hit[1235]: begin
        reg_rdata_next[31:0] = length_c123_qs;
      end

      addr_hit[1236]: begin
        reg_rdata_next[7:0] = message_header_c123_message_id_qs;
        reg_rdata_next[9:8] = message_header_c123_message_type_qs;
        reg_rdata_next[17:10] = message_header_c123_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c123_token_qs;
        reg_rdata_next[31:28] = message_header_c123_field1_qs;
      end

      addr_hit[1237]: begin
        reg_rdata_next[31:0] = message_payload_1_c123_qs;
      end

      addr_hit[1238]: begin
        reg_rdata_next[0] = doorbell_c123_intr_qs;
        reg_rdata_next[31:1] = doorbell_c123_preserve_mask_qs;
      end

      addr_hit[1239]: begin
        reg_rdata_next[0] = completion_interrupt_c123_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c123_preserve_mask_qs;
      end

      addr_hit[1240]: begin
        reg_rdata_next[31:0] = reserved_1_c124_qs;
      end

      addr_hit[1241]: begin
        reg_rdata_next[0] = channel_status_c124_channel_free_qs;
        reg_rdata_next[1] = channel_status_c124_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c124_field1_qs;
      end

      addr_hit[1242]: begin
        reg_rdata_next[31:0] = reserved_2_c124_qs;
      end

      addr_hit[1243]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1244]: begin
        reg_rdata_next[0] = channel_flags_c124_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c124_field1_qs;
      end

      addr_hit[1245]: begin
        reg_rdata_next[31:0] = length_c124_qs;
      end

      addr_hit[1246]: begin
        reg_rdata_next[7:0] = message_header_c124_message_id_qs;
        reg_rdata_next[9:8] = message_header_c124_message_type_qs;
        reg_rdata_next[17:10] = message_header_c124_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c124_token_qs;
        reg_rdata_next[31:28] = message_header_c124_field1_qs;
      end

      addr_hit[1247]: begin
        reg_rdata_next[31:0] = message_payload_1_c124_qs;
      end

      addr_hit[1248]: begin
        reg_rdata_next[0] = doorbell_c124_intr_qs;
        reg_rdata_next[31:1] = doorbell_c124_preserve_mask_qs;
      end

      addr_hit[1249]: begin
        reg_rdata_next[0] = completion_interrupt_c124_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c124_preserve_mask_qs;
      end

      addr_hit[1250]: begin
        reg_rdata_next[31:0] = reserved_1_c125_qs;
      end

      addr_hit[1251]: begin
        reg_rdata_next[0] = channel_status_c125_channel_free_qs;
        reg_rdata_next[1] = channel_status_c125_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c125_field1_qs;
      end

      addr_hit[1252]: begin
        reg_rdata_next[31:0] = reserved_2_c125_qs;
      end

      addr_hit[1253]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1254]: begin
        reg_rdata_next[0] = channel_flags_c125_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c125_field1_qs;
      end

      addr_hit[1255]: begin
        reg_rdata_next[31:0] = length_c125_qs;
      end

      addr_hit[1256]: begin
        reg_rdata_next[7:0] = message_header_c125_message_id_qs;
        reg_rdata_next[9:8] = message_header_c125_message_type_qs;
        reg_rdata_next[17:10] = message_header_c125_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c125_token_qs;
        reg_rdata_next[31:28] = message_header_c125_field1_qs;
      end

      addr_hit[1257]: begin
        reg_rdata_next[31:0] = message_payload_1_c125_qs;
      end

      addr_hit[1258]: begin
        reg_rdata_next[0] = doorbell_c125_intr_qs;
        reg_rdata_next[31:1] = doorbell_c125_preserve_mask_qs;
      end

      addr_hit[1259]: begin
        reg_rdata_next[0] = completion_interrupt_c125_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c125_preserve_mask_qs;
      end

      addr_hit[1260]: begin
        reg_rdata_next[31:0] = reserved_1_c126_qs;
      end

      addr_hit[1261]: begin
        reg_rdata_next[0] = channel_status_c126_channel_free_qs;
        reg_rdata_next[1] = channel_status_c126_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c126_field1_qs;
      end

      addr_hit[1262]: begin
        reg_rdata_next[31:0] = reserved_2_c126_qs;
      end

      addr_hit[1263]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1264]: begin
        reg_rdata_next[0] = channel_flags_c126_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c126_field1_qs;
      end

      addr_hit[1265]: begin
        reg_rdata_next[31:0] = length_c126_qs;
      end

      addr_hit[1266]: begin
        reg_rdata_next[7:0] = message_header_c126_message_id_qs;
        reg_rdata_next[9:8] = message_header_c126_message_type_qs;
        reg_rdata_next[17:10] = message_header_c126_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c126_token_qs;
        reg_rdata_next[31:28] = message_header_c126_field1_qs;
      end

      addr_hit[1267]: begin
        reg_rdata_next[31:0] = message_payload_1_c126_qs;
      end

      addr_hit[1268]: begin
        reg_rdata_next[0] = doorbell_c126_intr_qs;
        reg_rdata_next[31:1] = doorbell_c126_preserve_mask_qs;
      end

      addr_hit[1269]: begin
        reg_rdata_next[0] = completion_interrupt_c126_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c126_preserve_mask_qs;
      end

      addr_hit[1270]: begin
        reg_rdata_next[31:0] = reserved_1_c127_qs;
      end

      addr_hit[1271]: begin
        reg_rdata_next[0] = channel_status_c127_channel_free_qs;
        reg_rdata_next[1] = channel_status_c127_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c127_field1_qs;
      end

      addr_hit[1272]: begin
        reg_rdata_next[31:0] = reserved_2_c127_qs;
      end

      addr_hit[1273]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1274]: begin
        reg_rdata_next[0] = channel_flags_c127_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c127_field1_qs;
      end

      addr_hit[1275]: begin
        reg_rdata_next[31:0] = length_c127_qs;
      end

      addr_hit[1276]: begin
        reg_rdata_next[7:0] = message_header_c127_message_id_qs;
        reg_rdata_next[9:8] = message_header_c127_message_type_qs;
        reg_rdata_next[17:10] = message_header_c127_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c127_token_qs;
        reg_rdata_next[31:28] = message_header_c127_field1_qs;
      end

      addr_hit[1277]: begin
        reg_rdata_next[31:0] = message_payload_1_c127_qs;
      end

      addr_hit[1278]: begin
        reg_rdata_next[0] = doorbell_c127_intr_qs;
        reg_rdata_next[31:1] = doorbell_c127_preserve_mask_qs;
      end

      addr_hit[1279]: begin
        reg_rdata_next[0] = completion_interrupt_c127_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c127_preserve_mask_qs;
      end

      addr_hit[1280]: begin
        reg_rdata_next[31:0] = reserved_1_c128_qs;
      end

      addr_hit[1281]: begin
        reg_rdata_next[0] = channel_status_c128_channel_free_qs;
        reg_rdata_next[1] = channel_status_c128_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c128_field1_qs;
      end

      addr_hit[1282]: begin
        reg_rdata_next[31:0] = reserved_2_c128_qs;
      end

      addr_hit[1283]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1284]: begin
        reg_rdata_next[0] = channel_flags_c128_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c128_field1_qs;
      end

      addr_hit[1285]: begin
        reg_rdata_next[31:0] = length_c128_qs;
      end

      addr_hit[1286]: begin
        reg_rdata_next[7:0] = message_header_c128_message_id_qs;
        reg_rdata_next[9:8] = message_header_c128_message_type_qs;
        reg_rdata_next[17:10] = message_header_c128_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c128_token_qs;
        reg_rdata_next[31:28] = message_header_c128_field1_qs;
      end

      addr_hit[1287]: begin
        reg_rdata_next[31:0] = message_payload_1_c128_qs;
      end

      addr_hit[1288]: begin
        reg_rdata_next[0] = doorbell_c128_intr_qs;
        reg_rdata_next[31:1] = doorbell_c128_preserve_mask_qs;
      end

      addr_hit[1289]: begin
        reg_rdata_next[0] = completion_interrupt_c128_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c128_preserve_mask_qs;
      end

      addr_hit[1290]: begin
        reg_rdata_next[31:0] = reserved_1_c129_qs;
      end

      addr_hit[1291]: begin
        reg_rdata_next[0] = channel_status_c129_channel_free_qs;
        reg_rdata_next[1] = channel_status_c129_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c129_field1_qs;
      end

      addr_hit[1292]: begin
        reg_rdata_next[31:0] = reserved_2_c129_qs;
      end

      addr_hit[1293]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1294]: begin
        reg_rdata_next[0] = channel_flags_c129_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c129_field1_qs;
      end

      addr_hit[1295]: begin
        reg_rdata_next[31:0] = length_c129_qs;
      end

      addr_hit[1296]: begin
        reg_rdata_next[7:0] = message_header_c129_message_id_qs;
        reg_rdata_next[9:8] = message_header_c129_message_type_qs;
        reg_rdata_next[17:10] = message_header_c129_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c129_token_qs;
        reg_rdata_next[31:28] = message_header_c129_field1_qs;
      end

      addr_hit[1297]: begin
        reg_rdata_next[31:0] = message_payload_1_c129_qs;
      end

      addr_hit[1298]: begin
        reg_rdata_next[0] = doorbell_c129_intr_qs;
        reg_rdata_next[31:1] = doorbell_c129_preserve_mask_qs;
      end

      addr_hit[1299]: begin
        reg_rdata_next[0] = completion_interrupt_c129_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c129_preserve_mask_qs;
      end

      addr_hit[1300]: begin
        reg_rdata_next[31:0] = reserved_1_c130_qs;
      end

      addr_hit[1301]: begin
        reg_rdata_next[0] = channel_status_c130_channel_free_qs;
        reg_rdata_next[1] = channel_status_c130_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c130_field1_qs;
      end

      addr_hit[1302]: begin
        reg_rdata_next[31:0] = reserved_2_c130_qs;
      end

      addr_hit[1303]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1304]: begin
        reg_rdata_next[0] = channel_flags_c130_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c130_field1_qs;
      end

      addr_hit[1305]: begin
        reg_rdata_next[31:0] = length_c130_qs;
      end

      addr_hit[1306]: begin
        reg_rdata_next[7:0] = message_header_c130_message_id_qs;
        reg_rdata_next[9:8] = message_header_c130_message_type_qs;
        reg_rdata_next[17:10] = message_header_c130_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c130_token_qs;
        reg_rdata_next[31:28] = message_header_c130_field1_qs;
      end

      addr_hit[1307]: begin
        reg_rdata_next[31:0] = message_payload_1_c130_qs;
      end

      addr_hit[1308]: begin
        reg_rdata_next[0] = doorbell_c130_intr_qs;
        reg_rdata_next[31:1] = doorbell_c130_preserve_mask_qs;
      end

      addr_hit[1309]: begin
        reg_rdata_next[0] = completion_interrupt_c130_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c130_preserve_mask_qs;
      end

      addr_hit[1310]: begin
        reg_rdata_next[31:0] = reserved_1_c131_qs;
      end

      addr_hit[1311]: begin
        reg_rdata_next[0] = channel_status_c131_channel_free_qs;
        reg_rdata_next[1] = channel_status_c131_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c131_field1_qs;
      end

      addr_hit[1312]: begin
        reg_rdata_next[31:0] = reserved_2_c131_qs;
      end

      addr_hit[1313]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1314]: begin
        reg_rdata_next[0] = channel_flags_c131_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c131_field1_qs;
      end

      addr_hit[1315]: begin
        reg_rdata_next[31:0] = length_c131_qs;
      end

      addr_hit[1316]: begin
        reg_rdata_next[7:0] = message_header_c131_message_id_qs;
        reg_rdata_next[9:8] = message_header_c131_message_type_qs;
        reg_rdata_next[17:10] = message_header_c131_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c131_token_qs;
        reg_rdata_next[31:28] = message_header_c131_field1_qs;
      end

      addr_hit[1317]: begin
        reg_rdata_next[31:0] = message_payload_1_c131_qs;
      end

      addr_hit[1318]: begin
        reg_rdata_next[0] = doorbell_c131_intr_qs;
        reg_rdata_next[31:1] = doorbell_c131_preserve_mask_qs;
      end

      addr_hit[1319]: begin
        reg_rdata_next[0] = completion_interrupt_c131_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c131_preserve_mask_qs;
      end

      addr_hit[1320]: begin
        reg_rdata_next[31:0] = reserved_1_c132_qs;
      end

      addr_hit[1321]: begin
        reg_rdata_next[0] = channel_status_c132_channel_free_qs;
        reg_rdata_next[1] = channel_status_c132_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c132_field1_qs;
      end

      addr_hit[1322]: begin
        reg_rdata_next[31:0] = reserved_2_c132_qs;
      end

      addr_hit[1323]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1324]: begin
        reg_rdata_next[0] = channel_flags_c132_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c132_field1_qs;
      end

      addr_hit[1325]: begin
        reg_rdata_next[31:0] = length_c132_qs;
      end

      addr_hit[1326]: begin
        reg_rdata_next[7:0] = message_header_c132_message_id_qs;
        reg_rdata_next[9:8] = message_header_c132_message_type_qs;
        reg_rdata_next[17:10] = message_header_c132_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c132_token_qs;
        reg_rdata_next[31:28] = message_header_c132_field1_qs;
      end

      addr_hit[1327]: begin
        reg_rdata_next[31:0] = message_payload_1_c132_qs;
      end

      addr_hit[1328]: begin
        reg_rdata_next[0] = doorbell_c132_intr_qs;
        reg_rdata_next[31:1] = doorbell_c132_preserve_mask_qs;
      end

      addr_hit[1329]: begin
        reg_rdata_next[0] = completion_interrupt_c132_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c132_preserve_mask_qs;
      end

      addr_hit[1330]: begin
        reg_rdata_next[31:0] = reserved_1_c133_qs;
      end

      addr_hit[1331]: begin
        reg_rdata_next[0] = channel_status_c133_channel_free_qs;
        reg_rdata_next[1] = channel_status_c133_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c133_field1_qs;
      end

      addr_hit[1332]: begin
        reg_rdata_next[31:0] = reserved_2_c133_qs;
      end

      addr_hit[1333]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1334]: begin
        reg_rdata_next[0] = channel_flags_c133_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c133_field1_qs;
      end

      addr_hit[1335]: begin
        reg_rdata_next[31:0] = length_c133_qs;
      end

      addr_hit[1336]: begin
        reg_rdata_next[7:0] = message_header_c133_message_id_qs;
        reg_rdata_next[9:8] = message_header_c133_message_type_qs;
        reg_rdata_next[17:10] = message_header_c133_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c133_token_qs;
        reg_rdata_next[31:28] = message_header_c133_field1_qs;
      end

      addr_hit[1337]: begin
        reg_rdata_next[31:0] = message_payload_1_c133_qs;
      end

      addr_hit[1338]: begin
        reg_rdata_next[0] = doorbell_c133_intr_qs;
        reg_rdata_next[31:1] = doorbell_c133_preserve_mask_qs;
      end

      addr_hit[1339]: begin
        reg_rdata_next[0] = completion_interrupt_c133_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c133_preserve_mask_qs;
      end

      addr_hit[1340]: begin
        reg_rdata_next[31:0] = reserved_1_c134_qs;
      end

      addr_hit[1341]: begin
        reg_rdata_next[0] = channel_status_c134_channel_free_qs;
        reg_rdata_next[1] = channel_status_c134_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c134_field1_qs;
      end

      addr_hit[1342]: begin
        reg_rdata_next[31:0] = reserved_2_c134_qs;
      end

      addr_hit[1343]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1344]: begin
        reg_rdata_next[0] = channel_flags_c134_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c134_field1_qs;
      end

      addr_hit[1345]: begin
        reg_rdata_next[31:0] = length_c134_qs;
      end

      addr_hit[1346]: begin
        reg_rdata_next[7:0] = message_header_c134_message_id_qs;
        reg_rdata_next[9:8] = message_header_c134_message_type_qs;
        reg_rdata_next[17:10] = message_header_c134_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c134_token_qs;
        reg_rdata_next[31:28] = message_header_c134_field1_qs;
      end

      addr_hit[1347]: begin
        reg_rdata_next[31:0] = message_payload_1_c134_qs;
      end

      addr_hit[1348]: begin
        reg_rdata_next[0] = doorbell_c134_intr_qs;
        reg_rdata_next[31:1] = doorbell_c134_preserve_mask_qs;
      end

      addr_hit[1349]: begin
        reg_rdata_next[0] = completion_interrupt_c134_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c134_preserve_mask_qs;
      end

      addr_hit[1350]: begin
        reg_rdata_next[31:0] = reserved_1_c135_qs;
      end

      addr_hit[1351]: begin
        reg_rdata_next[0] = channel_status_c135_channel_free_qs;
        reg_rdata_next[1] = channel_status_c135_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c135_field1_qs;
      end

      addr_hit[1352]: begin
        reg_rdata_next[31:0] = reserved_2_c135_qs;
      end

      addr_hit[1353]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1354]: begin
        reg_rdata_next[0] = channel_flags_c135_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c135_field1_qs;
      end

      addr_hit[1355]: begin
        reg_rdata_next[31:0] = length_c135_qs;
      end

      addr_hit[1356]: begin
        reg_rdata_next[7:0] = message_header_c135_message_id_qs;
        reg_rdata_next[9:8] = message_header_c135_message_type_qs;
        reg_rdata_next[17:10] = message_header_c135_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c135_token_qs;
        reg_rdata_next[31:28] = message_header_c135_field1_qs;
      end

      addr_hit[1357]: begin
        reg_rdata_next[31:0] = message_payload_1_c135_qs;
      end

      addr_hit[1358]: begin
        reg_rdata_next[0] = doorbell_c135_intr_qs;
        reg_rdata_next[31:1] = doorbell_c135_preserve_mask_qs;
      end

      addr_hit[1359]: begin
        reg_rdata_next[0] = completion_interrupt_c135_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c135_preserve_mask_qs;
      end

      addr_hit[1360]: begin
        reg_rdata_next[31:0] = reserved_1_c136_qs;
      end

      addr_hit[1361]: begin
        reg_rdata_next[0] = channel_status_c136_channel_free_qs;
        reg_rdata_next[1] = channel_status_c136_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c136_field1_qs;
      end

      addr_hit[1362]: begin
        reg_rdata_next[31:0] = reserved_2_c136_qs;
      end

      addr_hit[1363]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1364]: begin
        reg_rdata_next[0] = channel_flags_c136_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c136_field1_qs;
      end

      addr_hit[1365]: begin
        reg_rdata_next[31:0] = length_c136_qs;
      end

      addr_hit[1366]: begin
        reg_rdata_next[7:0] = message_header_c136_message_id_qs;
        reg_rdata_next[9:8] = message_header_c136_message_type_qs;
        reg_rdata_next[17:10] = message_header_c136_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c136_token_qs;
        reg_rdata_next[31:28] = message_header_c136_field1_qs;
      end

      addr_hit[1367]: begin
        reg_rdata_next[31:0] = message_payload_1_c136_qs;
      end

      addr_hit[1368]: begin
        reg_rdata_next[0] = doorbell_c136_intr_qs;
        reg_rdata_next[31:1] = doorbell_c136_preserve_mask_qs;
      end

      addr_hit[1369]: begin
        reg_rdata_next[0] = completion_interrupt_c136_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c136_preserve_mask_qs;
      end

      addr_hit[1370]: begin
        reg_rdata_next[31:0] = reserved_1_c137_qs;
      end

      addr_hit[1371]: begin
        reg_rdata_next[0] = channel_status_c137_channel_free_qs;
        reg_rdata_next[1] = channel_status_c137_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c137_field1_qs;
      end

      addr_hit[1372]: begin
        reg_rdata_next[31:0] = reserved_2_c137_qs;
      end

      addr_hit[1373]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1374]: begin
        reg_rdata_next[0] = channel_flags_c137_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c137_field1_qs;
      end

      addr_hit[1375]: begin
        reg_rdata_next[31:0] = length_c137_qs;
      end

      addr_hit[1376]: begin
        reg_rdata_next[7:0] = message_header_c137_message_id_qs;
        reg_rdata_next[9:8] = message_header_c137_message_type_qs;
        reg_rdata_next[17:10] = message_header_c137_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c137_token_qs;
        reg_rdata_next[31:28] = message_header_c137_field1_qs;
      end

      addr_hit[1377]: begin
        reg_rdata_next[31:0] = message_payload_1_c137_qs;
      end

      addr_hit[1378]: begin
        reg_rdata_next[0] = doorbell_c137_intr_qs;
        reg_rdata_next[31:1] = doorbell_c137_preserve_mask_qs;
      end

      addr_hit[1379]: begin
        reg_rdata_next[0] = completion_interrupt_c137_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c137_preserve_mask_qs;
      end

      addr_hit[1380]: begin
        reg_rdata_next[31:0] = reserved_1_c138_qs;
      end

      addr_hit[1381]: begin
        reg_rdata_next[0] = channel_status_c138_channel_free_qs;
        reg_rdata_next[1] = channel_status_c138_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c138_field1_qs;
      end

      addr_hit[1382]: begin
        reg_rdata_next[31:0] = reserved_2_c138_qs;
      end

      addr_hit[1383]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1384]: begin
        reg_rdata_next[0] = channel_flags_c138_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c138_field1_qs;
      end

      addr_hit[1385]: begin
        reg_rdata_next[31:0] = length_c138_qs;
      end

      addr_hit[1386]: begin
        reg_rdata_next[7:0] = message_header_c138_message_id_qs;
        reg_rdata_next[9:8] = message_header_c138_message_type_qs;
        reg_rdata_next[17:10] = message_header_c138_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c138_token_qs;
        reg_rdata_next[31:28] = message_header_c138_field1_qs;
      end

      addr_hit[1387]: begin
        reg_rdata_next[31:0] = message_payload_1_c138_qs;
      end

      addr_hit[1388]: begin
        reg_rdata_next[0] = doorbell_c138_intr_qs;
        reg_rdata_next[31:1] = doorbell_c138_preserve_mask_qs;
      end

      addr_hit[1389]: begin
        reg_rdata_next[0] = completion_interrupt_c138_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c138_preserve_mask_qs;
      end

      addr_hit[1390]: begin
        reg_rdata_next[31:0] = reserved_1_c139_qs;
      end

      addr_hit[1391]: begin
        reg_rdata_next[0] = channel_status_c139_channel_free_qs;
        reg_rdata_next[1] = channel_status_c139_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c139_field1_qs;
      end

      addr_hit[1392]: begin
        reg_rdata_next[31:0] = reserved_2_c139_qs;
      end

      addr_hit[1393]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1394]: begin
        reg_rdata_next[0] = channel_flags_c139_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c139_field1_qs;
      end

      addr_hit[1395]: begin
        reg_rdata_next[31:0] = length_c139_qs;
      end

      addr_hit[1396]: begin
        reg_rdata_next[7:0] = message_header_c139_message_id_qs;
        reg_rdata_next[9:8] = message_header_c139_message_type_qs;
        reg_rdata_next[17:10] = message_header_c139_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c139_token_qs;
        reg_rdata_next[31:28] = message_header_c139_field1_qs;
      end

      addr_hit[1397]: begin
        reg_rdata_next[31:0] = message_payload_1_c139_qs;
      end

      addr_hit[1398]: begin
        reg_rdata_next[0] = doorbell_c139_intr_qs;
        reg_rdata_next[31:1] = doorbell_c139_preserve_mask_qs;
      end

      addr_hit[1399]: begin
        reg_rdata_next[0] = completion_interrupt_c139_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c139_preserve_mask_qs;
      end

      addr_hit[1400]: begin
        reg_rdata_next[31:0] = reserved_1_c140_qs;
      end

      addr_hit[1401]: begin
        reg_rdata_next[0] = channel_status_c140_channel_free_qs;
        reg_rdata_next[1] = channel_status_c140_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c140_field1_qs;
      end

      addr_hit[1402]: begin
        reg_rdata_next[31:0] = reserved_2_c140_qs;
      end

      addr_hit[1403]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1404]: begin
        reg_rdata_next[0] = channel_flags_c140_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c140_field1_qs;
      end

      addr_hit[1405]: begin
        reg_rdata_next[31:0] = length_c140_qs;
      end

      addr_hit[1406]: begin
        reg_rdata_next[7:0] = message_header_c140_message_id_qs;
        reg_rdata_next[9:8] = message_header_c140_message_type_qs;
        reg_rdata_next[17:10] = message_header_c140_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c140_token_qs;
        reg_rdata_next[31:28] = message_header_c140_field1_qs;
      end

      addr_hit[1407]: begin
        reg_rdata_next[31:0] = message_payload_1_c140_qs;
      end

      addr_hit[1408]: begin
        reg_rdata_next[0] = doorbell_c140_intr_qs;
        reg_rdata_next[31:1] = doorbell_c140_preserve_mask_qs;
      end

      addr_hit[1409]: begin
        reg_rdata_next[0] = completion_interrupt_c140_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c140_preserve_mask_qs;
      end

      addr_hit[1410]: begin
        reg_rdata_next[31:0] = reserved_1_c141_qs;
      end

      addr_hit[1411]: begin
        reg_rdata_next[0] = channel_status_c141_channel_free_qs;
        reg_rdata_next[1] = channel_status_c141_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c141_field1_qs;
      end

      addr_hit[1412]: begin
        reg_rdata_next[31:0] = reserved_2_c141_qs;
      end

      addr_hit[1413]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1414]: begin
        reg_rdata_next[0] = channel_flags_c141_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c141_field1_qs;
      end

      addr_hit[1415]: begin
        reg_rdata_next[31:0] = length_c141_qs;
      end

      addr_hit[1416]: begin
        reg_rdata_next[7:0] = message_header_c141_message_id_qs;
        reg_rdata_next[9:8] = message_header_c141_message_type_qs;
        reg_rdata_next[17:10] = message_header_c141_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c141_token_qs;
        reg_rdata_next[31:28] = message_header_c141_field1_qs;
      end

      addr_hit[1417]: begin
        reg_rdata_next[31:0] = message_payload_1_c141_qs;
      end

      addr_hit[1418]: begin
        reg_rdata_next[0] = doorbell_c141_intr_qs;
        reg_rdata_next[31:1] = doorbell_c141_preserve_mask_qs;
      end

      addr_hit[1419]: begin
        reg_rdata_next[0] = completion_interrupt_c141_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c141_preserve_mask_qs;
      end

      addr_hit[1420]: begin
        reg_rdata_next[31:0] = reserved_1_c142_qs;
      end

      addr_hit[1421]: begin
        reg_rdata_next[0] = channel_status_c142_channel_free_qs;
        reg_rdata_next[1] = channel_status_c142_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c142_field1_qs;
      end

      addr_hit[1422]: begin
        reg_rdata_next[31:0] = reserved_2_c142_qs;
      end

      addr_hit[1423]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1424]: begin
        reg_rdata_next[0] = channel_flags_c142_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c142_field1_qs;
      end

      addr_hit[1425]: begin
        reg_rdata_next[31:0] = length_c142_qs;
      end

      addr_hit[1426]: begin
        reg_rdata_next[7:0] = message_header_c142_message_id_qs;
        reg_rdata_next[9:8] = message_header_c142_message_type_qs;
        reg_rdata_next[17:10] = message_header_c142_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c142_token_qs;
        reg_rdata_next[31:28] = message_header_c142_field1_qs;
      end

      addr_hit[1427]: begin
        reg_rdata_next[31:0] = message_payload_1_c142_qs;
      end

      addr_hit[1428]: begin
        reg_rdata_next[0] = doorbell_c142_intr_qs;
        reg_rdata_next[31:1] = doorbell_c142_preserve_mask_qs;
      end

      addr_hit[1429]: begin
        reg_rdata_next[0] = completion_interrupt_c142_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c142_preserve_mask_qs;
      end

      addr_hit[1430]: begin
        reg_rdata_next[31:0] = reserved_1_c143_qs;
      end

      addr_hit[1431]: begin
        reg_rdata_next[0] = channel_status_c143_channel_free_qs;
        reg_rdata_next[1] = channel_status_c143_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c143_field1_qs;
      end

      addr_hit[1432]: begin
        reg_rdata_next[31:0] = reserved_2_c143_qs;
      end

      addr_hit[1433]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1434]: begin
        reg_rdata_next[0] = channel_flags_c143_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c143_field1_qs;
      end

      addr_hit[1435]: begin
        reg_rdata_next[31:0] = length_c143_qs;
      end

      addr_hit[1436]: begin
        reg_rdata_next[7:0] = message_header_c143_message_id_qs;
        reg_rdata_next[9:8] = message_header_c143_message_type_qs;
        reg_rdata_next[17:10] = message_header_c143_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c143_token_qs;
        reg_rdata_next[31:28] = message_header_c143_field1_qs;
      end

      addr_hit[1437]: begin
        reg_rdata_next[31:0] = message_payload_1_c143_qs;
      end

      addr_hit[1438]: begin
        reg_rdata_next[0] = doorbell_c143_intr_qs;
        reg_rdata_next[31:1] = doorbell_c143_preserve_mask_qs;
      end

      addr_hit[1439]: begin
        reg_rdata_next[0] = completion_interrupt_c143_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c143_preserve_mask_qs;
      end

      addr_hit[1440]: begin
        reg_rdata_next[31:0] = reserved_1_c144_qs;
      end

      addr_hit[1441]: begin
        reg_rdata_next[0] = channel_status_c144_channel_free_qs;
        reg_rdata_next[1] = channel_status_c144_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c144_field1_qs;
      end

      addr_hit[1442]: begin
        reg_rdata_next[31:0] = reserved_2_c144_qs;
      end

      addr_hit[1443]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1444]: begin
        reg_rdata_next[0] = channel_flags_c144_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c144_field1_qs;
      end

      addr_hit[1445]: begin
        reg_rdata_next[31:0] = length_c144_qs;
      end

      addr_hit[1446]: begin
        reg_rdata_next[7:0] = message_header_c144_message_id_qs;
        reg_rdata_next[9:8] = message_header_c144_message_type_qs;
        reg_rdata_next[17:10] = message_header_c144_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c144_token_qs;
        reg_rdata_next[31:28] = message_header_c144_field1_qs;
      end

      addr_hit[1447]: begin
        reg_rdata_next[31:0] = message_payload_1_c144_qs;
      end

      addr_hit[1448]: begin
        reg_rdata_next[0] = doorbell_c144_intr_qs;
        reg_rdata_next[31:1] = doorbell_c144_preserve_mask_qs;
      end

      addr_hit[1449]: begin
        reg_rdata_next[0] = completion_interrupt_c144_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c144_preserve_mask_qs;
      end

      addr_hit[1450]: begin
        reg_rdata_next[31:0] = reserved_1_c145_qs;
      end

      addr_hit[1451]: begin
        reg_rdata_next[0] = channel_status_c145_channel_free_qs;
        reg_rdata_next[1] = channel_status_c145_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c145_field1_qs;
      end

      addr_hit[1452]: begin
        reg_rdata_next[31:0] = reserved_2_c145_qs;
      end

      addr_hit[1453]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1454]: begin
        reg_rdata_next[0] = channel_flags_c145_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c145_field1_qs;
      end

      addr_hit[1455]: begin
        reg_rdata_next[31:0] = length_c145_qs;
      end

      addr_hit[1456]: begin
        reg_rdata_next[7:0] = message_header_c145_message_id_qs;
        reg_rdata_next[9:8] = message_header_c145_message_type_qs;
        reg_rdata_next[17:10] = message_header_c145_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c145_token_qs;
        reg_rdata_next[31:28] = message_header_c145_field1_qs;
      end

      addr_hit[1457]: begin
        reg_rdata_next[31:0] = message_payload_1_c145_qs;
      end

      addr_hit[1458]: begin
        reg_rdata_next[0] = doorbell_c145_intr_qs;
        reg_rdata_next[31:1] = doorbell_c145_preserve_mask_qs;
      end

      addr_hit[1459]: begin
        reg_rdata_next[0] = completion_interrupt_c145_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c145_preserve_mask_qs;
      end

      addr_hit[1460]: begin
        reg_rdata_next[31:0] = reserved_1_c146_qs;
      end

      addr_hit[1461]: begin
        reg_rdata_next[0] = channel_status_c146_channel_free_qs;
        reg_rdata_next[1] = channel_status_c146_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c146_field1_qs;
      end

      addr_hit[1462]: begin
        reg_rdata_next[31:0] = reserved_2_c146_qs;
      end

      addr_hit[1463]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1464]: begin
        reg_rdata_next[0] = channel_flags_c146_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c146_field1_qs;
      end

      addr_hit[1465]: begin
        reg_rdata_next[31:0] = length_c146_qs;
      end

      addr_hit[1466]: begin
        reg_rdata_next[7:0] = message_header_c146_message_id_qs;
        reg_rdata_next[9:8] = message_header_c146_message_type_qs;
        reg_rdata_next[17:10] = message_header_c146_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c146_token_qs;
        reg_rdata_next[31:28] = message_header_c146_field1_qs;
      end

      addr_hit[1467]: begin
        reg_rdata_next[31:0] = message_payload_1_c146_qs;
      end

      addr_hit[1468]: begin
        reg_rdata_next[0] = doorbell_c146_intr_qs;
        reg_rdata_next[31:1] = doorbell_c146_preserve_mask_qs;
      end

      addr_hit[1469]: begin
        reg_rdata_next[0] = completion_interrupt_c146_intr_qs;
        reg_rdata_next[31:1] = completion_interrupt_c146_preserve_mask_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
