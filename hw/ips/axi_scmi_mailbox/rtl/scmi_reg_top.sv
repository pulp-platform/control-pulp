// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module scmi_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 8
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output scmi_reg_pkg::scmi_reg2hw_t reg2hw, // Write


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import scmi_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] reserved_1_c0_qs;
  logic [31:0] reserved_1_c0_wd;
  logic reserved_1_c0_we;
  logic channel_status_c0_channel_free_qs;
  logic channel_status_c0_channel_free_wd;
  logic channel_status_c0_channel_free_we;
  logic channel_status_c0_channel_error_qs;
  logic channel_status_c0_channel_error_wd;
  logic channel_status_c0_channel_error_we;
  logic [29:0] channel_status_c0_field1_qs;
  logic [29:0] channel_status_c0_field1_wd;
  logic channel_status_c0_field1_we;
  logic [31:0] reserved_2_c0_qs;
  logic [31:0] reserved_2_c0_wd;
  logic reserved_2_c0_we;
  logic [31:0] reserved_3_c0_qs;
  logic [31:0] reserved_3_c0_wd;
  logic reserved_3_c0_we;
  logic channel_flags_c0_intr_enable_qs;
  logic channel_flags_c0_intr_enable_wd;
  logic channel_flags_c0_intr_enable_we;
  logic [30:0] channel_flags_c0_field1_qs;
  logic [30:0] channel_flags_c0_field1_wd;
  logic channel_flags_c0_field1_we;
  logic [31:0] length_c0_qs;
  logic [31:0] length_c0_wd;
  logic length_c0_we;
  logic [7:0] message_header_c0_message_id_qs;
  logic [7:0] message_header_c0_message_id_wd;
  logic message_header_c0_message_id_we;
  logic [1:0] message_header_c0_message_type_qs;
  logic [1:0] message_header_c0_message_type_wd;
  logic message_header_c0_message_type_we;
  logic [7:0] message_header_c0_protocol_id_qs;
  logic [7:0] message_header_c0_protocol_id_wd;
  logic message_header_c0_protocol_id_we;
  logic [9:0] message_header_c0_token_qs;
  logic [9:0] message_header_c0_token_wd;
  logic message_header_c0_token_we;
  logic [3:0] message_header_c0_field1_qs;
  logic [3:0] message_header_c0_field1_wd;
  logic message_header_c0_field1_we;
  logic [31:0] message_payload_0_c0_qs;
  logic [31:0] message_payload_0_c0_wd;
  logic message_payload_0_c0_we;
  logic [31:0] message_payload_1_c0_qs;
  logic [31:0] message_payload_1_c0_wd;
  logic message_payload_1_c0_we;
  logic [31:0] message_payload_2_c0_qs;
  logic [31:0] message_payload_2_c0_wd;
  logic message_payload_2_c0_we;
  logic [31:0] message_payload_3_c0_qs;
  logic [31:0] message_payload_3_c0_wd;
  logic message_payload_3_c0_we;
  logic [31:0] message_payload_4_c0_qs;
  logic [31:0] message_payload_4_c0_wd;
  logic message_payload_4_c0_we;
  logic [31:0] message_payload_5_c0_qs;
  logic [31:0] message_payload_5_c0_wd;
  logic message_payload_5_c0_we;
  logic [31:0] message_payload_6_c0_qs;
  logic [31:0] message_payload_6_c0_wd;
  logic message_payload_6_c0_we;
  logic [31:0] message_payload_7_c0_qs;
  logic [31:0] message_payload_7_c0_wd;
  logic message_payload_7_c0_we;
  logic [31:0] message_payload_8_c0_qs;
  logic [31:0] message_payload_8_c0_wd;
  logic message_payload_8_c0_we;
  logic [31:0] message_payload_9_c0_qs;
  logic [31:0] message_payload_9_c0_wd;
  logic message_payload_9_c0_we;
  logic [31:0] message_payload_10_c0_qs;
  logic [31:0] message_payload_10_c0_wd;
  logic message_payload_10_c0_we;
  logic [31:0] message_payload_11_c0_qs;
  logic [31:0] message_payload_11_c0_wd;
  logic message_payload_11_c0_we;
  logic [31:0] message_payload_12_c0_qs;
  logic [31:0] message_payload_12_c0_wd;
  logic message_payload_12_c0_we;
  logic [31:0] message_payload_13_c0_qs;
  logic [31:0] message_payload_13_c0_wd;
  logic message_payload_13_c0_we;
  logic [31:0] message_payload_14_c0_qs;
  logic [31:0] message_payload_14_c0_wd;
  logic message_payload_14_c0_we;
  logic [31:0] message_payload_15_c0_qs;
  logic [31:0] message_payload_15_c0_wd;
  logic message_payload_15_c0_we;
  logic [31:0] message_payload_16_c0_qs;
  logic [31:0] message_payload_16_c0_wd;
  logic message_payload_16_c0_we;
  logic [31:0] message_payload_17_c0_qs;
  logic [31:0] message_payload_17_c0_wd;
  logic message_payload_17_c0_we;
  logic [31:0] message_payload_18_c0_qs;
  logic [31:0] message_payload_18_c0_wd;
  logic message_payload_18_c0_we;
  logic [31:0] message_payload_19_c0_qs;
  logic [31:0] message_payload_19_c0_wd;
  logic message_payload_19_c0_we;
  logic [31:0] message_payload_20_c0_qs;
  logic [31:0] message_payload_20_c0_wd;
  logic message_payload_20_c0_we;
  logic [31:0] message_payload_21_c0_qs;
  logic [31:0] message_payload_21_c0_wd;
  logic message_payload_21_c0_we;
  logic [31:0] message_payload_22_c0_qs;
  logic [31:0] message_payload_22_c0_wd;
  logic message_payload_22_c0_we;
  logic [31:0] message_payload_23_c0_qs;
  logic [31:0] message_payload_23_c0_wd;
  logic message_payload_23_c0_we;
  logic [31:0] message_payload_24_c0_qs;
  logic [31:0] message_payload_24_c0_wd;
  logic message_payload_24_c0_we;
  logic [31:0] message_payload_25_c0_qs;
  logic [31:0] message_payload_25_c0_wd;
  logic message_payload_25_c0_we;
  logic [31:0] message_payload_26_c0_qs;
  logic [31:0] message_payload_26_c0_wd;
  logic message_payload_26_c0_we;
  logic [31:0] message_payload_27_c0_qs;
  logic [31:0] message_payload_27_c0_wd;
  logic message_payload_27_c0_we;
  logic [31:0] message_payload_28_c0_qs;
  logic [31:0] message_payload_28_c0_wd;
  logic message_payload_28_c0_we;
  logic [31:0] message_payload_29_c0_qs;
  logic [31:0] message_payload_29_c0_wd;
  logic message_payload_29_c0_we;
  logic [31:0] message_payload_30_c0_qs;
  logic [31:0] message_payload_30_c0_wd;
  logic message_payload_30_c0_we;
  logic [31:0] message_payload_31_c0_qs;
  logic [31:0] message_payload_31_c0_wd;
  logic message_payload_31_c0_we;
  logic [31:0] message_payload_32_c0_qs;
  logic [31:0] message_payload_32_c0_wd;
  logic message_payload_32_c0_we;
  logic [31:0] doorbell_c0_qs;
  logic [31:0] doorbell_c0_wd;
  logic doorbell_c0_we;
  logic [31:0] completion_interrupt_c0_qs;
  logic [31:0] completion_interrupt_c0_wd;
  logic completion_interrupt_c0_we;

  // Register instances
  // R[reserved_1_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_1_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_1_c0_we),
    .wd     (reserved_1_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_1_c0_qs)
  );


  // R[channel_status_c0]: V(False)

  //   F[channel_free]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c0_channel_free (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c0_channel_free_we),
    .wd     (channel_status_c0_channel_free_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c0_channel_free_qs)
  );


  //   F[channel_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_status_c0_channel_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c0_channel_error_we),
    .wd     (channel_status_c0_channel_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c0_channel_error_qs)
  );


  //   F[field1]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("RW"),
    .RESVAL  (30'h0)
  ) u_channel_status_c0_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_status_c0_field1_we),
    .wd     (channel_status_c0_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_status_c0_field1_qs)
  );


  // R[reserved_2_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_2_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_2_c0_we),
    .wd     (reserved_2_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_2_c0_qs)
  );


  // R[reserved_3_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reserved_3_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reserved_3_c0_we),
    .wd     (reserved_3_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (reserved_3_c0_qs)
  );


  // R[channel_flags_c0]: V(False)

  //   F[intr_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_channel_flags_c0_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c0_intr_enable_we),
    .wd     (channel_flags_c0_intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c0_intr_enable_qs)
  );


  //   F[field1]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_channel_flags_c0_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_flags_c0_field1_we),
    .wd     (channel_flags_c0_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (channel_flags_c0_field1_qs)
  );


  // R[length_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_length_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (length_c0_we),
    .wd     (length_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (length_c0_qs)
  );


  // R[message_header_c0]: V(False)

  //   F[message_id]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c0_message_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c0_message_id_we),
    .wd     (message_header_c0_message_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c0_message_id_qs)
  );


  //   F[message_type]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_message_header_c0_message_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c0_message_type_we),
    .wd     (message_header_c0_message_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c0_message_type_qs)
  );


  //   F[protocol_id]: 17:10
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_message_header_c0_protocol_id (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c0_protocol_id_we),
    .wd     (message_header_c0_protocol_id_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c0_protocol_id_qs)
  );


  //   F[token]: 27:18
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_message_header_c0_token (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c0_token_we),
    .wd     (message_header_c0_token_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c0_token_qs)
  );


  //   F[field1]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_message_header_c0_field1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_header_c0_field1_we),
    .wd     (message_header_c0_field1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_header_c0_field1_qs)
  );


  // R[message_payload_0_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_0_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_0_c0_we),
    .wd     (message_payload_0_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_0_c0_qs)
  );


  // R[message_payload_1_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_1_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_1_c0_we),
    .wd     (message_payload_1_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_1_c0_qs)
  );


  // R[message_payload_2_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_2_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_2_c0_we),
    .wd     (message_payload_2_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_2_c0_qs)
  );


  // R[message_payload_3_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_3_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_3_c0_we),
    .wd     (message_payload_3_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_3_c0_qs)
  );


  // R[message_payload_4_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_4_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_4_c0_we),
    .wd     (message_payload_4_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_4_c0_qs)
  );


  // R[message_payload_5_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_5_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_5_c0_we),
    .wd     (message_payload_5_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_5_c0_qs)
  );


  // R[message_payload_6_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_6_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_6_c0_we),
    .wd     (message_payload_6_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_6_c0_qs)
  );


  // R[message_payload_7_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_7_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_7_c0_we),
    .wd     (message_payload_7_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_7_c0_qs)
  );


  // R[message_payload_8_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_8_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_8_c0_we),
    .wd     (message_payload_8_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_8_c0_qs)
  );


  // R[message_payload_9_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_9_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_9_c0_we),
    .wd     (message_payload_9_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_9_c0_qs)
  );


  // R[message_payload_10_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_10_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_10_c0_we),
    .wd     (message_payload_10_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_10_c0_qs)
  );


  // R[message_payload_11_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_11_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_11_c0_we),
    .wd     (message_payload_11_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_11_c0_qs)
  );


  // R[message_payload_12_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_12_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_12_c0_we),
    .wd     (message_payload_12_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_12_c0_qs)
  );


  // R[message_payload_13_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_13_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_13_c0_we),
    .wd     (message_payload_13_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_13_c0_qs)
  );


  // R[message_payload_14_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_14_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_14_c0_we),
    .wd     (message_payload_14_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_14_c0_qs)
  );


  // R[message_payload_15_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_15_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_15_c0_we),
    .wd     (message_payload_15_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_15_c0_qs)
  );


  // R[message_payload_16_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_16_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_16_c0_we),
    .wd     (message_payload_16_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_16_c0_qs)
  );


  // R[message_payload_17_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_17_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_17_c0_we),
    .wd     (message_payload_17_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_17_c0_qs)
  );


  // R[message_payload_18_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_18_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_18_c0_we),
    .wd     (message_payload_18_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_18_c0_qs)
  );


  // R[message_payload_19_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_19_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_19_c0_we),
    .wd     (message_payload_19_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_19_c0_qs)
  );


  // R[message_payload_20_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_20_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_20_c0_we),
    .wd     (message_payload_20_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_20_c0_qs)
  );


  // R[message_payload_21_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_21_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_21_c0_we),
    .wd     (message_payload_21_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_21_c0_qs)
  );


  // R[message_payload_22_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_22_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_22_c0_we),
    .wd     (message_payload_22_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_22_c0_qs)
  );


  // R[message_payload_23_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_23_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_23_c0_we),
    .wd     (message_payload_23_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_23_c0_qs)
  );


  // R[message_payload_24_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_24_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_24_c0_we),
    .wd     (message_payload_24_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_24_c0_qs)
  );


  // R[message_payload_25_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_25_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_25_c0_we),
    .wd     (message_payload_25_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_25_c0_qs)
  );


  // R[message_payload_26_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_26_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_26_c0_we),
    .wd     (message_payload_26_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_26_c0_qs)
  );


  // R[message_payload_27_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_27_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_27_c0_we),
    .wd     (message_payload_27_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_27_c0_qs)
  );


  // R[message_payload_28_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_28_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_28_c0_we),
    .wd     (message_payload_28_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_28_c0_qs)
  );


  // R[message_payload_29_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_29_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_29_c0_we),
    .wd     (message_payload_29_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_29_c0_qs)
  );


  // R[message_payload_30_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_30_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_30_c0_we),
    .wd     (message_payload_30_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_30_c0_qs)
  );


  // R[message_payload_31_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_31_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_31_c0_we),
    .wd     (message_payload_31_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_31_c0_qs)
  );


  // R[message_payload_32_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_message_payload_32_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (message_payload_32_c0_we),
    .wd     (message_payload_32_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (message_payload_32_c0_qs)
  );


  // R[doorbell_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_doorbell_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (doorbell_c0_we),
    .wd     (doorbell_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.doorbell_c0.q ),

    // to register interface (read)
    .qs     (doorbell_c0_qs)
  );


  // R[completion_interrupt_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_completion_interrupt_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (completion_interrupt_c0_we),
    .wd     (completion_interrupt_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.completion_interrupt_c0.q ),

    // to register interface (read)
    .qs     (completion_interrupt_c0_qs)
  );




  logic [41:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SCMI_RESERVED_1_C0_OFFSET);
    addr_hit[ 1] = (reg_addr == SCMI_CHANNEL_STATUS_C0_OFFSET);
    addr_hit[ 2] = (reg_addr == SCMI_RESERVED_2_C0_OFFSET);
    addr_hit[ 3] = (reg_addr == SCMI_RESERVED_3_C0_OFFSET);
    addr_hit[ 4] = (reg_addr == SCMI_CHANNEL_FLAGS_C0_OFFSET);
    addr_hit[ 5] = (reg_addr == SCMI_LENGTH_C0_OFFSET);
    addr_hit[ 6] = (reg_addr == SCMI_MESSAGE_HEADER_C0_OFFSET);
    addr_hit[ 7] = (reg_addr == SCMI_MESSAGE_PAYLOAD_0_C0_OFFSET);
    addr_hit[ 8] = (reg_addr == SCMI_MESSAGE_PAYLOAD_1_C0_OFFSET);
    addr_hit[ 9] = (reg_addr == SCMI_MESSAGE_PAYLOAD_2_C0_OFFSET);
    addr_hit[10] = (reg_addr == SCMI_MESSAGE_PAYLOAD_3_C0_OFFSET);
    addr_hit[11] = (reg_addr == SCMI_MESSAGE_PAYLOAD_4_C0_OFFSET);
    addr_hit[12] = (reg_addr == SCMI_MESSAGE_PAYLOAD_5_C0_OFFSET);
    addr_hit[13] = (reg_addr == SCMI_MESSAGE_PAYLOAD_6_C0_OFFSET);
    addr_hit[14] = (reg_addr == SCMI_MESSAGE_PAYLOAD_7_C0_OFFSET);
    addr_hit[15] = (reg_addr == SCMI_MESSAGE_PAYLOAD_8_C0_OFFSET);
    addr_hit[16] = (reg_addr == SCMI_MESSAGE_PAYLOAD_9_C0_OFFSET);
    addr_hit[17] = (reg_addr == SCMI_MESSAGE_PAYLOAD_10_C0_OFFSET);
    addr_hit[18] = (reg_addr == SCMI_MESSAGE_PAYLOAD_11_C0_OFFSET);
    addr_hit[19] = (reg_addr == SCMI_MESSAGE_PAYLOAD_12_C0_OFFSET);
    addr_hit[20] = (reg_addr == SCMI_MESSAGE_PAYLOAD_13_C0_OFFSET);
    addr_hit[21] = (reg_addr == SCMI_MESSAGE_PAYLOAD_14_C0_OFFSET);
    addr_hit[22] = (reg_addr == SCMI_MESSAGE_PAYLOAD_15_C0_OFFSET);
    addr_hit[23] = (reg_addr == SCMI_MESSAGE_PAYLOAD_16_C0_OFFSET);
    addr_hit[24] = (reg_addr == SCMI_MESSAGE_PAYLOAD_17_C0_OFFSET);
    addr_hit[25] = (reg_addr == SCMI_MESSAGE_PAYLOAD_18_C0_OFFSET);
    addr_hit[26] = (reg_addr == SCMI_MESSAGE_PAYLOAD_19_C0_OFFSET);
    addr_hit[27] = (reg_addr == SCMI_MESSAGE_PAYLOAD_20_C0_OFFSET);
    addr_hit[28] = (reg_addr == SCMI_MESSAGE_PAYLOAD_21_C0_OFFSET);
    addr_hit[29] = (reg_addr == SCMI_MESSAGE_PAYLOAD_22_C0_OFFSET);
    addr_hit[30] = (reg_addr == SCMI_MESSAGE_PAYLOAD_23_C0_OFFSET);
    addr_hit[31] = (reg_addr == SCMI_MESSAGE_PAYLOAD_24_C0_OFFSET);
    addr_hit[32] = (reg_addr == SCMI_MESSAGE_PAYLOAD_25_C0_OFFSET);
    addr_hit[33] = (reg_addr == SCMI_MESSAGE_PAYLOAD_26_C0_OFFSET);
    addr_hit[34] = (reg_addr == SCMI_MESSAGE_PAYLOAD_27_C0_OFFSET);
    addr_hit[35] = (reg_addr == SCMI_MESSAGE_PAYLOAD_28_C0_OFFSET);
    addr_hit[36] = (reg_addr == SCMI_MESSAGE_PAYLOAD_29_C0_OFFSET);
    addr_hit[37] = (reg_addr == SCMI_MESSAGE_PAYLOAD_30_C0_OFFSET);
    addr_hit[38] = (reg_addr == SCMI_MESSAGE_PAYLOAD_31_C0_OFFSET);
    addr_hit[39] = (reg_addr == SCMI_MESSAGE_PAYLOAD_32_C0_OFFSET);
    addr_hit[40] = (reg_addr == SCMI_DOORBELL_C0_OFFSET);
    addr_hit[41] = (reg_addr == SCMI_COMPLETION_INTERRUPT_C0_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(SCMI_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(SCMI_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(SCMI_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(SCMI_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(SCMI_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(SCMI_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(SCMI_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(SCMI_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(SCMI_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(SCMI_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(SCMI_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(SCMI_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(SCMI_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(SCMI_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(SCMI_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(SCMI_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(SCMI_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(SCMI_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(SCMI_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(SCMI_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(SCMI_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(SCMI_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(SCMI_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(SCMI_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(SCMI_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(SCMI_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(SCMI_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(SCMI_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(SCMI_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(SCMI_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(SCMI_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(SCMI_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(SCMI_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(SCMI_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(SCMI_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(SCMI_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(SCMI_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(SCMI_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(SCMI_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(SCMI_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(SCMI_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(SCMI_PERMIT[41] & ~reg_be)))));
  end

  assign reserved_1_c0_we = addr_hit[0] & reg_we & !reg_error;
  assign reserved_1_c0_wd = reg_wdata[31:0];

  assign channel_status_c0_channel_free_we = addr_hit[1] & reg_we & !reg_error;
  assign channel_status_c0_channel_free_wd = reg_wdata[0];

  assign channel_status_c0_channel_error_we = addr_hit[1] & reg_we & !reg_error;
  assign channel_status_c0_channel_error_wd = reg_wdata[1];

  assign channel_status_c0_field1_we = addr_hit[1] & reg_we & !reg_error;
  assign channel_status_c0_field1_wd = reg_wdata[31:2];

  assign reserved_2_c0_we = addr_hit[2] & reg_we & !reg_error;
  assign reserved_2_c0_wd = reg_wdata[31:0];

  assign reserved_3_c0_we = addr_hit[3] & reg_we & !reg_error;
  assign reserved_3_c0_wd = reg_wdata[31:0];

  assign channel_flags_c0_intr_enable_we = addr_hit[4] & reg_we & !reg_error;
  assign channel_flags_c0_intr_enable_wd = reg_wdata[0];

  assign channel_flags_c0_field1_we = addr_hit[4] & reg_we & !reg_error;
  assign channel_flags_c0_field1_wd = reg_wdata[31:1];

  assign length_c0_we = addr_hit[5] & reg_we & !reg_error;
  assign length_c0_wd = reg_wdata[31:0];

  assign message_header_c0_message_id_we = addr_hit[6] & reg_we & !reg_error;
  assign message_header_c0_message_id_wd = reg_wdata[7:0];

  assign message_header_c0_message_type_we = addr_hit[6] & reg_we & !reg_error;
  assign message_header_c0_message_type_wd = reg_wdata[9:8];

  assign message_header_c0_protocol_id_we = addr_hit[6] & reg_we & !reg_error;
  assign message_header_c0_protocol_id_wd = reg_wdata[17:10];

  assign message_header_c0_token_we = addr_hit[6] & reg_we & !reg_error;
  assign message_header_c0_token_wd = reg_wdata[27:18];

  assign message_header_c0_field1_we = addr_hit[6] & reg_we & !reg_error;
  assign message_header_c0_field1_wd = reg_wdata[31:28];

  assign message_payload_0_c0_we = addr_hit[7] & reg_we & !reg_error;
  assign message_payload_0_c0_wd = reg_wdata[31:0];

  assign message_payload_1_c0_we = addr_hit[8] & reg_we & !reg_error;
  assign message_payload_1_c0_wd = reg_wdata[31:0];

  assign message_payload_2_c0_we = addr_hit[9] & reg_we & !reg_error;
  assign message_payload_2_c0_wd = reg_wdata[31:0];

  assign message_payload_3_c0_we = addr_hit[10] & reg_we & !reg_error;
  assign message_payload_3_c0_wd = reg_wdata[31:0];

  assign message_payload_4_c0_we = addr_hit[11] & reg_we & !reg_error;
  assign message_payload_4_c0_wd = reg_wdata[31:0];

  assign message_payload_5_c0_we = addr_hit[12] & reg_we & !reg_error;
  assign message_payload_5_c0_wd = reg_wdata[31:0];

  assign message_payload_6_c0_we = addr_hit[13] & reg_we & !reg_error;
  assign message_payload_6_c0_wd = reg_wdata[31:0];

  assign message_payload_7_c0_we = addr_hit[14] & reg_we & !reg_error;
  assign message_payload_7_c0_wd = reg_wdata[31:0];

  assign message_payload_8_c0_we = addr_hit[15] & reg_we & !reg_error;
  assign message_payload_8_c0_wd = reg_wdata[31:0];

  assign message_payload_9_c0_we = addr_hit[16] & reg_we & !reg_error;
  assign message_payload_9_c0_wd = reg_wdata[31:0];

  assign message_payload_10_c0_we = addr_hit[17] & reg_we & !reg_error;
  assign message_payload_10_c0_wd = reg_wdata[31:0];

  assign message_payload_11_c0_we = addr_hit[18] & reg_we & !reg_error;
  assign message_payload_11_c0_wd = reg_wdata[31:0];

  assign message_payload_12_c0_we = addr_hit[19] & reg_we & !reg_error;
  assign message_payload_12_c0_wd = reg_wdata[31:0];

  assign message_payload_13_c0_we = addr_hit[20] & reg_we & !reg_error;
  assign message_payload_13_c0_wd = reg_wdata[31:0];

  assign message_payload_14_c0_we = addr_hit[21] & reg_we & !reg_error;
  assign message_payload_14_c0_wd = reg_wdata[31:0];

  assign message_payload_15_c0_we = addr_hit[22] & reg_we & !reg_error;
  assign message_payload_15_c0_wd = reg_wdata[31:0];

  assign message_payload_16_c0_we = addr_hit[23] & reg_we & !reg_error;
  assign message_payload_16_c0_wd = reg_wdata[31:0];

  assign message_payload_17_c0_we = addr_hit[24] & reg_we & !reg_error;
  assign message_payload_17_c0_wd = reg_wdata[31:0];

  assign message_payload_18_c0_we = addr_hit[25] & reg_we & !reg_error;
  assign message_payload_18_c0_wd = reg_wdata[31:0];

  assign message_payload_19_c0_we = addr_hit[26] & reg_we & !reg_error;
  assign message_payload_19_c0_wd = reg_wdata[31:0];

  assign message_payload_20_c0_we = addr_hit[27] & reg_we & !reg_error;
  assign message_payload_20_c0_wd = reg_wdata[31:0];

  assign message_payload_21_c0_we = addr_hit[28] & reg_we & !reg_error;
  assign message_payload_21_c0_wd = reg_wdata[31:0];

  assign message_payload_22_c0_we = addr_hit[29] & reg_we & !reg_error;
  assign message_payload_22_c0_wd = reg_wdata[31:0];

  assign message_payload_23_c0_we = addr_hit[30] & reg_we & !reg_error;
  assign message_payload_23_c0_wd = reg_wdata[31:0];

  assign message_payload_24_c0_we = addr_hit[31] & reg_we & !reg_error;
  assign message_payload_24_c0_wd = reg_wdata[31:0];

  assign message_payload_25_c0_we = addr_hit[32] & reg_we & !reg_error;
  assign message_payload_25_c0_wd = reg_wdata[31:0];

  assign message_payload_26_c0_we = addr_hit[33] & reg_we & !reg_error;
  assign message_payload_26_c0_wd = reg_wdata[31:0];

  assign message_payload_27_c0_we = addr_hit[34] & reg_we & !reg_error;
  assign message_payload_27_c0_wd = reg_wdata[31:0];

  assign message_payload_28_c0_we = addr_hit[35] & reg_we & !reg_error;
  assign message_payload_28_c0_wd = reg_wdata[31:0];

  assign message_payload_29_c0_we = addr_hit[36] & reg_we & !reg_error;
  assign message_payload_29_c0_wd = reg_wdata[31:0];

  assign message_payload_30_c0_we = addr_hit[37] & reg_we & !reg_error;
  assign message_payload_30_c0_wd = reg_wdata[31:0];

  assign message_payload_31_c0_we = addr_hit[38] & reg_we & !reg_error;
  assign message_payload_31_c0_wd = reg_wdata[31:0];

  assign message_payload_32_c0_we = addr_hit[39] & reg_we & !reg_error;
  assign message_payload_32_c0_wd = reg_wdata[31:0];

  assign doorbell_c0_we = addr_hit[40] & reg_we & !reg_error;
  assign doorbell_c0_wd = reg_wdata[31:0];

  assign completion_interrupt_c0_we = addr_hit[41] & reg_we & !reg_error;
  assign completion_interrupt_c0_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = reserved_1_c0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = channel_status_c0_channel_free_qs;
        reg_rdata_next[1] = channel_status_c0_channel_error_qs;
        reg_rdata_next[31:2] = channel_status_c0_field1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = reserved_2_c0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = reserved_3_c0_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = channel_flags_c0_intr_enable_qs;
        reg_rdata_next[31:1] = channel_flags_c0_field1_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = length_c0_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[7:0] = message_header_c0_message_id_qs;
        reg_rdata_next[9:8] = message_header_c0_message_type_qs;
        reg_rdata_next[17:10] = message_header_c0_protocol_id_qs;
        reg_rdata_next[27:18] = message_header_c0_token_qs;
        reg_rdata_next[31:28] = message_header_c0_field1_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = message_payload_0_c0_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = message_payload_1_c0_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = message_payload_2_c0_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = message_payload_3_c0_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = message_payload_4_c0_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = message_payload_5_c0_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = message_payload_6_c0_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = message_payload_7_c0_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = message_payload_8_c0_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = message_payload_9_c0_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = message_payload_10_c0_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = message_payload_11_c0_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = message_payload_12_c0_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = message_payload_13_c0_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = message_payload_14_c0_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = message_payload_15_c0_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = message_payload_16_c0_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = message_payload_17_c0_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = message_payload_18_c0_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = message_payload_19_c0_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = message_payload_20_c0_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = message_payload_21_c0_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = message_payload_22_c0_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = message_payload_23_c0_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = message_payload_24_c0_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = message_payload_25_c0_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = message_payload_26_c0_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = message_payload_27_c0_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = message_payload_28_c0_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = message_payload_29_c0_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = message_payload_30_c0_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = message_payload_31_c0_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = message_payload_32_c0_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = doorbell_c0_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = completion_interrupt_c0_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
