
clic-mbox-ft:     file format elf32-littleriscv
clic-mbox-ft
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1c000880

Program Header:
    LOAD off    0x00000004 vaddr 0x00000004 paddr 0x1c000004 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00000400 vaddr 0x1c000400 paddr 0x1c000400 align 2**12
         filesz 0x000036d4 memsz 0x000036d4 flags r-x
    LOAD off    0x00004000 vaddr 0x1c008000 paddr 0x1c008000 align 2**12
         filesz 0x00005230 memsz 0x00005a30 flags rw-
    LOAD off    0x0000a000 vaddr 0x1c010000 paddr 0x1c010000 align 2**12
         filesz 0x000006c0 memsz 0x000006c0 flags rw-
    LOAD off    0x00000004 vaddr 0x10000004 paddr 0x1c0106c0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00000010 vaddr 0x10000010 paddr 0x1c0106c0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x000006dc vaddr 0x1c0106dc paddr 0x1c0106dc align 2**12
         filesz 0x00000000 memsz 0x00000004 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .data_tiny_fc     0000000c  00000004  1c000004  00001004  2**2  ALLOC
  1 .vectors          00000400  1c000400  1c000400  00000400  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text             00003254  1c000880  1c000880  00000880  2**10  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata           00000664  1c008000  1c008000  00004000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data             000002b4  1c008664  1c008664  00004664  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00000914  1c008918  1c008918  00004918  2**3  ALLOC
  6 .heap             00004000  1c009230  1c009230  00005230  2**4  CONTENTS, ALLOC, LOAD, DATA
  7 .stack            00000800  1c00d230  1c00d230  00009230  2**4  ALLOC
  8 .l2_data          000006c0  1c010000  1c010000  0000a000  2**2  CONTENTS, ALLOC, LOAD, DATA
  9 .data_tiny_l1     0000000c  10000004  1c0106c0  0000b004  2**0  ALLOC
 10 .l1cluster_g      00000010  10000010  1c0106c0  0000b010  2**0  ALLOC
 11 .heap_l1_cluster  00000000  10000020  10000020  0000a6c0  2**0  CONTENTS
 12 .heap_l2_shared   00000004  1c0106dc  1c0106dc  0000a6dc  2**0  ALLOC
 13 .debug_info       0001119d  00000000  00000000  0000a6c0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev     00002ee3  00000000  00000000  0001b85d  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc        00005611  00000000  00000000  0001e740  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges    00000818  00000000  00000000  00023d58  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges     00000a40  00000000  00000000  00024570  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro      0000607f  00000000  00000000  00024fb0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line       0000ec24  00000000  00000000  0002b02f  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str        00022967  00000000  00000000  00039c53  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment          0000002c  00000000  00000000  0005c5ba  2**0  CONTENTS, READONLY
 22 .riscv.attributes 0000003e  00000000  00000000  0005c5e6  2**0  CONTENTS, READONLY
 23 .debug_frame      00001520  00000000  00000000  0005c624  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1c000400 l    d  .vectors	00000000 .vectors
1c000880 l    d  .text	00000000 .text
1c008000 l    d  .rodata	00000000 .rodata
1c008664 l    d  .data	00000000 .data
1c008918 l    d  .bss	00000000 .bss
1c009230 l    d  .heap	00000000 .heap
1c00d230 l    d  .stack	00000000 .stack
1c010000 l    d  .l2_data	00000000 .l2_data
10000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
10000010 l    d  .l1cluster_g	00000000 .l1cluster_g
10000020 l    d  .heap_l1_cluster	00000000 .heap_l1_cluster
1c0106dc l    d  .heap_l2_shared	00000000 .heap_l2_shared
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 target/control-pulp/vectors.o
1c000400 l       .vectors	00000000 vector_table
00000000 l    df *ABS*	00000000 kernel/portable/GCC/RISC-V/portASM.o
1c000978 l       .text	00000000 test_if_asynchronous
1c00098e l       .text	00000000 handle_synchronous
1c000980 l       .text	00000000 handle_asynchronous
1c0009be l       .text	00000000 processed_source
1c000992 l       .text	00000000 test_if_environment_call
1c0009aa l       .text	00000000 is_exception
1c0009b8 l       .text	00000000 as_yet_unhandled
1c000e28 l       .text	00000000 chip_specific_stack_frame
00000000 l    df *ABS*	00000000 cluster_core.S
1c000f1a l       .text	00000000 cl_slave_loop
1c000e94 l       .text	00000000 cl_master_cluster_ready
1c000f0c l       .text	00000000 cl_master_sleep
1c000e9c l       .text	00000000 cl_master_loop
1c000f02 l       .text	00000000 cl_master_cluster_task_end
1c000ed0 l       .text	00000000 cl_master_slave_barrier_sync_config
1c000ee0 l       .text	00000000 cl_master_master_slave_barrier_sync_config
1c000ee8 l       .text	00000000 cl_master_dispatch_stack
1c000f00 l       .text	00000000 cl_master_core_only
1c000f30 l       .text	00000000 cl_slave_barrier_trig_wait
1c000f34 l       .text	00000000 cl_slave_wait_for_dispatch
1c000f4e l       .text	00000000 cl_slave_entry_no_barrier
1c000f48 l       .text	00000000 cl_slave_entry_with_barrier
00000000 l    df *ABS*	00000000 fc_event.c
1c001a74 l     F .text	00000002 fc_event_null_event
1c008aa4 l     O .bss	000002a0 fc_event_handlers
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tasks.c
1c00101e l     F .text	00000020 prvResetNextTaskUnblockTime
1c00103e l     F .text	00000094 prvAddCurrentTaskToDelayedList
1c008918 l     O .bss	00000064 pxReadyTasksLists
1c00897c l     O .bss	00000014 xPendingReadyList
1c008990 l     O .bss	00000014 xSuspendedTaskList
1c008140 l     O .rodata	0000000b __func__.3102
1c00814c l     O .rodata	0000000f __func__.3171
1c00815c l     O .rodata	00000013 __func__.3248
1c008170 l     O .rodata	00000013 __func__.3257
1c008dd4 l     O .bss	00000004 pxDelayedTaskList
1c008dd8 l     O .bss	00000004 pxOverflowDelayedTaskList
1c008ddc l     O .bss	00000004 uxCurrentNumberOfTasks
1c008de0 l     O .bss	00000004 uxSchedulerSuspended
1c008de4 l     O .bss	00000004 uxTopReadyPriority
1c008de8 l     O .bss	00000004 xNextTaskUnblockTime
1c008dec l     O .bss	00000004 xNumOfOverflows
1c008df0 l     O .bss	00000004 xPendedTicks
1c008df4 l     O .bss	00000004 xSchedulerRunning
1c008df8 l     O .bss	00000004 xTickCount
1c008dfc l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 syscalls.c
1c0089a4 l     O .bss	00000100 copyout_buf.4127
1c008908 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 cl_l1_malloc.c
00000000 l    df *ABS*	00000000 malloc_internal.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 clkconst.c
00000000 l    df *ABS*	00000000 cl_to_fc_delegate.c
1c00821c l     O .rodata	0000001b __func__.4718
00000000 l    df *ABS*	00000000 fc_to_cl_delegate.c
1c0082bc l     O .rodata	0000000f __func__.5341
1c0082cc l     O .rodata	00000014 __func__.5439
00000000 l    df *ABS*	00000000 clic.c
1c008368 l     O .rodata	0000000b __func__.1881
1c008374 l     O .rodata	00000009 __func__.1889
00000000 l    df *ABS*	00000000 soc_eu.c
00000000 l    df *ABS*	00000000 pmsis_task.c
1c001abe l     F .text	00000030 pi_time_wait_us
00000000 l    df *ABS*	00000000 handler.o
1c001c00 l       .text	00000000 default_exception_handler
1c001c02 l       .text	00000000 software_handler
1c001c04 l       .text	00000000 timer_handler
1c001c06 l       .text	00000000 external_handler
1c001c08 l       .text	00000000 __no_irq_handler
00000000 l    df *ABS*	00000000 clic-mbox-freertos.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1c002856 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
1c008d44 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1c003234 l     F .text	0000006a std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 impure.c
1c0088a8 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 port.c
00000000 l    df *ABS*	00000000 
1c008664 l       .data	00000000 __fini_array_end
1c008664 l       .data	00000000 __fini_array_start
1c008664 l       .data	00000000 __init_array_end
1c008664 l       .data	00000000 __preinit_array_end
1c008664 l       .data	00000000 __init_array_start
1c008664 l       .data	00000000 __preinit_array_start
1c003a46 g     F .text	0000002c _isatty_r
1c0014f8 g     F .text	00000004 _getpid
1c002bae g     F .text	000000de _puts_r
1c003a72 g     F .text	00000030 _lseek_r
00000010 g       .data_tiny_fc	00000000 __l1FcShared_start
1c002d36 g     F .text	0000002e _kill_r
1c002b6e g     F .text	00000040 printf
1c008e64 g       *ABS*	00000000 __global_pointer$
1c003980 g     F .text	00000036 __sseek
1c000400 g       .vectors	00000000 __vector_start
1c0032f0 g     F .text	00000070 __sinit
1c0106c0 g       .l2_data	00000000 __l1_preload_start_inL2
10000010 g       .data_tiny_l1	00000000 __data_tiny_l1_end
1c002d68 g     F .text	000000c6 __swbuf_r
1c001934 g     F .text	0000003e irq_pend
1c0032a8 g     F .text	00000048 __sfmoreglue
1c0015b8 g     F .text	0000000e __malloc_unlock
1c001328 g     F .text	0000001a vTaskEnterCritical
1c001646 g     F .text	00000080 system_init
10000020 g       .heap_l1_cluster	00000000 __l1_heapsram_start
1c001b22 g     F .text	0000000e __pi_task_push
1c008dd0 g     O .bss	00000004 pxCurrentTCB
1c003a18 g     F .text	0000002e _fstat_r
1c009228 g     O .bss	00000004 errno
1c003ad2 g       .text	00000000 _etext
1c0016e4 g     F .text	00000022 pi_freq_get
00000800 g       *ABS*	00000000 __stack_size
1c0023fa g     F .text	0000001e exit_success
1c008664 g       .data	00000000 sdata
1c000880 g       *ABS*	00000000 __boot_address
1c0019cc g     F .text	0000005a irq_enable
1c001a52 g     F .text	00000022 soc_eu_event_init
1c000f90 g     F .text	00000016 memcpy
1c001a76 g     F .text	00000016 pi_fc_event_handler_clear
1c00329e g     F .text	0000000a _cleanup_r
1c002c8c g     F .text	0000000e puts
1c00da30 g       .stack	00000000 __freertos_irq_stack_top
1c000f62 g     F .text	0000002e fc_soc_event_handler
1c008e00 g     O .bss	00000004 __per_cluster_data
1c002cc6 g     F .text	00000062 _raise_r
1c0014f0 g     F .text	00000008 _fstat
1c002588 g     F .text	00000040 __assert_func
1c008918 g       .bss	00000000 _bss_start
1c008918 g       .data	00000000 edata
1c000fb6 g     F .text	00000016 vListInsertEnd
1c002d64 g     F .text	00000004 _getpid_r
1c008908 g       .data	00000000 __sdata_begin
1c0106e0 g       .heap_l2_shared	00000000 __heap_l2_shared_start
1c008e10 g     O .bss	0000000c __cl_l1_malloc_mutex
1c008664 g       .data	00000000 _sdata
1c001810 g     F .text	00000040 pi_cl_send_task_to_fc
1c000e42 g     F .text	00000000 cluster_exec_loop
1c002c9a g     F .text	0000002c _sbrk_r
1c003aa2 g     F .text	00000030 _read_r
1c009230 g     O .heap	00004000 ucHeap
1c001706 g     F .text	0000010a cl_notify_fc_event_handler
1c0014fc g     F .text	00000008 _isatty
1c008914 g     O .data	00000004 _global_impure_ptr
0000001c g       *ABS*	00000000 __l1_preload_size
1c002662 g     F .text	0000006e __libc_init_array
1c00922c g       .bss	00000000 __bss_end
1c00da30 g       .stack	00000000 stack
10000020 g       .heap_l1_cluster	00000000 __heap_l1_cluster_start
1c001aee g     F .text	0000001e pi_task_release
1c002578 g     F .text	00000010 abort
1c00157e g     F .text	0000002c _sbrk
1c0008ec g     F .text	00000002 _init
0000ffe0 g       *ABS*	00000000 __heapsram_size
1c00922c g       .bss	00000000 _bss_end
1c002600 g     F .text	0000003a __libc_fini_array
1c0016c6 g     F .text	0000001e vSystemIrqHandler
1c001a38 g     F .text	00000010 pulp_irq_init
1c000b00 g       .text	00000000 freertos_risc_v_ctxt_handler
0000ffe0 g       *ABS*	00000000 __l1_heapsram_size
1c000900 g       .text	00000000 freertos_risc_v_trap_handler
1c00d230 g       .stack	00000000 stack_start
1c00263a g     F .text	00000028 fprintf
1c002576 g     F .text	00000002 vApplicationTickHook
1c00da30 g       .stack	00000000 __stack_top
00000000 g     O *ABS*	00000004 __heap_size
1c008584 g     O .rodata	00000020 __sf_fake_stderr
1c0015e2 g     F .text	0000004e __malloc_free
1c0015c6 g     F .text	0000001c pi_cl_l1_free
1c001b94 g     F .text	00000000 clic_setup_mtvt
1c008910 g     O .data	00000004 xISRStackTop
1c002880 g     F .text	00000044 __sfputs_r
1c00356a g     F .text	0000001a memchr
1c0026d0 g     F .text	000000a8 _free_r
1c008e0c g     O .bss	00000004 _global_atexit
1c010000 g       .l2_data	00000000 __cluster_text_start
1c002fba g     F .text	000000c8 __call_exitprocs
1c001972 g     F .text	00000040 irq_set_lvl_and_prio
1c000880 g     F .text	0000006c _start
1c0010d2 g     F .text	0000000c vTaskSuspendAll
1c00150e g     F .text	00000004 _lseek
0006f920 g       *ABS*	00000000 __heapl2ram_size
1c000ff8 g     F .text	00000026 uxListRemove
1c002f3e g     F .text	0000007c __register_exitproc
1c010000 g     O .l2_data	000006c0 delegate_task_l2
1c009224 g     O .bss	00000004 clic_isr_hook
1c00121e g     F .text	0000010a vTaskSwitchContext
1c000f54 g     F .text	00000000 cl_slave_stack_setup
1c0039ec g     F .text	0000002c _close_r
1c001a26 g     F .text	00000006 irq_clint_global_enable
1c002e2e g     F .text	00000110 __swsetup_r
1c00255e g     F .text	00000018 vApplicationStackOverflowHook
1c003360 g     F .text	000000a2 __sfp
1c0019b2 g     F .text	0000001a irq_set_trigger_type
1c003902 g     F .text	00000030 __sread
1c0015aa g     F .text	0000000e __malloc_lock
1c0031ce g     F .text	00000066 _fflush_r
1c00da30 g       .stack	00000000 __l2_priv1_end
1c0085a4 g     O .rodata	00000020 __sf_fake_stdin
1c001b30 g       .text	00000000 __handle_clic_int
1c008918 g       .bss	00000000 __bss_start
1c001a48 g     F .text	0000000a soc_eu_mask_set
1c000fa6 g     F .text	00000010 memset
1c002420 g     F .text	0000013e main
1c002418 g     F .text	00000008 exit_fail
1c000fcc g     F .text	0000002c vListInsert
1c0039b6 g     F .text	00000006 __sclose
1c002778 g     F .text	000000de _malloc_r
1c003ad4 g       .text	00000000 __l2_priv0_end
1c008e24 g     O .bss	00000400 isr_table
1c0106e0 g       .heap_l2_shared	00000000 __heapl2ram_start
1c008664 g       .data	00000000 __data_begin
0000ffe0 g       *ABS*	00000000 __heap_l1_cluster_size
1c001a2c g     F .text	0000000c irq_clint_enable
1c00d230 g       .heap	00000000 __heap_end
00000000 g       *ABS*	00000000 __l1FcShared_size
1c001a8c g     F .text	00000032 pi_fc_event_handler_init
1c0008ec g     F .text	00000002 _fini
1c002b6e g     F .text	00000040 iprintf
1c001368 g     F .text	000000f6 xTaskResumeAll
1c0025c8 g     F .text	0000000c atexit
1c0039bc g     F .text	00000030 _write_r
1c000d00 g       .text	00000000 xPortStartFirstTask
1c001b0c g     F .text	00000016 pi_task_push_delayed_us
1c003584 g     F .text	0000010c _printf_common
1c00890c g     O .data	00000004 _impure_ptr
1c00d230 g       .stack	00000000 __stack_bottom
1c003082 g     F .text	0000014c __sflush_r
1c008e1c g     O .bss	00000008 __cl_l1_malloc
0006f920 g       *ABS*	00000000 __heap_l2_shared_size
1c009230 g       .heap	00000000 __heap_start
1c008668 g     O .data	00000240 delegate_task
1c0010de g     F .text	00000140 xTaskIncrementTick
1c00346c g     F .text	0000005c __swhatbuf_r
1c001850 g     F .text	000000e4 cl_task_finish
10000020 g       .heap_l1_cluster	00000000 __heapsram_start
1c000400 g       .vectors	00000000 __irq_vector_base
1c001516 g     F .text	00000068 _write
1c008918 g       .data	00000000 _edata
1c001b82 g     F .text	00000000 clic_setup_mtvec
1c00922c g       .bss	00000000 _end
00000010 g       .data_tiny_fc	00000000 __l1FcShared_end
1c001630 g     F .text	00000016 timer_irq_handler
1c003932 g     F .text	0000004e __swrite
1c0025d4 g     F .text	0000002c exit
1c00263a g     F .text	00000028 fiprintf
1c0028c4 g     F .text	000002aa _vfiprintf_r
1c003402 g     F .text	0000006a _fwalk_reent
1c001504 g     F .text	0000000a _kill
10000010 g       .data_tiny_l1	00000000 __l1_preload_start
1c00145e g     F .text	00000052 vTaskDelay
10000010 g       .l1cluster_g	00000000 __printf_lock_ptr_l1
1c0085c4 g     O .rodata	00000020 __sf_fake_stdout
1c001512 g     F .text	00000004 _read
1c0014b4 g     F .text	0000003c _exit
1c0034c8 g     F .text	000000a2 __smakebuf_r
1c000880 g       .text	00000000 _stext
1c001342 g     F .text	00000026 vTaskExitCritical
1c000e00 g       .text	00000000 pxPortInitialiseStack
1c003690 g     F .text	00000272 _printf_i
1c008e08 g     O .bss	00000004 __malloc_sbrk_start
1c002000 g       .text	00000000 __clic_vector_table
1c010000 g       .l2_data	00000000 __cluster_text_end
1c008664 g     O .data	00000004 delegate_task_mask
1c008e04 g     O .bss	00000004 __malloc_free_list
1c0028c4 g     F .text	000002aa _vfprintf_r
1c003ad2 g       .text	00000000 _endtext
1c002d28 g     F .text	0000000e raise
1c0014b0 g     F .text	00000004 _close
10000020 g       .l1cluster_g	00000000 __l1_cluster_g_end



Disassembly of section .vectors:
vector_table():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:33
#ifdef CONFIG_CLIC
/* clic specific vector table */
.section .vectors, "ax"
.option norvc
vector_table:
	j freertos_risc_v_trap_handler
1c000400 <__irq_vector_base> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:34
	j freertos_risc_v_trap_handler
1c000404 <__irq_vector_base+0x4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:35
	j freertos_risc_v_trap_handler
1c000408 <__irq_vector_base+0x8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:36
	j freertos_risc_v_trap_handler
1c00040c <__irq_vector_base+0xc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:37
	j freertos_risc_v_trap_handler
1c000410 <__irq_vector_base+0x10> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:38
	j freertos_risc_v_trap_handler
1c000414 <__irq_vector_base+0x14> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:39
	j freertos_risc_v_trap_handler
1c000418 <__irq_vector_base+0x18> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:40
	j freertos_risc_v_trap_handler
1c00041c <__irq_vector_base+0x1c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:41
	j freertos_risc_v_trap_handler
1c000420 <__irq_vector_base+0x20> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:42
	j freertos_risc_v_trap_handler
1c000424 <__irq_vector_base+0x24> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:43
	j freertos_risc_v_trap_handler
1c000428 <__irq_vector_base+0x28> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:44
	j freertos_risc_v_trap_handler
1c00042c <__irq_vector_base+0x2c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:45
	j freertos_risc_v_trap_handler
1c000430 <__irq_vector_base+0x30> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:46
	j freertos_risc_v_trap_handler
1c000434 <__irq_vector_base+0x34> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:47
	j freertos_risc_v_trap_handler
1c000438 <__irq_vector_base+0x38> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:48
	j freertos_risc_v_trap_handler
1c00043c <__irq_vector_base+0x3c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:49
	j freertos_risc_v_trap_handler
1c000440 <__irq_vector_base+0x40> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:50
	j freertos_risc_v_trap_handler
1c000444 <__irq_vector_base+0x44> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:51
	j freertos_risc_v_trap_handler
1c000448 <__irq_vector_base+0x48> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:52
	j freertos_risc_v_trap_handler
1c00044c <__irq_vector_base+0x4c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:53
	j freertos_risc_v_trap_handler
1c000450 <__irq_vector_base+0x50> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:54
	j freertos_risc_v_trap_handler
1c000454 <__irq_vector_base+0x54> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:55
	j freertos_risc_v_trap_handler
1c000458 <__irq_vector_base+0x58> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:56
	j freertos_risc_v_trap_handler
1c00045c <__irq_vector_base+0x5c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:57
	j freertos_risc_v_trap_handler
1c000460 <__irq_vector_base+0x60> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:58
	j freertos_risc_v_trap_handler
1c000464 <__irq_vector_base+0x64> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:59
	j freertos_risc_v_trap_handler
1c000468 <__irq_vector_base+0x68> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:60
	j freertos_risc_v_trap_handler
1c00046c <__irq_vector_base+0x6c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:61
	j freertos_risc_v_trap_handler
1c000470 <__irq_vector_base+0x70> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:62
	j freertos_risc_v_trap_handler
1c000474 <__irq_vector_base+0x74> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:63
	j freertos_risc_v_trap_handler
1c000478 <__irq_vector_base+0x78> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:64
	j freertos_risc_v_trap_handler
1c00047c <__irq_vector_base+0x7c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:65
	j freertos_risc_v_trap_handler
1c000480 <__irq_vector_base+0x80> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:66
	j freertos_risc_v_trap_handler
1c000484 <__irq_vector_base+0x84> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:67
	j freertos_risc_v_trap_handler
1c000488 <__irq_vector_base+0x88> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:68
	j freertos_risc_v_trap_handler
1c00048c <__irq_vector_base+0x8c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:69
	j freertos_risc_v_trap_handler
1c000490 <__irq_vector_base+0x90> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:70
	j freertos_risc_v_trap_handler
1c000494 <__irq_vector_base+0x94> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:71
	j freertos_risc_v_trap_handler
1c000498 <__irq_vector_base+0x98> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:72
	j freertos_risc_v_trap_handler
1c00049c <__irq_vector_base+0x9c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:73
	j freertos_risc_v_trap_handler
1c0004a0 <__irq_vector_base+0xa0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:74
	j freertos_risc_v_trap_handler
1c0004a4 <__irq_vector_base+0xa4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:75
	j freertos_risc_v_trap_handler
1c0004a8 <__irq_vector_base+0xa8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:76
	j freertos_risc_v_trap_handler
1c0004ac <__irq_vector_base+0xac> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:77
	j freertos_risc_v_trap_handler
1c0004b0 <__irq_vector_base+0xb0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:78
	j freertos_risc_v_trap_handler
1c0004b4 <__irq_vector_base+0xb4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:79
	j freertos_risc_v_trap_handler
1c0004b8 <__irq_vector_base+0xb8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:80
	j freertos_risc_v_trap_handler
1c0004bc <__irq_vector_base+0xbc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:81
	j freertos_risc_v_trap_handler
1c0004c0 <__irq_vector_base+0xc0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:82
	j freertos_risc_v_trap_handler
1c0004c4 <__irq_vector_base+0xc4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:83
	j freertos_risc_v_trap_handler
1c0004c8 <__irq_vector_base+0xc8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:84
	j freertos_risc_v_trap_handler
1c0004cc <__irq_vector_base+0xcc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:85
	j freertos_risc_v_trap_handler
1c0004d0 <__irq_vector_base+0xd0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:86
	j freertos_risc_v_trap_handler
1c0004d4 <__irq_vector_base+0xd4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:87
	j freertos_risc_v_trap_handler
1c0004d8 <__irq_vector_base+0xd8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:88
	j freertos_risc_v_trap_handler
1c0004dc <__irq_vector_base+0xdc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:89
	j freertos_risc_v_trap_handler
1c0004e0 <__irq_vector_base+0xe0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:90
	j freertos_risc_v_trap_handler
1c0004e4 <__irq_vector_base+0xe4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:91
	j freertos_risc_v_trap_handler
1c0004e8 <__irq_vector_base+0xe8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:92
	j freertos_risc_v_trap_handler
1c0004ec <__irq_vector_base+0xec> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:93
	j freertos_risc_v_trap_handler
1c0004f0 <__irq_vector_base+0xf0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:94
	j freertos_risc_v_trap_handler
1c0004f4 <__irq_vector_base+0xf4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:95
	j freertos_risc_v_trap_handler
1c0004f8 <__irq_vector_base+0xf8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:96
	j freertos_risc_v_trap_handler
1c0004fc <__irq_vector_base+0xfc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:97
	j freertos_risc_v_trap_handler
1c000500 <__irq_vector_base+0x100> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:98
	j freertos_risc_v_trap_handler
1c000504 <__irq_vector_base+0x104> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:99
	j freertos_risc_v_trap_handler
1c000508 <__irq_vector_base+0x108> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:100
	j freertos_risc_v_trap_handler
1c00050c <__irq_vector_base+0x10c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:101
	j freertos_risc_v_trap_handler
1c000510 <__irq_vector_base+0x110> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:102
	j freertos_risc_v_trap_handler
1c000514 <__irq_vector_base+0x114> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:103
	j freertos_risc_v_trap_handler
1c000518 <__irq_vector_base+0x118> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:104
	j freertos_risc_v_trap_handler
1c00051c <__irq_vector_base+0x11c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:105
	j freertos_risc_v_trap_handler
1c000520 <__irq_vector_base+0x120> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:106
	j freertos_risc_v_trap_handler
1c000524 <__irq_vector_base+0x124> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:107
	j freertos_risc_v_trap_handler
1c000528 <__irq_vector_base+0x128> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:108
	j freertos_risc_v_trap_handler
1c00052c <__irq_vector_base+0x12c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:109
	j freertos_risc_v_trap_handler
1c000530 <__irq_vector_base+0x130> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:110
	j freertos_risc_v_trap_handler
1c000534 <__irq_vector_base+0x134> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:111
	j freertos_risc_v_trap_handler
1c000538 <__irq_vector_base+0x138> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:112
	j freertos_risc_v_trap_handler
1c00053c <__irq_vector_base+0x13c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:113
	j freertos_risc_v_trap_handler
1c000540 <__irq_vector_base+0x140> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:114
	j freertos_risc_v_trap_handler
1c000544 <__irq_vector_base+0x144> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:115
	j freertos_risc_v_trap_handler
1c000548 <__irq_vector_base+0x148> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:116
	j freertos_risc_v_trap_handler
1c00054c <__irq_vector_base+0x14c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:117
	j freertos_risc_v_trap_handler
1c000550 <__irq_vector_base+0x150> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:118
	j freertos_risc_v_trap_handler
1c000554 <__irq_vector_base+0x154> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:119
	j freertos_risc_v_trap_handler
1c000558 <__irq_vector_base+0x158> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:120
	j freertos_risc_v_trap_handler
1c00055c <__irq_vector_base+0x15c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:121
	j freertos_risc_v_trap_handler
1c000560 <__irq_vector_base+0x160> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:122
	j freertos_risc_v_trap_handler
1c000564 <__irq_vector_base+0x164> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:123
	j freertos_risc_v_trap_handler
1c000568 <__irq_vector_base+0x168> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:124
	j freertos_risc_v_trap_handler
1c00056c <__irq_vector_base+0x16c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:125
	j freertos_risc_v_trap_handler
1c000570 <__irq_vector_base+0x170> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:126
	j freertos_risc_v_trap_handler
1c000574 <__irq_vector_base+0x174> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:127
	j freertos_risc_v_trap_handler
1c000578 <__irq_vector_base+0x178> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:128
	j freertos_risc_v_trap_handler
1c00057c <__irq_vector_base+0x17c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:129
	j freertos_risc_v_trap_handler
1c000580 <__irq_vector_base+0x180> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:130
	j freertos_risc_v_trap_handler
1c000584 <__irq_vector_base+0x184> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:131
	j freertos_risc_v_trap_handler
1c000588 <__irq_vector_base+0x188> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:132
	j freertos_risc_v_trap_handler
1c00058c <__irq_vector_base+0x18c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:133
	j freertos_risc_v_trap_handler
1c000590 <__irq_vector_base+0x190> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:134
	j freertos_risc_v_trap_handler
1c000594 <__irq_vector_base+0x194> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:135
	j freertos_risc_v_trap_handler
1c000598 <__irq_vector_base+0x198> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:136
	j freertos_risc_v_trap_handler
1c00059c <__irq_vector_base+0x19c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:137
	j freertos_risc_v_trap_handler
1c0005a0 <__irq_vector_base+0x1a0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:138
	j freertos_risc_v_trap_handler
1c0005a4 <__irq_vector_base+0x1a4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:139
	j freertos_risc_v_trap_handler
1c0005a8 <__irq_vector_base+0x1a8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:140
	j freertos_risc_v_trap_handler
1c0005ac <__irq_vector_base+0x1ac> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:141
	j freertos_risc_v_trap_handler
1c0005b0 <__irq_vector_base+0x1b0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:142
	j freertos_risc_v_trap_handler
1c0005b4 <__irq_vector_base+0x1b4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:143
	j freertos_risc_v_trap_handler
1c0005b8 <__irq_vector_base+0x1b8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:144
	j freertos_risc_v_trap_handler
1c0005bc <__irq_vector_base+0x1bc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:145
	j freertos_risc_v_trap_handler
1c0005c0 <__irq_vector_base+0x1c0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:146
	j freertos_risc_v_trap_handler
1c0005c4 <__irq_vector_base+0x1c4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:147
	j freertos_risc_v_trap_handler
1c0005c8 <__irq_vector_base+0x1c8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:148
	j freertos_risc_v_trap_handler
1c0005cc <__irq_vector_base+0x1cc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:149
	j freertos_risc_v_trap_handler
1c0005d0 <__irq_vector_base+0x1d0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:150
	j freertos_risc_v_trap_handler
1c0005d4 <__irq_vector_base+0x1d4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:151
	j freertos_risc_v_trap_handler
1c0005d8 <__irq_vector_base+0x1d8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:152
	j freertos_risc_v_trap_handler
1c0005dc <__irq_vector_base+0x1dc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:153
	j freertos_risc_v_trap_handler
1c0005e0 <__irq_vector_base+0x1e0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:154
	j freertos_risc_v_trap_handler
1c0005e4 <__irq_vector_base+0x1e4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:155
	j freertos_risc_v_trap_handler
1c0005e8 <__irq_vector_base+0x1e8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:156
	j freertos_risc_v_trap_handler
1c0005ec <__irq_vector_base+0x1ec> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:157
	j freertos_risc_v_trap_handler
1c0005f0 <__irq_vector_base+0x1f0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:158
	j freertos_risc_v_trap_handler
1c0005f4 <__irq_vector_base+0x1f4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:159
	j freertos_risc_v_trap_handler
1c0005f8 <__irq_vector_base+0x1f8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:160
	j freertos_risc_v_trap_handler
1c0005fc <__irq_vector_base+0x1fc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:161
	j freertos_risc_v_trap_handler
1c000600 <__irq_vector_base+0x200> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:162
	j freertos_risc_v_trap_handler
1c000604 <__irq_vector_base+0x204> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:163
	j freertos_risc_v_trap_handler
1c000608 <__irq_vector_base+0x208> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:164
	j freertos_risc_v_trap_handler
1c00060c <__irq_vector_base+0x20c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:165
	j freertos_risc_v_trap_handler
1c000610 <__irq_vector_base+0x210> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:166
	j freertos_risc_v_trap_handler
1c000614 <__irq_vector_base+0x214> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:167
	j freertos_risc_v_trap_handler
1c000618 <__irq_vector_base+0x218> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:168
	j freertos_risc_v_trap_handler
1c00061c <__irq_vector_base+0x21c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:169
	j freertos_risc_v_trap_handler
1c000620 <__irq_vector_base+0x220> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:170
	j freertos_risc_v_trap_handler
1c000624 <__irq_vector_base+0x224> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:171
	j freertos_risc_v_trap_handler
1c000628 <__irq_vector_base+0x228> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:172
	j freertos_risc_v_trap_handler
1c00062c <__irq_vector_base+0x22c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:173
	j freertos_risc_v_trap_handler
1c000630 <__irq_vector_base+0x230> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:174
	j freertos_risc_v_trap_handler
1c000634 <__irq_vector_base+0x234> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:175
	j freertos_risc_v_trap_handler
1c000638 <__irq_vector_base+0x238> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:176
	j freertos_risc_v_trap_handler
1c00063c <__irq_vector_base+0x23c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:177
	j freertos_risc_v_trap_handler
1c000640 <__irq_vector_base+0x240> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:178
	j freertos_risc_v_trap_handler
1c000644 <__irq_vector_base+0x244> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:179
	j freertos_risc_v_trap_handler
1c000648 <__irq_vector_base+0x248> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:180
	j freertos_risc_v_trap_handler
1c00064c <__irq_vector_base+0x24c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:181
	j freertos_risc_v_trap_handler
1c000650 <__irq_vector_base+0x250> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:182
	j freertos_risc_v_trap_handler
1c000654 <__irq_vector_base+0x254> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:183
	j freertos_risc_v_trap_handler
1c000658 <__irq_vector_base+0x258> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:184
	j freertos_risc_v_trap_handler
1c00065c <__irq_vector_base+0x25c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:185
	j freertos_risc_v_trap_handler
1c000660 <__irq_vector_base+0x260> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:186
	j freertos_risc_v_trap_handler
1c000664 <__irq_vector_base+0x264> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:187
	j freertos_risc_v_trap_handler
1c000668 <__irq_vector_base+0x268> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:188
	j freertos_risc_v_trap_handler
1c00066c <__irq_vector_base+0x26c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:189
	j freertos_risc_v_trap_handler
1c000670 <__irq_vector_base+0x270> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:190
	j freertos_risc_v_trap_handler
1c000674 <__irq_vector_base+0x274> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:191
	j freertos_risc_v_trap_handler
1c000678 <__irq_vector_base+0x278> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:192
	j freertos_risc_v_trap_handler
1c00067c <__irq_vector_base+0x27c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:193
	j freertos_risc_v_trap_handler
1c000680 <__irq_vector_base+0x280> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:194
	j freertos_risc_v_trap_handler
1c000684 <__irq_vector_base+0x284> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:195
	j freertos_risc_v_trap_handler
1c000688 <__irq_vector_base+0x288> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:196
	j freertos_risc_v_trap_handler
1c00068c <__irq_vector_base+0x28c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:197
	j freertos_risc_v_trap_handler
1c000690 <__irq_vector_base+0x290> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:198
	j freertos_risc_v_trap_handler
1c000694 <__irq_vector_base+0x294> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:199
	j freertos_risc_v_trap_handler
1c000698 <__irq_vector_base+0x298> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:200
	j freertos_risc_v_trap_handler
1c00069c <__irq_vector_base+0x29c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:201
	j freertos_risc_v_trap_handler
1c0006a0 <__irq_vector_base+0x2a0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:202
	j freertos_risc_v_trap_handler
1c0006a4 <__irq_vector_base+0x2a4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:203
	j freertos_risc_v_trap_handler
1c0006a8 <__irq_vector_base+0x2a8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:204
	j freertos_risc_v_trap_handler
1c0006ac <__irq_vector_base+0x2ac> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:205
	j freertos_risc_v_trap_handler
1c0006b0 <__irq_vector_base+0x2b0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:206
	j freertos_risc_v_trap_handler
1c0006b4 <__irq_vector_base+0x2b4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:207
	j freertos_risc_v_trap_handler
1c0006b8 <__irq_vector_base+0x2b8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:208
	j freertos_risc_v_trap_handler
1c0006bc <__irq_vector_base+0x2bc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:209
	j freertos_risc_v_trap_handler
1c0006c0 <__irq_vector_base+0x2c0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:210
	j freertos_risc_v_trap_handler
1c0006c4 <__irq_vector_base+0x2c4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:211
	j freertos_risc_v_trap_handler
1c0006c8 <__irq_vector_base+0x2c8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:212
	j freertos_risc_v_trap_handler
1c0006cc <__irq_vector_base+0x2cc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:213
	j freertos_risc_v_trap_handler
1c0006d0 <__irq_vector_base+0x2d0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:214
	j freertos_risc_v_trap_handler
1c0006d4 <__irq_vector_base+0x2d4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:215
	j freertos_risc_v_trap_handler
1c0006d8 <__irq_vector_base+0x2d8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:216
	j freertos_risc_v_trap_handler
1c0006dc <__irq_vector_base+0x2dc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:217
	j freertos_risc_v_trap_handler
1c0006e0 <__irq_vector_base+0x2e0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:218
	j freertos_risc_v_trap_handler
1c0006e4 <__irq_vector_base+0x2e4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:219
	j freertos_risc_v_trap_handler
1c0006e8 <__irq_vector_base+0x2e8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:220
	j freertos_risc_v_trap_handler
1c0006ec <__irq_vector_base+0x2ec> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:221
	j freertos_risc_v_trap_handler
1c0006f0 <__irq_vector_base+0x2f0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:222
	j freertos_risc_v_trap_handler
1c0006f4 <__irq_vector_base+0x2f4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:223
	j freertos_risc_v_trap_handler
1c0006f8 <__irq_vector_base+0x2f8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:224
	j freertos_risc_v_trap_handler
1c0006fc <__irq_vector_base+0x2fc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:225
	j freertos_risc_v_trap_handler
1c000700 <__irq_vector_base+0x300> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:226
	j freertos_risc_v_trap_handler
1c000704 <__irq_vector_base+0x304> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:227
	j freertos_risc_v_trap_handler
1c000708 <__irq_vector_base+0x308> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:228
	j freertos_risc_v_trap_handler
1c00070c <__irq_vector_base+0x30c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:229
	j freertos_risc_v_trap_handler
1c000710 <__irq_vector_base+0x310> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:230
	j freertos_risc_v_trap_handler
1c000714 <__irq_vector_base+0x314> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:231
	j freertos_risc_v_trap_handler
1c000718 <__irq_vector_base+0x318> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:232
	j freertos_risc_v_trap_handler
1c00071c <__irq_vector_base+0x31c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:233
	j freertos_risc_v_trap_handler
1c000720 <__irq_vector_base+0x320> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:234
	j freertos_risc_v_trap_handler
1c000724 <__irq_vector_base+0x324> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:235
	j freertos_risc_v_trap_handler
1c000728 <__irq_vector_base+0x328> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:236
	j freertos_risc_v_trap_handler
1c00072c <__irq_vector_base+0x32c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:237
	j freertos_risc_v_trap_handler
1c000730 <__irq_vector_base+0x330> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:238
	j freertos_risc_v_trap_handler
1c000734 <__irq_vector_base+0x334> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:239
	j freertos_risc_v_trap_handler
1c000738 <__irq_vector_base+0x338> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:240
	j freertos_risc_v_trap_handler
1c00073c <__irq_vector_base+0x33c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:241
	j freertos_risc_v_trap_handler
1c000740 <__irq_vector_base+0x340> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:242
	j freertos_risc_v_trap_handler
1c000744 <__irq_vector_base+0x344> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:243
	j freertos_risc_v_trap_handler
1c000748 <__irq_vector_base+0x348> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:244
	j freertos_risc_v_trap_handler
1c00074c <__irq_vector_base+0x34c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:245
	j freertos_risc_v_trap_handler
1c000750 <__irq_vector_base+0x350> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:246
	j freertos_risc_v_trap_handler
1c000754 <__irq_vector_base+0x354> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:247
	j freertos_risc_v_trap_handler
1c000758 <__irq_vector_base+0x358> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:248
	j freertos_risc_v_trap_handler
1c00075c <__irq_vector_base+0x35c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:249
	j freertos_risc_v_trap_handler
1c000760 <__irq_vector_base+0x360> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:250
	j freertos_risc_v_trap_handler
1c000764 <__irq_vector_base+0x364> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:251
	j freertos_risc_v_trap_handler
1c000768 <__irq_vector_base+0x368> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:252
	j freertos_risc_v_trap_handler
1c00076c <__irq_vector_base+0x36c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:253
	j freertos_risc_v_trap_handler
1c000770 <__irq_vector_base+0x370> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:254
	j freertos_risc_v_trap_handler
1c000774 <__irq_vector_base+0x374> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:255
	j freertos_risc_v_trap_handler
1c000778 <__irq_vector_base+0x378> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:256
	j freertos_risc_v_trap_handler
1c00077c <__irq_vector_base+0x37c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:257
	j freertos_risc_v_trap_handler
1c000780 <__irq_vector_base+0x380> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:258
	j freertos_risc_v_trap_handler
1c000784 <__irq_vector_base+0x384> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:259
	j freertos_risc_v_trap_handler
1c000788 <__irq_vector_base+0x388> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:260
	j freertos_risc_v_trap_handler
1c00078c <__irq_vector_base+0x38c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:261
	j freertos_risc_v_trap_handler
1c000790 <__irq_vector_base+0x390> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:262
	j freertos_risc_v_trap_handler
1c000794 <__irq_vector_base+0x394> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:263
	j freertos_risc_v_trap_handler
1c000798 <__irq_vector_base+0x398> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:264
	j freertos_risc_v_trap_handler
1c00079c <__irq_vector_base+0x39c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:265
	j freertos_risc_v_trap_handler
1c0007a0 <__irq_vector_base+0x3a0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:266
	j freertos_risc_v_trap_handler
1c0007a4 <__irq_vector_base+0x3a4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:267
	j freertos_risc_v_trap_handler
1c0007a8 <__irq_vector_base+0x3a8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:268
	j freertos_risc_v_trap_handler
1c0007ac <__irq_vector_base+0x3ac> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:269
	j freertos_risc_v_trap_handler
1c0007b0 <__irq_vector_base+0x3b0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:270
	j freertos_risc_v_trap_handler
1c0007b4 <__irq_vector_base+0x3b4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:271
	j freertos_risc_v_trap_handler
1c0007b8 <__irq_vector_base+0x3b8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:272
	j freertos_risc_v_trap_handler
1c0007bc <__irq_vector_base+0x3bc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:273
	j freertos_risc_v_trap_handler
1c0007c0 <__irq_vector_base+0x3c0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:274
	j freertos_risc_v_trap_handler
1c0007c4 <__irq_vector_base+0x3c4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:275
	j freertos_risc_v_trap_handler
1c0007c8 <__irq_vector_base+0x3c8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:276
	j freertos_risc_v_trap_handler
1c0007cc <__irq_vector_base+0x3cc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:277
	j freertos_risc_v_trap_handler
1c0007d0 <__irq_vector_base+0x3d0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:278
	j freertos_risc_v_trap_handler
1c0007d4 <__irq_vector_base+0x3d4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:279
	j freertos_risc_v_trap_handler
1c0007d8 <__irq_vector_base+0x3d8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:280
	j freertos_risc_v_trap_handler
1c0007dc <__irq_vector_base+0x3dc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:281
	j freertos_risc_v_trap_handler
1c0007e0 <__irq_vector_base+0x3e0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:282
	j freertos_risc_v_trap_handler
1c0007e4 <__irq_vector_base+0x3e4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:283
	j freertos_risc_v_trap_handler
1c0007e8 <__irq_vector_base+0x3e8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:284
	j freertos_risc_v_trap_handler
1c0007ec <__irq_vector_base+0x3ec> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:285
	j freertos_risc_v_trap_handler
1c0007f0 <__irq_vector_base+0x3f0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:286
	j freertos_risc_v_trap_handler
1c0007f4 <__irq_vector_base+0x3f4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:287
	j freertos_risc_v_trap_handler
1c0007f8 <__irq_vector_base+0x3f8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:288
	j freertos_risc_v_trap_handler
1c0007fc <__irq_vector_base+0x3fc> j	1c000900 <freertos_risc_v_trap_handler>

Disassembly of section .text:
_start():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:39

_start:
/* initialize global pointer */
.option push
.option norelax
1:	auipc gp, %pcrel_hi(__global_pointer$)
1c000880 <_start> auipc	gp,0x8
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:40
	addi  gp, gp, %pcrel_lo(1b)
1c000884 <_start+0x4> addi	gp,gp,1508 # 1c008e64 <__global_pointer$>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:43
.option pop

        csrr a0, 0xf14 /* Cluster ID */
1c000888 <_start+0x8> csrr	a0,mhartid
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:44
        andi a1, a0, 0x1f       /* Core ID */
1c00088c <_start+0xc> andi	a1,a0,31
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:45
        srli a0, a0, 5
1c000890 <_start+0x10> srli	a0,a0,0x5
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:48

#if defined(CONFIG_CLUSTER)
        li a2, 31 /* FC_Cluster ID */
1c000892 <_start+0x12> li	a2,31
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:51
        //bne a2, a0, cl_cluster_exec_loop
        .extern cluster_exec_loop
        bne a2, a0, cluster_exec_loop
1c000894 <_start+0x14> beq	a2,a0,1c00089c <_start+0x1c>
1c000898 <_start+0x18> j	1c000e42 <cluster_exec_loop>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:54
#endif
/* initialize stack pointer */
	la sp, __stack_top
1c00089c <_start+0x1c> auipc	sp,0xd
1c0008a0 <_start+0x20> addi	sp,sp,404 # 1c00da30 <__freertos_irq_stack_top>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:57

/* set vector table address */
	la a0, __vector_start
1c0008a4 <_start+0x24> auipc	a0,0x0
1c0008a8 <_start+0x28> addi	a0,a0,-1188 # 1c000400 <__irq_vector_base>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:58
	or a0, a0, 1 /* enable vectored mode (hardcoded anyway for RI5CY) */
1c0008ac <_start+0x2c> ori	a0,a0,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:59
	csrw mtvec, a0
1c0008b0 <_start+0x30> csrw	mtvec,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:61
#ifdef CONFIG_CLIC
	csrw 0x307, a0 /* mtvt=0x307 */ /* enable vectored mode TODO: should be clic mode */
1c0008b4 <_start+0x34> csrw	0x307,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:65
#endif

/* clear the bss segment */
	la t0, __bss_start
1c0008b8 <_start+0x38> auipc	t0,0x8
1c0008bc <_start+0x3c> addi	t0,t0,96 # 1c008918 <pxReadyTasksLists>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:66
        la t1, __bss_end
1c0008c0 <_start+0x40> addi	t1,gp,968 # 1c00922c <__bss_end>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:68
1:
	sw zero,0(t0)
1c0008c4 <_start+0x44> sw	zero,0(t0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:69
	addi t0, t0, 4
1c0008c8 <_start+0x48> addi	t0,t0,4
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:70
	bltu t0, t1, 1b
1c0008ca <_start+0x4a> bltu	t0,t1,1c0008c4 <_start+0x44>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:74

/* new-style constructors and destructors */
#if defined(__PULP_USE_LIBC)
	la a0, __libc_fini_array
1c0008ce <_start+0x4e> auipc	a0,0x2
1c0008d2 <_start+0x52> addi	a0,a0,-718 # 1c002600 <__libc_fini_array>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:75
	call atexit
1c0008d6 <_start+0x56> jal	ra,1c0025c8 <atexit>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:76
	call __libc_init_array
1c0008da <_start+0x5a> jal	ra,1c002662 <__libc_init_array>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:80
#endif

/* call main */
	lw a0, 0(sp)                    /* a0 = argc */
1c0008de <_start+0x5e> lw	a0,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:81
	addi a1, sp, __SIZEOF_POINTER__ /* a1 = argv */
1c0008e0 <_start+0x60> addi	a1,sp,4
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:82
	li a2, 0                        /* a2 = envp = NULL */
1c0008e2 <_start+0x62> li	a2,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:83
	call main
1c0008e4 <_start+0x64> jal	ra,1c002420 <main>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:84
	tail exit
1c0008e8 <_start+0x68> j	1c0025d4 <exit>
_init():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:96
.type   _fini, @function
_init:
_fini:
 /* These don't have to do anything since we use init_array/fini_array. Prevent
    missing symbol error */
	ret
1c0008ec <_fini> ret
	...
freertos_risc_v_trap_handler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:124
/*-----------------------------------------------------------*/

.align 8
.func
freertos_risc_v_trap_handler:
	addi sp, sp, -portCONTEXT_SIZE
1c000900 <freertos_risc_v_trap_handler> addi	sp,sp,-120
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:125
	store_x x1, 1 * portWORD_SIZE( sp )
1c000904 <freertos_risc_v_trap_handler+0x4> sw	ra,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:126
	store_x x5, 2 * portWORD_SIZE( sp )
1c000906 <freertos_risc_v_trap_handler+0x6> sw	t0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:127
	store_x x6, 3 * portWORD_SIZE( sp )
1c000908 <freertos_risc_v_trap_handler+0x8> sw	t1,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:128
	store_x x7, 4 * portWORD_SIZE( sp )
1c00090a <freertos_risc_v_trap_handler+0xa> sw	t2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:129
	store_x x8, 5 * portWORD_SIZE( sp )
1c00090c <freertos_risc_v_trap_handler+0xc> sw	s0,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:130
	store_x x9, 6 * portWORD_SIZE( sp )
1c00090e <freertos_risc_v_trap_handler+0xe> sw	s1,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:131
	store_x x10, 7 * portWORD_SIZE( sp )
1c000910 <freertos_risc_v_trap_handler+0x10> sw	a0,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:132
	store_x x11, 8 * portWORD_SIZE( sp )
1c000912 <freertos_risc_v_trap_handler+0x12> sw	a1,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:133
	store_x x12, 9 * portWORD_SIZE( sp )
1c000914 <freertos_risc_v_trap_handler+0x14> sw	a2,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:134
	store_x x13, 10 * portWORD_SIZE( sp )
1c000916 <freertos_risc_v_trap_handler+0x16> sw	a3,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:135
	store_x x14, 11 * portWORD_SIZE( sp )
1c000918 <freertos_risc_v_trap_handler+0x18> sw	a4,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:136
	store_x x15, 12 * portWORD_SIZE( sp )
1c00091a <freertos_risc_v_trap_handler+0x1a> sw	a5,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:138
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	store_x x16, 13 * portWORD_SIZE( sp )
1c00091c <freertos_risc_v_trap_handler+0x1c> sw	a6,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:139
	store_x x17, 14 * portWORD_SIZE( sp )
1c00091e <freertos_risc_v_trap_handler+0x1e> sw	a7,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:140
	store_x x18, 15 * portWORD_SIZE( sp )
1c000920 <freertos_risc_v_trap_handler+0x20> sw	s2,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:141
	store_x x19, 16 * portWORD_SIZE( sp )
1c000922 <freertos_risc_v_trap_handler+0x22> sw	s3,64(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:142
	store_x x20, 17 * portWORD_SIZE( sp )
1c000924 <freertos_risc_v_trap_handler+0x24> sw	s4,68(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:143
	store_x x21, 18 * portWORD_SIZE( sp )
1c000926 <freertos_risc_v_trap_handler+0x26> sw	s5,72(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:144
	store_x x22, 19 * portWORD_SIZE( sp )
1c000928 <freertos_risc_v_trap_handler+0x28> sw	s6,76(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:145
	store_x x23, 20 * portWORD_SIZE( sp )
1c00092a <freertos_risc_v_trap_handler+0x2a> sw	s7,80(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:146
	store_x x24, 21 * portWORD_SIZE( sp )
1c00092c <freertos_risc_v_trap_handler+0x2c> sw	s8,84(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:147
	store_x x25, 22 * portWORD_SIZE( sp )
1c00092e <freertos_risc_v_trap_handler+0x2e> sw	s9,88(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:148
	store_x x26, 23 * portWORD_SIZE( sp )
1c000930 <freertos_risc_v_trap_handler+0x30> sw	s10,92(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:149
	store_x x27, 24 * portWORD_SIZE( sp )
1c000932 <freertos_risc_v_trap_handler+0x32> sw	s11,96(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:150
	store_x x28, 25 * portWORD_SIZE( sp )
1c000934 <freertos_risc_v_trap_handler+0x34> sw	t3,100(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:151
	store_x x29, 26 * portWORD_SIZE( sp )
1c000936 <freertos_risc_v_trap_handler+0x36> sw	t4,104(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:152
	store_x x30, 27 * portWORD_SIZE( sp )
1c000938 <freertos_risc_v_trap_handler+0x38> sw	t5,108(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:153
	store_x x31, 28 * portWORD_SIZE( sp )
1c00093a <freertos_risc_v_trap_handler+0x3a> sw	t6,112(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:156
#endif
	
	csrr t0, mstatus					/* Required for MPIE bit. */
1c00093c <freertos_risc_v_trap_handler+0x3c> csrr	t0,mstatus
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:157
	store_x t0, 29 * portWORD_SIZE( sp )
1c000940 <freertos_risc_v_trap_handler+0x40> sw	t0,116(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:159
#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmSAVE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to save any registers unique to the RISC-V implementation. */
1c000942 <freertos_risc_v_trap_handler+0x42> addi	sp,sp,-24
1c000944 <freertos_risc_v_trap_handler+0x44> csrr	t0,lpstart0
1c000948 <freertos_risc_v_trap_handler+0x48> csrr	t1,lpend0
1c00094c <freertos_risc_v_trap_handler+0x4c> csrr	t2,lpcount0
1c000950 <freertos_risc_v_trap_handler+0x50> csrr	t3,lpstart1
1c000954 <freertos_risc_v_trap_handler+0x54> csrr	t4,lpend1
1c000958 <freertos_risc_v_trap_handler+0x58> csrr	t5,lpcount1
1c00095c <freertos_risc_v_trap_handler+0x5c> sw	t0,4(sp)
1c00095e <freertos_risc_v_trap_handler+0x5e> sw	t1,8(sp)
1c000960 <freertos_risc_v_trap_handler+0x60> sw	t2,12(sp)
1c000962 <freertos_risc_v_trap_handler+0x62> sw	t3,16(sp)
1c000964 <freertos_risc_v_trap_handler+0x64> sw	t4,20(sp)
1c000966 <freertos_risc_v_trap_handler+0x66> sw	t5,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:162
#endif

	load_x  t0, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000968 <freertos_risc_v_trap_handler+0x68> lw	t0,-148(gp) # 1c008dd0 <pxCurrentTCB>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:163
	store_x  sp, 0( t0 )				/* Write sp to first TCB member. */
1c00096c <freertos_risc_v_trap_handler+0x6c> sw	sp,0(t0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:165

	csrr a0, mcause
1c000970 <freertos_risc_v_trap_handler+0x70> csrr	a0,mcause
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:166
	csrr a1, mepc
1c000974 <freertos_risc_v_trap_handler+0x74> csrr	a1,mepc
test_if_asynchronous():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:169

test_if_asynchronous:
	srli a2, a0, __riscv_xlen - 1		/* MSB of mcause is 1 if handing an asynchronous interrupt - shift to LSB to clear other bits. */
1c000978 <test_if_asynchronous> srli	a2,a0,0x1f
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:170
	beq a2, x0, handle_synchronous		/* Branch past interrupt handing if not asynchronous. */
1c00097c <test_if_asynchronous+0x4> beqz	a2,1c00098e <handle_synchronous>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:171
	store_x a1, 0( sp )					/* Asynch so save unmodified exception return address. */
1c00097e <test_if_asynchronous+0x6> sw	a1,0(sp)
handle_asynchronous():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:229
		addi t1, t1, 4					/* 0x80000007 + 4 = 0x8000000b == Machine external interrupt. */
		bne a0, t1, as_yet_unhandled	/* Something as yet unhandled. */

#endif /* portasmHAS_MTIME */

	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
1c000980 <handle_asynchronous> auipc	sp,0x8
1c000984 <handle_asynchronous+0x4> lw	sp,-112(sp) # 1c008910 <xISRStackTop>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:230
	jal portasmHANDLE_INTERRUPT			/* Jump to the interrupt handler if there is no CLINT or if there is a CLINT and it has been determined that an external interrupt is pending. */
1c000988 <handle_asynchronous+0x8> jal	ra,1c0016c6 <vSystemIrqHandler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:231
	j processed_source
1c00098c <handle_asynchronous+0xc> j	1c0009be <processed_source>
handle_synchronous():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:234

handle_synchronous:
	addi a1, a1, 4						/* Synchronous so updated exception return address to the instruction after the instruction that generated the exeption. */
1c00098e <handle_synchronous> addi	a1,a1,4
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:235
	store_x a1, 0( sp )					/* Save updated exception return address. */
1c000990 <handle_synchronous+0x2> sw	a1,0(sp)
test_if_environment_call():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:238

test_if_environment_call:
	li t0, 11 							/* 11 == environment call. */
1c000992 <test_if_environment_call> li	t0,11
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:239
	andi  a0, a0, 0x7ff					/* with the CLIC the lower 12 bits are the exception code and upper bits might be clobbered mpil, mie etc. */	
1c000994 <test_if_environment_call+0x2> andi	a0,a0,2047
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:240
	bne a0, t0, is_exception			/* Not an M environment call, so some other exception. */
1c000998 <test_if_environment_call+0x6> bne	a0,t0,1c0009aa <is_exception>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:241
	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
1c00099c <test_if_environment_call+0xa> auipc	sp,0x8
1c0009a0 <test_if_environment_call+0xe> lw	sp,-140(sp) # 1c008910 <xISRStackTop>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:242
	jal vTaskSwitchContext
1c0009a4 <test_if_environment_call+0x12> jal	ra,1c00121e <vTaskSwitchContext>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:243
	j processed_source
1c0009a8 <test_if_environment_call+0x16> j	1c0009be <processed_source>
is_exception():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:246

is_exception:
	csrr t0, mcause						/* For viewing in the debugger only. */
1c0009aa <is_exception> csrr	t0,mcause
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:247
	csrr t1, mepc						/* For viewing in the debugger only */
1c0009ae <is_exception+0x4> csrr	t1,mepc
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:248
	csrr t2, mstatus
1c0009b2 <is_exception+0x8> csrr	t2,mstatus
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:249
	j is_exception						/* No other exceptions handled yet. */
1c0009b6 <is_exception+0xc> j	1c0009aa <is_exception>
as_yet_unhandled():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:252

as_yet_unhandled:
	csrr t0, mcause						/* For viewing in the debugger only. */
1c0009b8 <as_yet_unhandled> csrr	t0,mcause
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:253
	j as_yet_unhandled
1c0009bc <as_yet_unhandled+0x4> j	1c0009b8 <as_yet_unhandled>
processed_source():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:256

processed_source:
	load_x  t1, pxCurrentTCB			/* Load pxCurrentTCB. */
1c0009be <processed_source> lw	t1,-148(gp) # 1c008dd0 <pxCurrentTCB>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:257
	load_x  sp, 0( t1 )				 	/* Read sp from first TCB member. */
1c0009c2 <processed_source+0x4> lw	sp,0(t1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:260

	/* Load mret with the address of the next instruction in the task to run next. */
	load_x t0, 0( sp )
1c0009c6 <processed_source+0x8> lw	t0,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:261
	csrw mepc, t0
1c0009c8 <processed_source+0xa> csrw	mepc,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:264

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c0009cc <processed_source+0xe> lw	t0,4(sp)
1c0009ce <processed_source+0x10> lw	t1,8(sp)
1c0009d0 <processed_source+0x12> lw	t2,12(sp)
1c0009d2 <processed_source+0x14> lw	t3,16(sp)
1c0009d4 <processed_source+0x16> lw	t4,20(sp)
1c0009d6 <processed_source+0x18> lw	t5,24(sp)
1c0009d8 <processed_source+0x1a> csrw	lpstart0,t0
1c0009dc <processed_source+0x1e> csrw	lpend0,t1
1c0009e0 <processed_source+0x22> csrw	lpcount0,t2
1c0009e4 <processed_source+0x26> csrw	lpstart1,t3
1c0009e8 <processed_source+0x2a> csrw	lpend1,t4
1c0009ec <processed_source+0x2e> csrw	lpcount1,t5
1c0009f0 <processed_source+0x32> addi	sp,sp,24
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:268
#endif

	/* Load mstatus with the interrupt enable bits used by the task. */
	load_x  t0, 29 * portWORD_SIZE( sp )
1c0009f2 <processed_source+0x34> lw	t0,116(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:269
	csrw mstatus, t0						/* Required for MPIE bit. */
1c0009f4 <processed_source+0x36> csrw	mstatus,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:271

	load_x  x1, 1 * portWORD_SIZE( sp )
1c0009f8 <processed_source+0x3a> lw	ra,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:272
	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
1c0009fa <processed_source+0x3c> lw	t0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:273
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c0009fc <processed_source+0x3e> lw	t1,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:274
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c0009fe <processed_source+0x40> lw	t2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:275
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c000a00 <processed_source+0x42> lw	s0,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:276
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c000a02 <processed_source+0x44> lw	s1,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:277
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c000a04 <processed_source+0x46> lw	a0,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:278
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c000a06 <processed_source+0x48> lw	a1,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:279
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c000a08 <processed_source+0x4a> lw	a2,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:280
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c000a0a <processed_source+0x4c> lw	a3,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:281
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c000a0c <processed_source+0x4e> lw	a4,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:282
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c000a0e <processed_source+0x50> lw	a5,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:284
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c000a10 <processed_source+0x52> lw	a6,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:285
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c000a12 <processed_source+0x54> lw	a7,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:286
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c000a14 <processed_source+0x56> lw	s2,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:287
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c000a16 <processed_source+0x58> lw	s3,64(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:288
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c000a18 <processed_source+0x5a> lw	s4,68(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:289
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c000a1a <processed_source+0x5c> lw	s5,72(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:290
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c000a1c <processed_source+0x5e> lw	s6,76(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:291
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c000a1e <processed_source+0x60> lw	s7,80(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:292
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c000a20 <processed_source+0x62> lw	s8,84(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:293
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c000a22 <processed_source+0x64> lw	s9,88(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:294
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c000a24 <processed_source+0x66> lw	s10,92(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:295
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c000a26 <processed_source+0x68> lw	s11,96(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:296
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c000a28 <processed_source+0x6a> lw	t3,100(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:297
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c000a2a <processed_source+0x6c> lw	t4,104(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:298
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c000a2c <processed_source+0x6e> lw	t5,108(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:299
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c000a2e <processed_source+0x70> lw	t6,112(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:301
#endif
	addi sp, sp, portCONTEXT_SIZE
1c000a30 <processed_source+0x72> addi	sp,sp,120
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:303

	mret
1c000a34 <processed_source+0x76> mret
1c000a38 <processed_source+0x7a> nop
1c000a3c <processed_source+0x7e> nop
1c000a40 <processed_source+0x82> nop
1c000a44 <processed_source+0x86> nop
1c000a48 <processed_source+0x8a> nop
1c000a4c <processed_source+0x8e> nop
1c000a50 <processed_source+0x92> nop
1c000a54 <processed_source+0x96> nop
1c000a58 <processed_source+0x9a> nop
1c000a5c <processed_source+0x9e> nop
1c000a60 <processed_source+0xa2> nop
1c000a64 <processed_source+0xa6> nop
1c000a68 <processed_source+0xaa> nop
1c000a6c <processed_source+0xae> nop
1c000a70 <processed_source+0xb2> nop
1c000a74 <processed_source+0xb6> nop
1c000a78 <processed_source+0xba> nop
1c000a7c <processed_source+0xbe> nop
1c000a80 <processed_source+0xc2> nop
1c000a84 <processed_source+0xc6> nop
1c000a88 <processed_source+0xca> nop
1c000a8c <processed_source+0xce> nop
1c000a90 <processed_source+0xd2> nop
1c000a94 <processed_source+0xd6> nop
1c000a98 <processed_source+0xda> nop
1c000a9c <processed_source+0xde> nop
1c000aa0 <processed_source+0xe2> nop
1c000aa4 <processed_source+0xe6> nop
1c000aa8 <processed_source+0xea> nop
1c000aac <processed_source+0xee> nop
1c000ab0 <processed_source+0xf2> nop
1c000ab4 <processed_source+0xf6> nop
1c000ab8 <processed_source+0xfa> nop
1c000abc <processed_source+0xfe> nop
1c000ac0 <processed_source+0x102> nop
1c000ac4 <processed_source+0x106> nop
1c000ac8 <processed_source+0x10a> nop
1c000acc <processed_source+0x10e> nop
1c000ad0 <processed_source+0x112> nop
1c000ad4 <processed_source+0x116> nop
1c000ad8 <processed_source+0x11a> nop
1c000adc <processed_source+0x11e> nop
1c000ae0 <processed_source+0x122> nop
1c000ae4 <processed_source+0x126> nop
1c000ae8 <processed_source+0x12a> nop
1c000aec <processed_source+0x12e> nop
1c000af0 <processed_source+0x132> nop
1c000af4 <processed_source+0x136> nop
1c000af8 <processed_source+0x13a> nop
1c000afc <processed_source+0x13e> nop
freertos_risc_v_ctxt_handler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:311

/* for timer interrupt vectored context switches */
.align 8
.func
freertos_risc_v_ctxt_handler:
	addi sp, sp, -portCONTEXT_SIZE
1c000b00 <freertos_risc_v_ctxt_handler> addi	sp,sp,-120
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:312
	store_x x1, 1 * portWORD_SIZE( sp )
1c000b04 <freertos_risc_v_ctxt_handler+0x4> sw	ra,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:313
	store_x x5, 2 * portWORD_SIZE( sp )
1c000b06 <freertos_risc_v_ctxt_handler+0x6> sw	t0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:314
	store_x x6, 3 * portWORD_SIZE( sp )
1c000b08 <freertos_risc_v_ctxt_handler+0x8> sw	t1,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:315
	store_x x7, 4 * portWORD_SIZE( sp )
1c000b0a <freertos_risc_v_ctxt_handler+0xa> sw	t2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:316
	store_x x8, 5 * portWORD_SIZE( sp )
1c000b0c <freertos_risc_v_ctxt_handler+0xc> sw	s0,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:317
	store_x x9, 6 * portWORD_SIZE( sp )
1c000b0e <freertos_risc_v_ctxt_handler+0xe> sw	s1,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:318
	store_x x10, 7 * portWORD_SIZE( sp )
1c000b10 <freertos_risc_v_ctxt_handler+0x10> sw	a0,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:319
	store_x x11, 8 * portWORD_SIZE( sp )
1c000b12 <freertos_risc_v_ctxt_handler+0x12> sw	a1,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:320
	store_x x12, 9 * portWORD_SIZE( sp )
1c000b14 <freertos_risc_v_ctxt_handler+0x14> sw	a2,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:321
	store_x x13, 10 * portWORD_SIZE( sp )
1c000b16 <freertos_risc_v_ctxt_handler+0x16> sw	a3,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:322
	store_x x14, 11 * portWORD_SIZE( sp )
1c000b18 <freertos_risc_v_ctxt_handler+0x18> sw	a4,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:323
	store_x x15, 12 * portWORD_SIZE( sp )
1c000b1a <freertos_risc_v_ctxt_handler+0x1a> sw	a5,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:325
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	store_x x16, 13 * portWORD_SIZE( sp )
1c000b1c <freertos_risc_v_ctxt_handler+0x1c> sw	a6,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:326
	store_x x17, 14 * portWORD_SIZE( sp )
1c000b1e <freertos_risc_v_ctxt_handler+0x1e> sw	a7,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:327
	store_x x18, 15 * portWORD_SIZE( sp )
1c000b20 <freertos_risc_v_ctxt_handler+0x20> sw	s2,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:328
	store_x x19, 16 * portWORD_SIZE( sp )
1c000b22 <freertos_risc_v_ctxt_handler+0x22> sw	s3,64(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:329
	store_x x20, 17 * portWORD_SIZE( sp )
1c000b24 <freertos_risc_v_ctxt_handler+0x24> sw	s4,68(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:330
	store_x x21, 18 * portWORD_SIZE( sp )
1c000b26 <freertos_risc_v_ctxt_handler+0x26> sw	s5,72(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:331
	store_x x22, 19 * portWORD_SIZE( sp )
1c000b28 <freertos_risc_v_ctxt_handler+0x28> sw	s6,76(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:332
	store_x x23, 20 * portWORD_SIZE( sp )
1c000b2a <freertos_risc_v_ctxt_handler+0x2a> sw	s7,80(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:333
	store_x x24, 21 * portWORD_SIZE( sp )
1c000b2c <freertos_risc_v_ctxt_handler+0x2c> sw	s8,84(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:334
	store_x x25, 22 * portWORD_SIZE( sp )
1c000b2e <freertos_risc_v_ctxt_handler+0x2e> sw	s9,88(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:335
	store_x x26, 23 * portWORD_SIZE( sp )
1c000b30 <freertos_risc_v_ctxt_handler+0x30> sw	s10,92(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:336
	store_x x27, 24 * portWORD_SIZE( sp )
1c000b32 <freertos_risc_v_ctxt_handler+0x32> sw	s11,96(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:337
	store_x x28, 25 * portWORD_SIZE( sp )
1c000b34 <freertos_risc_v_ctxt_handler+0x34> sw	t3,100(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:338
	store_x x29, 26 * portWORD_SIZE( sp )
1c000b36 <freertos_risc_v_ctxt_handler+0x36> sw	t4,104(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:339
	store_x x30, 27 * portWORD_SIZE( sp )
1c000b38 <freertos_risc_v_ctxt_handler+0x38> sw	t5,108(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:340
	store_x x31, 28 * portWORD_SIZE( sp )
1c000b3a <freertos_risc_v_ctxt_handler+0x3a> sw	t6,112(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:343
#endif
	
	csrr t0, mstatus					/* Required for MPIE bit. */
1c000b3c <freertos_risc_v_ctxt_handler+0x3c> csrr	t0,mstatus
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:344
	store_x t0, 29 * portWORD_SIZE( sp )
1c000b40 <freertos_risc_v_ctxt_handler+0x40> sw	t0,116(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:346
#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmSAVE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to save any registers unique to the RISC-V implementation. */
1c000b42 <freertos_risc_v_ctxt_handler+0x42> addi	sp,sp,-24
1c000b44 <freertos_risc_v_ctxt_handler+0x44> csrr	t0,lpstart0
1c000b48 <freertos_risc_v_ctxt_handler+0x48> csrr	t1,lpend0
1c000b4c <freertos_risc_v_ctxt_handler+0x4c> csrr	t2,lpcount0
1c000b50 <freertos_risc_v_ctxt_handler+0x50> csrr	t3,lpstart1
1c000b54 <freertos_risc_v_ctxt_handler+0x54> csrr	t4,lpend1
1c000b58 <freertos_risc_v_ctxt_handler+0x58> csrr	t5,lpcount1
1c000b5c <freertos_risc_v_ctxt_handler+0x5c> sw	t0,4(sp)
1c000b5e <freertos_risc_v_ctxt_handler+0x5e> sw	t1,8(sp)
1c000b60 <freertos_risc_v_ctxt_handler+0x60> sw	t2,12(sp)
1c000b62 <freertos_risc_v_ctxt_handler+0x62> sw	t3,16(sp)
1c000b64 <freertos_risc_v_ctxt_handler+0x64> sw	t4,20(sp)
1c000b66 <freertos_risc_v_ctxt_handler+0x66> sw	t5,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:349
#endif

	load_x  t0, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000b68 <freertos_risc_v_ctxt_handler+0x68> lw	t0,-148(gp) # 1c008dd0 <pxCurrentTCB>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:350
	store_x  sp, 0( t0 )				/* Write sp to first TCB member. */
1c000b6c <freertos_risc_v_ctxt_handler+0x6c> sw	sp,0(t0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:352

	csrr a0, mcause
1c000b70 <freertos_risc_v_ctxt_handler+0x70> csrr	a0,mcause
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:353
	csrr a1, mepc
1c000b74 <freertos_risc_v_ctxt_handler+0x74> csrr	a1,mepc
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:355

	store_x a1, 0( sp )				/* Asynch so save unmodified exception return address. */
1c000b78 <freertos_risc_v_ctxt_handler+0x78> sw	a1,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:357

	load_x sp, xISRStackTop			/* Switch to ISR stack before function call. */
1c000b7a <freertos_risc_v_ctxt_handler+0x7a> auipc	sp,0x8
1c000b7e <freertos_risc_v_ctxt_handler+0x7e> lw	sp,-618(sp) # 1c008910 <xISRStackTop>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:358
	jal xTaskIncrementTick
1c000b82 <freertos_risc_v_ctxt_handler+0x82> jal	ra,1c0010de <xTaskIncrementTick>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:359
	beqz a0, processed_source		/* Don't switch context if incrementing tick didn't unblock a task. */
1c000b86 <freertos_risc_v_ctxt_handler+0x86> beqz	a0,1c0009be <processed_source>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:360
	jal vTaskSwitchContext
1c000b8a <freertos_risc_v_ctxt_handler+0x8a> jal	ra,1c00121e <vTaskSwitchContext>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:362

	load_x  t1, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000b8e <freertos_risc_v_ctxt_handler+0x8e> lw	t1,-148(gp) # 1c008dd0 <pxCurrentTCB>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:363
	load_x  sp, 0( t1 )				 	/* Read sp from first TCB member. */
1c000b92 <freertos_risc_v_ctxt_handler+0x92> lw	sp,0(t1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:366

	/* Load mret with the address of the next instruction in the task to run next. */
	load_x t0, 0( sp )
1c000b96 <freertos_risc_v_ctxt_handler+0x96> lw	t0,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:367
	csrw mepc, t0
1c000b98 <freertos_risc_v_ctxt_handler+0x98> csrw	mepc,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:370

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c000b9c <freertos_risc_v_ctxt_handler+0x9c> lw	t0,4(sp)
1c000b9e <freertos_risc_v_ctxt_handler+0x9e> lw	t1,8(sp)
1c000ba0 <freertos_risc_v_ctxt_handler+0xa0> lw	t2,12(sp)
1c000ba2 <freertos_risc_v_ctxt_handler+0xa2> lw	t3,16(sp)
1c000ba4 <freertos_risc_v_ctxt_handler+0xa4> lw	t4,20(sp)
1c000ba6 <freertos_risc_v_ctxt_handler+0xa6> lw	t5,24(sp)
1c000ba8 <freertos_risc_v_ctxt_handler+0xa8> csrw	lpstart0,t0
1c000bac <freertos_risc_v_ctxt_handler+0xac> csrw	lpend0,t1
1c000bb0 <freertos_risc_v_ctxt_handler+0xb0> csrw	lpcount0,t2
1c000bb4 <freertos_risc_v_ctxt_handler+0xb4> csrw	lpstart1,t3
1c000bb8 <freertos_risc_v_ctxt_handler+0xb8> csrw	lpend1,t4
1c000bbc <freertos_risc_v_ctxt_handler+0xbc> csrw	lpcount1,t5
1c000bc0 <freertos_risc_v_ctxt_handler+0xc0> addi	sp,sp,24
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:374
#endif

	/* Load mstatus with the interrupt enable bits used by the task. */
	load_x  t0, 29 * portWORD_SIZE( sp )
1c000bc2 <freertos_risc_v_ctxt_handler+0xc2> lw	t0,116(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:375
	csrw mstatus, t0						/* Required for MPIE bit. */
1c000bc4 <freertos_risc_v_ctxt_handler+0xc4> csrw	mstatus,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:377

	load_x  x1, 1 * portWORD_SIZE( sp )
1c000bc8 <freertos_risc_v_ctxt_handler+0xc8> lw	ra,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:378
	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
1c000bca <freertos_risc_v_ctxt_handler+0xca> lw	t0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:379
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c000bcc <freertos_risc_v_ctxt_handler+0xcc> lw	t1,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:380
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c000bce <freertos_risc_v_ctxt_handler+0xce> lw	t2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:381
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c000bd0 <freertos_risc_v_ctxt_handler+0xd0> lw	s0,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:382
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c000bd2 <freertos_risc_v_ctxt_handler+0xd2> lw	s1,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:383
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c000bd4 <freertos_risc_v_ctxt_handler+0xd4> lw	a0,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:384
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c000bd6 <freertos_risc_v_ctxt_handler+0xd6> lw	a1,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:385
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c000bd8 <freertos_risc_v_ctxt_handler+0xd8> lw	a2,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:386
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c000bda <freertos_risc_v_ctxt_handler+0xda> lw	a3,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:387
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c000bdc <freertos_risc_v_ctxt_handler+0xdc> lw	a4,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:388
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c000bde <freertos_risc_v_ctxt_handler+0xde> lw	a5,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:390
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c000be0 <freertos_risc_v_ctxt_handler+0xe0> lw	a6,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:391
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c000be2 <freertos_risc_v_ctxt_handler+0xe2> lw	a7,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:392
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c000be4 <freertos_risc_v_ctxt_handler+0xe4> lw	s2,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:393
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c000be6 <freertos_risc_v_ctxt_handler+0xe6> lw	s3,64(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:394
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c000be8 <freertos_risc_v_ctxt_handler+0xe8> lw	s4,68(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:395
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c000bea <freertos_risc_v_ctxt_handler+0xea> lw	s5,72(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:396
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c000bec <freertos_risc_v_ctxt_handler+0xec> lw	s6,76(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:397
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c000bee <freertos_risc_v_ctxt_handler+0xee> lw	s7,80(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:398
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c000bf0 <freertos_risc_v_ctxt_handler+0xf0> lw	s8,84(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:399
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c000bf2 <freertos_risc_v_ctxt_handler+0xf2> lw	s9,88(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:400
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c000bf4 <freertos_risc_v_ctxt_handler+0xf4> lw	s10,92(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:401
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c000bf6 <freertos_risc_v_ctxt_handler+0xf6> lw	s11,96(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:402
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c000bf8 <freertos_risc_v_ctxt_handler+0xf8> lw	t3,100(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:403
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c000bfa <freertos_risc_v_ctxt_handler+0xfa> lw	t4,104(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:404
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c000bfc <freertos_risc_v_ctxt_handler+0xfc> lw	t5,108(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:405
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c000bfe <freertos_risc_v_ctxt_handler+0xfe> lw	t6,112(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:407
#endif
	addi sp, sp, portCONTEXT_SIZE
1c000c00 <freertos_risc_v_ctxt_handler+0x100> addi	sp,sp,120
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:409

	mret
1c000c04 <freertos_risc_v_ctxt_handler+0x104> mret
1c000c08 <freertos_risc_v_ctxt_handler+0x108> nop
1c000c0c <freertos_risc_v_ctxt_handler+0x10c> nop
1c000c10 <freertos_risc_v_ctxt_handler+0x110> nop
1c000c14 <freertos_risc_v_ctxt_handler+0x114> nop
1c000c18 <freertos_risc_v_ctxt_handler+0x118> nop
1c000c1c <freertos_risc_v_ctxt_handler+0x11c> nop
1c000c20 <freertos_risc_v_ctxt_handler+0x120> nop
1c000c24 <freertos_risc_v_ctxt_handler+0x124> nop
1c000c28 <freertos_risc_v_ctxt_handler+0x128> nop
1c000c2c <freertos_risc_v_ctxt_handler+0x12c> nop
1c000c30 <freertos_risc_v_ctxt_handler+0x130> nop
1c000c34 <freertos_risc_v_ctxt_handler+0x134> nop
1c000c38 <freertos_risc_v_ctxt_handler+0x138> nop
1c000c3c <freertos_risc_v_ctxt_handler+0x13c> nop
1c000c40 <freertos_risc_v_ctxt_handler+0x140> nop
1c000c44 <freertos_risc_v_ctxt_handler+0x144> nop
1c000c48 <freertos_risc_v_ctxt_handler+0x148> nop
1c000c4c <freertos_risc_v_ctxt_handler+0x14c> nop
1c000c50 <freertos_risc_v_ctxt_handler+0x150> nop
1c000c54 <freertos_risc_v_ctxt_handler+0x154> nop
1c000c58 <freertos_risc_v_ctxt_handler+0x158> nop
1c000c5c <freertos_risc_v_ctxt_handler+0x15c> nop
1c000c60 <freertos_risc_v_ctxt_handler+0x160> nop
1c000c64 <freertos_risc_v_ctxt_handler+0x164> nop
1c000c68 <freertos_risc_v_ctxt_handler+0x168> nop
1c000c6c <freertos_risc_v_ctxt_handler+0x16c> nop
1c000c70 <freertos_risc_v_ctxt_handler+0x170> nop
1c000c74 <freertos_risc_v_ctxt_handler+0x174> nop
1c000c78 <freertos_risc_v_ctxt_handler+0x178> nop
1c000c7c <freertos_risc_v_ctxt_handler+0x17c> nop
1c000c80 <freertos_risc_v_ctxt_handler+0x180> nop
1c000c84 <freertos_risc_v_ctxt_handler+0x184> nop
1c000c88 <freertos_risc_v_ctxt_handler+0x188> nop
1c000c8c <freertos_risc_v_ctxt_handler+0x18c> nop
1c000c90 <freertos_risc_v_ctxt_handler+0x190> nop
1c000c94 <freertos_risc_v_ctxt_handler+0x194> nop
1c000c98 <freertos_risc_v_ctxt_handler+0x198> nop
1c000c9c <freertos_risc_v_ctxt_handler+0x19c> nop
1c000ca0 <freertos_risc_v_ctxt_handler+0x1a0> nop
1c000ca4 <freertos_risc_v_ctxt_handler+0x1a4> nop
1c000ca8 <freertos_risc_v_ctxt_handler+0x1a8> nop
1c000cac <freertos_risc_v_ctxt_handler+0x1ac> nop
1c000cb0 <freertos_risc_v_ctxt_handler+0x1b0> nop
1c000cb4 <freertos_risc_v_ctxt_handler+0x1b4> nop
1c000cb8 <freertos_risc_v_ctxt_handler+0x1b8> nop
1c000cbc <freertos_risc_v_ctxt_handler+0x1bc> nop
1c000cc0 <freertos_risc_v_ctxt_handler+0x1c0> nop
1c000cc4 <freertos_risc_v_ctxt_handler+0x1c4> nop
1c000cc8 <freertos_risc_v_ctxt_handler+0x1c8> nop
1c000ccc <freertos_risc_v_ctxt_handler+0x1cc> nop
1c000cd0 <freertos_risc_v_ctxt_handler+0x1d0> nop
1c000cd4 <freertos_risc_v_ctxt_handler+0x1d4> nop
1c000cd8 <freertos_risc_v_ctxt_handler+0x1d8> nop
1c000cdc <freertos_risc_v_ctxt_handler+0x1dc> nop
1c000ce0 <freertos_risc_v_ctxt_handler+0x1e0> nop
1c000ce4 <freertos_risc_v_ctxt_handler+0x1e4> nop
1c000ce8 <freertos_risc_v_ctxt_handler+0x1e8> nop
1c000cec <freertos_risc_v_ctxt_handler+0x1ec> nop
1c000cf0 <freertos_risc_v_ctxt_handler+0x1f0> nop
1c000cf4 <freertos_risc_v_ctxt_handler+0x1f4> nop
1c000cf8 <freertos_risc_v_ctxt_handler+0x1f8> nop
1c000cfc <freertos_risc_v_ctxt_handler+0x1fc> nop
xPortStartFirstTask():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:426
	outside of this file. */
	la t0, freertos_risc_v_trap_handler
	csrw mtvec, t0
#endif /* portasmHAS_CLILNT */

	load_x  sp, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000d00 <xPortStartFirstTask> lw	sp,-148(gp) # 1c008dd0 <pxCurrentTCB>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:427
	load_x  sp, 0( sp )				 	/* Read sp from first TCB member. */
1c000d04 <xPortStartFirstTask+0x4> lw	sp,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:429

	load_x  x1, 0( sp ) /* Note for starting the scheduler the exception return address is used as the function return address. */
1c000d06 <xPortStartFirstTask+0x6> lw	ra,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:432

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c000d08 <xPortStartFirstTask+0x8> lw	t0,4(sp)
1c000d0a <xPortStartFirstTask+0xa> lw	t1,8(sp)
1c000d0c <xPortStartFirstTask+0xc> lw	t2,12(sp)
1c000d0e <xPortStartFirstTask+0xe> lw	t3,16(sp)
1c000d10 <xPortStartFirstTask+0x10> lw	t4,20(sp)
1c000d12 <xPortStartFirstTask+0x12> lw	t5,24(sp)
1c000d14 <xPortStartFirstTask+0x14> csrw	lpstart0,t0
1c000d18 <xPortStartFirstTask+0x18> csrw	lpend0,t1
1c000d1c <xPortStartFirstTask+0x1c> csrw	lpcount0,t2
1c000d20 <xPortStartFirstTask+0x20> csrw	lpstart1,t3
1c000d24 <xPortStartFirstTask+0x24> csrw	lpend1,t4
1c000d28 <xPortStartFirstTask+0x28> csrw	lpcount1,t5
1c000d2c <xPortStartFirstTask+0x2c> addi	sp,sp,24
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:435
#endif

	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c000d2e <xPortStartFirstTask+0x2e> lw	t1,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:436
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c000d30 <xPortStartFirstTask+0x30> lw	t2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:437
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c000d32 <xPortStartFirstTask+0x32> lw	s0,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:438
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c000d34 <xPortStartFirstTask+0x34> lw	s1,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:439
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c000d36 <xPortStartFirstTask+0x36> lw	a0,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:440
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c000d38 <xPortStartFirstTask+0x38> lw	a1,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:441
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c000d3a <xPortStartFirstTask+0x3a> lw	a2,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:442
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c000d3c <xPortStartFirstTask+0x3c> lw	a3,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:443
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c000d3e <xPortStartFirstTask+0x3e> lw	a4,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:444
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c000d40 <xPortStartFirstTask+0x40> lw	a5,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:446
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c000d42 <xPortStartFirstTask+0x42> lw	a6,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:447
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c000d44 <xPortStartFirstTask+0x44> lw	a7,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:448
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c000d46 <xPortStartFirstTask+0x46> lw	s2,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:449
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c000d48 <xPortStartFirstTask+0x48> lw	s3,64(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:450
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c000d4a <xPortStartFirstTask+0x4a> lw	s4,68(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:451
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c000d4c <xPortStartFirstTask+0x4c> lw	s5,72(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:452
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c000d4e <xPortStartFirstTask+0x4e> lw	s6,76(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:453
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c000d50 <xPortStartFirstTask+0x50> lw	s7,80(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:454
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c000d52 <xPortStartFirstTask+0x52> lw	s8,84(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:455
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c000d54 <xPortStartFirstTask+0x54> lw	s9,88(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:456
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c000d56 <xPortStartFirstTask+0x56> lw	s10,92(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:457
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c000d58 <xPortStartFirstTask+0x58> lw	s11,96(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:458
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c000d5a <xPortStartFirstTask+0x5a> lw	t3,100(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:459
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c000d5c <xPortStartFirstTask+0x5c> lw	t4,104(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:460
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c000d5e <xPortStartFirstTask+0x5e> lw	t5,108(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:461
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c000d60 <xPortStartFirstTask+0x60> lw	t6,112(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:463
#endif
	load_x  x5, 29 * portWORD_SIZE( sp )	/* Initial mstatus into x5 (t0) */
1c000d62 <xPortStartFirstTask+0x62> lw	t0,116(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:464
	addi x5, x5, 0x08						/* Set MIE bit so the first task starts with interrupts enabled - required as returns with ret not eret. */
1c000d64 <xPortStartFirstTask+0x64> addi	t0,t0,8
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:465
	csrrw  x0, mstatus, x5					/* Interrupts enabled from here! */
1c000d66 <xPortStartFirstTask+0x66> csrw	mstatus,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:466
	load_x  x5, 2 * portWORD_SIZE( sp )		/* Initial x5 (t0) value. */
1c000d6a <xPortStartFirstTask+0x6a> lw	t0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:468

	addi	sp, sp, portCONTEXT_SIZE
1c000d6c <xPortStartFirstTask+0x6c> addi	sp,sp,120
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:469
	ret
1c000d70 <xPortStartFirstTask+0x70> ret
1c000d72 <xPortStartFirstTask+0x72> nop
1c000d76 <xPortStartFirstTask+0x76> nop
1c000d7a <xPortStartFirstTask+0x7a> nop
1c000d7e <xPortStartFirstTask+0x7e> nop
1c000d82 <xPortStartFirstTask+0x82> nop
1c000d86 <xPortStartFirstTask+0x86> nop
1c000d8a <xPortStartFirstTask+0x8a> nop
1c000d8e <xPortStartFirstTask+0x8e> nop
1c000d92 <xPortStartFirstTask+0x92> nop
1c000d96 <xPortStartFirstTask+0x96> nop
1c000d9a <xPortStartFirstTask+0x9a> nop
1c000d9e <xPortStartFirstTask+0x9e> nop
1c000da2 <xPortStartFirstTask+0xa2> nop
1c000da6 <xPortStartFirstTask+0xa6> nop
1c000daa <xPortStartFirstTask+0xaa> nop
1c000dae <xPortStartFirstTask+0xae> nop
1c000db2 <xPortStartFirstTask+0xb2> nop
1c000db6 <xPortStartFirstTask+0xb6> nop
1c000dba <xPortStartFirstTask+0xba> nop
1c000dbe <xPortStartFirstTask+0xbe> nop
1c000dc2 <xPortStartFirstTask+0xc2> nop
1c000dc6 <xPortStartFirstTask+0xc6> nop
1c000dca <xPortStartFirstTask+0xca> nop
1c000dce <xPortStartFirstTask+0xce> nop
1c000dd2 <xPortStartFirstTask+0xd2> nop
1c000dd6 <xPortStartFirstTask+0xd6> nop
1c000dda <xPortStartFirstTask+0xda> nop
1c000dde <xPortStartFirstTask+0xde> nop
1c000de2 <xPortStartFirstTask+0xe2> nop
1c000de6 <xPortStartFirstTask+0xe6> nop
1c000dea <xPortStartFirstTask+0xea> nop
1c000dee <xPortStartFirstTask+0xee> nop
1c000df2 <xPortStartFirstTask+0xf2> nop
1c000df6 <xPortStartFirstTask+0xf6> nop
1c000dfa <xPortStartFirstTask+0xfa> nop
1c000dfe <xPortStartFirstTask+0xfe> nop
pxPortInitialiseStack():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:539
 */
.align 8
.func
pxPortInitialiseStack:

	csrr t0, mstatus					/* Obtain current mstatus value. */
1c000e00 <pxPortInitialiseStack> csrr	t0,mstatus
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:540
	andi t0, t0, ~0x8					/* Ensure interrupts are disabled when the stack is restored within an ISR.  Required when a task is created after the schedulre has been started, otherwise interrupts would be disabled anyway. */
1c000e04 <pxPortInitialiseStack+0x4> andi	t0,t0,-9
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:541
	addi t1, x0, 0x188					/* Generate the value 0x1880, which are the MPIE and MPP bits to set in mstatus. */
1c000e08 <pxPortInitialiseStack+0x8> li	t1,392
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:542
	slli t1, t1, 4
1c000e0c <pxPortInitialiseStack+0xc> slli	t1,t1,0x4
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:543
	or t0, t0, t1						/* Set MPIE and MPP bits in mstatus value. */
1c000e0e <pxPortInitialiseStack+0xe> or	t0,t0,t1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:545

	addi a0, a0, -portWORD_SIZE
1c000e12 <pxPortInitialiseStack+0x12> addi	a0,a0,-4
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:546
	store_x t0, 0(a0)					/* mstatus onto the stack. */
1c000e14 <pxPortInitialiseStack+0x14> sw	t0,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:547
	addi a0, a0, -(22 * portWORD_SIZE)	/* Space for registers x11-x31. */
1c000e18 <pxPortInitialiseStack+0x18> addi	a0,a0,-88
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:548
	store_x a2, 0(a0)					/* Task parameters (pvParameters parameter) goes into register X10/a0 on the stack. */
1c000e1c <pxPortInitialiseStack+0x1c> sw	a2,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:549
	addi a0, a0, -(6 * portWORD_SIZE)	/* Space for registers x5-x9. */
1c000e1e <pxPortInitialiseStack+0x1e> addi	a0,a0,-24
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:550
	store_x x0, 0(a0)					/* Return address onto the stack, could be portTASK_RETURN_ADDRESS */
1c000e20 <pxPortInitialiseStack+0x20> sw	zero,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:551
	addi t0, x0, portasmADDITIONAL_CONTEXT_SIZE /* The number of chip specific additional registers. */
1c000e24 <pxPortInitialiseStack+0x24> li	t0,6
chip_specific_stack_frame():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:553
chip_specific_stack_frame:				/* First add any chip specific registers to the stack frame being created. */
	beq t0, x0, 1f						/* No more chip specific registers to save. */
1c000e28 <chip_specific_stack_frame> beqz	t0,1c000e36 <chip_specific_stack_frame+0xe>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:554
	addi a0, a0, -portWORD_SIZE			/* Make space for chip specific register. */
1c000e2c <chip_specific_stack_frame+0x4> addi	a0,a0,-4
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:555
	store_x x0, 0(a0)					/* Give the chip specific register an initial value of zero. */
1c000e2e <chip_specific_stack_frame+0x6> sw	zero,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:556
	addi t0, t0, -1						/* Decrement the count of chip specific registers remaining. */
1c000e32 <chip_specific_stack_frame+0xa> addi	t0,t0,-1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:557
	j chip_specific_stack_frame			/* Until no more chip specific registers. */
1c000e34 <chip_specific_stack_frame+0xc> j	1c000e28 <chip_specific_stack_frame>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:559
1:
	addi a0, a0, -portWORD_SIZE
1c000e36 <chip_specific_stack_frame+0xe> addi	a0,a0,-4
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:560
	store_x a1, 0(a0)					/* mret value (pxCode parameter) onto the stack. */
1c000e38 <chip_specific_stack_frame+0x10> sw	a1,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:561
	ret
1c000e3a <chip_specific_stack_frame+0x12> ret
1c000e3c <chip_specific_stack_frame+0x14> unimp
1c000e3e <chip_specific_stack_frame+0x16> unimp
	...
cluster_exec_loop():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:90
        * s9=cl_master_cluster_task_end(fifo mgt + FC notify)
        * * slave
        * s4=cluster end of task -> barrier trig and wait
        * s5=cluster end of task -> no barrier, start over loop at dispatcher
        */
        or s10, zero, a1
1c000e42 <cluster_exec_loop> or	s10,zero,a1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:92
        // IRQ to wake cores : irq from dispatcher, HW mutex or barrier.
        li t0, ((1 << CL_IRQ_DISPATCH_EVT) | (1 << CL_IRQ_HW_MUTEX_EVT) | (1 << CL_IRQ_BARRIER_EVT))
1c000e46 <cluster_exec_loop+0x4> lui	t0,0x70
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:93
        li t1, ARCHI_CLUSTER_MASTER_CORE                        // Core ID of master core on cluster
1c000e4a <cluster_exec_loop+0x8> li	t1,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:94
        li t3, ARCHI_CLUSTER_SYNC_BARR_ID                       // Master-workers sync Barrier ID
1c000e4c <cluster_exec_loop+0xa> li	t3,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:95
        li s2, CL_DEMUX_EU_HW_BARRIER_ADDR
1c000e4e <cluster_exec_loop+0xc> lui	s2,0x204
1c000e52 <cluster_exec_loop+0x10> addi	s2,s2,512 # 00204200 <__heap_l2_shared_size+0x1948e0>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:96
        li t2, CL_DEMUX_EU_HW_BARRIER_SIZE                      // Size of barrier instance
1c000e56 <cluster_exec_loop+0x14> li	t2,32
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:97
        li s0, CL_DEMUX_EU_CORE_ADDR // + ARCHI_CLUSTER_GLOBAL_ADDR(0))
1c000e5a <cluster_exec_loop+0x18> lui	s0,0x204
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:98
        mul t3, t2, t3                                          // Master-workers sync barrier offset
1c000e5e <cluster_exec_loop+0x1c> mul	t3,t2,t3
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:99
        li s1, CL_DEMUX_EU_DISPATCH_ADDR
1c000e62 <cluster_exec_loop+0x20> lui	s1,0x204
1c000e66 <cluster_exec_loop+0x24> addi	s1,s1,128 # 00204080 <__heap_l2_shared_size+0x194760>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:100
        add s7, s2, t3                                          // Barrier used for dispatch sync
1c000e6a <cluster_exec_loop+0x28> add	s7,s2,t3
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:102

        sw t0, CL_DEMUX_EU_CORE_EVENT_MASK_OR(s0)               // CL_DEMUX_EU_CORE->MASK_OR = IRQ
1c000e6e <cluster_exec_loop+0x2c> sw	t0,8(s0) # 00204008 <__heap_l2_shared_size+0x1946e8>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:104

        bne a1, t1, cl_slave_loop                               // Slave cores
1c000e72 <cluster_exec_loop+0x30> bne	a1,t1,1c000f1a <cl_slave_loop>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:108


        /*** Cluster master ****/
        li t0, (1 << CL_IRQ_DMA1)                               // Enable DMA IRQ for master core
1c000e76 <cluster_exec_loop+0x34> li	t0,512
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:109
        la s8, cl_slave_stack_setup
1c000e7a <cluster_exec_loop+0x38> auipc	s8,0x0
1c000e7e <cluster_exec_loop+0x3c> addi	s8,s8,218 # 1c000f54 <cl_slave_stack_setup>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:110
        sw t0, CL_DEMUX_EU_CORE_IRQ_MASK_OR(s0)                 // CL_DEMUX_EU_CORE->IRQ_MASK_OR = IRQ
1c000e82 <cluster_exec_loop+0x40> sw	t0,20(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:111
        li s3, (1 << FC_TO_CLUSTER_NOTIFY_EVENT)
1c000e86 <cluster_exec_loop+0x44> li	s3,2
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:112
        la s4, __per_cluster_data                               // Cluster data
1c000e88 <cluster_exec_loop+0x46> addi	s4,gp,-100 # 1c008e00 <__per_cluster_data>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:113
        ori s8, s8, 1
1c000e8c <cluster_exec_loop+0x4a> ori	s8,s8,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:115

        csrw mstatus, 0x8                                       // Enable IRQ for master core
1c000e90 <cluster_exec_loop+0x4e> csrwi	mstatus,8
cl_master_cluster_ready():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:118

cl_master_cluster_ready:
        lw s5, 0(s4)                                            // Check if cluster driver is init
1c000e94 <cl_master_cluster_ready> lw	s5,0(s4)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:119
        beqz s5, cl_master_sleep                                // If cluster is not on, sleep
1c000e98 <cl_master_cluster_ready+0x4> beqz	s5,1c000f0c <cl_master_sleep>
cl_master_loop():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:122

cl_master_loop:
        la ra, cl_master_cluster_task_end                       // After finishing cluster task, take next task and notify FC
1c000e9c <cl_master_loop> auipc	ra,0x0
1c000ea0 <cl_master_loop+0x4> addi	ra,ra,102 # 1c000f02 <cl_master_cluster_task_end>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:123
        lw s6, 0(s5)                                            // Check if there is cluster task in fifo
1c000ea4 <cl_master_loop+0x8> lw	s6,0(s5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:124
        beqz s6, cl_master_sleep                                // Sleep if there are no cluster task in fifo
1c000ea8 <cl_master_loop+0xc> beqz	s6,1c000f0c <cl_master_sleep>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:127

        // Load cluster task info :
        lw t0, PI_CLUSTER_TASK_FUNCTION_OFFSET(s6)              // t0=func
1c000eac <cl_master_loop+0x10> lw	t0,0(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:128
        lw a0, PI_CLUSTER_TASK_FUNC_ARGS_OFFSET(s6)             // a0=args
1c000eb0 <cl_master_loop+0x14> lw	a0,4(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:129
        lw t1, PI_CLUSTER_TASK_STACK_PTR_OFFSET(s6)             // t1=stack_ptr
1c000eb4 <cl_master_loop+0x18> lw	t1,8(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:130
        lw t2, PI_CLUSTER_TASK_STACK_MST_SIZE_OFFSET(s6)        // t2=stack_size
1c000eb8 <cl_master_loop+0x1c> lw	t2,12(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:131
        lw t3, PI_CLUSTER_TASK_STACK_SLV_SIZE_OFFSET(s6)        // t3=stack_slave_size
1c000ebc <cl_master_loop+0x20> lw	t3,16(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:132
        lw t4, PI_CLUSTER_TASK_TEAM_CORES_OFFSET(s6)            // t4=nb_cores
1c000ec0 <cl_master_loop+0x24> lw	t4,20(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:133
        add sp, t1, t2                                          // Master core sp, at the top of stack
1c000ec4 <cl_master_loop+0x28> add	sp,t1,t2
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:134
        lw t5, PI_CLUSTER_TASK_TEAM_MASK_OFFSET(s6)             // t5=team_mask
1c000ec8 <cl_master_loop+0x2c> lw	t5,36(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:136

        or t1, sp, zero                                         // Stack for slaves
1c000ecc <cl_master_loop+0x30> or	t1,sp,zero
cl_master_slave_barrier_sync_config():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:140

        // Workers barrier sync(application)
cl_master_slave_barrier_sync_config:
        ori a2, t5, (1 << ARCHI_CLUSTER_MASTER_CORE)
1c000ed0 <cl_master_slave_barrier_sync_config> ori	a2,t5,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:141
        beqz t5, cl_master_master_slave_barrier_sync_config
1c000ed4 <cl_master_slave_barrier_sync_config+0x4> beqz	t5,1c000ee0 <cl_master_master_slave_barrier_sync_config>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:142
        sw t5, CL_DEMUX_EU_HW_BARRIER_TRIGGER_MASK(s2)          // Set workers barrier sync
1c000ed8 <cl_master_slave_barrier_sync_config+0x8> sw	t5,0(s2)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:143
        sw t5, CL_DEMUX_EU_HW_BARRIER_TARGET_MASK(s2)           // Set workers barrier sync
1c000edc <cl_master_slave_barrier_sync_config+0xc> sw	t5,12(s2)
cl_master_master_slave_barrier_sync_config():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:148

        // Master and workers barrier sync
cl_master_master_slave_barrier_sync_config:
        //ori a2, t5, (1 << ARCHI_CLUSTER_MASTER_CORE)
        sw a2, CL_DEMUX_EU_HW_BARRIER_TRIGGER_MASK(s7)          // Set master workers barrier sync
1c000ee0 <cl_master_master_slave_barrier_sync_config> sw	a2,0(s7)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:149
        sw a2, CL_DEMUX_EU_HW_BARRIER_TARGET_MASK(s7)           // Set master workers barrier sync
1c000ee4 <cl_master_master_slave_barrier_sync_config+0x4> sw	a2,12(s7)
cl_master_dispatch_stack():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:152

cl_master_dispatch_stack:
        xori t6, t5, (1 << ARCHI_CLUSTER_MASTER_CORE)
1c000ee8 <cl_master_dispatch_stack> xori	t6,t5,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:153
        beqz t4, cl_master_core_only                            // Only core master execute task
1c000eec <cl_master_dispatch_stack+0x4> beqz	t4,1c000f00 <cl_master_core_only>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:154
        sw t6, CL_DEMUX_EU_DISPATCH_TEAM_CONFIG(s1)             // Config current team
1c000ef0 <cl_master_dispatch_stack+0x8> sw	t6,4(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:155
        sw s8, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)             // Dispatch cluster setup to slaves
1c000ef4 <cl_master_dispatch_stack+0xc> sw	s8,0(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:156
        sw t1, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)             // Arg to cl_slave_stack_setup: sp
1c000ef8 <cl_master_dispatch_stack+0x10> sw	t1,0(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:157
        sw t3, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)             // Arg to cl_slave_stack_setup: stack_slave_size
1c000efc <cl_master_dispatch_stack+0x14> sw	t3,0(s1)
cl_master_core_only():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:160

cl_master_core_only:
        jr t0                                                   // Execute cluster function
1c000f00 <cl_master_core_only> jr	t0
cl_master_cluster_task_end():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:163

cl_master_cluster_task_end:
        or a0, zero, s5
1c000f02 <cl_master_cluster_task_end> or	a0,zero,s5
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:164
        jal cl_task_finish
1c000f06 <cl_master_cluster_task_end+0x4> jal	ra,1c001850 <cl_task_finish>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:165
        j cl_master_loop
1c000f0a <cl_master_cluster_task_end+0x8> j	1c000e9c <cl_master_loop>
cl_master_sleep():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:169

        // Wait and sleep until an IRQ is sent by FC to cluster(for a new task)
cl_master_sleep:
        sw s3, CL_DEMUX_EU_CORE_EVENT_MASK_OR(s0)
1c000f0c <cl_master_sleep> sw	s3,8(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:170
        p.elw t0, CL_DEMUX_EU_CORE_EVENT_WAIT_CLEAR(s0)
1c000f10 <cl_master_sleep+0x4> p.elw	t0,60(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:171
        sw s3, CL_DEMUX_EU_CORE_EVENT_MASK_AND(s0)
1c000f14 <cl_master_sleep+0x8> sw	s3,4(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:172
        j cl_master_loop
1c000f18 <cl_master_sleep+0xc> j	1c000e9c <cl_master_loop>
cl_slave_loop():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:179


        /*** Cluster slaves ***/
        // Wait and sleep until a task is dispatched
cl_slave_loop:
        la s4, cl_slave_barrier_trig_wait
1c000f1a <cl_slave_loop> auipc	s4,0x0
1c000f1e <cl_slave_loop+0x4> addi	s4,s4,22 # 1c000f30 <cl_slave_barrier_trig_wait>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:180
        la s5, cl_slave_wait_for_dispatch
1c000f22 <cl_slave_loop+0x8> auipc	s5,0x0
1c000f26 <cl_slave_loop+0xc> addi	s5,s5,18 # 1c000f34 <cl_slave_wait_for_dispatch>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:181
        or ra, zero, s4
1c000f2a <cl_slave_loop+0x10> or	ra,zero,s4
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:182
        j cl_slave_wait_for_dispatch
1c000f2e <cl_slave_loop+0x14> j	1c000f34 <cl_slave_wait_for_dispatch>
cl_slave_barrier_trig_wait():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:185

cl_slave_barrier_trig_wait:
        p.elw t0, CL_DEMUX_EU_HW_BARRIER_TRIGGER_WAIT_CLEAR(s7) // Trigger and wait on barrier
1c000f30 <cl_slave_barrier_trig_wait> p.elw	t0,28(s7)
cl_slave_wait_for_dispatch():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:188

cl_slave_wait_for_dispatch:
        p.elw t0, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)          // Pop the function to execute
1c000f34 <cl_slave_wait_for_dispatch> p.elw	t0,0(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:189
        p.elw a0, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)          // Pop function's args
1c000f38 <cl_slave_wait_for_dispatch+0x4> p.elw	a0,0(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:192

        // Should the core trigger and wait at barrier after exec
        andi t1, t0, 0x1
1c000f3c <cl_slave_wait_for_dispatch+0x8> andi	t1,t0,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:193
        p.bclr t0, t0, 0, 0                                     // Clear LSB barrier bit before function call
1c000f40 <cl_slave_wait_for_dispatch+0xc> p.bclr	t0,t0,0,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:194
        bne t1, zero, cl_slave_entry_no_barrier
1c000f44 <cl_slave_wait_for_dispatch+0x10> bnez	t1,1c000f4e <cl_slave_entry_no_barrier>
cl_slave_entry_with_barrier():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:197

cl_slave_entry_with_barrier:
        or ra, zero, s4                                         // Return to wait on barrier
1c000f48 <cl_slave_entry_with_barrier> or	ra,zero,s4
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:198
        jr t0                                                   // Jump to function to execute, on return trig and wait at barrier, and start over slave loop
1c000f4c <cl_slave_entry_with_barrier+0x4> jr	t0
cl_slave_entry_no_barrier():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:201

cl_slave_entry_no_barrier:
        or ra, zero, s5                                         // Return to wait on dispatcher
1c000f4e <cl_slave_entry_no_barrier> or	ra,zero,s5
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:202
        jr t0                                                   // Jump to function to execute, and start over slave loop
1c000f52 <cl_slave_entry_no_barrier+0x4> jr	t0
cl_slave_stack_setup():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:220
        * Cluster cores set stack pointer.
        * From cluster_exec_loop, s10=core_id
        * Master core is core_id=0, stack is at the top of stack ptr
        * Stack pointer adjusted for slave cores.
        */
        p.elw t0, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)          // Stack slave size
1c000f54 <cl_slave_stack_setup> p.elw	t0,0(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:221
        mul t0, t0, s10                                         // Slave stack offset
1c000f58 <cl_slave_stack_setup+0x4> mul	t0,t0,s10
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:222
        add sp, a0, t0                                          // Slave sp
1c000f5c <cl_slave_stack_setup+0x8> add	sp,a0,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:223
        jr ra
1c000f60 <cl_slave_stack_setup+0xc> ret
readw():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:82

static inline uint32_t readw(const uintptr_t addr)
{
	uint32_t val;

	asm volatile("lw %0, 0(%1)"
1c000f62 <fc_soc_event_handler> lui	a0,0x1a109
1c000f66 <fc_soc_event_handler+0x4> lw	a0,0(a0)
fc_soc_event_handler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:78
	event = readw((uintptr_t)EVENT_TO_INT_ADDR);
#else
	/* Pop one event element from the FIFO */
	event = SIMPLE_IRQ->FIFO;
#endif
	event &= 0xff;
1c000f68 <fc_soc_event_handler+0x6> p.bclr	a0,a0,23,8
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:81

	/* redirect to handler with jump table */
	if (fc_event_handlers[event] != NULL) {
1c000f6c <fc_soc_event_handler+0xa> slli	a4,a0,0x2
1c000f70 <fc_soc_event_handler+0xe> addi	a5,gp,-960 # 1c008aa4 <fc_event_handlers>
1c000f74 <fc_soc_event_handler+0x12> add	a5,a5,a4
1c000f76 <fc_soc_event_handler+0x14> lw	a5,0(a5)
1c000f78 <fc_soc_event_handler+0x16> beqz	a5,1c000f8e <fc_soc_event_handler+0x2c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:65
{
1c000f7a <fc_soc_event_handler+0x18> addi	sp,sp,-16
1c000f7c <fc_soc_event_handler+0x1a> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:82
		fc_event_handlers[event]((void *)event);
1c000f7e <fc_soc_event_handler+0x1c> addi	a5,gp,-960 # 1c008aa4 <fc_event_handlers>
1c000f82 <fc_soc_event_handler+0x20> add	a5,a5,a4
1c000f84 <fc_soc_event_handler+0x22> lw	a5,0(a5)
1c000f86 <fc_soc_event_handler+0x24> jalr	a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:84
	}
}
1c000f88 <fc_soc_event_handler+0x26> lw	ra,12(sp)
1c000f8a <fc_soc_event_handler+0x28> addi	sp,sp,16
1c000f8c <fc_soc_event_handler+0x2a> ret
1c000f8e <fc_soc_event_handler+0x2c> ret
memcpy():
1c000f90 <memcpy> mv	t1,a0
1c000f92 <memcpy+0x2> beqz	a2,1c000fa4 <memcpy+0x14>
1c000f94 <memcpy+0x4> lb	t2,0(a1)
1c000f98 <memcpy+0x8> sb	t2,0(t1)
1c000f9c <memcpy+0xc> addi	a2,a2,-1
1c000f9e <memcpy+0xe> addi	t1,t1,1
1c000fa0 <memcpy+0x10> addi	a1,a1,1
1c000fa2 <memcpy+0x12> bnez	a2,1c000f94 <memcpy+0x4>
1c000fa4 <memcpy+0x14> ret
memset():
1c000fa6 <memset> mv	t1,a0
1c000fa8 <memset+0x2> beqz	a2,1c000fb4 <memset+0xe>
1c000faa <memset+0x4> sb	a1,0(t1)
1c000fae <memset+0x8> addi	a2,a2,-1
1c000fb0 <memset+0xa> addi	t1,t1,1
1c000fb2 <memset+0xc> bnez	a2,1c000faa <memset+0x4>
1c000fb4 <memset+0xe> ret
vListInsertEnd():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:76
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1c000fb6 <vListInsertEnd> lw	a5,4(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:87
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1c000fb8 <vListInsertEnd+0x2> sw	a5,4(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:88
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1c000fba <vListInsertEnd+0x4> lw	a4,8(a5)
1c000fbc <vListInsertEnd+0x6> sw	a4,8(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:93

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1c000fbe <vListInsertEnd+0x8> sw	a1,4(a4)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:94
	pxIndex->pxPrevious = pxNewListItem;
1c000fc0 <vListInsertEnd+0xa> sw	a1,8(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:97

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
1c000fc2 <vListInsertEnd+0xc> sw	a0,16(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:99

	( pxList->uxNumberOfItems )++;
1c000fc4 <vListInsertEnd+0xe> lw	a5,0(a0)
1c000fc6 <vListInsertEnd+0x10> addi	a5,a5,1
1c000fc8 <vListInsertEnd+0x12> sw	a5,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:100
}
1c000fca <vListInsertEnd+0x14> ret
vListInsert():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:106
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1c000fcc <vListInsert> lw	a2,0(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:122
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1c000fce <vListInsert+0x2> p.beqimm	a2,-1,1c000ff4 <vListInsert+0x28>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:150
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
1c000fd2 <vListInsert+0x6> addi	a5,a0,8 # 1a109008 <__heap_l1_cluster_start+0xa108fe8>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:150 (discriminator 1)
1c000fd6 <vListInsert+0xa> mv	a3,a5
1c000fd8 <vListInsert+0xc> lw	a5,4(a5)
1c000fda <vListInsert+0xe> lw	a4,0(a5)
1c000fdc <vListInsert+0x10> bgeu	a2,a4,1c000fd6 <vListInsert+0xa>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:157
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1c000fe0 <vListInsert+0x14> lw	a5,4(a3)
1c000fe2 <vListInsert+0x16> sw	a5,4(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:158
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1c000fe4 <vListInsert+0x18> sw	a1,8(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:159
	pxNewListItem->pxPrevious = pxIterator;
1c000fe6 <vListInsert+0x1a> sw	a3,8(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:160
	pxIterator->pxNext = pxNewListItem;
1c000fe8 <vListInsert+0x1c> sw	a1,4(a3)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:164

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
1c000fea <vListInsert+0x1e> sw	a0,16(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:166

	( pxList->uxNumberOfItems )++;
1c000fec <vListInsert+0x20> lw	a5,0(a0)
1c000fee <vListInsert+0x22> addi	a5,a5,1
1c000ff0 <vListInsert+0x24> sw	a5,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:167
}
1c000ff2 <vListInsert+0x26> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:124
		pxIterator = pxList->xListEnd.pxPrevious;
1c000ff4 <vListInsert+0x28> lw	a3,16(a0)
1c000ff6 <vListInsert+0x2a> j	1c000fe0 <vListInsert+0x14>
uxListRemove():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:174

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
1c000ff8 <uxListRemove> lw	a5,16(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:176

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1c000ffa <uxListRemove+0x2> lw	a3,4(a0)
1c000ffc <uxListRemove+0x4> lw	a4,8(a0)
1c000ffe <uxListRemove+0x6> sw	a4,8(a3)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:177
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1c001000 <uxListRemove+0x8> lw	a3,4(a0)
1c001002 <uxListRemove+0xa> sw	a3,4(a4)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:183

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1c001004 <uxListRemove+0xc> lw	a4,4(a5)
1c001006 <uxListRemove+0xe> beq	a4,a0,1c001018 <uxListRemove+0x20>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:192
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
1c00100a <uxListRemove+0x12> sw	zero,16(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:193
	( pxList->uxNumberOfItems )--;
1c00100e <uxListRemove+0x16> lw	a4,0(a5)
1c001010 <uxListRemove+0x18> addi	a4,a4,-1
1c001012 <uxListRemove+0x1a> sw	a4,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:195

	return pxList->uxNumberOfItems;
1c001014 <uxListRemove+0x1c> lw	a0,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:196
}
1c001016 <uxListRemove+0x1e> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:185
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1c001018 <uxListRemove+0x20> lw	a4,8(a0)
1c00101a <uxListRemove+0x22> sw	a4,4(a5)
1c00101c <uxListRemove+0x24> j	1c00100a <uxListRemove+0x12>
prvResetNextTaskUnblockTime():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3947

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c00101e <prvResetNextTaskUnblockTime> lw	a5,-144(gp) # 1c008dd4 <pxDelayedTaskList>
1c001022 <prvResetNextTaskUnblockTime+0x4> lw	a5,0(a5)
1c001024 <prvResetNextTaskUnblockTime+0x6> bnez	a5,1c00102e <prvResetNextTaskUnblockTime+0x10>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3953
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1c001026 <prvResetNextTaskUnblockTime+0x8> li	a4,-1
1c001028 <prvResetNextTaskUnblockTime+0xa> sw	a4,-124(gp) # 1c008de8 <xNextTaskUnblockTime>
1c00102c <prvResetNextTaskUnblockTime+0xe> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3961
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c00102e <prvResetNextTaskUnblockTime+0x10> lw	a5,-144(gp) # 1c008dd4 <pxDelayedTaskList>
1c001032 <prvResetNextTaskUnblockTime+0x14> lw	a5,12(a5)
1c001034 <prvResetNextTaskUnblockTime+0x16> lw	a5,12(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3962
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1c001036 <prvResetNextTaskUnblockTime+0x18> lw	a4,4(a5)
1c001038 <prvResetNextTaskUnblockTime+0x1a> sw	a4,-124(gp) # 1c008de8 <xNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3964
	}
}
1c00103c <prvResetNextTaskUnblockTime+0x1e> ret
prvAddCurrentTaskToDelayedList():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5178

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1c00103e <prvAddCurrentTaskToDelayedList> addi	sp,sp,-16
1c001040 <prvAddCurrentTaskToDelayedList+0x2> sw	ra,12(sp)
1c001042 <prvAddCurrentTaskToDelayedList+0x4> sw	s0,8(sp)
1c001044 <prvAddCurrentTaskToDelayedList+0x6> sw	s1,4(sp)
1c001046 <prvAddCurrentTaskToDelayedList+0x8> sw	s2,0(sp)
1c001048 <prvAddCurrentTaskToDelayedList+0xa> mv	s0,a0
1c00104a <prvAddCurrentTaskToDelayedList+0xc> mv	s1,a1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5180
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1c00104c <prvAddCurrentTaskToDelayedList+0xe> lw	s2,-108(gp) # 1c008df8 <xTickCount>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5187
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
1c001050 <prvAddCurrentTaskToDelayedList+0x12> addi	a5,gp,-148 # 1c008dd0 <pxCurrentTCB>
1c001054 <prvAddCurrentTaskToDelayedList+0x16> lw	a4,0(a5)
1c001056 <prvAddCurrentTaskToDelayedList+0x18> sb	zero,1157(a4)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5193
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c00105a <prvAddCurrentTaskToDelayedList+0x1c> lw	a0,0(a5)
1c00105c <prvAddCurrentTaskToDelayedList+0x1e> addi	a0,a0,4
1c00105e <prvAddCurrentTaskToDelayedList+0x20> jal	1c000ff8 <uxListRemove>
1c001060 <prvAddCurrentTaskToDelayedList+0x22> bnez	a0,1c00107c <prvAddCurrentTaskToDelayedList+0x3e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5197
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
1c001062 <prvAddCurrentTaskToDelayedList+0x24> lw	a5,-148(gp) # 1c008dd0 <pxCurrentTCB>
1c001066 <prvAddCurrentTaskToDelayedList+0x28> lw	a4,44(a5)
1c001068 <prvAddCurrentTaskToDelayedList+0x2a> li	a5,1
1c00106a <prvAddCurrentTaskToDelayedList+0x2c> sll	a5,a5,a4
1c00106e <prvAddCurrentTaskToDelayedList+0x30> not	a5,a5
1c001072 <prvAddCurrentTaskToDelayedList+0x34> addi	a4,gp,-128 # 1c008de4 <uxTopReadyPriority>
1c001076 <prvAddCurrentTaskToDelayedList+0x38> lw	a3,0(a4)
1c001078 <prvAddCurrentTaskToDelayedList+0x3a> and	a5,a5,a3
1c00107a <prvAddCurrentTaskToDelayedList+0x3c> sw	a5,0(a4)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5206
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1c00107c <prvAddCurrentTaskToDelayedList+0x3e> p.beqimm	s0,-1,1c0010a4 <prvAddCurrentTaskToDelayedList+0x66>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5218
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1c001080 <prvAddCurrentTaskToDelayedList+0x42> add	s0,s0,s2
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5221

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1c001082 <prvAddCurrentTaskToDelayedList+0x44> lw	a5,-148(gp) # 1c008dd0 <pxCurrentTCB>
1c001086 <prvAddCurrentTaskToDelayedList+0x48> sw	s0,4(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5223

			if( xTimeToWake < xConstTickCount )
1c001088 <prvAddCurrentTaskToDelayedList+0x4a> bgeu	s0,s2,1c0010b8 <prvAddCurrentTaskToDelayedList+0x7a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5227
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c00108c <prvAddCurrentTaskToDelayedList+0x4e> lw	a0,-140(gp) # 1c008dd8 <pxOverflowDelayedTaskList>
1c001090 <prvAddCurrentTaskToDelayedList+0x52> lw	a1,-148(gp) # 1c008dd0 <pxCurrentTCB>
1c001094 <prvAddCurrentTaskToDelayedList+0x56> addi	a1,a1,4
1c001096 <prvAddCurrentTaskToDelayedList+0x58> jal	1c000fcc <vListInsert>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5286

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1c001098 <prvAddCurrentTaskToDelayedList+0x5a> lw	ra,12(sp)
1c00109a <prvAddCurrentTaskToDelayedList+0x5c> lw	s0,8(sp)
1c00109c <prvAddCurrentTaskToDelayedList+0x5e> lw	s1,4(sp)
1c00109e <prvAddCurrentTaskToDelayedList+0x60> lw	s2,0(sp)
1c0010a0 <prvAddCurrentTaskToDelayedList+0x62> addi	sp,sp,16
1c0010a2 <prvAddCurrentTaskToDelayedList+0x64> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5206 (discriminator 1)
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1c0010a4 <prvAddCurrentTaskToDelayedList+0x66> beqz	s1,1c001080 <prvAddCurrentTaskToDelayedList+0x42>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5211
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0010a6 <prvAddCurrentTaskToDelayedList+0x68> lw	a1,-148(gp) # 1c008dd0 <pxCurrentTCB>
1c0010aa <prvAddCurrentTaskToDelayedList+0x6c> addi	a1,a1,4
1c0010ac <prvAddCurrentTaskToDelayedList+0x6e> lui	a0,0x1c009
1c0010b0 <prvAddCurrentTaskToDelayedList+0x72> addi	a0,a0,-1648 # 1c008990 <xSuspendedTaskList>
1c0010b4 <prvAddCurrentTaskToDelayedList+0x76> jal	1c000fb6 <vListInsertEnd>
1c0010b6 <prvAddCurrentTaskToDelayedList+0x78> j	1c001098 <prvAddCurrentTaskToDelayedList+0x5a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5233
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0010b8 <prvAddCurrentTaskToDelayedList+0x7a> lw	a0,-144(gp) # 1c008dd4 <pxDelayedTaskList>
1c0010bc <prvAddCurrentTaskToDelayedList+0x7e> lw	a1,-148(gp) # 1c008dd0 <pxCurrentTCB>
1c0010c0 <prvAddCurrentTaskToDelayedList+0x82> addi	a1,a1,4
1c0010c2 <prvAddCurrentTaskToDelayedList+0x84> jal	1c000fcc <vListInsert>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5238
				if( xTimeToWake < xNextTaskUnblockTime )
1c0010c4 <prvAddCurrentTaskToDelayedList+0x86> lw	a5,-124(gp) # 1c008de8 <xNextTaskUnblockTime>
1c0010c8 <prvAddCurrentTaskToDelayedList+0x8a> bgeu	s0,a5,1c001098 <prvAddCurrentTaskToDelayedList+0x5a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5240
					xNextTaskUnblockTime = xTimeToWake;
1c0010cc <prvAddCurrentTaskToDelayedList+0x8e> sw	s0,-124(gp) # 1c008de8 <xNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:5286
}
1c0010d0 <prvAddCurrentTaskToDelayedList+0x92> j	1c001098 <prvAddCurrentTaskToDelayedList+0x5a>
vTaskSuspendAll():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2123
	++uxSchedulerSuspended;
1c0010d2 <vTaskSuspendAll> addi	a5,gp,-132 # 1c008de0 <uxSchedulerSuspended>
1c0010d6 <vTaskSuspendAll+0x4> lw	a4,0(a5)
1c0010d8 <vTaskSuspendAll+0x6> addi	a4,a4,1
1c0010da <vTaskSuspendAll+0x8> sw	a4,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2128
}
1c0010dc <vTaskSuspendAll+0xa> ret
xTaskIncrementTick():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2708
{
1c0010de <xTaskIncrementTick> addi	sp,sp,-32
1c0010e0 <xTaskIncrementTick+0x2> sw	ra,28(sp)
1c0010e2 <xTaskIncrementTick+0x4> sw	s0,24(sp)
1c0010e4 <xTaskIncrementTick+0x6> sw	s1,20(sp)
1c0010e6 <xTaskIncrementTick+0x8> sw	s2,16(sp)
1c0010e8 <xTaskIncrementTick+0xa> sw	s3,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2717
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c0010ea <xTaskIncrementTick+0xc> lw	a5,-132(gp) # 1c008de0 <uxSchedulerSuspended>
1c0010ee <xTaskIncrementTick+0x10> bnez	a5,1c001208 <xTaskIncrementTick+0x12a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2721
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1c0010f2 <xTaskIncrementTick+0x14> addi	a5,gp,-108 # 1c008df8 <xTickCount>
1c0010f6 <xTaskIncrementTick+0x18> lw	s1,0(a5)
1c0010f8 <xTaskIncrementTick+0x1a> addi	s1,s1,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2725
		xTickCount = xConstTickCount;
1c0010fa <xTaskIncrementTick+0x1c> sw	s1,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2727
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1c0010fc <xTaskIncrementTick+0x1e> bnez	s1,1c001122 <xTaskIncrementTick+0x44>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2729
			taskSWITCH_DELAYED_LISTS();
1c0010fe <xTaskIncrementTick+0x20> lw	a5,-144(gp) # 1c008dd4 <pxDelayedTaskList>
1c001102 <xTaskIncrementTick+0x24> lw	a5,0(a5)
1c001104 <xTaskIncrementTick+0x26> bnez	a5,1c00116c <xTaskIncrementTick+0x8e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2729 (discriminator 2)
1c001106 <xTaskIncrementTick+0x28> addi	a4,gp,-144 # 1c008dd4 <pxDelayedTaskList>
1c00110a <xTaskIncrementTick+0x2c> lw	a3,0(a4)
1c00110c <xTaskIncrementTick+0x2e> addi	a5,gp,-140 # 1c008dd8 <pxOverflowDelayedTaskList>
1c001110 <xTaskIncrementTick+0x32> lw	a2,0(a5)
1c001112 <xTaskIncrementTick+0x34> sw	a2,0(a4)
1c001114 <xTaskIncrementTick+0x36> sw	a3,0(a5)
1c001116 <xTaskIncrementTick+0x38> addi	a5,gp,-120 # 1c008dec <xNumOfOverflows>
1c00111a <xTaskIncrementTick+0x3c> lw	a4,0(a5)
1c00111c <xTaskIncrementTick+0x3e> addi	a4,a4,1
1c00111e <xTaskIncrementTick+0x40> sw	a4,0(a5)
1c001120 <xTaskIncrementTick+0x42> jal	1c00101e <prvResetNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2740
		if( xConstTickCount >= xNextTaskUnblockTime )
1c001122 <xTaskIncrementTick+0x44> lw	a5,-124(gp) # 1c008de8 <xNextTaskUnblockTime>
1c001126 <xTaskIncrementTick+0x48> bgeu	s1,a5,1c0011f0 <xTaskIncrementTick+0x112>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2711
BaseType_t xSwitchRequired = pdFALSE;
1c00112a <xTaskIncrementTick+0x4c> li	s2,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2823
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1c00112c <xTaskIncrementTick+0x4e> lw	a5,-148(gp) # 1c008dd0 <pxCurrentTCB>
1c001130 <xTaskIncrementTick+0x52> lw	a5,44(a5)
1c001132 <xTaskIncrementTick+0x54> slli	a4,a5,0x2
1c001136 <xTaskIncrementTick+0x58> add	a4,a4,a5
1c001138 <xTaskIncrementTick+0x5a> slli	a3,a4,0x2
1c00113c <xTaskIncrementTick+0x5e> lui	a5,0x1c009
1c001140 <xTaskIncrementTick+0x62> addi	a5,a5,-1768 # 1c008918 <pxReadyTasksLists>
1c001144 <xTaskIncrementTick+0x66> add	a5,a5,a3
1c001146 <xTaskIncrementTick+0x68> lw	a4,0(a5)
1c001148 <xTaskIncrementTick+0x6a> li	a5,1
1c00114a <xTaskIncrementTick+0x6c> bgeu	a5,a4,1c001150 <xTaskIncrementTick+0x72>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2825
				xSwitchRequired = pdTRUE;
1c00114e <xTaskIncrementTick+0x70> li	s2,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2838
			if( xPendedTicks == ( TickType_t ) 0 )
1c001150 <xTaskIncrementTick+0x72> lw	a5,-116(gp) # 1c008df0 <xPendedTicks>
1c001154 <xTaskIncrementTick+0x76> beqz	a5,1c001202 <xTaskIncrementTick+0x124>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2851
			if( xYieldPending != pdFALSE )
1c001156 <xTaskIncrementTick+0x78> lw	a5,-104(gp) # 1c008dfc <xYieldPending>
1c00115a <xTaskIncrementTick+0x7c> bnez	a5,1c00121a <xTaskIncrementTick+0x13c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2876
}
1c00115c <xTaskIncrementTick+0x7e> mv	a0,s2
1c00115e <xTaskIncrementTick+0x80> lw	ra,28(sp)
1c001160 <xTaskIncrementTick+0x82> lw	s0,24(sp)
1c001162 <xTaskIncrementTick+0x84> lw	s1,20(sp)
1c001164 <xTaskIncrementTick+0x86> lw	s2,16(sp)
1c001166 <xTaskIncrementTick+0x88> lw	s3,12(sp)
1c001168 <xTaskIncrementTick+0x8a> addi	sp,sp,32
1c00116a <xTaskIncrementTick+0x8c> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2729 (discriminator 1)
			taskSWITCH_DELAYED_LISTS();
1c00116c <xTaskIncrementTick+0x8e> lui	a3,0x1c008
1c001170 <xTaskIncrementTick+0x92> addi	a3,a3,76 # 1c00804c <__l2_priv0_end+0x4578>
1c001174 <xTaskIncrementTick+0x96> lui	a2,0x1c008
1c001178 <xTaskIncrementTick+0x9a> addi	a2,a2,348 # 1c00815c <__func__.3248>
1c00117c <xTaskIncrementTick+0x9e> lui	a1,0x1
1c00117e <xTaskIncrementTick+0xa0> addi	a1,a1,-1367 # 00000aa9 <__stack_size+0x2a9>
1c001182 <xTaskIncrementTick+0xa4> lui	a0,0x1c008
1c001186 <xTaskIncrementTick+0xa8> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x4534>
1c00118a <xTaskIncrementTick+0xac> jal	ra,1c002588 <__assert_func>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2806
							xSwitchRequired = pdTRUE;
1c00118e <xTaskIncrementTick+0xb0> li	s2,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2744
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c001190 <xTaskIncrementTick+0xb2> lw	a5,-144(gp) # 1c008dd4 <pxDelayedTaskList>
1c001194 <xTaskIncrementTick+0xb6> lw	a5,0(a5)
1c001196 <xTaskIncrementTick+0xb8> beqz	a5,1c0011f4 <xTaskIncrementTick+0x116>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2760
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c001198 <xTaskIncrementTick+0xba> lw	a5,-144(gp) # 1c008dd4 <pxDelayedTaskList>
1c00119c <xTaskIncrementTick+0xbe> lw	a5,12(a5)
1c00119e <xTaskIncrementTick+0xc0> lw	s0,12(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2761
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1c0011a0 <xTaskIncrementTick+0xc2> lw	a5,4(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2763
					if( xConstTickCount < xItemValue )
1c0011a2 <xTaskIncrementTick+0xc4> bltu	s1,a5,1c0011fc <xTaskIncrementTick+0x11e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2779
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c0011a6 <xTaskIncrementTick+0xc8> addi	s3,s0,4
1c0011aa <xTaskIncrementTick+0xcc> mv	a0,s3
1c0011ac <xTaskIncrementTick+0xce> jal	1c000ff8 <uxListRemove>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2783
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1c0011ae <xTaskIncrementTick+0xd0> lw	a5,40(s0)
1c0011b0 <xTaskIncrementTick+0xd2> beqz	a5,1c0011b8 <xTaskIncrementTick+0xda>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2785
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1c0011b2 <xTaskIncrementTick+0xd4> addi	a0,s0,24
1c0011b6 <xTaskIncrementTick+0xd8> jal	1c000ff8 <uxListRemove>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2794
					prvAddTaskToReadyList( pxTCB );
1c0011b8 <xTaskIncrementTick+0xda> lw	a3,44(s0)
1c0011ba <xTaskIncrementTick+0xdc> li	a5,1
1c0011bc <xTaskIncrementTick+0xde> sll	a5,a5,a3
1c0011c0 <xTaskIncrementTick+0xe2> addi	a4,gp,-128 # 1c008de4 <uxTopReadyPriority>
1c0011c4 <xTaskIncrementTick+0xe6> lw	a2,0(a4)
1c0011c6 <xTaskIncrementTick+0xe8> or	a5,a5,a2
1c0011c8 <xTaskIncrementTick+0xea> sw	a5,0(a4)
1c0011ca <xTaskIncrementTick+0xec> slli	a5,a3,0x2
1c0011ce <xTaskIncrementTick+0xf0> add	a5,a5,a3
1c0011d0 <xTaskIncrementTick+0xf2> slli	a0,a5,0x2
1c0011d4 <xTaskIncrementTick+0xf6> mv	a1,s3
1c0011d6 <xTaskIncrementTick+0xf8> lui	a5,0x1c009
1c0011da <xTaskIncrementTick+0xfc> addi	a5,a5,-1768 # 1c008918 <pxReadyTasksLists>
1c0011de <xTaskIncrementTick+0x100> add	a0,a0,a5
1c0011e0 <xTaskIncrementTick+0x102> jal	1c000fb6 <vListInsertEnd>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2804
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1c0011e2 <xTaskIncrementTick+0x104> lw	a4,44(s0)
1c0011e4 <xTaskIncrementTick+0x106> lw	a5,-148(gp) # 1c008dd0 <pxCurrentTCB>
1c0011e8 <xTaskIncrementTick+0x10a> lw	a5,44(a5)
1c0011ea <xTaskIncrementTick+0x10c> bgeu	a4,a5,1c00118e <xTaskIncrementTick+0xb0>
1c0011ee <xTaskIncrementTick+0x110> j	1c001190 <xTaskIncrementTick+0xb2>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2711
BaseType_t xSwitchRequired = pdFALSE;
1c0011f0 <xTaskIncrementTick+0x112> li	s2,0
1c0011f2 <xTaskIncrementTick+0x114> j	1c001190 <xTaskIncrementTick+0xb2>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2751
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c0011f4 <xTaskIncrementTick+0x116> li	a4,-1
1c0011f6 <xTaskIncrementTick+0x118> sw	a4,-124(gp) # 1c008de8 <xNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2752
					break;
1c0011fa <xTaskIncrementTick+0x11c> j	1c00112c <xTaskIncrementTick+0x4e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2770
						xNextTaskUnblockTime = xItemValue;
1c0011fc <xTaskIncrementTick+0x11e> sw	a5,-124(gp) # 1c008de8 <xNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2771
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
1c001200 <xTaskIncrementTick+0x122> j	1c00112c <xTaskIncrementTick+0x4e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2840
				vApplicationTickHook();
1c001202 <xTaskIncrementTick+0x124> jal	ra,1c002576 <vApplicationTickHook>
1c001206 <xTaskIncrementTick+0x128> j	1c001156 <xTaskIncrementTick+0x78>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2864
		++xPendedTicks;
1c001208 <xTaskIncrementTick+0x12a> addi	a5,gp,-116 # 1c008df0 <xPendedTicks>
1c00120c <xTaskIncrementTick+0x12e> lw	a4,0(a5)
1c00120e <xTaskIncrementTick+0x130> addi	a4,a4,1
1c001210 <xTaskIncrementTick+0x132> sw	a4,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2870
			vApplicationTickHook();
1c001212 <xTaskIncrementTick+0x134> jal	ra,1c002576 <vApplicationTickHook>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2711
BaseType_t xSwitchRequired = pdFALSE;
1c001216 <xTaskIncrementTick+0x138> li	s2,0
1c001218 <xTaskIncrementTick+0x13a> j	1c00115c <xTaskIncrementTick+0x7e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2853
				xSwitchRequired = pdTRUE;
1c00121a <xTaskIncrementTick+0x13c> li	s2,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2875
	return xSwitchRequired;
1c00121c <xTaskIncrementTick+0x13e> j	1c00115c <xTaskIncrementTick+0x7e>
vTaskSwitchContext():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2991
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1c00121e <vTaskSwitchContext> lw	a5,-132(gp) # 1c008de0 <uxSchedulerSuspended>
1c001222 <vTaskSwitchContext+0x4> beqz	a5,1c00122c <vTaskSwitchContext+0xe>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2995
		xYieldPending = pdTRUE;
1c001224 <vTaskSwitchContext+0x6> li	a4,1
1c001226 <vTaskSwitchContext+0x8> sw	a4,-104(gp) # 1c008dfc <xYieldPending>
1c00122a <vTaskSwitchContext+0xc> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2990
{
1c00122c <vTaskSwitchContext+0xe> addi	sp,sp,-16
1c00122e <vTaskSwitchContext+0x10> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2999
		xYieldPending = pdFALSE;
1c001230 <vTaskSwitchContext+0x12> sw	zero,-104(gp) # 1c008dfc <xYieldPending>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3030
		taskCHECK_FOR_STACK_OVERFLOW();
1c001234 <vTaskSwitchContext+0x16> lw	a5,-148(gp) # 1c008dd0 <pxCurrentTCB>
1c001238 <vTaskSwitchContext+0x1a> lw	a4,48(a5)
1c00123a <vTaskSwitchContext+0x1c> lw	a3,0(a4)
1c00123c <vTaskSwitchContext+0x1e> lui	a5,0xa5a5a
1c001240 <vTaskSwitchContext+0x22> addi	a5,a5,1445 # a5a5a5a5 <__heap_l2_shared_start+0x89a49ec5>
1c001244 <vTaskSwitchContext+0x26> bne	a3,a5,1c001256 <vTaskSwitchContext+0x38>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3030 (discriminator 2)
1c001248 <vTaskSwitchContext+0x2a> lw	a3,4(a4)
1c00124a <vTaskSwitchContext+0x2c> lui	a5,0xa5a5a
1c00124e <vTaskSwitchContext+0x30> addi	a5,a5,1445 # a5a5a5a5 <__heap_l2_shared_start+0x89a49ec5>
1c001252 <vTaskSwitchContext+0x34> beq	a3,a5,1c0012d8 <vTaskSwitchContext+0xba>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3030 (discriminator 7)
1c001256 <vTaskSwitchContext+0x38> addi	a5,gp,-148 # 1c008dd0 <pxCurrentTCB>
1c00125a <vTaskSwitchContext+0x3c> lw	a0,0(a5)
1c00125c <vTaskSwitchContext+0x3e> lw	a1,0(a5)
1c00125e <vTaskSwitchContext+0x40> addi	a1,a1,52
1c001262 <vTaskSwitchContext+0x44> jal	ra,1c00255e <vApplicationStackOverflowHook>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3041 (discriminator 9)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c001266 <vTaskSwitchContext+0x48> lw	a4,-128(gp) # 1c008de4 <uxTopReadyPriority>
1c00126a <vTaskSwitchContext+0x4c> p.fl1	a4,a4
1c00126e <vTaskSwitchContext+0x50> slli	a3,a4,0x2
1c001272 <vTaskSwitchContext+0x54> add	a3,a3,a4
1c001274 <vTaskSwitchContext+0x56> slli	a2,a3,0x2
1c001278 <vTaskSwitchContext+0x5a> lui	a5,0x1c009
1c00127c <vTaskSwitchContext+0x5e> addi	a5,a5,-1768 # 1c008918 <pxReadyTasksLists>
1c001280 <vTaskSwitchContext+0x62> add	a5,a5,a2
1c001282 <vTaskSwitchContext+0x64> lw	a5,0(a5)
1c001284 <vTaskSwitchContext+0x66> beqz	a5,1c0012f6 <vTaskSwitchContext+0xd8>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3041 (discriminator 2)
1c001286 <vTaskSwitchContext+0x68> slli	a3,a4,0x2
1c00128a <vTaskSwitchContext+0x6c> add	a3,a3,a4
1c00128c <vTaskSwitchContext+0x6e> slli	a2,a3,0x2
1c001290 <vTaskSwitchContext+0x72> lui	a5,0x1c009
1c001294 <vTaskSwitchContext+0x76> addi	a5,a5,-1768 # 1c008918 <pxReadyTasksLists>
1c001298 <vTaskSwitchContext+0x7a> add	a5,a5,a2
1c00129a <vTaskSwitchContext+0x7c> lw	a3,4(a5)
1c00129c <vTaskSwitchContext+0x7e> lw	a3,4(a3)
1c00129e <vTaskSwitchContext+0x80> sw	a3,4(a5)
1c0012a0 <vTaskSwitchContext+0x82> addi	a5,a5,8
1c0012a2 <vTaskSwitchContext+0x84> beq	a3,a5,1c001318 <vTaskSwitchContext+0xfa>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3041 (discriminator 5)
1c0012a6 <vTaskSwitchContext+0x88> slli	a5,a4,0x2
1c0012aa <vTaskSwitchContext+0x8c> add	a4,a4,a5
1c0012ac <vTaskSwitchContext+0x8e> slli	a3,a4,0x2
1c0012b0 <vTaskSwitchContext+0x92> lui	a5,0x1c009
1c0012b4 <vTaskSwitchContext+0x96> addi	a5,a5,-1768 # 1c008918 <pxReadyTasksLists>
1c0012b8 <vTaskSwitchContext+0x9a> add	a5,a5,a3
1c0012ba <vTaskSwitchContext+0x9c> lw	a5,4(a5)
1c0012bc <vTaskSwitchContext+0x9e> lw	a4,12(a5)
1c0012be <vTaskSwitchContext+0xa0> addi	a5,gp,-148 # 1c008dd0 <pxCurrentTCB>
1c0012c2 <vTaskSwitchContext+0xa4> sw	a4,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3057 (discriminator 5)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1c0012c4 <vTaskSwitchContext+0xa6> lw	a5,0(a5)
1c0012c6 <vTaskSwitchContext+0xa8> addi	a5,a5,88
1c0012ca <vTaskSwitchContext+0xac> lui	a4,0x1c009
1c0012ce <vTaskSwitchContext+0xb0> sw	a5,-1780(a4) # 1c00890c <_impure_ptr>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3061 (discriminator 5)
}
1c0012d2 <vTaskSwitchContext+0xb4> lw	ra,12(sp)
1c0012d4 <vTaskSwitchContext+0xb6> addi	sp,sp,16
1c0012d6 <vTaskSwitchContext+0xb8> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3030 (discriminator 4)
		taskCHECK_FOR_STACK_OVERFLOW();
1c0012d8 <vTaskSwitchContext+0xba> lw	a3,8(a4)
1c0012da <vTaskSwitchContext+0xbc> lui	a5,0xa5a5a
1c0012de <vTaskSwitchContext+0xc0> addi	a5,a5,1445 # a5a5a5a5 <__heap_l2_shared_start+0x89a49ec5>
1c0012e2 <vTaskSwitchContext+0xc4> bne	a3,a5,1c001256 <vTaskSwitchContext+0x38>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3030 (discriminator 6)
1c0012e6 <vTaskSwitchContext+0xc8> lw	a4,12(a4)
1c0012e8 <vTaskSwitchContext+0xca> lui	a5,0xa5a5a
1c0012ec <vTaskSwitchContext+0xce> addi	a5,a5,1445 # a5a5a5a5 <__heap_l2_shared_start+0x89a49ec5>
1c0012f0 <vTaskSwitchContext+0xd2> bne	a4,a5,1c001256 <vTaskSwitchContext+0x38>
1c0012f4 <vTaskSwitchContext+0xd6> j	1c001266 <vTaskSwitchContext+0x48>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3041 (discriminator 1)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0012f6 <vTaskSwitchContext+0xd8> lui	a3,0x1c008
1c0012fa <vTaskSwitchContext+0xdc> addi	a3,a3,196 # 1c0080c4 <__l2_priv0_end+0x45f0>
1c0012fe <vTaskSwitchContext+0xe0> lui	a2,0x1c008
1c001302 <vTaskSwitchContext+0xe4> addi	a2,a2,368 # 1c008170 <__func__.3257>
1c001306 <vTaskSwitchContext+0xe8> lui	a1,0x1
1c001308 <vTaskSwitchContext+0xea> addi	a1,a1,-1055 # 00000be1 <__stack_size+0x3e1>
1c00130c <vTaskSwitchContext+0xee> lui	a0,0x1c008
1c001310 <vTaskSwitchContext+0xf2> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x4534>
1c001314 <vTaskSwitchContext+0xf6> jal	ra,1c002588 <__assert_func>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3041 (discriminator 3)
1c001318 <vTaskSwitchContext+0xfa> lw	a1,4(a3)
1c00131a <vTaskSwitchContext+0xfc> lui	a5,0x1c009
1c00131e <vTaskSwitchContext+0x100> addi	a5,a5,-1768 # 1c008918 <pxReadyTasksLists>
1c001322 <vTaskSwitchContext+0x104> add	a5,a5,a2
1c001324 <vTaskSwitchContext+0x106> sw	a1,4(a5)
1c001326 <vTaskSwitchContext+0x108> j	1c0012a6 <vTaskSwitchContext+0x88>
vTaskEnterCritical():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4291
		portDISABLE_INTERRUPTS();
1c001328 <vTaskEnterCritical> csrci	mstatus,8
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4293
		if( xSchedulerRunning != pdFALSE )
1c00132c <vTaskEnterCritical+0x4> lw	a5,-112(gp) # 1c008df4 <xSchedulerRunning>
1c001330 <vTaskEnterCritical+0x8> beqz	a5,1c001340 <vTaskEnterCritical+0x18>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4295
			( pxCurrentTCB->uxCriticalNesting )++;
1c001332 <vTaskEnterCritical+0xa> addi	a5,gp,-148 # 1c008dd0 <pxCurrentTCB>
1c001336 <vTaskEnterCritical+0xe> lw	a3,0(a5)
1c001338 <vTaskEnterCritical+0x10> lw	a4,68(a3)
1c00133a <vTaskEnterCritical+0x12> addi	a4,a4,1
1c00133c <vTaskEnterCritical+0x14> sw	a4,68(a3)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4303
			if( pxCurrentTCB->uxCriticalNesting == 1 )
1c00133e <vTaskEnterCritical+0x16> lw	a5,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4312
	}
1c001340 <vTaskEnterCritical+0x18> ret
vTaskExitCritical():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4321
		if( xSchedulerRunning != pdFALSE )
1c001342 <vTaskExitCritical> lw	a5,-112(gp) # 1c008df4 <xSchedulerRunning>
1c001346 <vTaskExitCritical+0x4> beqz	a5,1c001366 <vTaskExitCritical+0x24>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4323
			if( pxCurrentTCB->uxCriticalNesting > 0U )
1c001348 <vTaskExitCritical+0x6> lw	a5,-148(gp) # 1c008dd0 <pxCurrentTCB>
1c00134c <vTaskExitCritical+0xa> lw	a5,68(a5)
1c00134e <vTaskExitCritical+0xc> beqz	a5,1c001366 <vTaskExitCritical+0x24>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4325
				( pxCurrentTCB->uxCriticalNesting )--;
1c001350 <vTaskExitCritical+0xe> addi	a5,gp,-148 # 1c008dd0 <pxCurrentTCB>
1c001354 <vTaskExitCritical+0x12> lw	a3,0(a5)
1c001356 <vTaskExitCritical+0x14> lw	a4,68(a3)
1c001358 <vTaskExitCritical+0x16> addi	a4,a4,-1
1c00135a <vTaskExitCritical+0x18> sw	a4,68(a3)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4327
				if( pxCurrentTCB->uxCriticalNesting == 0U )
1c00135c <vTaskExitCritical+0x1a> lw	a5,0(a5)
1c00135e <vTaskExitCritical+0x1c> lw	a5,68(a5)
1c001360 <vTaskExitCritical+0x1e> bnez	a5,1c001366 <vTaskExitCritical+0x24>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4329
					portENABLE_INTERRUPTS();
1c001362 <vTaskExitCritical+0x20> csrsi	mstatus,8
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4345
	}
1c001366 <vTaskExitCritical+0x24> ret
xTaskResumeAll():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2195
{
1c001368 <xTaskResumeAll> addi	sp,sp,-16
1c00136a <xTaskResumeAll+0x2> sw	ra,12(sp)
1c00136c <xTaskResumeAll+0x4> sw	s0,8(sp)
1c00136e <xTaskResumeAll+0x6> sw	s1,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2201
	configASSERT( uxSchedulerSuspended );
1c001370 <xTaskResumeAll+0x8> lw	a5,-132(gp) # 1c008de0 <uxSchedulerSuspended>
1c001374 <xTaskResumeAll+0xc> beqz	a5,1c001392 <xTaskResumeAll+0x2a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2208
	taskENTER_CRITICAL();
1c001376 <xTaskResumeAll+0xe> jal	1c001328 <vTaskEnterCritical>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2210
		--uxSchedulerSuspended;
1c001378 <xTaskResumeAll+0x10> addi	a5,gp,-132 # 1c008de0 <uxSchedulerSuspended>
1c00137c <xTaskResumeAll+0x14> lw	a4,0(a5)
1c00137e <xTaskResumeAll+0x16> addi	a4,a4,-1
1c001380 <xTaskResumeAll+0x18> sw	a4,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2212
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c001382 <xTaskResumeAll+0x1a> lw	a5,0(a5)
1c001384 <xTaskResumeAll+0x1c> bnez	a5,1c00144e <xTaskResumeAll+0xe6>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2214
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1c001388 <xTaskResumeAll+0x20> lw	a5,-136(gp) # 1c008ddc <uxCurrentNumberOfTasks>
1c00138c <xTaskResumeAll+0x24> bnez	a5,1c0013b4 <xTaskResumeAll+0x4c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2197
BaseType_t xAlreadyYielded = pdFALSE;
1c00138e <xTaskResumeAll+0x26> li	s0,0
1c001390 <xTaskResumeAll+0x28> j	1c001450 <xTaskResumeAll+0xe8>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2201 (discriminator 1)
	configASSERT( uxSchedulerSuspended );
1c001392 <xTaskResumeAll+0x2a> lui	a3,0x1c008
1c001396 <xTaskResumeAll+0x2e> addi	a3,a3,296 # 1c008128 <__l2_priv0_end+0x4654>
1c00139a <xTaskResumeAll+0x32> lui	a2,0x1c008
1c00139e <xTaskResumeAll+0x36> addi	a2,a2,332 # 1c00814c <__func__.3171>
1c0013a2 <xTaskResumeAll+0x3a> lui	a1,0x1
1c0013a4 <xTaskResumeAll+0x3c> addi	a1,a1,-1895 # 00000899 <__stack_size+0x99>
1c0013a8 <xTaskResumeAll+0x40> lui	a0,0x1c008
1c0013ac <xTaskResumeAll+0x44> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x4534>
1c0013b0 <xTaskResumeAll+0x48> jal	ra,1c002588 <__assert_func>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2196
TCB_t *pxTCB = NULL;
1c0013b4 <xTaskResumeAll+0x4c> li	s0,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2218
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1c0013b6 <xTaskResumeAll+0x4e> lui	a5,0x1c009
1c0013ba <xTaskResumeAll+0x52> lw	a5,-1668(a5) # 1c00897c <xPendingReadyList>
1c0013be <xTaskResumeAll+0x56> beqz	a5,1c00141c <xTaskResumeAll+0xb4>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2220
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0013c0 <xTaskResumeAll+0x58> lui	a5,0x1c009
1c0013c4 <xTaskResumeAll+0x5c> addi	a5,a5,-1668 # 1c00897c <xPendingReadyList>
1c0013c8 <xTaskResumeAll+0x60> lw	a5,12(a5)
1c0013ca <xTaskResumeAll+0x62> lw	s0,12(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2221
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1c0013cc <xTaskResumeAll+0x64> addi	a0,s0,24
1c0013d0 <xTaskResumeAll+0x68> jal	ra,1c000ff8 <uxListRemove>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2222
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c0013d4 <xTaskResumeAll+0x6c> addi	s1,s0,4
1c0013d8 <xTaskResumeAll+0x70> mv	a0,s1
1c0013da <xTaskResumeAll+0x72> jal	ra,1c000ff8 <uxListRemove>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2223
					prvAddTaskToReadyList( pxTCB );
1c0013de <xTaskResumeAll+0x76> lw	a0,44(s0)
1c0013e0 <xTaskResumeAll+0x78> li	a4,1
1c0013e2 <xTaskResumeAll+0x7a> sll	a4,a4,a0
1c0013e6 <xTaskResumeAll+0x7e> addi	a3,gp,-128 # 1c008de4 <uxTopReadyPriority>
1c0013ea <xTaskResumeAll+0x82> lw	a5,0(a3)
1c0013ec <xTaskResumeAll+0x84> or	a4,a4,a5
1c0013ee <xTaskResumeAll+0x86> sw	a4,0(a3)
1c0013f0 <xTaskResumeAll+0x88> slli	a5,a0,0x2
1c0013f4 <xTaskResumeAll+0x8c> add	a5,a5,a0
1c0013f6 <xTaskResumeAll+0x8e> slli	a5,a5,0x2
1c0013f8 <xTaskResumeAll+0x90> mv	a1,s1
1c0013fa <xTaskResumeAll+0x92> lui	a0,0x1c009
1c0013fe <xTaskResumeAll+0x96> addi	a0,a0,-1768 # 1c008918 <pxReadyTasksLists>
1c001402 <xTaskResumeAll+0x9a> add	a0,a0,a5
1c001404 <xTaskResumeAll+0x9c> jal	ra,1c000fb6 <vListInsertEnd>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2227
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1c001408 <xTaskResumeAll+0xa0> lw	a4,44(s0)
1c00140a <xTaskResumeAll+0xa2> lw	a5,-148(gp) # 1c008dd0 <pxCurrentTCB>
1c00140e <xTaskResumeAll+0xa6> lw	a5,44(a5)
1c001410 <xTaskResumeAll+0xa8> bltu	a4,a5,1c0013b6 <xTaskResumeAll+0x4e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2229
						xYieldPending = pdTRUE;
1c001414 <xTaskResumeAll+0xac> li	a4,1
1c001416 <xTaskResumeAll+0xae> sw	a4,-104(gp) # 1c008dfc <xYieldPending>
1c00141a <xTaskResumeAll+0xb2> j	1c0013b6 <xTaskResumeAll+0x4e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2237
				if( pxTCB != NULL )
1c00141c <xTaskResumeAll+0xb4> beqz	s0,1c001422 <xTaskResumeAll+0xba>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2245
					prvResetNextTaskUnblockTime();
1c00141e <xTaskResumeAll+0xb6> jal	ra,1c00101e <prvResetNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2253
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
1c001422 <xTaskResumeAll+0xba> lw	s0,-116(gp) # 1c008df0 <xPendedTicks>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2255
					if( xPendedCounts > ( TickType_t ) 0U )
1c001426 <xTaskResumeAll+0xbe> bnez	s0,1c00143a <xTaskResumeAll+0xd2>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2278
				if( xYieldPending != pdFALSE )
1c001428 <xTaskResumeAll+0xc0> lw	s0,-104(gp) # 1c008dfc <xYieldPending>
1c00142c <xTaskResumeAll+0xc4> beqz	s0,1c001450 <xTaskResumeAll+0xe8>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2285
					taskYIELD_IF_USING_PREEMPTION();
1c00142e <xTaskResumeAll+0xc6> ecall
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2282
						xAlreadyYielded = pdTRUE;
1c001432 <xTaskResumeAll+0xca> li	s0,1
1c001434 <xTaskResumeAll+0xcc> j	1c001450 <xTaskResumeAll+0xe8>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2267
							--xPendedCounts;
1c001436 <xTaskResumeAll+0xce> addi	s0,s0,-1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2268
						} while( xPendedCounts > ( TickType_t ) 0U );
1c001438 <xTaskResumeAll+0xd0> beqz	s0,1c001448 <xTaskResumeAll+0xe0>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2259
							if( xTaskIncrementTick() != pdFALSE )
1c00143a <xTaskResumeAll+0xd2> jal	ra,1c0010de <xTaskIncrementTick>
1c00143e <xTaskResumeAll+0xd6> beqz	a0,1c001436 <xTaskResumeAll+0xce>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2261
								xYieldPending = pdTRUE;
1c001440 <xTaskResumeAll+0xd8> li	a4,1
1c001442 <xTaskResumeAll+0xda> sw	a4,-104(gp) # 1c008dfc <xYieldPending>
1c001446 <xTaskResumeAll+0xde> j	1c001436 <xTaskResumeAll+0xce>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2270
						xPendedTicks = 0;
1c001448 <xTaskResumeAll+0xe0> sw	zero,-116(gp) # 1c008df0 <xPendedTicks>
1c00144c <xTaskResumeAll+0xe4> j	1c001428 <xTaskResumeAll+0xc0>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2197
BaseType_t xAlreadyYielded = pdFALSE;
1c00144e <xTaskResumeAll+0xe6> li	s0,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2298
	taskEXIT_CRITICAL();
1c001450 <xTaskResumeAll+0xe8> jal	1c001342 <vTaskExitCritical>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2301
}
1c001452 <xTaskResumeAll+0xea> mv	a0,s0
1c001454 <xTaskResumeAll+0xec> lw	ra,12(sp)
1c001456 <xTaskResumeAll+0xee> lw	s0,8(sp)
1c001458 <xTaskResumeAll+0xf0> lw	s1,4(sp)
1c00145a <xTaskResumeAll+0xf2> addi	sp,sp,16
1c00145c <xTaskResumeAll+0xf4> ret
vTaskDelay():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1346
		if( xTicksToDelay > ( TickType_t ) 0U )
1c00145e <vTaskDelay> beqz	a0,1c0014aa <vTaskDelay+0x4c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1342
	{
1c001460 <vTaskDelay+0x2> addi	sp,sp,-16
1c001462 <vTaskDelay+0x4> sw	ra,12(sp)
1c001464 <vTaskDelay+0x6> sw	s0,8(sp)
1c001466 <vTaskDelay+0x8> mv	s0,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1348
			configASSERT( uxSchedulerSuspended == 0 );
1c001468 <vTaskDelay+0xa> lw	a5,-132(gp) # 1c008de0 <uxSchedulerSuspended>
1c00146c <vTaskDelay+0xe> bnez	a5,1c00148a <vTaskDelay+0x2c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1349
			vTaskSuspendAll();
1c00146e <vTaskDelay+0x10> jal	ra,1c0010d2 <vTaskSuspendAll>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1360
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1c001472 <vTaskDelay+0x14> li	a1,0
1c001474 <vTaskDelay+0x16> mv	a0,s0
1c001476 <vTaskDelay+0x18> jal	ra,1c00103e <prvAddCurrentTaskToDelayedList>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1362
			xAlreadyYielded = xTaskResumeAll();
1c00147a <vTaskDelay+0x1c> jal	1c001368 <xTaskResumeAll>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1371
		if( xAlreadyYielded == pdFALSE )
1c00147c <vTaskDelay+0x1e> bnez	a0,1c001482 <vTaskDelay+0x24>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1373
			portYIELD_WITHIN_API();
1c00147e <vTaskDelay+0x20> ecall
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1379
	}
1c001482 <vTaskDelay+0x24> lw	ra,12(sp)
1c001484 <vTaskDelay+0x26> lw	s0,8(sp)
1c001486 <vTaskDelay+0x28> addi	sp,sp,16
1c001488 <vTaskDelay+0x2a> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1348 (discriminator 1)
			configASSERT( uxSchedulerSuspended == 0 );
1c00148a <vTaskDelay+0x2c> lui	a3,0x1c008
1c00148e <vTaskDelay+0x30> addi	a3,a3,268 # 1c00810c <__l2_priv0_end+0x4638>
1c001492 <vTaskDelay+0x34> lui	a2,0x1c008
1c001496 <vTaskDelay+0x38> addi	a2,a2,320 # 1c008140 <__func__.3102>
1c00149a <vTaskDelay+0x3c> li	a1,1348
1c00149e <vTaskDelay+0x40> lui	a0,0x1c008
1c0014a2 <vTaskDelay+0x44> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x4534>
1c0014a6 <vTaskDelay+0x48> jal	ra,1c002588 <__assert_func>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1373
			portYIELD_WITHIN_API();
1c0014aa <vTaskDelay+0x4c> ecall
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:1377
			mtCOVERAGE_TEST_MARKER();
1c0014ae <vTaskDelay+0x50> ret
_close():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:134
}

int _close(int file)
{
	return -1;
}
1c0014b0 <_close> li	a0,-1
1c0014b2 <_close+0x2> ret
_exit():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:143
	errno = ENOMEM;
	return -1;
}

void _exit(int exit_status)
{
1c0014b4 <_exit> addi	sp,sp,-16
1c0014b6 <_exit+0x2> mv	a4,a0
readw():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:82 (discriminator 1)
1c0014b8 <_exit+0x4> lui	a5,0x1a102
1c0014bc <_exit+0x8> addi	a5,a5,152 # 1a102098 <__heap_l1_cluster_start+0xa102078>
1c0014c0 <_exit+0xc> lw	a5,0(a5)
_exit():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:148 (discriminator 1)
#if CONFIG_STDIO == STDIO_UART
	/* wait for the udma stdout to be emptied */
	while (readw((UDMA_UART(STDIO_UART_DEVICE_ID) +
		      UDMA_CHANNEL_TX_OFFSET +
		      UDMA_CHANNEL_CFG_OFFSET)) & UDMA_CORE_RX_CFG_EN_MASK) {
1c0014c2 <_exit+0xe> andi	a5,a5,16
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:146 (discriminator 1)
	while (readw((UDMA_UART(STDIO_UART_DEVICE_ID) +
1c0014c4 <_exit+0x10> bnez	a5,1c0014b8 <_exit+0x4>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:152
	}
	/* there is no way to check when the udma output fifo is empty so we
	 * just wait a few cycles */
	for (volatile int i = 0; i < 1024 * 3; i++)
1c0014c6 <_exit+0x12> sw	zero,12(sp)
1c0014c8 <_exit+0x14> j	1c0014d0 <_exit+0x1c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:152 (discriminator 3)
1c0014ca <_exit+0x16> lw	a5,12(sp)
1c0014cc <_exit+0x18> addi	a5,a5,1
1c0014ce <_exit+0x1a> sw	a5,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:152 (discriminator 1)
1c0014d0 <_exit+0x1c> lw	a3,12(sp)
1c0014d2 <_exit+0x1e> lui	a5,0x1
1c0014d4 <_exit+0x20> addi	a5,a5,-1025 # 00000bff <__stack_size+0x3ff>
1c0014d8 <_exit+0x24> bge	a5,a3,1c0014ca <_exit+0x16>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:155
	    ;
#endif
	writew(exit_status | (1 << APB_SOC_STATUS_EOC_BIT),
1c0014dc <_exit+0x28> p.bset	a5,a4,0,31
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
	asm volatile("sw %0, 0(%1)"
1c0014e0 <_exit+0x2c> lui	a4,0x1a104
1c0014e4 <_exit+0x30> addi	a4,a4,160 # 1a1040a0 <__heap_l1_cluster_start+0xa104080>
1c0014e8 <_exit+0x34> sw	a5,0(a4)
_exit():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:158 (discriminator 1)
	       (uintptr_t)(APB_SOC_CTRL_ADDR + APB_SOC_CORESTATUS_OFFSET));
	for (;;)
	    asm volatile("wfi");
1c0014ea <_exit+0x36> wfi
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:157 (discriminator 1)
	for (;;)
1c0014ee <_exit+0x3a> j	1c0014ea <_exit+0x36>
_fstat():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:175
	return -1;
}

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1c0014f0 <_fstat> lui	a5,0x2
1c0014f2 <_fstat+0x2> sw	a5,4(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:179
	return 0;
	// errno = -ENOSYS;
	// return -1;
}
1c0014f4 <_fstat+0x4> li	a0,0
1c0014f6 <_fstat+0x6> ret
_getpid():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:202
}

int _getpid()
{
	return 1;
}
1c0014f8 <_getpid> li	a0,1
1c0014fa <_getpid+0x2> ret
_isatty():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:212
	return -1;
}

int _isatty(int file)
{
	return (file == STDOUT_FILENO);
1c0014fc <_isatty> addi	a0,a0,-1
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:213
}
1c0014fe <_isatty+0x2> seqz	a0,a0
1c001502 <_isatty+0x6> ret
_kill():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:217

int _kill(int pid, int sig)
{
	errno = EINVAL;
1c001504 <_kill> li	a4,22
1c001506 <_kill+0x2> sw	a4,964(gp) # 1c009228 <errno>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:219
	return -1;
}
1c00150a <_kill+0x6> li	a0,-1
1c00150c <_kill+0x8> ret
_lseek():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:230
}

off_t _lseek(int file, off_t ptr, int dir)
{
	return 0;
}
1c00150e <_lseek> li	a0,0
1c001510 <_lseek+0x2> ret
_read():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:252
}

ssize_t _read(int file, void *ptr, size_t len)
{
	return 0;
}
1c001512 <_read> li	a0,0
1c001514 <_read+0x2> ret
_write():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:306
	uint32_t mhartid = csr_read(CSR_MHARTID);
	return (mhartid >> 5) & 0x3f;
}

ssize_t _write(int file, const void *ptr, size_t len)
{
1c001516 <_write> addi	sp,sp,-16
1c001518 <_write+0x2> sw	ra,12(sp)
1c00151a <_write+0x4> sw	s0,8(sp)
1c00151c <_write+0x6> sw	s1,4(sp)
1c00151e <_write+0x8> sw	s2,0(sp)
1c001520 <_write+0xa> mv	s1,a2
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:308
	/* fuse stout and stderr. remains to be seen if this is a good idea */
	if (file != STDOUT_FILENO && file != STDERR_FILENO) {
1c001522 <_write+0xc> addi	a0,a0,-1
1c001524 <_write+0xe> li	a5,1
1c001526 <_write+0x10> bltu	a5,a0,1c001572 <_write+0x5c>
readw():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:82 (discriminator 1)
	asm volatile("lw %0, 0(%1)"
1c00152a <_write+0x14> lui	a5,0x1a102
1c00152e <_write+0x18> addi	a5,a5,152 # 1a102098 <__heap_l1_cluster_start+0xa102078>
1c001532 <_write+0x1c> lw	a5,0(a5)
_write():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:328 (discriminator 1)
	static char copyout_buf[STDIO_UART_BUFSIZE] = {0};

	/* make sure we can issue a dma transfer, so wait until tx is done */
	while (readw((UDMA_UART(STDIO_UART_DEVICE_ID) +
		      UDMA_CHANNEL_TX_OFFSET +
		      UDMA_CHANNEL_CFG_OFFSET)) & UDMA_CORE_RX_CFG_EN_MASK) {
1c001534 <_write+0x1e> andi	a5,a5,16
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:326 (discriminator 1)
	while (readw((UDMA_UART(STDIO_UART_DEVICE_ID) +
1c001536 <_write+0x20> bnez	a5,1c00152a <_write+0x14>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:335
	/* TODO: there is a race condition here when multiple threads start
	 * executing from here */

	/* copy to tmp buffer so that when we later functions don't clobber our
	 * buffer */
	memcpy(copyout_buf, ptr, len < STDIO_UART_BUFSIZE ? len : STDIO_UART_BUFSIZE);
1c001538 <_write+0x22> li	s0,256
1c00153c <_write+0x26> p.minu	s0,s1,s0
1c001540 <_write+0x2a> lui	a0,0x1c009
1c001544 <_write+0x2e> addi	s2,a0,-1628 # 1c0089a4 <copyout_buf.4127>
1c001548 <_write+0x32> mv	a2,s0
1c00154a <_write+0x34> addi	a0,a0,-1628
1c00154e <_write+0x38> jal	ra,1c000f90 <memcpy>
hal_write32():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/include/target.h:35
}

static inline void hal_write32(volatile void *addr, uint32_t value)
{
	asm volatile("" : : : "memory");
	*((volatile uint32_t *)addr) = value;
1c001552 <_write+0x3c> lui	a5,0x1a102
1c001556 <_write+0x40> addi	a5,a5,128 # 1a102080 <__heap_l1_cluster_start+0xa102060>
1c00155a <_write+0x44> sw	s2,16(a5)
1c00155e <_write+0x48> sw	s1,20(a5)
1c001560 <_write+0x4a> li	a4,16
1c001562 <_write+0x4c> sw	a4,24(a5)
_write():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:346

	/* We don't wait for the dma transfer to finish despite _write()'s
	 * blocking semantics. This should be ok since we are the only one's
	 * writing to uart */

	return len < STDIO_UART_BUFSIZE ? len : STDIO_UART_BUFSIZE;
1c001564 <_write+0x4e> mv	a0,s0
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:353
	/* just nop */
	return len;
#else
#error "CONFIG_STDIO is undefined"
#endif
}
1c001566 <_write+0x50> lw	ra,12(sp)
1c001568 <_write+0x52> lw	s0,8(sp)
1c00156a <_write+0x54> lw	s1,4(sp)
1c00156c <_write+0x56> lw	s2,0(sp)
1c00156e <_write+0x58> addi	sp,sp,16
1c001570 <_write+0x5a> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:309
		errno = ENOSYS;
1c001572 <_write+0x5c> li	a4,88
1c001576 <_write+0x60> sw	a4,964(gp) # 1c009228 <errno>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:310
		return -1;
1c00157a <_write+0x64> li	a0,-1
1c00157c <_write+0x66> j	1c001566 <_write+0x50>
_sbrk():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:366
	brk = addr;
	return 0;
}

void *_sbrk(ptrdiff_t incr)
{
1c00157e <_sbrk> mv	a5,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:368
	/* TODO: Check for stack collision by reading sp */
	char *old_brk = brk;
1c001580 <_sbrk+0x2> lui	a4,0x1c009
1c001584 <_sbrk+0x6> lw	a0,-1784(a4) # 1c008908 <brk>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:370

	if (brk + incr >= __heap_end) {
1c001588 <_sbrk+0xa> add	a5,a5,a0
1c00158a <_sbrk+0xc> lui	a4,0x1c00d
1c00158e <_sbrk+0x10> addi	a4,a4,560 # 1c00d230 <__heap_end>
1c001592 <_sbrk+0x14> bgeu	a5,a4,1c0015a0 <_sbrk+0x22>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:375
		errno = ENOMEM;
		return (void *)-1;
	}

	brk += incr;
1c001596 <_sbrk+0x18> lui	a4,0x1c009
1c00159a <_sbrk+0x1c> sw	a5,-1784(a4) # 1c008908 <brk>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:377
	return old_brk;
}
1c00159e <_sbrk+0x20> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:371
		errno = ENOMEM;
1c0015a0 <_sbrk+0x22> li	a4,12
1c0015a2 <_sbrk+0x24> sw	a4,964(gp) # 1c009228 <errno>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:372
		return (void *)-1;
1c0015a6 <_sbrk+0x28> li	a0,-1
1c0015a8 <_sbrk+0x2a> ret
__malloc_lock():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:380

void __malloc_lock(struct _reent *p)
{
1c0015aa <__malloc_lock> addi	sp,sp,-16
1c0015ac <__malloc_lock+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:384
	/* Make sure no mallocs inside ISRs */
	/* configASSERT(!xPortIsInsideInterrupt()); */
#ifdef CONFIG_FREERTOS_KERNEL
	vTaskSuspendAll();
1c0015ae <__malloc_lock+0x4> jal	ra,1c0010d2 <vTaskSuspendAll>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:386
#endif
}
1c0015b2 <__malloc_lock+0x8> lw	ra,12(sp)
1c0015b4 <__malloc_lock+0xa> addi	sp,sp,16
1c0015b6 <__malloc_lock+0xc> ret
__malloc_unlock():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:389

void __malloc_unlock(struct _reent *p)
{
1c0015b8 <__malloc_unlock> addi	sp,sp,-16
1c0015ba <__malloc_unlock+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:391
#ifdef CONFIG_FREERTOS_KERNEL
	(void)xTaskResumeAll();
1c0015bc <__malloc_unlock+0x4> jal	ra,1c001368 <xTaskResumeAll>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:393
#endif
}
1c0015c0 <__malloc_unlock+0x8> lw	ra,12(sp)
1c0015c2 <__malloc_unlock+0xa> addi	sp,sp,16
1c0015c4 <__malloc_unlock+0xc> ret
pi_cl_l1_free():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/cl_l1_malloc.c:50
    __restore_irq(irq);
    return ret_ptr;
}

void pi_cl_l1_free(struct pi_device *device, void *_chunk, int size)
{
1c0015c6 <pi_cl_l1_free> addi	sp,sp,-16
1c0015c8 <pi_cl_l1_free+0x2> sw	ra,12(sp)
1c0015ca <pi_cl_l1_free+0x4> sw	s0,8(sp)
__disable_irq():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/riscv.h:177
  \details Disables IRQ interrupts by clearing the MPIE-bit in the CPSR.
	   Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) static inline uint32_t __disable_irq(void)
{
	uint32_t val = csr_read_clear(MSTATUS_ADDR, BIT(MSTATUS_MIE_Pos));
1c0015cc <pi_cl_l1_free+0x6> csrrci	s0,mstatus,8
pi_cl_l1_free():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/cl_l1_malloc.c:52
    uint32_t irq = __disable_irq();
    __malloc_free(&__cl_l1_malloc, _chunk, size);
1c0015d0 <pi_cl_l1_free+0xa> addi	a0,gp,-72 # 1c008e1c <__cl_l1_malloc>
1c0015d4 <pi_cl_l1_free+0xe> jal	1c0015e2 <__malloc_free>
__restore_irq():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/riscv.h:157
	csr_write(MSTATUS_ADDR, irq);
1c0015d6 <pi_cl_l1_free+0x10> csrw	mstatus,s0
pi_cl_l1_free():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/cl_l1_malloc.c:54
    __restore_irq(irq);
}
1c0015da <pi_cl_l1_free+0x14> lw	ra,12(sp)
1c0015dc <pi_cl_l1_free+0x16> lw	s0,8(sp)
1c0015de <pi_cl_l1_free+0x18> addi	sp,sp,16
1c0015e0 <pi_cl_l1_free+0x1a> ret
__malloc_free():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:168
}

void __attribute__((noinline)) __malloc_free(malloc_t *a, void *_chunk, int32_t size)
{
    malloc_chunk_t *chunk = (malloc_chunk_t *) _chunk;
    malloc_chunk_t *next = a->first_free, *prev = 0;
1c0015e2 <__malloc_free> lw	a5,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:169
    size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c0015e4 <__malloc_free+0x2> addi	a2,a2,7
1c0015e6 <__malloc_free+0x4> p.bclr	a2,a2,2,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:168
    malloc_chunk_t *next = a->first_free, *prev = 0;
1c0015ea <__malloc_free+0x8> li	a4,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:171

    while (next && (next < chunk))
1c0015ec <__malloc_free+0xa> beqz	a5,1c0015f8 <__malloc_free+0x16>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:171 (discriminator 1)
1c0015ee <__malloc_free+0xc> bgeu	a5,a1,1c0015f8 <__malloc_free+0x16>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:173
    {
        prev = next;
1c0015f2 <__malloc_free+0x10> mv	a4,a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:174
        next = next->next;
1c0015f4 <__malloc_free+0x12> lw	a5,4(a5)
1c0015f6 <__malloc_free+0x14> j	1c0015ec <__malloc_free+0xa>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:177
    }

    if (((int8_t *) chunk + size) == (int8_t *) next)
1c0015f8 <__malloc_free+0x16> add	a3,a1,a2
1c0015fc <__malloc_free+0x1a> beq	a3,a5,1c001614 <__malloc_free+0x32>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:185
        chunk->size = size + next->size;
        chunk->next = next->next;
    }
    else
    {
        chunk->size = size;
1c001600 <__malloc_free+0x1e> sw	a2,0(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:186
        chunk->next = next;
1c001602 <__malloc_free+0x20> sw	a5,4(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:189
    }

    if (prev)
1c001604 <__malloc_free+0x22> beqz	a4,1c00162c <__malloc_free+0x4a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:191
    {
        if (((int8_t *) prev + prev->size) == (int8_t *) chunk)
1c001606 <__malloc_free+0x24> lw	a5,0(a4)
1c001608 <__malloc_free+0x26> add	a3,a4,a5
1c00160c <__malloc_free+0x2a> beq	a3,a1,1c001620 <__malloc_free+0x3e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:199
            prev->size += chunk->size;
            prev->next = chunk->next;
        }
        else
        {
            prev->next = chunk;
1c001610 <__malloc_free+0x2e> sw	a1,4(a4)
1c001612 <__malloc_free+0x30> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:180
        chunk->size = size + next->size;
1c001614 <__malloc_free+0x32> lw	a3,0(a5)
1c001616 <__malloc_free+0x34> add	a2,a2,a3
1c001618 <__malloc_free+0x36> sw	a2,0(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:181
        chunk->next = next->next;
1c00161a <__malloc_free+0x38> lw	a5,4(a5)
1c00161c <__malloc_free+0x3a> sw	a5,4(a1)
1c00161e <__malloc_free+0x3c> j	1c001604 <__malloc_free+0x22>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:194
            prev->size += chunk->size;
1c001620 <__malloc_free+0x3e> lw	a3,0(a1)
1c001622 <__malloc_free+0x40> add	a5,a5,a3
1c001624 <__malloc_free+0x42> sw	a5,0(a4)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:195
            prev->next = chunk->next;
1c001626 <__malloc_free+0x44> lw	a5,4(a1)
1c001628 <__malloc_free+0x46> sw	a5,4(a4)
1c00162a <__malloc_free+0x48> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:204
        }
    }
    else
    {
        a->first_free = chunk;
1c00162c <__malloc_free+0x4a> sw	a1,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:206
    }
}
1c00162e <__malloc_free+0x4c> ret
timer_irq_handler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:138
	system_core_clock_update();
	return system_core_clock;
}

void timer_irq_handler(void)
{
1c001630 <timer_irq_handler> addi	sp,sp,-16
1c001632 <timer_irq_handler+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:141
#warning requires critical section if interrupt nesting is used.

	if (xTaskIncrementTick() != 0) {
1c001634 <timer_irq_handler+0x4> jal	ra,1c0010de <xTaskIncrementTick>
1c001638 <timer_irq_handler+0x8> bnez	a0,1c001640 <timer_irq_handler+0x10>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:144
		vTaskSwitchContext();
	}
}
1c00163a <timer_irq_handler+0xa> lw	ra,12(sp)
1c00163c <timer_irq_handler+0xc> addi	sp,sp,16
1c00163e <timer_irq_handler+0xe> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:142
		vTaskSwitchContext();
1c001640 <timer_irq_handler+0x10> jal	ra,1c00121e <vTaskSwitchContext>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:144
}
1c001644 <timer_irq_handler+0x14> j	1c00163a <timer_irq_handler+0xa>
system_init():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:76
{
1c001646 <system_init> addi	sp,sp,-16
1c001648 <system_init+0x2> sw	ra,12(sp)
1c00164a <system_init+0x4> sw	s0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:78
	pulp_irq_init();
1c00164c <system_init+0x6> jal	ra,1c001a38 <pulp_irq_init>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:84
	isr_table[0x2] = cl_notify_fc_event_handler;
1c001650 <system_init+0xa> lui	a5,0x1c009
1c001654 <system_init+0xe> addi	a5,a5,-476 # 1c008e24 <isr_table>
1c001658 <system_init+0x12> lui	a4,0x1c001
1c00165c <system_init+0x16> addi	a4,a4,1798 # 1c001706 <cl_notify_fc_event_handler>
1c001660 <system_init+0x1a> sw	a4,8(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:86
	isr_table[0xa] = timer_irq_handler;
1c001662 <system_init+0x1c> lui	a4,0x1c001
1c001666 <system_init+0x20> addi	a4,a4,1584 # 1c001630 <timer_irq_handler>
1c00166a <system_init+0x24> sw	a4,40(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:87
	isr_table[0x1a] = fc_soc_event_handler; // 26
1c00166c <system_init+0x26> lui	a4,0x1c001
1c001670 <system_init+0x2a> addi	a4,a4,-158 # 1c000f62 <fc_soc_event_handler>
1c001674 <system_init+0x2e> sw	a4,104(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:92
	soc_eu_event_init();
1c001676 <system_init+0x30> jal	ra,1c001a52 <soc_eu_event_init>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:96
	pi_fc_event_handler_init(26); /* TODO: FIX THIS */
1c00167a <system_init+0x34> li	a0,26
1c00167c <system_init+0x36> jal	ra,1c001a8c <pi_fc_event_handler_init>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:100
	irq_clint_global_enable();
1c001680 <system_init+0x3a> jal	ra,1c001a26 <irq_clint_global_enable>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:102
	irq_clint_enable(IRQ_FC_EVT_TIMER0_LO);
1c001684 <system_init+0x3e> li	a0,10
1c001686 <system_init+0x40> jal	ra,1c001a2c <irq_clint_enable>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:104
	irq_clint_enable(IRQ_FC_EVT_SOC_EVT);
1c00168a <system_init+0x44> li	a0,26
1c00168c <system_init+0x46> jal	ra,1c001a2c <irq_clint_enable>
hal_or32():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/include/target.h:49
}

static inline void hal_or32(volatile void *addr, uint32_t value)
{
	asm volatile("" : : : "memory");
	*((volatile uint32_t *)addr) |= value;
1c001690 <system_init+0x4a> lui	s0,0x1a102
1c001694 <system_init+0x4e> lw	a5,0(s0)
1c001696 <system_init+0x50> p.bset	a5,a5,0,0
1c00169a <system_init+0x54> p.sw	a5,128(s0!) # 1a102080 <__heap_l1_cluster_start+0xa102060>
system_init():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:111
	uint32_t div = (pi_freq_get(PI_FREQ_DOMAIN_PERIPH) + baudrate / 2) / baudrate;
1c00169e <system_init+0x58> li	a0,2
1c0016a0 <system_init+0x5a> jal	1c0016e4 <pi_freq_get>
1c0016a2 <system_init+0x5c> lui	a5,0xe
1c0016a4 <system_init+0x5e> addi	a5,a5,256 # 0000e100 <__stack_size+0xd900>
1c0016a8 <system_init+0x62> add	a5,a5,a0
1c0016aa <system_init+0x64> lui	a0,0x1c
1c0016ac <system_init+0x66> addi	a0,a0,512 # 0001c200 <__heap_l1_cluster_size+0xc220>
1c0016b0 <system_init+0x6a> divu	a5,a5,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:118
	val |= REG_SET(UART_SETUP_CLKDIV, div - 1);
1c0016b4 <system_init+0x6e> addi	a5,a5,-1
1c0016b6 <system_init+0x70> slli	a5,a5,0x10
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:119
	val |= REG_SET(UART_SETUP_POLLING_EN, 1);
1c0016b8 <system_init+0x72> ori	a5,a5,790
hal_write32():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/include/target.h:35
	*((volatile uint32_t *)addr) = value;
1c0016bc <system_init+0x76> sw	a5,36(s0)
system_init():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:123
}
1c0016be <system_init+0x78> lw	ra,12(sp)
1c0016c0 <system_init+0x7a> lw	s0,8(sp)
1c0016c2 <system_init+0x7c> addi	sp,sp,16
1c0016c4 <system_init+0x7e> ret
vSystemIrqHandler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:177
	/* TODO: allow setting interrupt priority (to super high(?)) */
	irq_enable(IRQ_FC_EVT_TIMER0_LO);
}

void vSystemIrqHandler(uint32_t mcause)
{
1c0016c6 <vSystemIrqHandler> addi	sp,sp,-16
1c0016c8 <vSystemIrqHandler+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:179
	extern void (*isr_table[ISR_TABLE_SIZE])(void);
	isr_table[mcause & (ISR_TABLE_SIZE-1)]();
1c0016ca <vSystemIrqHandler+0x4> andi	a5,a0,255
1c0016ce <vSystemIrqHandler+0x8> lui	a0,0x1c009
1c0016d2 <vSystemIrqHandler+0xc> slli	a5,a5,0x2
1c0016d4 <vSystemIrqHandler+0xe> addi	a0,a0,-476 # 1c008e24 <isr_table>
1c0016d8 <vSystemIrqHandler+0x12> add	a0,a0,a5
1c0016da <vSystemIrqHandler+0x14> lw	a5,0(a0)
1c0016dc <vSystemIrqHandler+0x16> jalr	a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:180
}
1c0016de <vSystemIrqHandler+0x18> lw	ra,12(sp)
1c0016e0 <vSystemIrqHandler+0x1a> addi	sp,sp,16
1c0016e2 <vSystemIrqHandler+0x1c> ret
pi_freq_get():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clkconst.c:32
#include "freq.h"

uint32_t pi_freq_get(pi_freq_domain_e domain)
{
	/* TODO: build time switch between asic and fpga build */
	switch (domain) {
1c0016e4 <pi_freq_get> li	a5,1
1c0016e6 <pi_freq_get+0x2> bgeu	a5,a0,1c0016f8 <pi_freq_get+0x14>
1c0016ea <pi_freq_get+0x6> p.bneimm	a0,2,1c001702 <pi_freq_get+0x1e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clkconst.c:38
	case PI_FREQ_DOMAIN_FC:
		return FPGA_SYSTEM_CLOCK;
	case PI_FREQ_DOMAIN_CL:
		return FPGA_SYSTEM_CLOCK;
	case PI_FREQ_DOMAIN_PERIPH:
		return FPGA_PERIPH_CLOCK;
1c0016ee <pi_freq_get+0xa> lui	a0,0x989
1c0016f2 <pi_freq_get+0xe> addi	a0,a0,1664 # 00989680 <__heap_l2_shared_size+0x919d60>
1c0016f6 <pi_freq_get+0x12> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clkconst.c:32
	switch (domain) {
1c0016f8 <pi_freq_get+0x14> lui	a0,0x1313
1c0016fc <pi_freq_get+0x18> addi	a0,a0,-768 # 01312d00 <__heap_l2_shared_size+0x12a33e0>
1c001700 <pi_freq_get+0x1c> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clkconst.c:41
	}
	/* unreachable */
	return 0;
1c001702 <pi_freq_get+0x1e> li	a0,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clkconst.c:42
}
1c001704 <pi_freq_get+0x20> ret
cl_notify_fc_event_handler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:45
PI_FC_L1 pi_task_t delegate_task[NB_L1_TASKS] = {0};
PI_FC_L1 uint32_t delegate_task_mask = 0xFFFFFFFF;
PI_L2 pi_task_t delegate_task_l2[32-NB_L1_TASKS] = {0};

void cl_notify_fc_event_handler(void)
{
1c001706 <cl_notify_fc_event_handler> addi	sp,sp,-16
1c001708 <cl_notify_fc_event_handler+0x2> sw	ra,12(sp)
1c00170a <cl_notify_fc_event_handler+0x4> sw	s0,8(sp)
1c00170c <cl_notify_fc_event_handler+0x6> sw	s1,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:46
    PRINTF("enter cl notification to fc event handler \n\r");
1c00170e <cl_notify_fc_event_handler+0x8> li	a2,46
1c001712 <cl_notify_fc_event_handler+0xc> lui	a1,0x1c008
1c001716 <cl_notify_fc_event_handler+0x10> addi	a1,a1,540 # 1c00821c <__func__.4718>
1c00171a <cl_notify_fc_event_handler+0x14> lui	a0,0x1c008
1c00171e <cl_notify_fc_event_handler+0x18> addi	a0,a0,388 # 1c008184 <__func__.3257+0x14>
1c001722 <cl_notify_fc_event_handler+0x1c> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:47
    struct cluster_driver_data *data = __per_cluster_data[0];
1c001726 <cl_notify_fc_event_handler+0x20> lw	s1,-100(gp) # 1c008e00 <__per_cluster_data>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:48
    struct pi_task *task = data->task_to_fc;
1c00172a <cl_notify_fc_event_handler+0x24> lw	s0,52(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:51
    pi_callback_func_t callback_func = NULL;
    /* Light callback executed now. */
    if ((uint32_t) task & 0x1)
1c00172c <cl_notify_fc_event_handler+0x26> p.bclr	a5,s0,30,1
1c001730 <cl_notify_fc_event_handler+0x2a> bnez	a5,1c0017ac <cl_notify_fc_event_handler+0xa6>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:61
        callback_func = (pi_callback_func_t) task->arg[0];
        callback_func((void*) task->arg[1]);
	pi_task_release(task);

    }
    else if (task->id == PI_TASK_CALLBACK_ID)
1c001732 <cl_notify_fc_event_handler+0x2c> lw	a5,16(s0)
1c001734 <cl_notify_fc_event_handler+0x2e> bnez	a5,1c0017ee <cl_notify_fc_event_handler+0xe8>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:63
    {
        PRINTF("irq callback \n\r");
1c001736 <cl_notify_fc_event_handler+0x30> li	a2,63
1c00173a <cl_notify_fc_event_handler+0x34> lui	a1,0x1c008
1c00173e <cl_notify_fc_event_handler+0x38> addi	a1,a1,540 # 1c00821c <__func__.4718>
1c001742 <cl_notify_fc_event_handler+0x3c> lui	a0,0x1c008
1c001746 <cl_notify_fc_event_handler+0x40> addi	a0,a0,468 # 1c0081d4 <__func__.3257+0x64>
1c00174a <cl_notify_fc_event_handler+0x44> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:67
        /* irq callback (full pi task, transfered to driver,
         * but executed in place
         */
        uint32_t delegate_task_id = __FF1(delegate_task_mask);
1c00174e <cl_notify_fc_event_handler+0x48> lui	a3,0x1c008
1c001752 <cl_notify_fc_event_handler+0x4c> addi	a3,a3,1636 # 1c008664 <delegate_task_mask>
1c001756 <cl_notify_fc_event_handler+0x50> lw	a2,0(a3)
1c001758 <cl_notify_fc_event_handler+0x52> p.ff1	a4,a2
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:68
        delegate_task_mask &= ~(1<<delegate_task_id);
1c00175c <cl_notify_fc_event_handler+0x56> li	a5,1
1c00175e <cl_notify_fc_event_handler+0x58> sll	a5,a5,a4
1c001762 <cl_notify_fc_event_handler+0x5c> not	a5,a5
1c001766 <cl_notify_fc_event_handler+0x60> and	a5,a5,a2
1c001768 <cl_notify_fc_event_handler+0x62> sw	a5,0(a3)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:69
        if(delegate_task_id >= NB_L1_TASKS )
1c00176a <cl_notify_fc_event_handler+0x64> li	a5,7
1c00176c <cl_notify_fc_event_handler+0x66> bgeu	a5,a4,1c0017d4 <cl_notify_fc_event_handler+0xce>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:71
        {
            task->arg[3] = (uintptr_t)&(delegate_task_l2[delegate_task_id-NB_L1_TASKS]);
1c001770 <cl_notify_fc_event_handler+0x6a> addi	a5,a4,-8
1c001774 <cl_notify_fc_event_handler+0x6e> slli	a3,a5,0x3
1c001778 <cl_notify_fc_event_handler+0x72> add	a3,a3,a5
1c00177a <cl_notify_fc_event_handler+0x74> slli	a2,a3,0x3
1c00177e <cl_notify_fc_event_handler+0x78> lui	a5,0x1c010
1c001782 <cl_notify_fc_event_handler+0x7c> mv	a5,a5
1c001786 <cl_notify_fc_event_handler+0x80> add	a5,a5,a2
1c001788 <cl_notify_fc_event_handler+0x82> sw	a5,12(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:77
        }
        else
        {
            task->arg[3] = (uintptr_t)&(delegate_task[delegate_task_id]);
        }
        task->arg[2] = delegate_task_id;
1c00178a <cl_notify_fc_event_handler+0x84> sw	a4,8(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:79
        hal_compiler_barrier();
        callback_func = (pi_callback_func_t) task->arg[0];
1c00178c <cl_notify_fc_event_handler+0x86> lw	a5,0(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:80
        callback_func((void*) task->arg[1]);
1c00178e <cl_notify_fc_event_handler+0x88> lw	a0,4(s0)
1c001790 <cl_notify_fc_event_handler+0x8a> jalr	a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:81
	pi_task_release(task); ;
1c001792 <cl_notify_fc_event_handler+0x8c> mv	a0,s0
1c001794 <cl_notify_fc_event_handler+0x8e> jal	1c001aee <pi_task_release>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:92
	pi_task_push(task);
	pi_task_release(task); // needed for sync offload to work
    }

    hal_compiler_barrier();
    data->task_to_fc = NULL;
1c001796 <cl_notify_fc_event_handler+0x90> sw	zero,52(s1)
hal_eu_cluster_evt_trig_set():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:401
/**@{*/

#ifdef CONFIG_CLUSTER
static inline void hal_eu_cluster_evt_trig_set(int event_num, uint32_t value)
{
	CLUSTER_EU_SW_EVENTS->TRIGGER_SET[event_num] = value;
1c00179a <cl_notify_fc_event_handler+0x94> lui	a5,0x10201
1c00179e <cl_notify_fc_event_handler+0x98> sw	zero,-508(a5) # 10200e04 <__heap_l1_cluster_start+0x200de4>
cl_notify_fc_event_handler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:95
    hal_compiler_barrier();
    hal_eu_cluster_evt_trig_set(FC_NOTIFY_CLUSTER_EVENT, 0);
}
1c0017a2 <cl_notify_fc_event_handler+0x9c> lw	ra,12(sp)
1c0017a4 <cl_notify_fc_event_handler+0x9e> lw	s0,8(sp)
1c0017a6 <cl_notify_fc_event_handler+0xa0> lw	s1,4(sp)
1c0017a8 <cl_notify_fc_event_handler+0xa2> addi	sp,sp,16
1c0017aa <cl_notify_fc_event_handler+0xa4> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:53
        PRINTF("light callback \n\r");
1c0017ac <cl_notify_fc_event_handler+0xa6> li	a2,53
1c0017b0 <cl_notify_fc_event_handler+0xaa> lui	a1,0x1c008
1c0017b4 <cl_notify_fc_event_handler+0xae> addi	a1,a1,540 # 1c00821c <__func__.4718>
1c0017b8 <cl_notify_fc_event_handler+0xb2> lui	a0,0x1c008
1c0017bc <cl_notify_fc_event_handler+0xb6> addi	a0,a0,440 # 1c0081b8 <__func__.3257+0x48>
1c0017c0 <cl_notify_fc_event_handler+0xba> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:55
        task = (pi_task_t *) ((uint32_t) task & ~0x1);
1c0017c4 <cl_notify_fc_event_handler+0xbe> p.bclr	s0,s0,0,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:56
        callback_func = (pi_callback_func_t) task->arg[0];
1c0017c8 <cl_notify_fc_event_handler+0xc2> lw	a5,0(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:57
        callback_func((void*) task->arg[1]);
1c0017ca <cl_notify_fc_event_handler+0xc4> lw	a0,4(s0)
1c0017cc <cl_notify_fc_event_handler+0xc6> jalr	a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:58
	pi_task_release(task);
1c0017ce <cl_notify_fc_event_handler+0xc8> mv	a0,s0
1c0017d0 <cl_notify_fc_event_handler+0xca> jal	1c001aee <pi_task_release>
1c0017d2 <cl_notify_fc_event_handler+0xcc> j	1c001796 <cl_notify_fc_event_handler+0x90>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:75
            task->arg[3] = (uintptr_t)&(delegate_task[delegate_task_id]);
1c0017d4 <cl_notify_fc_event_handler+0xce> lui	a5,0x1c008
1c0017d8 <cl_notify_fc_event_handler+0xd2> addi	a5,a5,1636 # 1c008664 <delegate_task_mask>
1c0017dc <cl_notify_fc_event_handler+0xd6> slli	a3,a4,0x3
1c0017e0 <cl_notify_fc_event_handler+0xda> add	a3,a3,a4
1c0017e2 <cl_notify_fc_event_handler+0xdc> slli	a2,a3,0x3
1c0017e6 <cl_notify_fc_event_handler+0xe0> addi	a5,a5,4
1c0017e8 <cl_notify_fc_event_handler+0xe2> add	a5,a5,a2
1c0017ea <cl_notify_fc_event_handler+0xe4> sw	a5,12(s0)
1c0017ec <cl_notify_fc_event_handler+0xe6> j	1c00178a <cl_notify_fc_event_handler+0x84>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:86
	PRINTF("push pi_task callback to event kernel \n\r");
1c0017ee <cl_notify_fc_event_handler+0xe8> li	a2,86
1c0017f2 <cl_notify_fc_event_handler+0xec> lui	a1,0x1c008
1c0017f6 <cl_notify_fc_event_handler+0xf0> addi	a1,a1,540 # 1c00821c <__func__.4718>
1c0017fa <cl_notify_fc_event_handler+0xf4> lui	a0,0x1c008
1c0017fe <cl_notify_fc_event_handler+0xf8> addi	a0,a0,492 # 1c0081ec <__func__.3257+0x7c>
1c001802 <cl_notify_fc_event_handler+0xfc> jal	ra,1c002b6e <iprintf>
pi_task_push():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/pmsis_task.h:144
 *
 * \param task           Pointer to notification event.
 */
static inline void pi_task_push(pi_task_t *task)
{
	__pi_task_push(task);
1c001806 <cl_notify_fc_event_handler+0x100> mv	a0,s0
1c001808 <cl_notify_fc_event_handler+0x102> jal	1c001b22 <__pi_task_push>
cl_notify_fc_event_handler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:88
	pi_task_release(task); // needed for sync offload to work
1c00180a <cl_notify_fc_event_handler+0x104> mv	a0,s0
1c00180c <cl_notify_fc_event_handler+0x106> jal	1c001aee <pi_task_release>
1c00180e <cl_notify_fc_event_handler+0x108> j	1c001796 <cl_notify_fc_event_handler+0x90>
pi_cl_send_task_to_fc():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:98

void pi_cl_send_task_to_fc(pi_task_t *task)
{
1c001810 <pi_cl_send_task_to_fc> addi	sp,sp,-16
1c001812 <pi_cl_send_task_to_fc+0x2> sw	ra,12(sp)
hal_evt_read32():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:197
	value = __builtin_pulp_event_unit_read((int *)base, 0);
1c001814 <pi_cl_send_task_to_fc+0x4> lui	a5,0x204
1c001818 <pi_cl_send_task_to_fc+0x8> addi	a5,a5,192 # 002040c0 <__heap_l2_shared_size+0x1947a0>
1c00181c <pi_cl_send_task_to_fc+0xc> p.elw	a4,0(a5)
pi_cl_send_task_to_fc():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:100
	hal_eu_mutex_lock(0);
	struct cluster_driver_data *data = __per_cluster_data[0];
1c001820 <pi_cl_send_task_to_fc+0x10> lw	a2,-100(gp) # 1c008e00 <__per_cluster_data>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:101
	while (data->task_to_fc != NULL) {
1c001824 <pi_cl_send_task_to_fc+0x14> lw	a5,52(a2)
1c001826 <pi_cl_send_task_to_fc+0x16> beqz	a5,1c00183c <pi_cl_send_task_to_fc+0x2c>
hal_eu_evt_mask_set():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:260
	EU_CORE_DEMUX->MASK_OR = evtMask;
1c001828 <pi_cl_send_task_to_fc+0x18> lui	a5,0x204
1c00182c <pi_cl_send_task_to_fc+0x1c> li	a4,2
1c00182e <pi_cl_send_task_to_fc+0x1e> sw	a4,8(a5)
hal_evt_read32():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:197
	value = __builtin_pulp_event_unit_read((int *)base, 0);
1c001830 <pi_cl_send_task_to_fc+0x20> addi	a3,a5,60 # 0020403c <__heap_l2_shared_size+0x19471c>
1c001834 <pi_cl_send_task_to_fc+0x24> p.elw	a1,0(a3)
hal_eu_evt_mask_clr():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:271
	EU_CORE_DEMUX->MASK_AND = evtMask;
1c001838 <pi_cl_send_task_to_fc+0x28> sw	a4,4(a5)
hal_compiler_barrier():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/include/target.h:30
}
1c00183a <pi_cl_send_task_to_fc+0x2a> j	1c001824 <pi_cl_send_task_to_fc+0x14>
pi_cl_send_task_to_fc():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:106
		hal_compiler_barrier();
		hal_eu_evt_mask_wait_and_clr(1 << FC_NOTIFY_CLUSTER_EVENT);
		hal_compiler_barrier();
	}
	data->task_to_fc = task;
1c00183c <pi_cl_send_task_to_fc+0x2c> sw	a0,52(a2)
hal_eu_fc_evt_trig_set():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:409


static inline void hal_eu_fc_evt_trig_set(int event_num, uint32_t value)
{
	/* pend software interrupt in fc */
	irq_pend(event_num);
1c00183e <pi_cl_send_task_to_fc+0x2e> li	a0,2
1c001840 <pi_cl_send_task_to_fc+0x30> jal	1c001934 <irq_pend>
hal_eu_mutex_unlock():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:501
}

static inline void hal_eu_mutex_unlock(uint32_t mutex_id)
{
	__asm__ __volatile__("" : : : "memory");
	EU_MUTEX_DEMUX->MUTEX[mutex_id] = 0;
1c001842 <pi_cl_send_task_to_fc+0x32> lui	a5,0x204
1c001846 <pi_cl_send_task_to_fc+0x36> sw	zero,192(a5) # 002040c0 <__heap_l2_shared_size+0x1947a0>
pi_cl_send_task_to_fc():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:109
	hal_eu_fc_evt_trig_set(CLUSTER_TO_FC_NOTIFY_IRQN, 0);
	hal_eu_mutex_unlock(0);
}
1c00184a <pi_cl_send_task_to_fc+0x3a> lw	ra,12(sp)
1c00184c <pi_cl_send_task_to_fc+0x3c> addi	sp,sp,16
1c00184e <pi_cl_send_task_to_fc+0x3e> ret
cl_task_finish():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:115
							      .heap_start = (void *)0x10000004,
							      .heap_size = 0x400};


void cl_task_finish(void)
{
1c001850 <cl_task_finish> addi	sp,sp,-16
1c001852 <cl_task_finish+0x2> sw	ra,12(sp)
1c001854 <cl_task_finish+0x4> sw	s0,8(sp)
1c001856 <cl_task_finish+0x6> sw	s1,4(sp)
1c001858 <cl_task_finish+0x8> sw	s2,0(sp)
__native_cluster_id():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/include/target.h:89

static inline uint32_t __native_cluster_id()
{
	/* encoding of mhartid {21'b0, cluster_id_i[5:0], 1'b0, core_id_i[3:0]}
	 */
	uint32_t mhartid = csr_read(MHARTID_ADDR);
1c00185a <cl_task_finish+0xa> csrr	a5,mhartid
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/include/target.h:90
	return (mhartid >> 5) & 0x3f;
1c00185e <cl_task_finish+0xe> srli	a5,a5,0x5
1c001860 <cl_task_finish+0x10> p.bclr	a5,a5,25,6
cl_task_finish():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:120
	int id = __native_cluster_id();

	// TODO: send callback if it exists
	// -----
	struct cluster_driver_data *data = __per_cluster_data[id];
1c001864 <cl_task_finish+0x14> slli	a5,a5,0x2
1c001866 <cl_task_finish+0x16> addi	a4,gp,-100 # 1c008e00 <__per_cluster_data>
1c00186a <cl_task_finish+0x1a> add	a5,a5,a4
1c00186c <cl_task_finish+0x1c> lw	s0,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:121
	struct pi_cluster_task *task = data->task_first;
1c00186e <cl_task_finish+0x1e> lw	s2,0(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:123

	PRINTF("cl_task_finish: task=%p\n\r", task);
1c001872 <cl_task_finish+0x22> mv	a3,s2
1c001874 <cl_task_finish+0x24> li	a2,123
1c001878 <cl_task_finish+0x28> lui	a1,0x1c008
1c00187c <cl_task_finish+0x2c> addi	a1,a1,700 # 1c0082bc <__func__.5341>
1c001880 <cl_task_finish+0x30> lui	a0,0x1c008
1c001884 <cl_task_finish+0x34> addi	a0,a0,568 # 1c008238 <__func__.4718+0x1c>
1c001888 <cl_task_finish+0x38> jal	ra,1c002b6e <iprintf>
cl_sync_test_and_set_lock():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/cl_synchronisation.h:301
 * \param  spinlock spinlock structure to take lock on
 */
static inline int32_t cl_sync_test_and_set_lock(spinlock_t *spinlock)
{
	hal_compiler_barrier();
	int32_t value = *(volatile int32_t *)spinlock->lock_ptr;
1c00188c <cl_task_finish+0x3c> lw	a5,36(s0)
1c00188e <cl_task_finish+0x3e> lw	a5,0(a5)
cl_sync_spinlock_take():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/cl_synchronisation.h:314
 * \param  spinlock spinlock structure to take the lock on
 */
static inline void cl_sync_spinlock_take(spinlock_t *spinlock)
{
	// the test and set is linked directly to the address, nothing special to do
	while (cl_sync_test_and_set_lock(spinlock) == -1) {
1c001890 <cl_task_finish+0x40> p.beqimm	a5,-1,1c00188c <cl_task_finish+0x3c>
cl_pop_cluster_task():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:432
static inline void cl_pop_cluster_task(struct cluster_driver_data *data)
{
	// critical section for cluster and fc
	// Uses spinlock as it is pretty much the only reliable synchronisation we have
	cl_sync_spinlock_take(&data->fifo_access);
	struct pi_cluster_task *task = data->task_first;
1c001894 <cl_task_finish+0x44> lw	s1,0(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:433
	data->task_first = task->next;
1c001896 <cl_task_finish+0x46> lw	a5,32(s1)
1c001898 <cl_task_finish+0x48> sw	a5,0(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:434
	if (data->task_first == NULL) {
1c00189a <cl_task_finish+0x4a> beqz	a5,1c0018ee <cl_task_finish+0x9e>
cl_sync_spinlock_release():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/cl_synchronisation.h:326
 * \param  spinlock spinlock structure to release
 */
static inline void cl_sync_spinlock_release(spinlock_t *spinlock)
{
	hal_compiler_barrier();
	*(volatile int32_t *)spinlock->release_ptr = 0;
1c00189c <cl_task_finish+0x4c> lw	a5,40(s0)
1c00189e <cl_task_finish+0x4e> sw	zero,0(a5)
cl_pop_cluster_task():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:438
		data->task_last = NULL;
	}
	cl_sync_spinlock_release(&data->fifo_access);
	if (task->stack_allocated) {
1c0018a2 <cl_task_finish+0x52> lw	a5,28(s1)
1c0018a4 <cl_task_finish+0x54> bnez	a5,1c0018f4 <cl_task_finish+0xa4>
cl_task_finish():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:127
	PRINTF("cl_pop_cluster_task done\n\r");
1c0018a6 <cl_task_finish+0x56> li	a2,127
1c0018aa <cl_task_finish+0x5a> lui	a1,0x1c008
1c0018ae <cl_task_finish+0x5e> addi	a1,a1,700 # 1c0082bc <__func__.5341>
1c0018b2 <cl_task_finish+0x62> lui	a0,0x1c008
1c0018b6 <cl_task_finish+0x66> addi	a0,a0,628 # 1c008274 <__func__.4718+0x58>
1c0018ba <cl_task_finish+0x6a> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:129
	if (task->completion_callback) {
1c0018be <cl_task_finish+0x6e> lw	a5,24(s2)
1c0018c2 <cl_task_finish+0x72> beqz	a5,1c0018e2 <cl_task_finish+0x92>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:130
	        PRINTF("send notification to fc\n\r");
1c0018c4 <cl_task_finish+0x74> li	a2,130
1c0018c8 <cl_task_finish+0x78> lui	a1,0x1c008
1c0018cc <cl_task_finish+0x7c> addi	a1,a1,700 # 1c0082bc <__func__.5341>
1c0018d0 <cl_task_finish+0x80> lui	a0,0x1c008
1c0018d4 <cl_task_finish+0x84> addi	a0,a0,664 # 1c008298 <__func__.4718+0x7c>
1c0018d8 <cl_task_finish+0x88> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:131
		pi_cl_send_task_to_fc(task->completion_callback);
1c0018dc <cl_task_finish+0x8c> lw	a0,24(s2)
1c0018e0 <cl_task_finish+0x90> jal	1c001810 <pi_cl_send_task_to_fc>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:134
}
1c0018e2 <cl_task_finish+0x92> lw	ra,12(sp)
1c0018e4 <cl_task_finish+0x94> lw	s0,8(sp)
1c0018e6 <cl_task_finish+0x96> lw	s1,4(sp)
1c0018e8 <cl_task_finish+0x98> lw	s2,0(sp)
1c0018ea <cl_task_finish+0x9a> addi	sp,sp,16
1c0018ec <cl_task_finish+0x9c> ret
cl_pop_cluster_task():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:435
		data->task_last = NULL;
1c0018ee <cl_task_finish+0x9e> sw	zero,4(s0)
1c0018f2 <cl_task_finish+0xa2> j	1c00189c <cl_task_finish+0x4c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:440
		// put everything back as it was before
		uint32_t stack_size = task->slave_stack_size * ((uint32_t)ARCHI_CLUSTER_NB_PE - 1);
1c0018f4 <cl_task_finish+0xa4> lw	a5,16(s1)
1c0018f6 <cl_task_finish+0xa6> slli	s0,a5,0x3
1c0018fa <cl_task_finish+0xaa> sub	s0,s0,a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:441
		stack_size += task->stack_size;
1c0018fc <cl_task_finish+0xac> lw	a5,12(s1)
1c0018fe <cl_task_finish+0xae> add	s0,s0,a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:442
		pi_cl_l1_free(NULL, task->stacks, stack_size);
1c001900 <cl_task_finish+0xb0> mv	a2,s0
1c001902 <cl_task_finish+0xb2> lw	a1,8(s1)
1c001904 <cl_task_finish+0xb4> li	a0,0
1c001906 <cl_task_finish+0xb6> jal	ra,1c0015c6 <pi_cl_l1_free>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:443
		PRINTF("free %p %ld\n\r", task->stacks, stack_size);
1c00190a <cl_task_finish+0xba> mv	a4,s0
1c00190c <cl_task_finish+0xbc> lw	a3,8(s1)
1c00190e <cl_task_finish+0xbe> li	a2,443
1c001912 <cl_task_finish+0xc2> lui	a1,0x1c008
1c001916 <cl_task_finish+0xc6> addi	a1,a1,716 # 1c0082cc <__func__.5439>
1c00191a <cl_task_finish+0xca> lui	a0,0x1c008
1c00191e <cl_task_finish+0xce> addi	a0,a0,604 # 1c00825c <__func__.4718+0x40>
1c001922 <cl_task_finish+0xd2> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:444
		task->stacks = NULL;
1c001926 <cl_task_finish+0xd6> sw	zero,8(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:445
		task->stack_size = 0;
1c00192a <cl_task_finish+0xda> sw	zero,12(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:446
		task->stack_allocated = 0;
1c00192e <cl_task_finish+0xde> sw	zero,28(s1)
1c001932 <cl_task_finish+0xe2> j	1c0018a6 <cl_task_finish+0x56>
irq_pend():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:68
	writew(0ul, (uintptr_t)(CLIC_ADDR + CLIC_CLICINTIE_REG_OFFSET(id)));
}

void irq_pend(int id)
{
	assert(0 <= id && id < CLIC_PARAM_NUM_SRC);
1c001934 <irq_pend> li	a5,255
1c001938 <irq_pend+0x4> bltu	a5,a0,1c00194e <irq_pend+0x1a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:69
	writew(1ul, (uintptr_t)(CLIC_ADDR + CLIC_CLICINTIP_REG_OFFSET(id)));
1c00193c <irq_pend+0x8> lui	a5,0x1a20
1c001940 <irq_pend+0xc> addi	a5,a5,256 # 01a20100 <__heap_l2_shared_size+0x19b07e0>
1c001944 <irq_pend+0x10> add	a0,a0,a5
1c001946 <irq_pend+0x12> slli	a0,a0,0x4
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
	asm volatile("sw %0, 0(%1)"
1c001948 <irq_pend+0x14> li	a5,1
1c00194a <irq_pend+0x16> sw	a5,0(a0)
1c00194c <irq_pend+0x18> ret
irq_pend():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:67 (discriminator 1)
{
1c00194e <irq_pend+0x1a> addi	sp,sp,-16
1c001950 <irq_pend+0x1c> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:68 (discriminator 1)
	assert(0 <= id && id < CLIC_PARAM_NUM_SRC);
1c001952 <irq_pend+0x1e> lui	a3,0x1c008
1c001956 <irq_pend+0x22> addi	a3,a3,836 # 1c008344 <__func__.5439+0x78>
1c00195a <irq_pend+0x26> lui	a2,0x1c008
1c00195e <irq_pend+0x2a> addi	a2,a2,884 # 1c008374 <__func__.1889>
1c001962 <irq_pend+0x2e> li	a1,68
1c001966 <irq_pend+0x32> lui	a0,0x1c008
1c00196a <irq_pend+0x36> addi	a0,a0,768 # 1c008300 <__func__.5439+0x34>
1c00196e <irq_pend+0x3a> jal	ra,1c002588 <__assert_func>
readw():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:82
	asm volatile("lw %0, 0(%1)"
1c001972 <irq_set_lvl_and_prio> lui	a4,0x1a200
1c001976 <irq_set_lvl_and_prio+0x4> lw	a4,0(a4)
irq_set_lvl_and_prio():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:81
}

void irq_set_lvl_and_prio(int id, int lvl, int prio)
{
	/* TODO: probe CLICINTCTLBITS */
	uint32_t nlbits = readw((uintptr_t)(CLIC_ADDR + CLIC_CLICCFG_REG_OFFSET)) >>
1c001978 <irq_set_lvl_and_prio+0x6> srli	a4,a4,0x1
1c00197a <irq_set_lvl_and_prio+0x8> p.bclr	a5,a4,27,4
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:85
				  CLIC_CLICCFG_NLBITS_OFFSET &
			  CLIC_CLICCFG_NLBITS_MASK;

	uint32_t shift = 8 - nlbits;
1c00197e <irq_set_lvl_and_prio+0xc> li	a4,8
1c001980 <irq_set_lvl_and_prio+0xe> sub	a3,a4,a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:86
	uint32_t val = ((((uint32_t)lvl & BIT_MASK(nlbits)) << shift |
1c001984 <irq_set_lvl_and_prio+0x12> li	a4,-1
1c001986 <irq_set_lvl_and_prio+0x14> sll	a5,a4,a5
1c00198a <irq_set_lvl_and_prio+0x18> not	a5,a5
1c00198e <irq_set_lvl_and_prio+0x1c> and	a5,a5,a1
1c001990 <irq_set_lvl_and_prio+0x1e> sll	a5,a5,a3
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:87
			 ((uint32_t)prio & BIT_MASK(shift))) &
1c001994 <irq_set_lvl_and_prio+0x22> sll	a4,a4,a3
1c001998 <irq_set_lvl_and_prio+0x26> not	a4,a4
1c00199c <irq_set_lvl_and_prio+0x2a> and	a2,a2,a4
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:86
	uint32_t val = ((((uint32_t)lvl & BIT_MASK(nlbits)) << shift |
1c00199e <irq_set_lvl_and_prio+0x2c> or	a5,a5,a2
1c0019a0 <irq_set_lvl_and_prio+0x2e> p.bclr	a5,a5,23,8
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:89
			0xff);
	writew(val, (uintptr_t)(CLIC_ADDR + CLIC_CLICINTCTL_REG_OFFSET(id)));
1c0019a4 <irq_set_lvl_and_prio+0x32> slli	a0,a0,0x4
1c0019a6 <irq_set_lvl_and_prio+0x34> lui	a4,0x1a201
1c0019aa <irq_set_lvl_and_prio+0x38> addi	a4,a4,12
1c0019ac <irq_set_lvl_and_prio+0x3a> add	a0,a0,a4
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
	asm volatile("sw %0, 0(%1)"
1c0019ae <irq_set_lvl_and_prio+0x3c> sw	a5,0(a0)
irq_set_lvl_and_prio():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:90
}
1c0019b0 <irq_set_lvl_and_prio+0x3e> ret
irq_set_trigger_type():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:94

void irq_set_trigger_type(int id, int flags)
{
	uint32_t reg = readw((uintptr_t)(CLIC_ADDR + CLIC_CLICINTATTR_REG_OFFSET(id)));
1c0019b2 <irq_set_trigger_type> slli	a0,a0,0x4
1c0019b4 <irq_set_trigger_type+0x2> lui	a5,0x1a201
1c0019b8 <irq_set_trigger_type+0x6> addi	a5,a5,8
1c0019ba <irq_set_trigger_type+0x8> add	a0,a0,a5
readw():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:82
	asm volatile("lw %0, 0(%1)"
1c0019bc <irq_set_trigger_type+0xa> lw	a5,0(a0)
irq_set_trigger_type():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:95
	reg &= ~(CLIC_CLICINTATTR_TRIG_MASK << CLIC_CLICINTATTR_TRIG_OFFSET);
1c0019be <irq_set_trigger_type+0xc> p.bclr	a5,a5,1,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:96
	reg |= (flags & CLIC_CLICINTATTR_TRIG_MASK) << CLIC_CLICINTATTR_TRIG_OFFSET;
1c0019c2 <irq_set_trigger_type+0x10> slli	a1,a1,0x1
1c0019c4 <irq_set_trigger_type+0x12> andi	a1,a1,6
1c0019c6 <irq_set_trigger_type+0x14> or	a1,a1,a5
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
	asm volatile("sw %0, 0(%1)"
1c0019c8 <irq_set_trigger_type+0x16> sw	a1,0(a0)
irq_set_trigger_type():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:98
	writew(reg, (uintptr_t)(CLIC_ADDR + CLIC_CLICINTATTR_REG_OFFSET(id)));
}
1c0019ca <irq_set_trigger_type+0x18> ret
irq_enable():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:43
{
1c0019cc <irq_enable> addi	sp,sp,-16
1c0019ce <irq_enable+0x2> sw	ra,12(sp)
1c0019d0 <irq_enable+0x4> sw	s0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:44
	assert(0 <= id && id < CLIC_PARAM_NUM_SRC);
1c0019d2 <irq_enable+0x6> li	a5,255
1c0019d6 <irq_enable+0xa> bltu	a5,a0,1c001a06 <irq_enable+0x3a>
1c0019da <irq_enable+0xe> mv	s0,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:48
	       (uintptr_t)(CLIC_ADDR + CLIC_CLICINTATTR_REG_OFFSET(id)));
1c0019dc <irq_enable+0x10> slli	a5,a0,0x4
1c0019e0 <irq_enable+0x14> lui	a4,0x1a201
1c0019e4 <irq_enable+0x18> addi	a3,a4,8 # 1a201008 <__heap_l1_cluster_start+0xa200fe8>
1c0019e8 <irq_enable+0x1c> add	a3,a3,a5
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
1c0019ea <irq_enable+0x1e> li	a2,1
1c0019ec <irq_enable+0x20> sw	a2,0(a3)
irq_enable():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:50
	writew(1ul, (uintptr_t)(CLIC_ADDR + CLIC_CLICINTIE_REG_OFFSET(id)));
1c0019ee <irq_enable+0x22> addi	a4,a4,4
1c0019f0 <irq_enable+0x24> add	a5,a5,a4
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
1c0019f2 <irq_enable+0x26> sw	a2,0(a5)
irq_enable():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:53
	irq_set_lvl_and_prio(id, 1, 1);
1c0019f4 <irq_enable+0x28> li	a1,1
1c0019f6 <irq_enable+0x2a> jal	1c001972 <irq_set_lvl_and_prio>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:55
	irq_set_trigger_type(id, CLIC_TRIG_EDGE | CLIC_TRIG_POSITIVE);
1c0019f8 <irq_enable+0x2c> li	a1,1
1c0019fa <irq_enable+0x2e> mv	a0,s0
1c0019fc <irq_enable+0x30> jal	1c0019b2 <irq_set_trigger_type>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:56
}
1c0019fe <irq_enable+0x32> lw	ra,12(sp)
1c001a00 <irq_enable+0x34> lw	s0,8(sp)
1c001a02 <irq_enable+0x36> addi	sp,sp,16
1c001a04 <irq_enable+0x38> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:44 (discriminator 1)
	assert(0 <= id && id < CLIC_PARAM_NUM_SRC);
1c001a06 <irq_enable+0x3a> lui	a3,0x1c008
1c001a0a <irq_enable+0x3e> addi	a3,a3,836 # 1c008344 <__func__.5439+0x78>
1c001a0e <irq_enable+0x42> lui	a2,0x1c008
1c001a12 <irq_enable+0x46> addi	a2,a2,872 # 1c008368 <__func__.1881>
1c001a16 <irq_enable+0x4a> li	a1,44
1c001a1a <irq_enable+0x4e> lui	a0,0x1c008
1c001a1e <irq_enable+0x52> addi	a0,a0,768 # 1c008300 <__func__.5439+0x34>
1c001a22 <irq_enable+0x56> jal	ra,1c002588 <__assert_func>
irq_clint_global_enable():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:112
	return val;
}

uint32_t irq_clint_global_enable()
{
	uint32_t val = csr_read_set(CSR_MSTATUS, MSTATUS_IE);
1c001a26 <irq_clint_global_enable> csrrsi	a0,mstatus,8
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:114
	return val;
}
1c001a2a <irq_clint_global_enable+0x4> ret
irq_clint_enable():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:127
}

uint32_t irq_clint_enable(int id)
{
	/* these appear hardwired to zero in clic mode */
	uint32_t val = csr_read_set(CSR_MIE, 1ul << id);
1c001a2c <irq_clint_enable> li	a5,1
1c001a2e <irq_clint_enable+0x2> sll	a0,a5,a0
1c001a32 <irq_clint_enable+0x6> csrrs	a0,mie,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:129
	return val;
}
1c001a36 <irq_clint_enable+0xa> ret
pulp_irq_init():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:135


void pulp_irq_init()
{
	/* min threshold, thereby propagating all interrupts */
	csr_write(CSR_MINTTHRESH, 0x0);
1c001a38 <pulp_irq_init> csrwi	0x347,0
writeb():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:31
	asm volatile("sb %0, 0(%1)"
1c001a3c <pulp_irq_init+0x4> li	a5,8
1c001a3e <pulp_irq_init+0x6> lui	a4,0x1a200
1c001a42 <pulp_irq_init+0xa> sb	a5,0(a4) # 1a200000 <__heap_l1_cluster_start+0xa1fffe0>
pulp_irq_init():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:139
	/* set nlbits to four which gives 4 bits for level and priority */
	/* TODO: implement freertos level interrupts */
	writeb((0x4 << CLIC_CLICCFG_NLBITS_OFFSET), CLIC_ADDR + CLIC_CLICCFG_REG_OFFSET);
}
1c001a46 <pulp_irq_init+0xe> ret
soc_eu_mask_set():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/soc_eu.c:28
#include "io.h"
#include "soc_eu_metal.h"

void soc_eu_mask_set(uint32_t offset, uint32_t mask)
{
	writew(mask, (uintptr_t)(SOC_EU_ADDR + offset));
1c001a48 <soc_eu_mask_set> lui	a5,0x1a106
1c001a4c <soc_eu_mask_set+0x4> add	a0,a0,a5
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
	asm volatile("sw %0, 0(%1)"
1c001a4e <soc_eu_mask_set+0x6> sw	a1,0(a0)
soc_eu_mask_set():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/soc_eu.c:29
}
1c001a50 <soc_eu_mask_set+0x8> ret
soc_eu_event_init():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/soc_eu.c:46
/* uint32_t soc_eu_irq_mask_get() */
/* { */
/* } */

void soc_eu_event_init()
{
1c001a52 <soc_eu_event_init> addi	sp,sp,-16
1c001a54 <soc_eu_event_init+0x2> sw	ra,12(sp)
1c001a56 <soc_eu_event_init+0x4> sw	s0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/soc_eu.c:48
	/* deactivate all soc events */
	for (unsigned i = 0; i < SOC_NB_EVENT_REGS; i++) {
1c001a58 <soc_eu_event_init+0x6> li	s0,0
1c001a5a <soc_eu_event_init+0x8> j	1c001a66 <soc_eu_event_init+0x14>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/soc_eu.c:49 (discriminator 3)
		soc_eu_mask_set(SOC_FC_FIRST_MASK + i * 4, 0xffffffff);
1c001a5c <soc_eu_event_init+0xa> addi	s0,s0,1
1c001a5e <soc_eu_event_init+0xc> li	a1,-1
1c001a60 <soc_eu_event_init+0xe> slli	a0,s0,0x2
1c001a64 <soc_eu_event_init+0x12> jal	1c001a48 <soc_eu_mask_set>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/soc_eu.c:48 (discriminator 1)
	for (unsigned i = 0; i < SOC_NB_EVENT_REGS; i++) {
1c001a66 <soc_eu_event_init+0x14> li	a5,7
1c001a68 <soc_eu_event_init+0x16> bgeu	a5,s0,1c001a5c <soc_eu_event_init+0xa>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/soc_eu.c:51
	}
}
1c001a6c <soc_eu_event_init+0x1a> lw	ra,12(sp)
1c001a6e <soc_eu_event_init+0x1c> lw	s0,8(sp)
1c001a70 <soc_eu_event_init+0x1e> addi	sp,sp,16
1c001a72 <soc_eu_event_init+0x20> ret
fc_event_null_event():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:36
}
1c001a74 <fc_event_null_event> ret
pi_fc_event_handler_clear():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:59
	fc_event_handlers[event_id] =
1c001a76 <pi_fc_event_handler_clear> slli	a5,a0,0x2
1c001a7a <pi_fc_event_handler_clear+0x4> addi	a0,gp,-960 # 1c008aa4 <fc_event_handlers>
1c001a7e <pi_fc_event_handler_clear+0x8> add	a0,a0,a5
1c001a80 <pi_fc_event_handler_clear+0xa> lui	a5,0x1c002
1c001a84 <pi_fc_event_handler_clear+0xe> addi	a5,a5,-1420 # 1c001a74 <fc_event_null_event>
1c001a88 <pi_fc_event_handler_clear+0x12> sw	a5,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:61
}
1c001a8a <pi_fc_event_handler_clear+0x14> ret
pi_fc_event_handler_init():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:39
{
1c001a8c <pi_fc_event_handler_init> addi	sp,sp,-16
1c001a8e <pi_fc_event_handler_init+0x2> sw	ra,12(sp)
1c001a90 <pi_fc_event_handler_init+0x4> sw	s0,8(sp)
1c001a92 <pi_fc_event_handler_init+0x6> sw	s1,4(sp)
1c001a94 <pi_fc_event_handler_init+0x8> mv	s1,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:42
	for (int i = 0; i < NB_SOC_EVENTS; i++) {
1c001a96 <pi_fc_event_handler_init+0xa> li	s0,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:42 (discriminator 1)
1c001a98 <pi_fc_event_handler_init+0xc> li	a5,167
1c001a9c <pi_fc_event_handler_init+0x10> blt	a5,s0,1c001aa8 <pi_fc_event_handler_init+0x1c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:43 (discriminator 3)
		pi_fc_event_handler_clear((uint32_t)i);
1c001aa0 <pi_fc_event_handler_init+0x14> mv	a0,s0
1c001aa2 <pi_fc_event_handler_init+0x16> jal	1c001a76 <pi_fc_event_handler_clear>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:42 (discriminator 3)
	for (int i = 0; i < NB_SOC_EVENTS; i++) {
1c001aa4 <pi_fc_event_handler_init+0x18> addi	s0,s0,1
1c001aa6 <pi_fc_event_handler_init+0x1a> j	1c001a98 <pi_fc_event_handler_init+0xc>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:45
	irq_enable((int)fc_event_irq);
1c001aa8 <pi_fc_event_handler_init+0x1c> mv	a0,s1
1c001aaa <pi_fc_event_handler_init+0x1e> jal	1c0019cc <irq_enable>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:47
	irq_set_trigger_type((int)fc_event_irq, CLIC_TRIG_LEVEL | CLIC_TRIG_POSITIVE);
1c001aac <pi_fc_event_handler_init+0x20> li	a1,0
1c001aae <pi_fc_event_handler_init+0x22> mv	a0,s1
1c001ab0 <pi_fc_event_handler_init+0x24> jal	ra,1c0019b2 <irq_set_trigger_type>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/fc_event.c:49
}
1c001ab4 <pi_fc_event_handler_init+0x28> lw	ra,12(sp)
1c001ab6 <pi_fc_event_handler_init+0x2a> lw	s0,8(sp)
1c001ab8 <pi_fc_event_handler_init+0x2c> lw	s1,4(sp)
1c001aba <pi_fc_event_handler_init+0x2e> addi	sp,sp,16
1c001abc <pi_fc_event_handler_init+0x30> ret
pi_time_wait_us():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/os.h:249
	hal_compiler_barrier();
	restore_irq(irq_enabled);
}

__attribute__((unused)) static void pi_time_wait_us(int time_us)
{
1c001abe <pi_time_wait_us> addi	sp,sp,-32
1c001ac0 <pi_time_wait_us+0x2> sw	ra,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/os.h:251
	/* Wait less than 1 ms. */
	if (time_us < 1000) {
1c001ac2 <pi_time_wait_us+0x4> li	a5,999
1c001ac6 <pi_time_wait_us+0x8> blt	a5,a0,1c001ae0 <pi_time_wait_us+0x22>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/os.h:252
		for (volatile int i = 0; i < time_us; i++)
1c001aca <pi_time_wait_us+0xc> sw	zero,12(sp)
1c001acc <pi_time_wait_us+0xe> j	1c001ad4 <pi_time_wait_us+0x16>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/os.h:252 (discriminator 3)
1c001ace <pi_time_wait_us+0x10> lw	a5,12(sp)
1c001ad0 <pi_time_wait_us+0x12> addi	a5,a5,1
1c001ad2 <pi_time_wait_us+0x14> sw	a5,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/os.h:252 (discriminator 1)
1c001ad4 <pi_time_wait_us+0x16> lw	a5,12(sp)
1c001ad6 <pi_time_wait_us+0x18> blt	a5,a0,1c001ace <pi_time_wait_us+0x10>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/os.h:257
			;
	} else {
		vTaskDelay(((uint32_t)time_us / 1000) / portTICK_PERIOD_MS);
	}
}
1c001ada <pi_time_wait_us+0x1c> lw	ra,28(sp)
1c001adc <pi_time_wait_us+0x1e> addi	sp,sp,32
1c001ade <pi_time_wait_us+0x20> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/os.h:255
		vTaskDelay(((uint32_t)time_us / 1000) / portTICK_PERIOD_MS);
1c001ae0 <pi_time_wait_us+0x22> li	a5,1000
1c001ae4 <pi_time_wait_us+0x26> divu	a0,a0,a5
1c001ae8 <pi_time_wait_us+0x2a> jal	ra,1c00145e <vTaskDelay>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/os.h:257
}
1c001aec <pi_time_wait_us+0x2e> j	1c001ada <pi_time_wait_us+0x1c>
pi_task_release():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/pmsis_task.c:101
	/* lock the mutex so that task may be descheduled while waiting on it */
	return callback_task;
}

void pi_task_release(pi_task_t *task)
{
1c001aee <pi_task_release> addi	sp,sp,-16
1c001af0 <pi_task_release+0x2> sw	ra,12(sp)
1c001af2 <pi_task_release+0x4> sw	s0,8(sp)
1c001af4 <pi_task_release+0x6> mv	s0,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/pmsis_task.c:105
	DEBUG_PRINTF("[%s] releasing task %p\n", __func__, task);
	/* if the mutex is only virtual (e.g. wait on soc event)
	 * if the sched support semaphore/mutexes */
	if (task->wait_on.sem_object) {
1c001af6 <pi_task_release+0x8> lw	a0,52(a0)
1c001af8 <pi_task_release+0xa> beqz	a0,1c001afe <pi_task_release+0x10>
pi_sem_give():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/os.h:168
	sem->give(sem->sem_object);
1c001afa <pi_task_release+0xc> lw	a5,60(s0)
1c001afc <pi_task_release+0xe> jalr	a5
pi_task_release():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/pmsis_task.c:110
		DEBUG_PRINTF("[%s] sem give %p\n", __func__, &task->wait_on);
		pi_sem_give(&(task->wait_on));
	}
	hal_compiler_barrier();
	task->done = 1;
1c001afe <pi_task_release+0x10> li	a5,1
1c001b00 <pi_task_release+0x12> sb	a5,68(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/pmsis_task.c:112
	hal_compiler_barrier();
}
1c001b04 <pi_task_release+0x16> lw	ra,12(sp)
1c001b06 <pi_task_release+0x18> lw	s0,8(sp)
1c001b08 <pi_task_release+0x1a> addi	sp,sp,16
1c001b0a <pi_task_release+0x1c> ret
pi_task_push_delayed_us():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/pmsis_task.c:134
		hal_compiler_barrier();
	}
}

void pi_task_push_delayed_us(pi_task_t *task, uint32_t delay)
{
1c001b0c <pi_task_push_delayed_us> addi	sp,sp,-16
1c001b0e <pi_task_push_delayed_us+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/pmsis_task.c:135
	pi_time_wait_us((int)delay);
1c001b10 <pi_task_push_delayed_us+0x4> mv	a0,a1
1c001b12 <pi_task_push_delayed_us+0x6> jal	1c001abe <pi_time_wait_us>
__disable_irq():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/riscv.h:177
	uint32_t val = csr_read_clear(MSTATUS_ADDR, BIT(MSTATUS_MIE_Pos));
1c001b14 <pi_task_push_delayed_us+0x8> csrrci	a5,mstatus,8
__restore_irq():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/riscv.h:157
	csr_write(MSTATUS_ADDR, irq);
1c001b18 <pi_task_push_delayed_us+0xc> csrw	mstatus,a5
pi_task_push_delayed_us():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/pmsis_task.c:140
	uint32_t irq = disable_irq();
	/* TODO: unimplemented callback */
	/* pmsis_event_push(pmsis_event_get_default_scheduler(), task); */
	restore_irq(irq);
}
1c001b1c <pi_task_push_delayed_us+0x10> lw	ra,12(sp)
1c001b1e <pi_task_push_delayed_us+0x12> addi	sp,sp,16
1c001b20 <pi_task_push_delayed_us+0x14> ret
__pi_task_push():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/pmsis_task.c:79
{
1c001b22 <__pi_task_push> addi	sp,sp,-16
1c001b24 <__pi_task_push+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/pmsis_task.c:80
	pi_task_push_delayed_us(task, 0);
1c001b26 <__pi_task_push+0x4> li	a1,0
1c001b28 <__pi_task_push+0x6> jal	1c001b0c <pi_task_push_delayed_us>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/pmsis_task.c:81
}
1c001b2a <__pi_task_push+0x8> lw	ra,12(sp)
1c001b2c <__pi_task_push+0xa> addi	sp,sp,16
1c001b2e <__pi_task_push+0xc> ret
__handle_clic_int():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:28
/* TODO: consider __riscv_32e */
/* regular integer abi */
.global __handle_clic_int
.func
__handle_clic_int:
	addi sp, sp, -(4 * 16)
1c001b30 <__handle_clic_int> addi	sp,sp,-64
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:29
	sw ra, 0(sp)
1c001b32 <__handle_clic_int+0x2> sw	ra,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:30
	sw t0, 4(sp)
1c001b34 <__handle_clic_int+0x4> sw	t0,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:31
	sw t1, 8(sp)
1c001b36 <__handle_clic_int+0x6> sw	t1,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:32
	sw t2, 12(sp)
1c001b38 <__handle_clic_int+0x8> sw	t2,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:33
	sw a0, 16(sp)
1c001b3a <__handle_clic_int+0xa> sw	a0,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:34
	sw a1, 20(sp)
1c001b3c <__handle_clic_int+0xc> sw	a1,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:35
	sw a2, 24(sp)
1c001b3e <__handle_clic_int+0xe> sw	a2,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:36
	sw a3, 28(sp)
1c001b40 <__handle_clic_int+0x10> sw	a3,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:37
	sw a4, 32(sp)
1c001b42 <__handle_clic_int+0x12> sw	a4,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:38
	sw a5, 36(sp)
1c001b44 <__handle_clic_int+0x14> sw	a5,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:39
	sw a6, 40(sp)
1c001b46 <__handle_clic_int+0x16> sw	a6,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:40
	sw a7, 44(sp)
1c001b48 <__handle_clic_int+0x18> sw	a7,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:41
	sw t3, 48(sp)
1c001b4a <__handle_clic_int+0x1a> sw	t3,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:42
	sw t4, 52(sp)
1c001b4c <__handle_clic_int+0x1c> sw	t4,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:43
	sw t5, 56(sp)
1c001b4e <__handle_clic_int+0x1e> sw	t5,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:44
	sw t6, 60(sp)
1c001b50 <__handle_clic_int+0x20> sw	t6,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:46

	la   t0, clic_isr_hook
1c001b52 <__handle_clic_int+0x22> addi	t0,gp,960 # 1c009224 <clic_isr_hook>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:47
	lw   t0, 0(t0) /* load function pointer */
1c001b56 <__handle_clic_int+0x26> lw	t0,0(t0) # 00070000 <__heap_l2_shared_size+0x6e0>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:49

	jalr t0 /* vector into hook */
1c001b5a <__handle_clic_int+0x2a> jalr	t0
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:53

	/* TODO: write to completion register */

	lw ra, 0(sp)
1c001b5c <__handle_clic_int+0x2c> lw	ra,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:54
	lw t0, 4(sp)
1c001b5e <__handle_clic_int+0x2e> lw	t0,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:55
	lw t1, 8(sp)
1c001b60 <__handle_clic_int+0x30> lw	t1,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:56
	lw t2, 12(sp)
1c001b62 <__handle_clic_int+0x32> lw	t2,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:57
	lw a0, 16(sp)
1c001b64 <__handle_clic_int+0x34> lw	a0,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:58
	lw a1, 20(sp)
1c001b66 <__handle_clic_int+0x36> lw	a1,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:59
	lw a2, 24(sp)
1c001b68 <__handle_clic_int+0x38> lw	a2,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:60
	lw a3, 28(sp)
1c001b6a <__handle_clic_int+0x3a> lw	a3,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:61
	lw a4, 32(sp)
1c001b6c <__handle_clic_int+0x3c> lw	a4,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:62
	lw a5, 36(sp)
1c001b6e <__handle_clic_int+0x3e> lw	a5,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:63
	lw a6, 40(sp)
1c001b70 <__handle_clic_int+0x40> lw	a6,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:64
	lw a7, 44(sp)
1c001b72 <__handle_clic_int+0x42> lw	a7,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:65
	lw t3, 48(sp)
1c001b74 <__handle_clic_int+0x44> lw	t3,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:66
	lw t4, 52(sp)
1c001b76 <__handle_clic_int+0x46> lw	t4,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:67
	lw t5, 56(sp)
1c001b78 <__handle_clic_int+0x48> lw	t5,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:68
	lw t6, 60(sp)
1c001b7a <__handle_clic_int+0x4a> lw	t6,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:69
	addi sp, sp, (4 * 16)
1c001b7c <__handle_clic_int+0x4c> addi	sp,sp,64
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:70
	mret
1c001b7e <__handle_clic_int+0x4e> mret
clic_setup_mtvec():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:76

.section .text.int
.global clic_setup_mtvec
.type clic_setup_mtvec,@function
clic_setup_mtvec:
	la t0, __clic_vector_table
1c001b82 <clic_setup_mtvec> auipc	t0,0x0
1c001b86 <clic_setup_mtvec+0x4> addi	t0,t0,1150 # 1c002000 <__clic_vector_table>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:77
	or t0, t0, 1 /* enable vectored mode TODO: should be clic mode */
1c001b8a <clic_setup_mtvec+0x8> ori	t0,t0,1
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:78
	csrw mtvec, t0
1c001b8e <clic_setup_mtvec+0xc> csrw	mtvec,t0
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:79
	ret
1c001b92 <clic_setup_mtvec+0x10> ret
clic_setup_mtvt():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:85

.section .text.int
.global clic_setup_mtvt
.type clic_setup_mtvt,@function
clic_setup_mtvt:
	la t0, __clic_vector_table
1c001b94 <clic_setup_mtvt> auipc	t0,0x0
1c001b98 <clic_setup_mtvt+0x4> addi	t0,t0,1132 # 1c002000 <__clic_vector_table>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:86
	or t0, t0, 1 /* enable vectored mode TODO: should be clic mode */
1c001b9c <clic_setup_mtvt+0x8> ori	t0,t0,1
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:87
	csrw 0x307, t0 /* mtvt=0x307 */
1c001ba0 <clic_setup_mtvt+0xc> csrw	0x307,t0
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:88
	ret
1c001ba4 <clic_setup_mtvt+0x10> ret
	...
default_exception_handler():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:92

.section .text.vectors
default_exception_handler:
	j default_exception_handler
1c001c00 <default_exception_handler> j	1c001c00 <default_exception_handler>
software_handler():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:94
software_handler:
	j software_handler
1c001c02 <software_handler> j	1c001c02 <software_handler>
timer_handler():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:96
timer_handler:
	j timer_handler
1c001c04 <timer_handler> j	1c001c04 <timer_handler>
external_handler():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:98
external_handler:
	j external_handler
1c001c06 <external_handler> j	1c001c06 <external_handler>
__no_irq_handler():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:100
__no_irq_handler:
	j __no_irq_handler
1c001c08 <__no_irq_handler> j	1c001c08 <__no_irq_handler>
1c001c0a <__no_irq_handler+0x2> nop
1c001c0e <__no_irq_handler+0x6> nop
1c001c12 <__no_irq_handler+0xa> nop
1c001c16 <__no_irq_handler+0xe> nop
1c001c1a <__no_irq_handler+0x12> nop
1c001c1e <__no_irq_handler+0x16> nop
1c001c22 <__no_irq_handler+0x1a> nop
1c001c26 <__no_irq_handler+0x1e> nop
1c001c2a <__no_irq_handler+0x22> nop
1c001c2e <__no_irq_handler+0x26> nop
1c001c32 <__no_irq_handler+0x2a> nop
1c001c36 <__no_irq_handler+0x2e> nop
1c001c3a <__no_irq_handler+0x32> nop
1c001c3e <__no_irq_handler+0x36> nop
1c001c42 <__no_irq_handler+0x3a> nop
1c001c46 <__no_irq_handler+0x3e> nop
1c001c4a <__no_irq_handler+0x42> nop
1c001c4e <__no_irq_handler+0x46> nop
1c001c52 <__no_irq_handler+0x4a> nop
1c001c56 <__no_irq_handler+0x4e> nop
1c001c5a <__no_irq_handler+0x52> nop
1c001c5e <__no_irq_handler+0x56> nop
1c001c62 <__no_irq_handler+0x5a> nop
1c001c66 <__no_irq_handler+0x5e> nop
1c001c6a <__no_irq_handler+0x62> nop
1c001c6e <__no_irq_handler+0x66> nop
1c001c72 <__no_irq_handler+0x6a> nop
1c001c76 <__no_irq_handler+0x6e> nop
1c001c7a <__no_irq_handler+0x72> nop
1c001c7e <__no_irq_handler+0x76> nop
1c001c82 <__no_irq_handler+0x7a> nop
1c001c86 <__no_irq_handler+0x7e> nop
1c001c8a <__no_irq_handler+0x82> nop
1c001c8e <__no_irq_handler+0x86> nop
1c001c92 <__no_irq_handler+0x8a> nop
1c001c96 <__no_irq_handler+0x8e> nop
1c001c9a <__no_irq_handler+0x92> nop
1c001c9e <__no_irq_handler+0x96> nop
1c001ca2 <__no_irq_handler+0x9a> nop
1c001ca6 <__no_irq_handler+0x9e> nop
1c001caa <__no_irq_handler+0xa2> nop
1c001cae <__no_irq_handler+0xa6> nop
1c001cb2 <__no_irq_handler+0xaa> nop
1c001cb6 <__no_irq_handler+0xae> nop
1c001cba <__no_irq_handler+0xb2> nop
1c001cbe <__no_irq_handler+0xb6> nop
1c001cc2 <__no_irq_handler+0xba> nop
1c001cc6 <__no_irq_handler+0xbe> nop
1c001cca <__no_irq_handler+0xc2> nop
1c001cce <__no_irq_handler+0xc6> nop
1c001cd2 <__no_irq_handler+0xca> nop
1c001cd6 <__no_irq_handler+0xce> nop
1c001cda <__no_irq_handler+0xd2> nop
1c001cde <__no_irq_handler+0xd6> nop
1c001ce2 <__no_irq_handler+0xda> nop
1c001ce6 <__no_irq_handler+0xde> nop
1c001cea <__no_irq_handler+0xe2> nop
1c001cee <__no_irq_handler+0xe6> nop
1c001cf2 <__no_irq_handler+0xea> nop
1c001cf6 <__no_irq_handler+0xee> nop
1c001cfa <__no_irq_handler+0xf2> nop
1c001cfe <__no_irq_handler+0xf6> nop
1c001d02 <__no_irq_handler+0xfa> nop
1c001d06 <__no_irq_handler+0xfe> nop
1c001d0a <__no_irq_handler+0x102> nop
1c001d0e <__no_irq_handler+0x106> nop
1c001d12 <__no_irq_handler+0x10a> nop
1c001d16 <__no_irq_handler+0x10e> nop
1c001d1a <__no_irq_handler+0x112> nop
1c001d1e <__no_irq_handler+0x116> nop
1c001d22 <__no_irq_handler+0x11a> nop
1c001d26 <__no_irq_handler+0x11e> nop
1c001d2a <__no_irq_handler+0x122> nop
1c001d2e <__no_irq_handler+0x126> nop
1c001d32 <__no_irq_handler+0x12a> nop
1c001d36 <__no_irq_handler+0x12e> nop
1c001d3a <__no_irq_handler+0x132> nop
1c001d3e <__no_irq_handler+0x136> nop
1c001d42 <__no_irq_handler+0x13a> nop
1c001d46 <__no_irq_handler+0x13e> nop
1c001d4a <__no_irq_handler+0x142> nop
1c001d4e <__no_irq_handler+0x146> nop
1c001d52 <__no_irq_handler+0x14a> nop
1c001d56 <__no_irq_handler+0x14e> nop
1c001d5a <__no_irq_handler+0x152> nop
1c001d5e <__no_irq_handler+0x156> nop
1c001d62 <__no_irq_handler+0x15a> nop
1c001d66 <__no_irq_handler+0x15e> nop
1c001d6a <__no_irq_handler+0x162> nop
1c001d6e <__no_irq_handler+0x166> nop
1c001d72 <__no_irq_handler+0x16a> nop
1c001d76 <__no_irq_handler+0x16e> nop
1c001d7a <__no_irq_handler+0x172> nop
1c001d7e <__no_irq_handler+0x176> nop
1c001d82 <__no_irq_handler+0x17a> nop
1c001d86 <__no_irq_handler+0x17e> nop
1c001d8a <__no_irq_handler+0x182> nop
1c001d8e <__no_irq_handler+0x186> nop
1c001d92 <__no_irq_handler+0x18a> nop
1c001d96 <__no_irq_handler+0x18e> nop
1c001d9a <__no_irq_handler+0x192> nop
1c001d9e <__no_irq_handler+0x196> nop
1c001da2 <__no_irq_handler+0x19a> nop
1c001da6 <__no_irq_handler+0x19e> nop
1c001daa <__no_irq_handler+0x1a2> nop
1c001dae <__no_irq_handler+0x1a6> nop
1c001db2 <__no_irq_handler+0x1aa> nop
1c001db6 <__no_irq_handler+0x1ae> nop
1c001dba <__no_irq_handler+0x1b2> nop
1c001dbe <__no_irq_handler+0x1b6> nop
1c001dc2 <__no_irq_handler+0x1ba> nop
1c001dc6 <__no_irq_handler+0x1be> nop
1c001dca <__no_irq_handler+0x1c2> nop
1c001dce <__no_irq_handler+0x1c6> nop
1c001dd2 <__no_irq_handler+0x1ca> nop
1c001dd6 <__no_irq_handler+0x1ce> nop
1c001dda <__no_irq_handler+0x1d2> nop
1c001dde <__no_irq_handler+0x1d6> nop
1c001de2 <__no_irq_handler+0x1da> nop
1c001de6 <__no_irq_handler+0x1de> nop
1c001dea <__no_irq_handler+0x1e2> nop
1c001dee <__no_irq_handler+0x1e6> nop
1c001df2 <__no_irq_handler+0x1ea> nop
1c001df6 <__no_irq_handler+0x1ee> nop
1c001dfa <__no_irq_handler+0x1f2> nop
1c001dfe <__no_irq_handler+0x1f6> nop
1c001e02 <__no_irq_handler+0x1fa> nop
1c001e06 <__no_irq_handler+0x1fe> nop
1c001e0a <__no_irq_handler+0x202> nop
1c001e0e <__no_irq_handler+0x206> nop
1c001e12 <__no_irq_handler+0x20a> nop
1c001e16 <__no_irq_handler+0x20e> nop
1c001e1a <__no_irq_handler+0x212> nop
1c001e1e <__no_irq_handler+0x216> nop
1c001e22 <__no_irq_handler+0x21a> nop
1c001e26 <__no_irq_handler+0x21e> nop
1c001e2a <__no_irq_handler+0x222> nop
1c001e2e <__no_irq_handler+0x226> nop
1c001e32 <__no_irq_handler+0x22a> nop
1c001e36 <__no_irq_handler+0x22e> nop
1c001e3a <__no_irq_handler+0x232> nop
1c001e3e <__no_irq_handler+0x236> nop
1c001e42 <__no_irq_handler+0x23a> nop
1c001e46 <__no_irq_handler+0x23e> nop
1c001e4a <__no_irq_handler+0x242> nop
1c001e4e <__no_irq_handler+0x246> nop
1c001e52 <__no_irq_handler+0x24a> nop
1c001e56 <__no_irq_handler+0x24e> nop
1c001e5a <__no_irq_handler+0x252> nop
1c001e5e <__no_irq_handler+0x256> nop
1c001e62 <__no_irq_handler+0x25a> nop
1c001e66 <__no_irq_handler+0x25e> nop
1c001e6a <__no_irq_handler+0x262> nop
1c001e6e <__no_irq_handler+0x266> nop
1c001e72 <__no_irq_handler+0x26a> nop
1c001e76 <__no_irq_handler+0x26e> nop
1c001e7a <__no_irq_handler+0x272> nop
1c001e7e <__no_irq_handler+0x276> nop
1c001e82 <__no_irq_handler+0x27a> nop
1c001e86 <__no_irq_handler+0x27e> nop
1c001e8a <__no_irq_handler+0x282> nop
1c001e8e <__no_irq_handler+0x286> nop
1c001e92 <__no_irq_handler+0x28a> nop
1c001e96 <__no_irq_handler+0x28e> nop
1c001e9a <__no_irq_handler+0x292> nop
1c001e9e <__no_irq_handler+0x296> nop
1c001ea2 <__no_irq_handler+0x29a> nop
1c001ea6 <__no_irq_handler+0x29e> nop
1c001eaa <__no_irq_handler+0x2a2> nop
1c001eae <__no_irq_handler+0x2a6> nop
1c001eb2 <__no_irq_handler+0x2aa> nop
1c001eb6 <__no_irq_handler+0x2ae> nop
1c001eba <__no_irq_handler+0x2b2> nop
1c001ebe <__no_irq_handler+0x2b6> nop
1c001ec2 <__no_irq_handler+0x2ba> nop
1c001ec6 <__no_irq_handler+0x2be> nop
1c001eca <__no_irq_handler+0x2c2> nop
1c001ece <__no_irq_handler+0x2c6> nop
1c001ed2 <__no_irq_handler+0x2ca> nop
1c001ed6 <__no_irq_handler+0x2ce> nop
1c001eda <__no_irq_handler+0x2d2> nop
1c001ede <__no_irq_handler+0x2d6> nop
1c001ee2 <__no_irq_handler+0x2da> nop
1c001ee6 <__no_irq_handler+0x2de> nop
1c001eea <__no_irq_handler+0x2e2> nop
1c001eee <__no_irq_handler+0x2e6> nop
1c001ef2 <__no_irq_handler+0x2ea> nop
1c001ef6 <__no_irq_handler+0x2ee> nop
1c001efa <__no_irq_handler+0x2f2> nop
1c001efe <__no_irq_handler+0x2f6> nop
1c001f02 <__no_irq_handler+0x2fa> nop
1c001f06 <__no_irq_handler+0x2fe> nop
1c001f0a <__no_irq_handler+0x302> nop
1c001f0e <__no_irq_handler+0x306> nop
1c001f12 <__no_irq_handler+0x30a> nop
1c001f16 <__no_irq_handler+0x30e> nop
1c001f1a <__no_irq_handler+0x312> nop
1c001f1e <__no_irq_handler+0x316> nop
1c001f22 <__no_irq_handler+0x31a> nop
1c001f26 <__no_irq_handler+0x31e> nop
1c001f2a <__no_irq_handler+0x322> nop
1c001f2e <__no_irq_handler+0x326> nop
1c001f32 <__no_irq_handler+0x32a> nop
1c001f36 <__no_irq_handler+0x32e> nop
1c001f3a <__no_irq_handler+0x332> nop
1c001f3e <__no_irq_handler+0x336> nop
1c001f42 <__no_irq_handler+0x33a> nop
1c001f46 <__no_irq_handler+0x33e> nop
1c001f4a <__no_irq_handler+0x342> nop
1c001f4e <__no_irq_handler+0x346> nop
1c001f52 <__no_irq_handler+0x34a> nop
1c001f56 <__no_irq_handler+0x34e> nop
1c001f5a <__no_irq_handler+0x352> nop
1c001f5e <__no_irq_handler+0x356> nop
1c001f62 <__no_irq_handler+0x35a> nop
1c001f66 <__no_irq_handler+0x35e> nop
1c001f6a <__no_irq_handler+0x362> nop
1c001f6e <__no_irq_handler+0x366> nop
1c001f72 <__no_irq_handler+0x36a> nop
1c001f76 <__no_irq_handler+0x36e> nop
1c001f7a <__no_irq_handler+0x372> nop
1c001f7e <__no_irq_handler+0x376> nop
1c001f82 <__no_irq_handler+0x37a> nop
1c001f86 <__no_irq_handler+0x37e> nop
1c001f8a <__no_irq_handler+0x382> nop
1c001f8e <__no_irq_handler+0x386> nop
1c001f92 <__no_irq_handler+0x38a> nop
1c001f96 <__no_irq_handler+0x38e> nop
1c001f9a <__no_irq_handler+0x392> nop
1c001f9e <__no_irq_handler+0x396> nop
1c001fa2 <__no_irq_handler+0x39a> nop
1c001fa6 <__no_irq_handler+0x39e> nop
1c001faa <__no_irq_handler+0x3a2> nop
1c001fae <__no_irq_handler+0x3a6> nop
1c001fb2 <__no_irq_handler+0x3aa> nop
1c001fb6 <__no_irq_handler+0x3ae> nop
1c001fba <__no_irq_handler+0x3b2> nop
1c001fbe <__no_irq_handler+0x3b6> nop
1c001fc2 <__no_irq_handler+0x3ba> nop
1c001fc6 <__no_irq_handler+0x3be> nop
1c001fca <__no_irq_handler+0x3c2> nop
1c001fce <__no_irq_handler+0x3c6> nop
1c001fd2 <__no_irq_handler+0x3ca> nop
1c001fd6 <__no_irq_handler+0x3ce> nop
1c001fda <__no_irq_handler+0x3d2> nop
1c001fde <__no_irq_handler+0x3d6> nop
1c001fe2 <__no_irq_handler+0x3da> nop
1c001fe6 <__no_irq_handler+0x3de> nop
1c001fea <__no_irq_handler+0x3e2> nop
1c001fee <__no_irq_handler+0x3e6> nop
1c001ff2 <__no_irq_handler+0x3ea> nop
1c001ff6 <__no_irq_handler+0x3ee> nop
1c001ffa <__no_irq_handler+0x3f2> nop
1c001ffe <__no_irq_handler+0x3f6> nop
__clic_vector_table():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:108
.option norvc
.balign 1024
.global __clic_vector_table

__clic_vector_table:
	j default_exception_handler
1c002000 <__clic_vector_table> j	1c001c00 <default_exception_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:109
	j __no_irq_handler
1c002004 <__clic_vector_table+0x4> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:110
	j __no_irq_handler
1c002008 <__clic_vector_table+0x8> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:111
	j software_handler
1c00200c <__clic_vector_table+0xc> j	1c001c02 <software_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:112
	j __no_irq_handler
1c002010 <__clic_vector_table+0x10> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:113
	j __no_irq_handler
1c002014 <__clic_vector_table+0x14> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:114
	j __no_irq_handler
1c002018 <__clic_vector_table+0x18> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:115
	j timer_handler
1c00201c <__clic_vector_table+0x1c> j	1c001c04 <timer_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:116
	j __no_irq_handler
1c002020 <__clic_vector_table+0x20> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:117
	j __no_irq_handler
1c002024 <__clic_vector_table+0x24> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:118
	j __no_irq_handler
1c002028 <__clic_vector_table+0x28> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:119
	j external_handler
1c00202c <__clic_vector_table+0x2c> j	1c001c06 <external_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:120
	j __no_irq_handler
1c002030 <__clic_vector_table+0x30> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:121
	j __no_irq_handler
1c002034 <__clic_vector_table+0x34> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:122
	j __no_irq_handler
1c002038 <__clic_vector_table+0x38> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:123
	j __no_irq_handler
1c00203c <__clic_vector_table+0x3c> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:124
	j __no_irq_handler
1c002040 <__clic_vector_table+0x40> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:125
	j __no_irq_handler
1c002044 <__clic_vector_table+0x44> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:126
	j __no_irq_handler
1c002048 <__clic_vector_table+0x48> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:127
	j __no_irq_handler
1c00204c <__clic_vector_table+0x4c> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:128
	j __no_irq_handler
1c002050 <__clic_vector_table+0x50> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:129
	j __no_irq_handler
1c002054 <__clic_vector_table+0x54> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:130
	j __no_irq_handler
1c002058 <__clic_vector_table+0x58> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:131
	j __no_irq_handler
1c00205c <__clic_vector_table+0x5c> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:132
	j __no_irq_handler
1c002060 <__clic_vector_table+0x60> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:133
	j __no_irq_handler
1c002064 <__clic_vector_table+0x64> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:134
	j __no_irq_handler
1c002068 <__clic_vector_table+0x68> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:135
	j __no_irq_handler
1c00206c <__clic_vector_table+0x6c> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:136
	j __no_irq_handler
1c002070 <__clic_vector_table+0x70> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:137
	j __no_irq_handler
1c002074 <__clic_vector_table+0x74> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:138
	j __no_irq_handler
1c002078 <__clic_vector_table+0x78> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:139
	j __no_irq_handler
1c00207c <__clic_vector_table+0x7c> j	1c001c08 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/handler.S:140
	j __handle_clic_int
1c002080 <__clic_vector_table+0x80> j	1c001b30 <__handle_clic_int>
	...
exit_success():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:82
void (*clic_isr_hook[1])(void);


/* need void functions for isr table entries */
void exit_success(void)
{
1c0023fa <exit_success> addi	sp,sp,-16
1c0023fc <exit_success+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:83
	puts("someone wrote to mailbox!");
1c0023fe <exit_success+0x4> lui	a0,0x1c008
1c002402 <exit_success+0x8> addi	a0,a0,896 # 1c008380 <__func__.1889+0xc>
1c002406 <exit_success+0xc> jal	ra,1c002c8c <puts>
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
1c00240a <exit_success+0x10> li	a4,0
1c00240c <exit_success+0x12> lui	a5,0xffff0
1c00240e <exit_success+0x14> addi	a5,a5,160 # ffff00a0 <__heap_l2_shared_start+0xe3fdf9c0>
1c002412 <exit_success+0x18> sw	a4,0(a5)
exit_success():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:85
	writew(0x00, MBOX_START_ADDRESS + SCMI_DOORBELL_C0_REG_OFFSET);
	exit(0);
1c002414 <exit_success+0x1a> li	a0,0
1c002416 <exit_success+0x1c> jal	1c0025d4 <exit>
exit_fail():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:89
}

void exit_fail(void)
{
1c002418 <exit_fail> addi	sp,sp,-16
1c00241a <exit_fail+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:90
	exit(1);
1c00241c <exit_fail+0x4> li	a0,1
1c00241e <exit_fail+0x6> jal	1c0025d4 <exit>
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:95
}


int main(void)
{
1c002420 <main> addi	sp,sp,-32
1c002422 <main+0x2> sw	ra,28(sp)
1c002424 <main+0x4> sw	s0,24(sp)
1c002426 <main+0x6> sw	s1,20(sp)
1c002428 <main+0x8> sw	s2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:98

	/* Init board hardware. */
	system_init();
1c00242a <main+0xa> jal	ra,1c001646 <system_init>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:118
	 * line in HW.
	 */

	/* TODO: hook illegal insn handler to exit(1) */

	printf("test csr accesses\n\r");
1c00242e <main+0xe> lui	a0,0x1c008
1c002432 <main+0x12> addi	a0,a0,924 # 1c00839c <__func__.1889+0x28>
1c002436 <main+0x16> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:121
	uint32_t thresh = 0xffaa;
	uint32_t cmp = 0;
	csr_write(CSR_MINTTHRESH, thresh);
1c00243a <main+0x1a> lui	a5,0x10
1c00243c <main+0x1c> addi	a5,a5,-86 # 0000ffaa <__stack_size+0xf7aa>
1c002440 <main+0x20> csrw	0x347,a5
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:122
	cmp = csr_read(CSR_MINTTHRESH);
1c002444 <main+0x24> csrr	a4,0x347
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:123
	csr_write(CSR_MINTTHRESH, 0);	/* reset threshold */
1c002448 <main+0x28> csrwi	0x347,0
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:124
	assert(cmp == (thresh & 0xff)); /* only lower 8 bits are writable */
1c00244c <main+0x2c> li	a5,170
1c002450 <main+0x30> bne	a4,a5,1c002534 <main+0x114>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:128 (discriminator 2)


	/* redirect vector table to our custom one */
	printf("set up vector table\n\r");
1c002454 <main+0x34> lui	a0,0x1c008
1c002458 <main+0x38> addi	a0,a0,944 # 1c0083b0 <__func__.1889+0x3c>
1c00245c <main+0x3c> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:130 (discriminator 2)
	/////////////////////////////////////////////////////////////////////
	clic_setup_mtvec();
1c002460 <main+0x40> jal	ra,1c001b82 <clic_setup_mtvec>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:131 (discriminator 2)
	clic_setup_mtvt();
1c002464 <main+0x44> jal	ra,1c001b94 <clic_setup_mtvt>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:134 (discriminator 2)

	/* enable selective hardware vectoring */
	printf("set shv\n\r");
1c002468 <main+0x48> lui	a0,0x1c008
1c00246c <main+0x4c> addi	a0,a0,968 # 1c0083c8 <__func__.1889+0x54>
1c002470 <main+0x50> jal	ra,1c002b6e <iprintf>
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45 (discriminator 2)
1c002474 <main+0x54> li	s2,1
1c002476 <main+0x56> lui	s0,0x1a201
1c00247a <main+0x5a> addi	s1,s0,520 # 1a201208 <__heap_l1_cluster_start+0xa2011e8>
1c00247e <main+0x5e> sw	s2,0(s1)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:139 (discriminator 2)
	writew((0x1 << CLIC_CLICINTATTR_SHV_BIT),
	       CLIC_BASE_ADDR + CLIC_CLICINTATTR_REG_OFFSET(INTR_ID));

	/* set trigger type to triggered */
	printf("set trigger type: triggered\n\r");
1c002482 <main+0x62> lui	a0,0x1c008
1c002486 <main+0x66> addi	a0,a0,980 # 1c0083d4 <__func__.1889+0x60>
1c00248a <main+0x6a> jal	ra,1c002b6e <iprintf>
readw():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:82 (discriminator 2)
	asm volatile("lw %0, 0(%1)"
1c00248e <main+0x6e> lw	a5,0(s1)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:140 (discriminator 2)
	writeb((0x1 << CLIC_CLICINTATTR_TRIG_OFFSET) |
1c002490 <main+0x70> p.bset	a5,a5,0,1
writeb():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:31 (discriminator 2)
	asm volatile("sb %0, 0(%1)"
1c002494 <main+0x74> sb	a5,0(s1)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:148 (discriminator 2)
	       CLIC_BASE_ADDR + CLIC_CLICINTATTR_REG_OFFSET(INTR_ID));

	/* set number of bits for level encoding:
	 * nlbits
	 */
	printf("set nlbits\n\r");
1c002498 <main+0x78> lui	a0,0x1c008
1c00249c <main+0x7c> addi	a0,a0,1012 # 1c0083f4 <__func__.1889+0x80>
1c0024a0 <main+0x80> jal	ra,1c002b6e <iprintf>
writeb():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:31 (discriminator 2)
1c0024a4 <main+0x84> li	a5,8
1c0024a6 <main+0x86> lui	a4,0x1a200
1c0024aa <main+0x8a> sb	a5,0(a4) # 1a200000 <__heap_l1_cluster_start+0xa1fffe0>
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:153 (discriminator 2)
	writeb((0x4 << CLIC_CLICCFG_NLBITS_OFFSET),
	       CLIC_BASE_ADDR + CLIC_CLICCFG_REG_OFFSET);

	/* set interrupt level and priority*/
	printf("set interrupt priority and level\n\r");
1c0024ae <main+0x8e> lui	a0,0x1c008
1c0024b2 <main+0x92> addi	a0,a0,1028 # 1c008404 <__func__.1889+0x90>
1c0024b6 <main+0x96> jal	ra,1c002b6e <iprintf>
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45 (discriminator 2)
	asm volatile("sw %0, 0(%1)"
1c0024ba <main+0x9a> addi	a4,s0,524
1c0024be <main+0x9e> li	a5,170
1c0024c2 <main+0xa2> sw	a5,0(a4)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:158 (discriminator 2)
	writew(0xaa, CLIC_BASE_ADDR + CLIC_CLICINTCTL_REG_OFFSET(INTR_ID));

	/* raise interrupt threshold to max and check that the interrupt doesn't
	 * fire yet */
	printf("raise interrupt threshold to max (no interrupt should happen)\n\r");
1c0024c4 <main+0xa4> lui	a0,0x1c008
1c0024c8 <main+0xa8> addi	a0,a0,1064 # 1c008428 <__func__.1889+0xb4>
1c0024cc <main+0xac> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:159 (discriminator 2)
	csr_write(CSR_MINTTHRESH, 0xff); /* 0xff > 0xaa */
1c0024d0 <main+0xb0> li	a5,255
1c0024d4 <main+0xb4> csrw	0x347,a5
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:160 (discriminator 2)
	clic_isr_hook[0] = exit_fail; /* if we take an interrupt then we failed
1c0024d8 <main+0xb8> lui	a5,0x1c002
1c0024dc <main+0xbc> addi	a5,a5,1048 # 1c002418 <exit_fail>
1c0024e0 <main+0xc0> sw	a5,960(gp) # 1c009224 <clic_isr_hook>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:163 (discriminator 2)
				       */

	printf("enable interrupt\n\r");
1c0024e4 <main+0xc4> lui	a0,0x1c008
1c0024e8 <main+0xc8> addi	a0,a0,1128 # 1c008468 <__func__.1889+0xf4>
1c0024ec <main+0xcc> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:166 (discriminator 2)

	/* enable interrupt globally */
	irq_clint_global_enable();
1c0024f0 <main+0xd0> jal	ra,1c001a26 <irq_clint_global_enable>
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45 (discriminator 2)
1c0024f4 <main+0xd4> addi	s0,s0,516
1c0024f8 <main+0xd8> sw	s2,0(s0)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:171 (discriminator 2)

	/* enable interrupt on clic */
	writew(0x1, CLIC_BASE_ADDR + CLIC_CLICINTIE_REG_OFFSET(INTR_ID));

	printf("lower interrupt threshold (interrupt should happen)\n\r");
1c0024fc <main+0xdc> lui	a0,0x1c008
1c002500 <main+0xe0> addi	a0,a0,1148 # 1c00847c <__func__.1889+0x108>
1c002504 <main+0xe4> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:172 (discriminator 2)
	clic_isr_hook[0] = exit_success;
1c002508 <main+0xe8> lui	a5,0x1c002
1c00250c <main+0xec> addi	a5,a5,1018 # 1c0023fa <exit_success>
1c002510 <main+0xf0> sw	a5,960(gp) # 1c009224 <clic_isr_hook>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:173 (discriminator 2)
	csr_write(CSR_MINTTHRESH, 0); /* 0 < 0xaa */
1c002514 <main+0xf4> csrwi	0x347,0
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:178 (discriminator 2)

	// /* write to mailbox channel 0 doorbell register */
	// writew(0x01, MBOX_START_ADDRESS + SCMI_DOORBELL_C0_REG_OFFSET);

	printf("writing to doorbell register at address Mailbox_start_address + 0xa0");
1c002518 <main+0xf8> lui	a0,0x1c008
1c00251c <main+0xfc> addi	a0,a0,1204 # 1c0084b4 <__func__.1889+0x140>
1c002520 <main+0x100> jal	ra,1c002b6e <iprintf>
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45 (discriminator 2)
1c002524 <main+0x104> lui	a5,0x10
1c002526 <main+0x106> addi	a5,a5,-1
1c002528 <main+0x108> lui	a4,0xffff0
1c00252a <main+0x10a> addi	a4,a4,32 # ffff0020 <__heap_l2_shared_start+0xe3fdf940>
1c00252e <main+0x10e> sw	a5,0(a4)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:182 (discriminator 2)
	writew(0xffff, MBOX_START_ADDRESS + 0x20);


	for (volatile int i = 0; i < 1; i++)
1c002530 <main+0x110> sw	zero,12(sp)
1c002532 <main+0x112> j	1c00253e <main+0x11e>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:124 (discriminator 1)
	assert(cmp == (thresh & 0xff)); /* only lower 8 bits are writable */
1c002534 <main+0x114> li	a0,1
1c002536 <main+0x116> jal	1c0025d4 <exit>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:182 (discriminator 3)
	for (volatile int i = 0; i < 1; i++)
1c002538 <main+0x118> lw	a5,12(sp)
1c00253a <main+0x11a> addi	a5,a5,1
1c00253c <main+0x11c> sw	a5,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:182 (discriminator 1)
1c00253e <main+0x11e> lw	a5,12(sp)
1c002540 <main+0x120> blez	a5,1c002538 <main+0x118>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:185
		;

	printf("Interrupt took too long\n\r");
1c002544 <main+0x124> lui	a0,0x1c008
1c002548 <main+0x128> addi	a0,a0,1276 # 1c0084fc <__func__.1889+0x188>
1c00254c <main+0x12c> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:187
	return 1;
}
1c002550 <main+0x130> li	a0,1
1c002552 <main+0x132> lw	ra,28(sp)
1c002554 <main+0x134> lw	s0,24(sp)
1c002556 <main+0x136> lw	s1,20(sp)
1c002558 <main+0x138> lw	s2,16(sp)
1c00255a <main+0x13a> addi	sp,sp,32
1c00255c <main+0x13c> ret
vApplicationStackOverflowHook():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:224
	the idle task to clean up memory allocated by the kernel to any task
	that has since been deleted. */
}

void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
1c00255e <vApplicationStackOverflowHook> addi	sp,sp,-16
1c002560 <vApplicationStackOverflowHook+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:231
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
1c002562 <vApplicationStackOverflowHook+0x4> csrci	mstatus,8
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:232
	printf("error: stack overflow\n\r");
1c002566 <vApplicationStackOverflowHook+0x8> lui	a0,0x1c008
1c00256a <vApplicationStackOverflowHook+0xc> addi	a0,a0,1304 # 1c008518 <__func__.1889+0x1a4>
1c00256e <vApplicationStackOverflowHook+0x10> jal	ra,1c002b6e <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:233
	__asm volatile("ebreak");
1c002572 <vApplicationStackOverflowHook+0x14> ebreak
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:234 (discriminator 1)
	for (;;)
1c002574 <vApplicationStackOverflowHook+0x16> j	1c002574 <vApplicationStackOverflowHook+0x16>
vApplicationTickHook():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-mbox-freertos/clic-mbox-freertos.c:240
		;
}

void vApplicationTickHook(void)
{
}
1c002576 <vApplicationTickHook> ret
abort():
1c002578 <abort> addi	sp,sp,-16
1c00257a <abort+0x2> li	a0,6
1c00257c <abort+0x4> sw	ra,12(sp)
1c00257e <abort+0x6> jal	ra,1c002d28 <raise>
1c002582 <abort+0xa> li	a0,1
1c002584 <abort+0xc> jal	ra,1c0014b4 <_exit>
__assert_func():
1c002588 <__assert_func> lui	a5,0x1c009
1c00258c <__assert_func+0x4> lw	a5,-1780(a5) # 1c00890c <_impure_ptr>
1c002590 <__assert_func+0x8> addi	sp,sp,-16
1c002592 <__assert_func+0xa> mv	a6,a2
1c002594 <__assert_func+0xc> sw	ra,12(sp)
1c002596 <__assert_func+0xe> mv	a7,a0
1c002598 <__assert_func+0x10> mv	a4,a1
1c00259a <__assert_func+0x12> lw	a0,12(a5)
1c00259c <__assert_func+0x14> mv	a2,a3
1c00259e <__assert_func+0x16> beqz	a6,1c0025ba <__assert_func+0x32>
1c0025a2 <__assert_func+0x1a> lui	a5,0x1c008
1c0025a6 <__assert_func+0x1e> addi	a5,a5,1328 # 1c008530 <__func__.1889+0x1bc>
1c0025aa <__assert_func+0x22> lui	a1,0x1c008
1c0025ae <__assert_func+0x26> mv	a3,a7
1c0025b0 <__assert_func+0x28> addi	a1,a1,1344 # 1c008540 <__func__.1889+0x1cc>
1c0025b4 <__assert_func+0x2c> jal	1c00263a <fiprintf>
1c0025b6 <__assert_func+0x2e> jal	ra,1c002578 <abort>
1c0025ba <__assert_func+0x32> lui	a6,0x1c008
1c0025be <__assert_func+0x36> addi	a5,a6,464 # 1c0081d0 <__func__.3257+0x60>
1c0025c2 <__assert_func+0x3a> addi	a6,a6,464
1c0025c6 <__assert_func+0x3e> j	1c0025aa <__assert_func+0x22>
atexit():
1c0025c8 <atexit> mv	a1,a0
1c0025ca <atexit+0x2> li	a3,0
1c0025cc <atexit+0x4> li	a2,0
1c0025ce <atexit+0x6> li	a0,0
1c0025d0 <atexit+0x8> j	1c002f3e <__register_exitproc>
exit():
1c0025d4 <exit> addi	sp,sp,-16
1c0025d6 <exit+0x2> lui	a5,0x1c003
1c0025da <exit+0x6> sw	s0,8(sp)
1c0025dc <exit+0x8> sw	ra,12(sp)
1c0025de <exit+0xa> addi	a5,a5,-70 # 1c002fba <__call_exitprocs>
1c0025e2 <exit+0xe> mv	s0,a0
1c0025e4 <exit+0x10> beqz	a5,1c0025ec <exit+0x18>
1c0025e6 <exit+0x12> li	a1,0
1c0025e8 <exit+0x14> jal	ra,1c002fba <__call_exitprocs>
1c0025ec <exit+0x18> lui	a5,0x1c009
1c0025f0 <exit+0x1c> lw	a0,-1772(a5) # 1c008914 <_global_impure_ptr>
1c0025f4 <exit+0x20> lw	a5,40(a0)
1c0025f6 <exit+0x22> beqz	a5,1c0025fa <exit+0x26>
1c0025f8 <exit+0x24> jalr	a5
1c0025fa <exit+0x26> mv	a0,s0
1c0025fc <exit+0x28> jal	ra,1c0014b4 <_exit>
__libc_fini_array():
1c002600 <__libc_fini_array> addi	sp,sp,-16
1c002602 <__libc_fini_array+0x2> lui	a5,0x1c008
1c002606 <__libc_fini_array+0x6> sw	s0,8(sp)
1c002608 <__libc_fini_array+0x8> lui	s0,0x1c008
1c00260c <__libc_fini_array+0xc> addi	a4,a5,1636 # 1c008664 <delegate_task_mask>
1c002610 <__libc_fini_array+0x10> addi	s0,s0,1636 # 1c008664 <delegate_task_mask>
1c002614 <__libc_fini_array+0x14> sub	s0,s0,a4
1c002616 <__libc_fini_array+0x16> sw	s1,4(sp)
1c002618 <__libc_fini_array+0x18> sw	ra,12(sp)
1c00261a <__libc_fini_array+0x1a> srai	s0,s0,0x2
1c00261c <__libc_fini_array+0x1c> addi	s1,a5,1636
1c002620 <__libc_fini_array+0x20> bnez	s0,1c00262c <__libc_fini_array+0x2c>
1c002622 <__libc_fini_array+0x22> lw	ra,12(sp)
1c002624 <__libc_fini_array+0x24> lw	s0,8(sp)
1c002626 <__libc_fini_array+0x26> lw	s1,4(sp)
1c002628 <__libc_fini_array+0x28> addi	sp,sp,16
1c00262a <__libc_fini_array+0x2a> ret
1c00262c <__libc_fini_array+0x2c> addi	s0,s0,-1
1c00262e <__libc_fini_array+0x2e> slli	a5,s0,0x2
1c002632 <__libc_fini_array+0x32> add	a5,a5,s1
1c002634 <__libc_fini_array+0x34> lw	a5,0(a5)
1c002636 <__libc_fini_array+0x36> jalr	a5
1c002638 <__libc_fini_array+0x38> j	1c002620 <__libc_fini_array+0x20>
fprintf():
1c00263a <fiprintf> addi	sp,sp,-64
1c00263c <fiprintf+0x2> sw	a5,52(sp)
1c00263e <fiprintf+0x4> lui	a5,0x1c009
1c002642 <fiprintf+0x8> sw	a2,40(sp)
1c002644 <fiprintf+0xa> mv	a2,a1
1c002646 <fiprintf+0xc> mv	a1,a0
1c002648 <fiprintf+0xe> lw	a0,-1780(a5) # 1c00890c <_impure_ptr>
1c00264c <fiprintf+0x12> sw	a3,44(sp)
1c00264e <fiprintf+0x14> addi	a3,sp,40
1c002650 <fiprintf+0x16> sw	ra,28(sp)
1c002652 <fiprintf+0x18> sw	a4,48(sp)
1c002654 <fiprintf+0x1a> sw	a6,56(sp)
1c002656 <fiprintf+0x1c> sw	a7,60(sp)
1c002658 <fiprintf+0x1e> sw	a3,12(sp)
1c00265a <fiprintf+0x20> jal	1c0028c4 <_vfiprintf_r>
1c00265c <fiprintf+0x22> lw	ra,28(sp)
1c00265e <fiprintf+0x24> addi	sp,sp,64
1c002660 <fiprintf+0x26> ret
__libc_init_array():
1c002662 <__libc_init_array> addi	sp,sp,-16
1c002664 <__libc_init_array+0x2> lui	a5,0x1c008
1c002668 <__libc_init_array+0x6> sw	s0,8(sp)
1c00266a <__libc_init_array+0x8> lui	s0,0x1c008
1c00266e <__libc_init_array+0xc> addi	a4,a5,1636 # 1c008664 <delegate_task_mask>
1c002672 <__libc_init_array+0x10> addi	s0,s0,1636 # 1c008664 <delegate_task_mask>
1c002676 <__libc_init_array+0x14> sub	s0,s0,a4
1c002678 <__libc_init_array+0x16> sw	s1,4(sp)
1c00267a <__libc_init_array+0x18> sw	s2,0(sp)
1c00267c <__libc_init_array+0x1a> sw	ra,12(sp)
1c00267e <__libc_init_array+0x1c> srai	s0,s0,0x2
1c002680 <__libc_init_array+0x1e> li	s1,0
1c002682 <__libc_init_array+0x20> addi	s2,a5,1636
1c002686 <__libc_init_array+0x24> bne	s1,s0,1c0026b4 <__libc_init_array+0x52>
1c00268a <__libc_init_array+0x28> lui	a5,0x1c008
1c00268e <__libc_init_array+0x2c> lui	s0,0x1c008
1c002692 <__libc_init_array+0x30> addi	a4,a5,1636 # 1c008664 <delegate_task_mask>
1c002696 <__libc_init_array+0x34> addi	s0,s0,1636 # 1c008664 <delegate_task_mask>
1c00269a <__libc_init_array+0x38> sub	s0,s0,a4
1c00269c <__libc_init_array+0x3a> srai	s0,s0,0x2
1c00269e <__libc_init_array+0x3c> li	s1,0
1c0026a0 <__libc_init_array+0x3e> addi	s2,a5,1636
1c0026a4 <__libc_init_array+0x42> bne	s1,s0,1c0026c2 <__libc_init_array+0x60>
1c0026a8 <__libc_init_array+0x46> lw	ra,12(sp)
1c0026aa <__libc_init_array+0x48> lw	s0,8(sp)
1c0026ac <__libc_init_array+0x4a> lw	s1,4(sp)
1c0026ae <__libc_init_array+0x4c> lw	s2,0(sp)
1c0026b0 <__libc_init_array+0x4e> addi	sp,sp,16
1c0026b2 <__libc_init_array+0x50> ret
1c0026b4 <__libc_init_array+0x52> slli	a5,s1,0x2
1c0026b8 <__libc_init_array+0x56> add	a5,a5,s2
1c0026ba <__libc_init_array+0x58> lw	a5,0(a5)
1c0026bc <__libc_init_array+0x5a> addi	s1,s1,1
1c0026be <__libc_init_array+0x5c> jalr	a5
1c0026c0 <__libc_init_array+0x5e> j	1c002686 <__libc_init_array+0x24>
1c0026c2 <__libc_init_array+0x60> slli	a5,s1,0x2
1c0026c6 <__libc_init_array+0x64> add	a5,a5,s2
1c0026c8 <__libc_init_array+0x66> lw	a5,0(a5)
1c0026ca <__libc_init_array+0x68> addi	s1,s1,1
1c0026cc <__libc_init_array+0x6a> jalr	a5
1c0026ce <__libc_init_array+0x6c> j	1c0026a4 <__libc_init_array+0x42>
_free_r():
1c0026d0 <_free_r> beqz	a1,1c002776 <_free_r+0xa6>
1c0026d2 <_free_r+0x2> lw	a5,-4(a1)
1c0026d6 <_free_r+0x6> addi	sp,sp,-32
1c0026d8 <_free_r+0x8> sw	s0,24(sp)
1c0026da <_free_r+0xa> sw	ra,28(sp)
1c0026dc <_free_r+0xc> addi	s0,a1,-4
1c0026e0 <_free_r+0x10> bgez	a5,1c0026e6 <_free_r+0x16>
1c0026e4 <_free_r+0x14> add	s0,s0,a5
1c0026e6 <_free_r+0x16> sw	a0,12(sp)
1c0026e8 <_free_r+0x18> jal	ra,1c0015aa <__malloc_lock>
1c0026ec <_free_r+0x1c> lw	a5,-96(gp) # 1c008e04 <__malloc_free_list>
1c0026f0 <_free_r+0x20> lw	a0,12(sp)
1c0026f2 <_free_r+0x22> mv	a2,a4
1c0026f4 <_free_r+0x24> bnez	a5,1c002708 <_free_r+0x38>
1c0026f6 <_free_r+0x26> sw	zero,4(s0)
1c0026fa <_free_r+0x2a> sw	s0,-96(gp) # 1c008e04 <__malloc_free_list>
1c0026fe <_free_r+0x2e> lw	s0,24(sp)
1c002700 <_free_r+0x30> lw	ra,28(sp)
1c002702 <_free_r+0x32> addi	sp,sp,32
1c002704 <_free_r+0x34> j	1c0015b8 <__malloc_unlock>
1c002708 <_free_r+0x38> bgeu	s0,a5,1c002726 <_free_r+0x56>
1c00270c <_free_r+0x3c> lw	a3,0(s0)
1c00270e <_free_r+0x3e> add	a4,s0,a3
1c002712 <_free_r+0x42> bne	a5,a4,1c00271e <_free_r+0x4e>
1c002716 <_free_r+0x46> lw	a4,0(a5)
1c002718 <_free_r+0x48> lw	a5,4(a5)
1c00271a <_free_r+0x4a> add	a4,a4,a3
1c00271c <_free_r+0x4c> sw	a4,0(s0)
1c00271e <_free_r+0x4e> sw	a5,4(s0)
1c002720 <_free_r+0x50> sw	s0,-96(gp) # 1c008e04 <__malloc_free_list>
1c002724 <_free_r+0x54> j	1c0026fe <_free_r+0x2e>
1c002726 <_free_r+0x56> mv	a4,a5
1c002728 <_free_r+0x58> lw	a5,4(a5)
1c00272a <_free_r+0x5a> beqz	a5,1c002730 <_free_r+0x60>
1c00272c <_free_r+0x5c> bgeu	s0,a5,1c002726 <_free_r+0x56>
1c002730 <_free_r+0x60> lw	a3,0(a4)
1c002732 <_free_r+0x62> add	a2,a4,a3
1c002736 <_free_r+0x66> bne	a2,s0,1c002754 <_free_r+0x84>
1c00273a <_free_r+0x6a> lw	a2,0(s0)
1c00273c <_free_r+0x6c> add	a3,a3,a2
1c00273e <_free_r+0x6e> sw	a3,0(a4)
1c002740 <_free_r+0x70> add	a2,a4,a3
1c002744 <_free_r+0x74> bne	a5,a2,1c0026fe <_free_r+0x2e>
1c002748 <_free_r+0x78> lw	a2,0(a5)
1c00274a <_free_r+0x7a> lw	a5,4(a5)
1c00274c <_free_r+0x7c> add	a3,a3,a2
1c00274e <_free_r+0x7e> sw	a3,0(a4)
1c002750 <_free_r+0x80> sw	a5,4(a4)
1c002752 <_free_r+0x82> j	1c0026fe <_free_r+0x2e>
1c002754 <_free_r+0x84> bgeu	s0,a2,1c00275e <_free_r+0x8e>
1c002758 <_free_r+0x88> li	a5,12
1c00275a <_free_r+0x8a> sw	a5,0(a0)
1c00275c <_free_r+0x8c> j	1c0026fe <_free_r+0x2e>
1c00275e <_free_r+0x8e> lw	a2,0(s0)
1c002760 <_free_r+0x90> add	a3,s0,a2
1c002764 <_free_r+0x94> bne	a5,a3,1c002770 <_free_r+0xa0>
1c002768 <_free_r+0x98> lw	a3,0(a5)
1c00276a <_free_r+0x9a> lw	a5,4(a5)
1c00276c <_free_r+0x9c> add	a3,a3,a2
1c00276e <_free_r+0x9e> sw	a3,0(s0)
1c002770 <_free_r+0xa0> sw	a5,4(s0)
1c002772 <_free_r+0xa2> sw	s0,4(a4)
1c002774 <_free_r+0xa4> j	1c0026fe <_free_r+0x2e>
1c002776 <_free_r+0xa6> ret
_malloc_r():
1c002778 <_malloc_r> addi	sp,sp,-32
1c00277a <_malloc_r+0x2> sw	s1,20(sp)
1c00277c <_malloc_r+0x4> addi	s1,a1,3
1c002780 <_malloc_r+0x8> andi	s1,s1,-4
1c002782 <_malloc_r+0xa> sw	s2,16(sp)
1c002784 <_malloc_r+0xc> sw	ra,28(sp)
1c002786 <_malloc_r+0xe> sw	s0,24(sp)
1c002788 <_malloc_r+0x10> sw	s3,12(sp)
1c00278a <_malloc_r+0x12> addi	s1,s1,8
1c00278c <_malloc_r+0x14> li	a5,12
1c00278e <_malloc_r+0x16> mv	s2,a0
1c002790 <_malloc_r+0x18> bgeu	s1,a5,1c0027da <_malloc_r+0x62>
1c002794 <_malloc_r+0x1c> li	s1,12
1c002796 <_malloc_r+0x1e> bltu	s1,a1,1c0027de <_malloc_r+0x66>
1c00279a <_malloc_r+0x22> mv	a0,s2
1c00279c <_malloc_r+0x24> jal	ra,1c0015aa <__malloc_lock>
1c0027a0 <_malloc_r+0x28> lw	a4,-96(gp) # 1c008e04 <__malloc_free_list>
1c0027a4 <_malloc_r+0x2c> addi	a3,gp,-96 # 1c008e04 <__malloc_free_list>
1c0027a8 <_malloc_r+0x30> mv	s0,a4
1c0027aa <_malloc_r+0x32> bnez	s0,1c0027f4 <_malloc_r+0x7c>
1c0027ac <_malloc_r+0x34> addi	s0,gp,-92 # 1c008e08 <__malloc_sbrk_start>
1c0027b0 <_malloc_r+0x38> lw	a5,0(s0)
1c0027b2 <_malloc_r+0x3a> bnez	a5,1c0027be <_malloc_r+0x46>
1c0027b4 <_malloc_r+0x3c> li	a1,0
1c0027b6 <_malloc_r+0x3e> mv	a0,s2
1c0027b8 <_malloc_r+0x40> jal	ra,1c002c9a <_sbrk_r>
1c0027bc <_malloc_r+0x44> sw	a0,0(s0)
1c0027be <_malloc_r+0x46> mv	a1,s1
1c0027c0 <_malloc_r+0x48> mv	a0,s2
1c0027c2 <_malloc_r+0x4a> jal	ra,1c002c9a <_sbrk_r>
1c0027c6 <_malloc_r+0x4e> li	s3,-1
1c0027c8 <_malloc_r+0x50> bne	a0,s3,1c00283c <_malloc_r+0xc4>
1c0027cc <_malloc_r+0x54> li	a5,12
1c0027ce <_malloc_r+0x56> sw	a5,0(s2)
1c0027d2 <_malloc_r+0x5a> mv	a0,s2
1c0027d4 <_malloc_r+0x5c> jal	ra,1c0015b8 <__malloc_unlock>
1c0027d8 <_malloc_r+0x60> j	1c0027e4 <_malloc_r+0x6c>
1c0027da <_malloc_r+0x62> bgez	s1,1c002796 <_malloc_r+0x1e>
1c0027de <_malloc_r+0x66> li	a5,12
1c0027e0 <_malloc_r+0x68> sw	a5,0(s2)
1c0027e4 <_malloc_r+0x6c> li	a0,0
1c0027e6 <_malloc_r+0x6e> lw	ra,28(sp)
1c0027e8 <_malloc_r+0x70> lw	s0,24(sp)
1c0027ea <_malloc_r+0x72> lw	s1,20(sp)
1c0027ec <_malloc_r+0x74> lw	s2,16(sp)
1c0027ee <_malloc_r+0x76> lw	s3,12(sp)
1c0027f0 <_malloc_r+0x78> addi	sp,sp,32
1c0027f2 <_malloc_r+0x7a> ret
1c0027f4 <_malloc_r+0x7c> lw	a5,0(s0)
1c0027f6 <_malloc_r+0x7e> sub	a5,a5,s1
1c0027f8 <_malloc_r+0x80> bltz	a5,1c002836 <_malloc_r+0xbe>
1c0027fc <_malloc_r+0x84> li	a2,11
1c0027fe <_malloc_r+0x86> bgeu	a2,a5,1c00280a <_malloc_r+0x92>
1c002802 <_malloc_r+0x8a> sw	a5,0(s0)
1c002804 <_malloc_r+0x8c> add	s0,s0,a5
1c002806 <_malloc_r+0x8e> sw	s1,0(s0)
1c002808 <_malloc_r+0x90> j	1c002812 <_malloc_r+0x9a>
1c00280a <_malloc_r+0x92> lw	a5,4(s0)
1c00280c <_malloc_r+0x94> bne	a4,s0,1c002832 <_malloc_r+0xba>
1c002810 <_malloc_r+0x98> sw	a5,0(a3)
1c002812 <_malloc_r+0x9a> mv	a0,s2
1c002814 <_malloc_r+0x9c> jal	ra,1c0015b8 <__malloc_unlock>
1c002818 <_malloc_r+0xa0> addi	a0,s0,11
1c00281c <_malloc_r+0xa4> addi	a5,s0,4
1c002820 <_malloc_r+0xa8> andi	a0,a0,-8
1c002822 <_malloc_r+0xaa> sub	a4,a0,a5
1c002826 <_malloc_r+0xae> beq	a0,a5,1c0027e6 <_malloc_r+0x6e>
1c00282a <_malloc_r+0xb2> add	s0,s0,a4
1c00282c <_malloc_r+0xb4> sub	a5,a5,a0
1c00282e <_malloc_r+0xb6> sw	a5,0(s0)
1c002830 <_malloc_r+0xb8> j	1c0027e6 <_malloc_r+0x6e>
1c002832 <_malloc_r+0xba> sw	a5,4(a4)
1c002834 <_malloc_r+0xbc> j	1c002812 <_malloc_r+0x9a>
1c002836 <_malloc_r+0xbe> mv	a4,s0
1c002838 <_malloc_r+0xc0> lw	s0,4(s0)
1c00283a <_malloc_r+0xc2> j	1c0027aa <_malloc_r+0x32>
1c00283c <_malloc_r+0xc4> addi	s0,a0,3
1c002840 <_malloc_r+0xc8> andi	s0,s0,-4
1c002842 <_malloc_r+0xca> beq	a0,s0,1c002806 <_malloc_r+0x8e>
1c002846 <_malloc_r+0xce> sub	a1,s0,a0
1c00284a <_malloc_r+0xd2> mv	a0,s2
1c00284c <_malloc_r+0xd4> jal	ra,1c002c9a <_sbrk_r>
1c002850 <_malloc_r+0xd8> bne	a0,s3,1c002806 <_malloc_r+0x8e>
1c002854 <_malloc_r+0xdc> j	1c0027cc <_malloc_r+0x54>
__sfputc_r():
1c002856 <__sfputc_r> lw	a5,8(a2)
1c002858 <__sfputc_r+0x2> addi	a5,a5,-1
1c00285a <__sfputc_r+0x4> sw	a5,8(a2)
1c00285c <__sfputc_r+0x6> bgez	a5,1c002870 <__sfputc_r+0x1a>
1c002860 <__sfputc_r+0xa> lw	a4,24(a2)
1c002862 <__sfputc_r+0xc> blt	a5,a4,1c00286c <__sfputc_r+0x16>
1c002866 <__sfputc_r+0x10> li	a5,10
1c002868 <__sfputc_r+0x12> bne	a1,a5,1c002870 <__sfputc_r+0x1a>
1c00286c <__sfputc_r+0x16> j	1c002d68 <__swbuf_r>
1c002870 <__sfputc_r+0x1a> lw	a5,0(a2)
1c002872 <__sfputc_r+0x1c> mv	a0,a1
1c002874 <__sfputc_r+0x1e> addi	a4,a5,1
1c002878 <__sfputc_r+0x22> sw	a4,0(a2)
1c00287a <__sfputc_r+0x24> sb	a1,0(a5)
1c00287e <__sfputc_r+0x28> ret
__sfputs_r():
1c002880 <__sfputs_r> addi	sp,sp,-32
1c002882 <__sfputs_r+0x2> sw	s0,24(sp)
1c002884 <__sfputs_r+0x4> sw	s1,20(sp)
1c002886 <__sfputs_r+0x6> sw	s2,16(sp)
1c002888 <__sfputs_r+0x8> sw	s3,12(sp)
1c00288a <__sfputs_r+0xa> sw	s4,8(sp)
1c00288c <__sfputs_r+0xc> sw	ra,28(sp)
1c00288e <__sfputs_r+0xe> mv	s2,a0
1c002890 <__sfputs_r+0x10> mv	s3,a1
1c002892 <__sfputs_r+0x12> mv	s0,a2
1c002894 <__sfputs_r+0x14> add	s1,a2,a3
1c002898 <__sfputs_r+0x18> li	s4,-1
1c00289a <__sfputs_r+0x1a> bne	s0,s1,1c0028a2 <__sfputs_r+0x22>
1c00289e <__sfputs_r+0x1e> li	a0,0
1c0028a0 <__sfputs_r+0x20> j	1c0028b4 <__sfputs_r+0x34>
1c0028a2 <__sfputs_r+0x22> lbu	a1,0(s0)
1c0028a6 <__sfputs_r+0x26> mv	a2,s3
1c0028a8 <__sfputs_r+0x28> mv	a0,s2
1c0028aa <__sfputs_r+0x2a> jal	ra,1c002856 <__sfputc_r>
1c0028ae <__sfputs_r+0x2e> addi	s0,s0,1
1c0028b0 <__sfputs_r+0x30> bne	a0,s4,1c00289a <__sfputs_r+0x1a>
1c0028b4 <__sfputs_r+0x34> lw	ra,28(sp)
1c0028b6 <__sfputs_r+0x36> lw	s0,24(sp)
1c0028b8 <__sfputs_r+0x38> lw	s1,20(sp)
1c0028ba <__sfputs_r+0x3a> lw	s2,16(sp)
1c0028bc <__sfputs_r+0x3c> lw	s3,12(sp)
1c0028be <__sfputs_r+0x3e> lw	s4,8(sp)
1c0028c0 <__sfputs_r+0x40> addi	sp,sp,32
1c0028c2 <__sfputs_r+0x42> ret
_vfiprintf_r():
1c0028c4 <_vfiprintf_r> addi	sp,sp,-176
1c0028c6 <_vfiprintf_r+0x2> sw	s0,168(sp)
1c0028c8 <_vfiprintf_r+0x4> sw	s1,164(sp)
1c0028ca <_vfiprintf_r+0x6> sw	s2,160(sp)
1c0028cc <_vfiprintf_r+0x8> sw	s3,156(sp)
1c0028ce <_vfiprintf_r+0xa> sw	ra,172(sp)
1c0028d0 <_vfiprintf_r+0xc> sw	s4,152(sp)
1c0028d2 <_vfiprintf_r+0xe> sw	s5,148(sp)
1c0028d4 <_vfiprintf_r+0x10> sw	s6,144(sp)
1c0028d6 <_vfiprintf_r+0x12> sw	s7,140(sp)
1c0028d8 <_vfiprintf_r+0x14> sw	s8,136(sp)
1c0028da <_vfiprintf_r+0x16> sw	s9,132(sp)
1c0028dc <_vfiprintf_r+0x18> sw	s10,128(sp)
1c0028de <_vfiprintf_r+0x1a> sw	s11,124(sp)
1c0028e0 <_vfiprintf_r+0x1c> mv	s3,a0
1c0028e2 <_vfiprintf_r+0x1e> mv	s1,a1
1c0028e4 <_vfiprintf_r+0x20> mv	s2,a2
1c0028e6 <_vfiprintf_r+0x22> mv	s0,a3
1c0028e8 <_vfiprintf_r+0x24> beqz	a0,1c0028f2 <_vfiprintf_r+0x2e>
1c0028ea <_vfiprintf_r+0x26> lw	a5,24(a0)
1c0028ec <_vfiprintf_r+0x28> bnez	a5,1c0028f2 <_vfiprintf_r+0x2e>
1c0028ee <_vfiprintf_r+0x2a> jal	ra,1c0032f0 <__sinit>
1c0028f2 <_vfiprintf_r+0x2e> lui	a5,0x1c008
1c0028f6 <_vfiprintf_r+0x32> addi	a5,a5,1444 # 1c0085a4 <__sf_fake_stdin>
1c0028fa <_vfiprintf_r+0x36> bne	s1,a5,1c0029e6 <_vfiprintf_r+0x122>
1c0028fe <_vfiprintf_r+0x3a> lw	s1,4(s3)
1c002902 <_vfiprintf_r+0x3e> lhu	a5,12(s1)
1c002906 <_vfiprintf_r+0x42> andi	a5,a5,8
1c002908 <_vfiprintf_r+0x44> beqz	a5,1c002a0a <_vfiprintf_r+0x146>
1c00290c <_vfiprintf_r+0x48> lw	a5,16(s1)
1c00290e <_vfiprintf_r+0x4a> beqz	a5,1c002a0a <_vfiprintf_r+0x146>
1c002912 <_vfiprintf_r+0x4e> li	a5,32
1c002916 <_vfiprintf_r+0x52> sb	a5,41(sp)
1c00291a <_vfiprintf_r+0x56> li	a5,48
1c00291e <_vfiprintf_r+0x5a> sw	zero,36(sp)
1c002920 <_vfiprintf_r+0x5c> sb	a5,42(sp)
1c002924 <_vfiprintf_r+0x60> sw	s0,12(sp)
1c002926 <_vfiprintf_r+0x62> li	s9,37
1c00292a <_vfiprintf_r+0x66> lui	s6,0x1c008
1c00292e <_vfiprintf_r+0x6a> lui	s7,0x1c008
1c002932 <_vfiprintf_r+0x6e> lui	s10,0x1c008
1c002936 <_vfiprintf_r+0x72> lui	s8,0x1c003
1c00293a <_vfiprintf_r+0x76> li	s5,0
1c00293e <_vfiprintf_r+0x7a> mv	s0,s2
1c002940 <_vfiprintf_r+0x7c> lbu	a5,0(s0)
1c002944 <_vfiprintf_r+0x80> beqz	a5,1c00294a <_vfiprintf_r+0x86>
1c002946 <_vfiprintf_r+0x82> bne	a5,s9,1c002a36 <_vfiprintf_r+0x172>
1c00294a <_vfiprintf_r+0x86> sub	s11,s0,s2
1c00294e <_vfiprintf_r+0x8a> beq	s0,s2,1c00296a <_vfiprintf_r+0xa6>
1c002952 <_vfiprintf_r+0x8e> mv	a3,s11
1c002954 <_vfiprintf_r+0x90> mv	a2,s2
1c002956 <_vfiprintf_r+0x92> mv	a1,s1
1c002958 <_vfiprintf_r+0x94> mv	a0,s3
1c00295a <_vfiprintf_r+0x96> jal	ra,1c002880 <__sfputs_r>
1c00295e <_vfiprintf_r+0x9a> li	a5,-1
1c002960 <_vfiprintf_r+0x9c> beq	a0,a5,1c002b4c <_vfiprintf_r+0x288>
1c002964 <_vfiprintf_r+0xa0> lw	a5,36(sp)
1c002966 <_vfiprintf_r+0xa2> add	a5,a5,s11
1c002968 <_vfiprintf_r+0xa4> sw	a5,36(sp)
1c00296a <_vfiprintf_r+0xa6> lbu	a5,0(s0)
1c00296e <_vfiprintf_r+0xaa> beqz	a5,1c002b4c <_vfiprintf_r+0x288>
1c002972 <_vfiprintf_r+0xae> li	a5,-1
1c002974 <_vfiprintf_r+0xb0> addi	s2,s0,1
1c002978 <_vfiprintf_r+0xb4> sw	zero,16(sp)
1c00297a <_vfiprintf_r+0xb6> sw	zero,28(sp)
1c00297c <_vfiprintf_r+0xb8> sw	a5,20(sp)
1c00297e <_vfiprintf_r+0xba> sw	zero,24(sp)
1c002980 <_vfiprintf_r+0xbc> sb	zero,83(sp)
1c002984 <_vfiprintf_r+0xc0> sw	zero,104(sp)
1c002986 <_vfiprintf_r+0xc2> li	s11,1
1c002988 <_vfiprintf_r+0xc4> lbu	a1,0(s2)
1c00298c <_vfiprintf_r+0xc8> li	a2,5
1c00298e <_vfiprintf_r+0xca> addi	a0,s6,1392 # 1c008570 <__func__.1889+0x1fc>
1c002992 <_vfiprintf_r+0xce> jal	ra,1c00356a <memchr>
1c002996 <_vfiprintf_r+0xd2> lw	a5,16(sp)
1c002998 <_vfiprintf_r+0xd4> addi	s0,s2,1
1c00299c <_vfiprintf_r+0xd8> bnez	a0,1c002a3a <_vfiprintf_r+0x176>
1c00299e <_vfiprintf_r+0xda> andi	a4,a5,16
1c0029a2 <_vfiprintf_r+0xde> beqz	a4,1c0029ac <_vfiprintf_r+0xe8>
1c0029a4 <_vfiprintf_r+0xe0> li	a4,32
1c0029a8 <_vfiprintf_r+0xe4> sb	a4,83(sp)
1c0029ac <_vfiprintf_r+0xe8> andi	a4,a5,8
1c0029b0 <_vfiprintf_r+0xec> beqz	a4,1c0029ba <_vfiprintf_r+0xf6>
1c0029b2 <_vfiprintf_r+0xee> li	a4,43
1c0029b6 <_vfiprintf_r+0xf2> sb	a4,83(sp)
1c0029ba <_vfiprintf_r+0xf6> lbu	a3,0(s2)
1c0029be <_vfiprintf_r+0xfa> li	a4,42
1c0029c2 <_vfiprintf_r+0xfe> beq	a3,a4,1c002a4c <_vfiprintf_r+0x188>
1c0029c6 <_vfiprintf_r+0x102> lw	a5,28(sp)
1c0029c8 <_vfiprintf_r+0x104> mv	s0,s2
1c0029ca <_vfiprintf_r+0x106> li	a3,0
1c0029cc <_vfiprintf_r+0x108> li	a2,9
1c0029ce <_vfiprintf_r+0x10a> li	a0,10
1c0029d0 <_vfiprintf_r+0x10c> lbu	a4,0(s0)
1c0029d4 <_vfiprintf_r+0x110> addi	a1,s0,1
1c0029d8 <_vfiprintf_r+0x114> addi	a4,a4,-48
1c0029dc <_vfiprintf_r+0x118> bgeu	a2,a4,1c002a96 <_vfiprintf_r+0x1d2>
1c0029e0 <_vfiprintf_r+0x11c> beqz	a3,1c002a5c <_vfiprintf_r+0x198>
1c0029e2 <_vfiprintf_r+0x11e> sw	a5,28(sp)
1c0029e4 <_vfiprintf_r+0x120> j	1c002a5c <_vfiprintf_r+0x198>
1c0029e6 <_vfiprintf_r+0x122> lui	a5,0x1c008
1c0029ea <_vfiprintf_r+0x126> addi	a5,a5,1476 # 1c0085c4 <__sf_fake_stdout>
1c0029ee <_vfiprintf_r+0x12a> bne	s1,a5,1c0029f8 <_vfiprintf_r+0x134>
1c0029f2 <_vfiprintf_r+0x12e> lw	s1,8(s3)
1c0029f6 <_vfiprintf_r+0x132> j	1c002902 <_vfiprintf_r+0x3e>
1c0029f8 <_vfiprintf_r+0x134> lui	a5,0x1c008
1c0029fc <_vfiprintf_r+0x138> addi	a5,a5,1412 # 1c008584 <__sf_fake_stderr>
1c002a00 <_vfiprintf_r+0x13c> bne	s1,a5,1c002902 <_vfiprintf_r+0x3e>
1c002a04 <_vfiprintf_r+0x140> lw	s1,12(s3)
1c002a08 <_vfiprintf_r+0x144> j	1c002902 <_vfiprintf_r+0x3e>
1c002a0a <_vfiprintf_r+0x146> mv	a1,s1
1c002a0c <_vfiprintf_r+0x148> mv	a0,s3
1c002a0e <_vfiprintf_r+0x14a> jal	ra,1c002e2e <__swsetup_r>
1c002a12 <_vfiprintf_r+0x14e> beqz	a0,1c002912 <_vfiprintf_r+0x4e>
1c002a16 <_vfiprintf_r+0x152> li	a0,-1
1c002a18 <_vfiprintf_r+0x154> lw	ra,172(sp)
1c002a1a <_vfiprintf_r+0x156> lw	s0,168(sp)
1c002a1c <_vfiprintf_r+0x158> lw	s1,164(sp)
1c002a1e <_vfiprintf_r+0x15a> lw	s2,160(sp)
1c002a20 <_vfiprintf_r+0x15c> lw	s3,156(sp)
1c002a22 <_vfiprintf_r+0x15e> lw	s4,152(sp)
1c002a24 <_vfiprintf_r+0x160> lw	s5,148(sp)
1c002a26 <_vfiprintf_r+0x162> lw	s6,144(sp)
1c002a28 <_vfiprintf_r+0x164> lw	s7,140(sp)
1c002a2a <_vfiprintf_r+0x166> lw	s8,136(sp)
1c002a2c <_vfiprintf_r+0x168> lw	s9,132(sp)
1c002a2e <_vfiprintf_r+0x16a> lw	s10,128(sp)
1c002a30 <_vfiprintf_r+0x16c> lw	s11,124(sp)
1c002a32 <_vfiprintf_r+0x16e> addi	sp,sp,176
1c002a34 <_vfiprintf_r+0x170> ret
1c002a36 <_vfiprintf_r+0x172> addi	s0,s0,1
1c002a38 <_vfiprintf_r+0x174> j	1c002940 <_vfiprintf_r+0x7c>
1c002a3a <_vfiprintf_r+0x176> addi	a4,s6,1392
1c002a3e <_vfiprintf_r+0x17a> sub	a0,a0,a4
1c002a40 <_vfiprintf_r+0x17c> sll	a0,s11,a0
1c002a44 <_vfiprintf_r+0x180> or	a5,a5,a0
1c002a46 <_vfiprintf_r+0x182> sw	a5,16(sp)
1c002a48 <_vfiprintf_r+0x184> mv	s2,s0
1c002a4a <_vfiprintf_r+0x186> j	1c002988 <_vfiprintf_r+0xc4>
1c002a4c <_vfiprintf_r+0x188> lw	a4,12(sp)
1c002a4e <_vfiprintf_r+0x18a> addi	a3,a4,4
1c002a52 <_vfiprintf_r+0x18e> lw	a4,0(a4)
1c002a54 <_vfiprintf_r+0x190> sw	a3,12(sp)
1c002a56 <_vfiprintf_r+0x192> bltz	a4,1c002a88 <_vfiprintf_r+0x1c4>
1c002a5a <_vfiprintf_r+0x196> sw	a4,28(sp)
1c002a5c <_vfiprintf_r+0x198> lbu	a4,0(s0)
1c002a60 <_vfiprintf_r+0x19c> li	a5,46
1c002a64 <_vfiprintf_r+0x1a0> bne	a4,a5,1c002ac4 <_vfiprintf_r+0x200>
1c002a68 <_vfiprintf_r+0x1a4> lbu	a4,1(s0)
1c002a6c <_vfiprintf_r+0x1a8> li	a5,42
1c002a70 <_vfiprintf_r+0x1ac> bne	a4,a5,1c002aa6 <_vfiprintf_r+0x1e2>
1c002a74 <_vfiprintf_r+0x1b0> lw	a5,12(sp)
1c002a76 <_vfiprintf_r+0x1b2> addi	s0,s0,2
1c002a78 <_vfiprintf_r+0x1b4> addi	a4,a5,4
1c002a7c <_vfiprintf_r+0x1b8> lw	a5,0(a5)
1c002a7e <_vfiprintf_r+0x1ba> sw	a4,12(sp)
1c002a80 <_vfiprintf_r+0x1bc> bltz	a5,1c002aa2 <_vfiprintf_r+0x1de>
1c002a84 <_vfiprintf_r+0x1c0> sw	a5,20(sp)
1c002a86 <_vfiprintf_r+0x1c2> j	1c002ac4 <_vfiprintf_r+0x200>
1c002a88 <_vfiprintf_r+0x1c4> neg	a4,a4
1c002a8c <_vfiprintf_r+0x1c8> ori	a5,a5,2
1c002a90 <_vfiprintf_r+0x1cc> sw	a4,28(sp)
1c002a92 <_vfiprintf_r+0x1ce> sw	a5,16(sp)
1c002a94 <_vfiprintf_r+0x1d0> j	1c002a5c <_vfiprintf_r+0x198>
1c002a96 <_vfiprintf_r+0x1d2> mul	a5,a5,a0
1c002a9a <_vfiprintf_r+0x1d6> mv	s0,a1
1c002a9c <_vfiprintf_r+0x1d8> li	a3,1
1c002a9e <_vfiprintf_r+0x1da> add	a5,a5,a4
1c002aa0 <_vfiprintf_r+0x1dc> j	1c0029d0 <_vfiprintf_r+0x10c>
1c002aa2 <_vfiprintf_r+0x1de> li	a5,-1
1c002aa4 <_vfiprintf_r+0x1e0> j	1c002a84 <_vfiprintf_r+0x1c0>
1c002aa6 <_vfiprintf_r+0x1e2> addi	s0,s0,1
1c002aa8 <_vfiprintf_r+0x1e4> sw	zero,20(sp)
1c002aaa <_vfiprintf_r+0x1e6> li	a3,0
1c002aac <_vfiprintf_r+0x1e8> li	a5,0
1c002aae <_vfiprintf_r+0x1ea> li	a2,9
1c002ab0 <_vfiprintf_r+0x1ec> li	a0,10
1c002ab2 <_vfiprintf_r+0x1ee> lbu	a4,0(s0)
1c002ab6 <_vfiprintf_r+0x1f2> addi	a1,s0,1
1c002aba <_vfiprintf_r+0x1f6> addi	a4,a4,-48
1c002abe <_vfiprintf_r+0x1fa> bgeu	a2,a4,1c002b1c <_vfiprintf_r+0x258>
1c002ac2 <_vfiprintf_r+0x1fe> bnez	a3,1c002a84 <_vfiprintf_r+0x1c0>
1c002ac4 <_vfiprintf_r+0x200> lbu	a1,0(s0)
1c002ac8 <_vfiprintf_r+0x204> li	a2,3
1c002aca <_vfiprintf_r+0x206> addi	a0,s7,1400 # 1c008578 <__func__.1889+0x204>
1c002ace <_vfiprintf_r+0x20a> jal	ra,1c00356a <memchr>
1c002ad2 <_vfiprintf_r+0x20e> beqz	a0,1c002aea <_vfiprintf_r+0x226>
1c002ad4 <_vfiprintf_r+0x210> addi	a5,s7,1400
1c002ad8 <_vfiprintf_r+0x214> sub	a0,a0,a5
1c002ada <_vfiprintf_r+0x216> li	a5,64
1c002ade <_vfiprintf_r+0x21a> sll	a5,a5,a0
1c002ae2 <_vfiprintf_r+0x21e> lw	a0,16(sp)
1c002ae4 <_vfiprintf_r+0x220> addi	s0,s0,1
1c002ae6 <_vfiprintf_r+0x222> or	a0,a0,a5
1c002ae8 <_vfiprintf_r+0x224> sw	a0,16(sp)
1c002aea <_vfiprintf_r+0x226> lbu	a1,0(s0)
1c002aee <_vfiprintf_r+0x22a> li	a2,6
1c002af0 <_vfiprintf_r+0x22c> addi	a0,s10,1404 # 1c00857c <__func__.1889+0x208>
1c002af4 <_vfiprintf_r+0x230> addi	s2,s0,1
1c002af8 <_vfiprintf_r+0x234> sb	a1,40(sp)
1c002afc <_vfiprintf_r+0x238> jal	ra,1c00356a <memchr>
1c002b00 <_vfiprintf_r+0x23c> beqz	a0,1c002b5c <_vfiprintf_r+0x298>
1c002b02 <_vfiprintf_r+0x23e> bnez	s5,1c002b30 <_vfiprintf_r+0x26c>
1c002b06 <_vfiprintf_r+0x242> lw	a4,16(sp)
1c002b08 <_vfiprintf_r+0x244> lw	a5,12(sp)
1c002b0a <_vfiprintf_r+0x246> andi	a4,a4,256
1c002b0e <_vfiprintf_r+0x24a> beqz	a4,1c002b28 <_vfiprintf_r+0x264>
1c002b10 <_vfiprintf_r+0x24c> addi	a5,a5,4
1c002b12 <_vfiprintf_r+0x24e> sw	a5,12(sp)
1c002b14 <_vfiprintf_r+0x250> lw	a5,36(sp)
1c002b16 <_vfiprintf_r+0x252> add	a5,a5,s4
1c002b18 <_vfiprintf_r+0x254> sw	a5,36(sp)
1c002b1a <_vfiprintf_r+0x256> j	1c00293e <_vfiprintf_r+0x7a>
1c002b1c <_vfiprintf_r+0x258> mul	a5,a5,a0
1c002b20 <_vfiprintf_r+0x25c> mv	s0,a1
1c002b22 <_vfiprintf_r+0x25e> li	a3,1
1c002b24 <_vfiprintf_r+0x260> add	a5,a5,a4
1c002b26 <_vfiprintf_r+0x262> j	1c002ab2 <_vfiprintf_r+0x1ee>
1c002b28 <_vfiprintf_r+0x264> addi	a5,a5,7
1c002b2a <_vfiprintf_r+0x266> andi	a5,a5,-8
1c002b2c <_vfiprintf_r+0x268> addi	a5,a5,8
1c002b2e <_vfiprintf_r+0x26a> j	1c002b12 <_vfiprintf_r+0x24e>
1c002b30 <_vfiprintf_r+0x26c> addi	a4,sp,12
1c002b32 <_vfiprintf_r+0x26e> addi	a3,s8,-1920 # 1c002880 <__sfputs_r>
1c002b36 <_vfiprintf_r+0x272> mv	a2,s1
1c002b38 <_vfiprintf_r+0x274> addi	a1,sp,16
1c002b3a <_vfiprintf_r+0x276> mv	a0,s3
1c002b3c <_vfiprintf_r+0x278> auipc	ra,0x0
1c002b40 <_vfiprintf_r+0x27c> jalr	zero # 00000000 <__heap_size>
1c002b44 <_vfiprintf_r+0x280> li	a5,-1
1c002b46 <_vfiprintf_r+0x282> mv	s4,a0
1c002b48 <_vfiprintf_r+0x284> bne	a0,a5,1c002b14 <_vfiprintf_r+0x250>
1c002b4c <_vfiprintf_r+0x288> lhu	a5,12(s1)
1c002b50 <_vfiprintf_r+0x28c> andi	a5,a5,64
1c002b54 <_vfiprintf_r+0x290> bnez	a5,1c002a16 <_vfiprintf_r+0x152>
1c002b58 <_vfiprintf_r+0x294> lw	a0,36(sp)
1c002b5a <_vfiprintf_r+0x296> j	1c002a18 <_vfiprintf_r+0x154>
1c002b5c <_vfiprintf_r+0x298> addi	a4,sp,12
1c002b5e <_vfiprintf_r+0x29a> addi	a3,s8,-1920
1c002b62 <_vfiprintf_r+0x29e> mv	a2,s1
1c002b64 <_vfiprintf_r+0x2a0> addi	a1,sp,16
1c002b66 <_vfiprintf_r+0x2a2> mv	a0,s3
1c002b68 <_vfiprintf_r+0x2a4> jal	ra,1c003690 <_printf_i>
1c002b6c <_vfiprintf_r+0x2a8> j	1c002b44 <_vfiprintf_r+0x280>
printf():
1c002b6e <iprintf> addi	sp,sp,-80
1c002b70 <iprintf+0x2> sw	a5,68(sp)
1c002b72 <iprintf+0x4> lui	a5,0x1c009
1c002b76 <iprintf+0x8> sw	s0,40(sp)
1c002b78 <iprintf+0xa> mv	s0,a0
1c002b7a <iprintf+0xc> lw	a0,-1780(a5) # 1c00890c <_impure_ptr>
1c002b7e <iprintf+0x10> sw	ra,44(sp)
1c002b80 <iprintf+0x12> sw	a1,52(sp)
1c002b82 <iprintf+0x14> sw	a2,56(sp)
1c002b84 <iprintf+0x16> sw	a3,60(sp)
1c002b86 <iprintf+0x18> sw	a4,64(sp)
1c002b88 <iprintf+0x1a> sw	a6,72(sp)
1c002b8a <iprintf+0x1c> sw	a7,76(sp)
1c002b8c <iprintf+0x1e> beqz	a0,1c002b9a <iprintf+0x2c>
1c002b8e <iprintf+0x20> lw	a5,24(a0)
1c002b90 <iprintf+0x22> bnez	a5,1c002b9a <iprintf+0x2c>
1c002b92 <iprintf+0x24> sw	a0,12(sp)
1c002b94 <iprintf+0x26> jal	ra,1c0032f0 <__sinit>
1c002b98 <iprintf+0x2a> lw	a0,12(sp)
1c002b9a <iprintf+0x2c> lw	a1,8(a0)
1c002b9c <iprintf+0x2e> addi	a3,sp,52
1c002b9e <iprintf+0x30> mv	a2,s0
1c002ba0 <iprintf+0x32> sw	a3,28(sp)
1c002ba2 <iprintf+0x34> jal	ra,1c0028c4 <_vfiprintf_r>
1c002ba6 <iprintf+0x38> lw	ra,44(sp)
1c002ba8 <iprintf+0x3a> lw	s0,40(sp)
1c002baa <iprintf+0x3c> addi	sp,sp,80
1c002bac <iprintf+0x3e> ret
_puts_r():
1c002bae <_puts_r> addi	sp,sp,-32
1c002bb0 <_puts_r+0x2> sw	s1,20(sp)
1c002bb2 <_puts_r+0x4> sw	s2,16(sp)
1c002bb4 <_puts_r+0x6> sw	ra,28(sp)
1c002bb6 <_puts_r+0x8> sw	s0,24(sp)
1c002bb8 <_puts_r+0xa> sw	s3,12(sp)
1c002bba <_puts_r+0xc> sw	s4,8(sp)
1c002bbc <_puts_r+0xe> mv	s1,a0
1c002bbe <_puts_r+0x10> mv	s2,a1
1c002bc0 <_puts_r+0x12> beqz	a0,1c002bca <_puts_r+0x1c>
1c002bc2 <_puts_r+0x14> lw	a5,24(a0)
1c002bc4 <_puts_r+0x16> bnez	a5,1c002bca <_puts_r+0x1c>
1c002bc6 <_puts_r+0x18> jal	ra,1c0032f0 <__sinit>
1c002bca <_puts_r+0x1c> lw	a5,24(s1)
1c002bcc <_puts_r+0x1e> lw	s0,8(s1)
1c002bce <_puts_r+0x20> bnez	a5,1c002bd6 <_puts_r+0x28>
1c002bd0 <_puts_r+0x22> mv	a0,s1
1c002bd2 <_puts_r+0x24> jal	ra,1c0032f0 <__sinit>
1c002bd6 <_puts_r+0x28> lui	a5,0x1c008
1c002bda <_puts_r+0x2c> addi	a5,a5,1444 # 1c0085a4 <__sf_fake_stdin>
1c002bde <_puts_r+0x30> bne	s0,a5,1c002c16 <_puts_r+0x68>
1c002be2 <_puts_r+0x34> lw	s0,4(s1)
1c002be4 <_puts_r+0x36> lhu	a5,12(s0)
1c002be8 <_puts_r+0x3a> andi	a5,a5,8
1c002bea <_puts_r+0x3c> beqz	a5,1c002c36 <_puts_r+0x88>
1c002bec <_puts_r+0x3e> lw	a5,16(s0)
1c002bee <_puts_r+0x40> beqz	a5,1c002c36 <_puts_r+0x88>
1c002bf0 <_puts_r+0x42> li	s3,-1
1c002bf2 <_puts_r+0x44> li	s4,10
1c002bf4 <_puts_r+0x46> lw	a5,8(s0)
1c002bf6 <_puts_r+0x48> lbu	a1,0(s2)
1c002bfa <_puts_r+0x4c> addi	a5,a5,-1
1c002bfc <_puts_r+0x4e> bnez	a1,1c002c50 <_puts_r+0xa2>
1c002bfe <_puts_r+0x50> sw	a5,8(s0)
1c002c00 <_puts_r+0x52> bgez	a5,1c002c7c <_puts_r+0xce>
1c002c04 <_puts_r+0x56> mv	a2,s0
1c002c06 <_puts_r+0x58> li	a1,10
1c002c08 <_puts_r+0x5a> mv	a0,s1
1c002c0a <_puts_r+0x5c> jal	1c002d68 <__swbuf_r>
1c002c0c <_puts_r+0x5e> li	a5,-1
1c002c0e <_puts_r+0x60> beq	a0,a5,1c002c3e <_puts_r+0x90>
1c002c12 <_puts_r+0x64> li	a0,10
1c002c14 <_puts_r+0x66> j	1c002c40 <_puts_r+0x92>
1c002c16 <_puts_r+0x68> lui	a5,0x1c008
1c002c1a <_puts_r+0x6c> addi	a5,a5,1476 # 1c0085c4 <__sf_fake_stdout>
1c002c1e <_puts_r+0x70> bne	s0,a5,1c002c26 <_puts_r+0x78>
1c002c22 <_puts_r+0x74> lw	s0,8(s1)
1c002c24 <_puts_r+0x76> j	1c002be4 <_puts_r+0x36>
1c002c26 <_puts_r+0x78> lui	a5,0x1c008
1c002c2a <_puts_r+0x7c> addi	a5,a5,1412 # 1c008584 <__sf_fake_stderr>
1c002c2e <_puts_r+0x80> bne	s0,a5,1c002be4 <_puts_r+0x36>
1c002c32 <_puts_r+0x84> lw	s0,12(s1)
1c002c34 <_puts_r+0x86> j	1c002be4 <_puts_r+0x36>
1c002c36 <_puts_r+0x88> mv	a1,s0
1c002c38 <_puts_r+0x8a> mv	a0,s1
1c002c3a <_puts_r+0x8c> jal	1c002e2e <__swsetup_r>
1c002c3c <_puts_r+0x8e> beqz	a0,1c002bf0 <_puts_r+0x42>
1c002c3e <_puts_r+0x90> li	a0,-1
1c002c40 <_puts_r+0x92> lw	ra,28(sp)
1c002c42 <_puts_r+0x94> lw	s0,24(sp)
1c002c44 <_puts_r+0x96> lw	s1,20(sp)
1c002c46 <_puts_r+0x98> lw	s2,16(sp)
1c002c48 <_puts_r+0x9a> lw	s3,12(sp)
1c002c4a <_puts_r+0x9c> lw	s4,8(sp)
1c002c4c <_puts_r+0x9e> addi	sp,sp,32
1c002c4e <_puts_r+0xa0> ret
1c002c50 <_puts_r+0xa2> sw	a5,8(s0)
1c002c52 <_puts_r+0xa4> addi	s2,s2,1
1c002c54 <_puts_r+0xa6> bgez	a5,1c002c62 <_puts_r+0xb4>
1c002c58 <_puts_r+0xaa> lw	a4,24(s0)
1c002c5a <_puts_r+0xac> blt	a5,a4,1c002c70 <_puts_r+0xc2>
1c002c5e <_puts_r+0xb0> beq	a1,s4,1c002c70 <_puts_r+0xc2>
1c002c62 <_puts_r+0xb4> lw	a5,0(s0)
1c002c64 <_puts_r+0xb6> addi	a4,a5,1
1c002c68 <_puts_r+0xba> sw	a4,0(s0)
1c002c6a <_puts_r+0xbc> sb	a1,0(a5)
1c002c6e <_puts_r+0xc0> j	1c002bf4 <_puts_r+0x46>
1c002c70 <_puts_r+0xc2> mv	a2,s0
1c002c72 <_puts_r+0xc4> mv	a0,s1
1c002c74 <_puts_r+0xc6> jal	1c002d68 <__swbuf_r>
1c002c76 <_puts_r+0xc8> bne	a0,s3,1c002bf4 <_puts_r+0x46>
1c002c7a <_puts_r+0xcc> j	1c002c3e <_puts_r+0x90>
1c002c7c <_puts_r+0xce> lw	a5,0(s0)
1c002c7e <_puts_r+0xd0> addi	a4,a5,1
1c002c82 <_puts_r+0xd4> sw	a4,0(s0)
1c002c84 <_puts_r+0xd6> li	a4,10
1c002c86 <_puts_r+0xd8> sb	a4,0(a5)
1c002c8a <_puts_r+0xdc> j	1c002c12 <_puts_r+0x64>
puts():
1c002c8c <puts> lui	a5,0x1c009
1c002c90 <puts+0x4> mv	a1,a0
1c002c92 <puts+0x6> lw	a0,-1780(a5) # 1c00890c <_impure_ptr>
1c002c96 <puts+0xa> j	1c002bae <_puts_r>
_sbrk_r():
1c002c9a <_sbrk_r> addi	sp,sp,-16
1c002c9c <_sbrk_r+0x2> sw	s0,8(sp)
1c002c9e <_sbrk_r+0x4> sw	s1,4(sp)
1c002ca0 <_sbrk_r+0x6> mv	s0,a0
1c002ca2 <_sbrk_r+0x8> mv	a0,a1
1c002ca4 <_sbrk_r+0xa> sw	ra,12(sp)
1c002ca6 <_sbrk_r+0xc> sw	zero,964(gp) # 1c009228 <errno>
1c002caa <_sbrk_r+0x10> jal	ra,1c00157e <_sbrk>
1c002cae <_sbrk_r+0x14> li	a5,-1
1c002cb0 <_sbrk_r+0x16> bne	a0,a5,1c002cbc <_sbrk_r+0x22>
1c002cb4 <_sbrk_r+0x1a> lw	a5,964(gp) # 1c009228 <errno>
1c002cb8 <_sbrk_r+0x1e> beqz	a5,1c002cbc <_sbrk_r+0x22>
1c002cba <_sbrk_r+0x20> sw	a5,0(s0)
1c002cbc <_sbrk_r+0x22> lw	ra,12(sp)
1c002cbe <_sbrk_r+0x24> lw	s0,8(sp)
1c002cc0 <_sbrk_r+0x26> lw	s1,4(sp)
1c002cc2 <_sbrk_r+0x28> addi	sp,sp,16
1c002cc4 <_sbrk_r+0x2a> ret
_raise_r():
1c002cc6 <_raise_r> addi	sp,sp,-32
1c002cc8 <_raise_r+0x2> sw	s0,24(sp)
1c002cca <_raise_r+0x4> sw	ra,28(sp)
1c002ccc <_raise_r+0x6> li	a5,31
1c002cce <_raise_r+0x8> mv	s0,a0
1c002cd0 <_raise_r+0xa> bgeu	a5,a1,1c002ce2 <_raise_r+0x1c>
1c002cd4 <_raise_r+0xe> li	a5,22
1c002cd6 <_raise_r+0x10> sw	a5,0(a0)
1c002cd8 <_raise_r+0x12> li	a0,-1
1c002cda <_raise_r+0x14> lw	ra,28(sp)
1c002cdc <_raise_r+0x16> lw	s0,24(sp)
1c002cde <_raise_r+0x18> addi	sp,sp,32
1c002ce0 <_raise_r+0x1a> ret
1c002ce2 <_raise_r+0x1c> lw	a5,68(a0)
1c002ce4 <_raise_r+0x1e> mv	a2,a1
1c002ce6 <_raise_r+0x20> beqz	a5,1c002cf2 <_raise_r+0x2c>
1c002ce8 <_raise_r+0x22> slli	a4,a1,0x2
1c002cec <_raise_r+0x26> add	a5,a5,a4
1c002cee <_raise_r+0x28> lw	a4,0(a5)
1c002cf0 <_raise_r+0x2a> bnez	a4,1c002d06 <_raise_r+0x40>
1c002cf2 <_raise_r+0x2c> mv	a0,s0
1c002cf4 <_raise_r+0x2e> sw	a2,12(sp)
1c002cf6 <_raise_r+0x30> jal	1c002d64 <_getpid_r>
1c002cf8 <_raise_r+0x32> mv	a1,a0
1c002cfa <_raise_r+0x34> mv	a0,s0
1c002cfc <_raise_r+0x36> lw	s0,24(sp)
1c002cfe <_raise_r+0x38> lw	a2,12(sp)
1c002d00 <_raise_r+0x3a> lw	ra,28(sp)
1c002d02 <_raise_r+0x3c> addi	sp,sp,32
1c002d04 <_raise_r+0x3e> j	1c002d36 <_kill_r>
1c002d06 <_raise_r+0x40> li	a3,1
1c002d08 <_raise_r+0x42> li	a0,0
1c002d0a <_raise_r+0x44> beq	a4,a3,1c002cda <_raise_r+0x14>
1c002d0e <_raise_r+0x48> li	a3,-1
1c002d10 <_raise_r+0x4a> bne	a4,a3,1c002d1c <_raise_r+0x56>
1c002d14 <_raise_r+0x4e> li	a5,22
1c002d16 <_raise_r+0x50> sw	a5,0(s0)
1c002d18 <_raise_r+0x52> li	a0,1
1c002d1a <_raise_r+0x54> j	1c002cda <_raise_r+0x14>
1c002d1c <_raise_r+0x56> mv	a0,a1
1c002d1e <_raise_r+0x58> sw	zero,0(a5)
1c002d22 <_raise_r+0x5c> jalr	a4
1c002d24 <_raise_r+0x5e> li	a0,0
1c002d26 <_raise_r+0x60> j	1c002cda <_raise_r+0x14>
raise():
1c002d28 <raise> lui	a5,0x1c009
1c002d2c <raise+0x4> mv	a1,a0
1c002d2e <raise+0x6> lw	a0,-1780(a5) # 1c00890c <_impure_ptr>
1c002d32 <raise+0xa> j	1c002cc6 <_raise_r>
_kill_r():
1c002d36 <_kill_r> addi	sp,sp,-16
1c002d38 <_kill_r+0x2> sw	s0,8(sp)
1c002d3a <_kill_r+0x4> sw	s1,4(sp)
1c002d3c <_kill_r+0x6> mv	s0,a0
1c002d3e <_kill_r+0x8> mv	a0,a1
1c002d40 <_kill_r+0xa> mv	a1,a2
1c002d42 <_kill_r+0xc> sw	ra,12(sp)
1c002d44 <_kill_r+0xe> sw	zero,964(gp) # 1c009228 <errno>
1c002d48 <_kill_r+0x12> jal	ra,1c001504 <_kill>
1c002d4c <_kill_r+0x16> li	a5,-1
1c002d4e <_kill_r+0x18> bne	a0,a5,1c002d5a <_kill_r+0x24>
1c002d52 <_kill_r+0x1c> lw	a5,964(gp) # 1c009228 <errno>
1c002d56 <_kill_r+0x20> beqz	a5,1c002d5a <_kill_r+0x24>
1c002d58 <_kill_r+0x22> sw	a5,0(s0)
1c002d5a <_kill_r+0x24> lw	ra,12(sp)
1c002d5c <_kill_r+0x26> lw	s0,8(sp)
1c002d5e <_kill_r+0x28> lw	s1,4(sp)
1c002d60 <_kill_r+0x2a> addi	sp,sp,16
1c002d62 <_kill_r+0x2c> ret
_getpid_r():
1c002d64 <_getpid_r> j	1c0014f8 <_getpid>
__swbuf_r():
1c002d68 <__swbuf_r> addi	sp,sp,-32
1c002d6a <__swbuf_r+0x2> sw	s0,24(sp)
1c002d6c <__swbuf_r+0x4> sw	s1,20(sp)
1c002d6e <__swbuf_r+0x6> sw	s2,16(sp)
1c002d70 <__swbuf_r+0x8> sw	ra,28(sp)
1c002d72 <__swbuf_r+0xa> sw	s3,12(sp)
1c002d74 <__swbuf_r+0xc> mv	s1,a0
1c002d76 <__swbuf_r+0xe> mv	s2,a1
1c002d78 <__swbuf_r+0x10> mv	s0,a2
1c002d7a <__swbuf_r+0x12> beqz	a0,1c002d84 <__swbuf_r+0x1c>
1c002d7c <__swbuf_r+0x14> lw	a5,24(a0)
1c002d7e <__swbuf_r+0x16> bnez	a5,1c002d84 <__swbuf_r+0x1c>
1c002d80 <__swbuf_r+0x18> jal	ra,1c0032f0 <__sinit>
1c002d84 <__swbuf_r+0x1c> lui	a5,0x1c008
1c002d88 <__swbuf_r+0x20> addi	a5,a5,1444 # 1c0085a4 <__sf_fake_stdin>
1c002d8c <__swbuf_r+0x24> bne	s0,a5,1c002e02 <__swbuf_r+0x9a>
1c002d90 <__swbuf_r+0x28> lw	s0,4(s1)
1c002d92 <__swbuf_r+0x2a> lw	a5,24(s0)
1c002d94 <__swbuf_r+0x2c> sw	a5,8(s0)
1c002d96 <__swbuf_r+0x2e> lhu	a5,12(s0)
1c002d9a <__swbuf_r+0x32> andi	a5,a5,8
1c002d9c <__swbuf_r+0x34> beqz	a5,1c002e22 <__swbuf_r+0xba>
1c002d9e <__swbuf_r+0x36> lw	a5,16(s0)
1c002da0 <__swbuf_r+0x38> beqz	a5,1c002e22 <__swbuf_r+0xba>
1c002da2 <__swbuf_r+0x3a> lw	a5,16(s0)
1c002da4 <__swbuf_r+0x3c> lw	a0,0(s0)
1c002da6 <__swbuf_r+0x3e> andi	s3,s2,255
1c002daa <__swbuf_r+0x42> andi	s2,s2,255
1c002dae <__swbuf_r+0x46> sub	a0,a0,a5
1c002db0 <__swbuf_r+0x48> lw	a5,20(s0)
1c002db2 <__swbuf_r+0x4a> blt	a0,a5,1c002dc0 <__swbuf_r+0x58>
1c002db6 <__swbuf_r+0x4e> mv	a1,s0
1c002db8 <__swbuf_r+0x50> mv	a0,s1
1c002dba <__swbuf_r+0x52> jal	ra,1c0031ce <_fflush_r>
1c002dbe <__swbuf_r+0x56> bnez	a0,1c002e2a <__swbuf_r+0xc2>
1c002dc0 <__swbuf_r+0x58> lw	a5,8(s0)
1c002dc2 <__swbuf_r+0x5a> addi	a0,a0,1
1c002dc4 <__swbuf_r+0x5c> addi	a5,a5,-1
1c002dc6 <__swbuf_r+0x5e> sw	a5,8(s0)
1c002dc8 <__swbuf_r+0x60> lw	a5,0(s0)
1c002dca <__swbuf_r+0x62> addi	a4,a5,1
1c002dce <__swbuf_r+0x66> sw	a4,0(s0)
1c002dd0 <__swbuf_r+0x68> sb	s3,0(a5)
1c002dd4 <__swbuf_r+0x6c> lw	a5,20(s0)
1c002dd6 <__swbuf_r+0x6e> beq	a5,a0,1c002de8 <__swbuf_r+0x80>
1c002dda <__swbuf_r+0x72> lhu	a5,12(s0)
1c002dde <__swbuf_r+0x76> andi	a5,a5,1
1c002de0 <__swbuf_r+0x78> beqz	a5,1c002df2 <__swbuf_r+0x8a>
1c002de2 <__swbuf_r+0x7a> li	a5,10
1c002de4 <__swbuf_r+0x7c> bne	s2,a5,1c002df2 <__swbuf_r+0x8a>
1c002de8 <__swbuf_r+0x80> mv	a1,s0
1c002dea <__swbuf_r+0x82> mv	a0,s1
1c002dec <__swbuf_r+0x84> jal	ra,1c0031ce <_fflush_r>
1c002df0 <__swbuf_r+0x88> bnez	a0,1c002e2a <__swbuf_r+0xc2>
1c002df2 <__swbuf_r+0x8a> lw	ra,28(sp)
1c002df4 <__swbuf_r+0x8c> lw	s0,24(sp)
1c002df6 <__swbuf_r+0x8e> lw	s1,20(sp)
1c002df8 <__swbuf_r+0x90> lw	s3,12(sp)
1c002dfa <__swbuf_r+0x92> mv	a0,s2
1c002dfc <__swbuf_r+0x94> lw	s2,16(sp)
1c002dfe <__swbuf_r+0x96> addi	sp,sp,32
1c002e00 <__swbuf_r+0x98> ret
1c002e02 <__swbuf_r+0x9a> lui	a5,0x1c008
1c002e06 <__swbuf_r+0x9e> addi	a5,a5,1476 # 1c0085c4 <__sf_fake_stdout>
1c002e0a <__swbuf_r+0xa2> bne	s0,a5,1c002e12 <__swbuf_r+0xaa>
1c002e0e <__swbuf_r+0xa6> lw	s0,8(s1)
1c002e10 <__swbuf_r+0xa8> j	1c002d92 <__swbuf_r+0x2a>
1c002e12 <__swbuf_r+0xaa> lui	a5,0x1c008
1c002e16 <__swbuf_r+0xae> addi	a5,a5,1412 # 1c008584 <__sf_fake_stderr>
1c002e1a <__swbuf_r+0xb2> bne	s0,a5,1c002d92 <__swbuf_r+0x2a>
1c002e1e <__swbuf_r+0xb6> lw	s0,12(s1)
1c002e20 <__swbuf_r+0xb8> j	1c002d92 <__swbuf_r+0x2a>
1c002e22 <__swbuf_r+0xba> mv	a1,s0
1c002e24 <__swbuf_r+0xbc> mv	a0,s1
1c002e26 <__swbuf_r+0xbe> jal	1c002e2e <__swsetup_r>
1c002e28 <__swbuf_r+0xc0> beqz	a0,1c002da2 <__swbuf_r+0x3a>
1c002e2a <__swbuf_r+0xc2> li	s2,-1
1c002e2c <__swbuf_r+0xc4> j	1c002df2 <__swbuf_r+0x8a>
__swsetup_r():
1c002e2e <__swsetup_r> addi	sp,sp,-16
1c002e30 <__swsetup_r+0x2> lui	a5,0x1c009
1c002e34 <__swsetup_r+0x6> sw	s1,4(sp)
1c002e36 <__swsetup_r+0x8> lw	s1,-1780(a5) # 1c00890c <_impure_ptr>
1c002e3a <__swsetup_r+0xc> sw	s0,8(sp)
1c002e3c <__swsetup_r+0xe> sw	s2,0(sp)
1c002e3e <__swsetup_r+0x10> sw	ra,12(sp)
1c002e40 <__swsetup_r+0x12> mv	s2,a0
1c002e42 <__swsetup_r+0x14> mv	s0,a1
1c002e44 <__swsetup_r+0x16> beqz	s1,1c002e50 <__swsetup_r+0x22>
1c002e46 <__swsetup_r+0x18> lw	a5,24(s1)
1c002e48 <__swsetup_r+0x1a> bnez	a5,1c002e50 <__swsetup_r+0x22>
1c002e4a <__swsetup_r+0x1c> mv	a0,s1
1c002e4c <__swsetup_r+0x1e> jal	ra,1c0032f0 <__sinit>
1c002e50 <__swsetup_r+0x22> lui	a5,0x1c008
1c002e54 <__swsetup_r+0x26> addi	a5,a5,1444 # 1c0085a4 <__sf_fake_stdin>
1c002e58 <__swsetup_r+0x2a> bne	s0,a5,1c002e86 <__swsetup_r+0x58>
1c002e5c <__swsetup_r+0x2e> lw	s0,4(s1)
1c002e5e <__swsetup_r+0x30> lh	a5,12(s0)
1c002e62 <__swsetup_r+0x34> slli	a4,a5,0x10
1c002e66 <__swsetup_r+0x38> andi	a3,a5,8
1c002e6a <__swsetup_r+0x3c> srli	a4,a4,0x10
1c002e6c <__swsetup_r+0x3e> bnez	a3,1c002ee0 <__swsetup_r+0xb2>
1c002e6e <__swsetup_r+0x40> andi	a3,a4,16
1c002e72 <__swsetup_r+0x44> bnez	a3,1c002ea6 <__swsetup_r+0x78>
1c002e74 <__swsetup_r+0x46> li	a4,9
1c002e76 <__swsetup_r+0x48> sw	a4,0(s2)
1c002e7a <__swsetup_r+0x4c> ori	a5,a5,64
1c002e7e <__swsetup_r+0x50> sh	a5,12(s0)
1c002e82 <__swsetup_r+0x54> li	a0,-1
1c002e84 <__swsetup_r+0x56> j	1c002f24 <__swsetup_r+0xf6>
1c002e86 <__swsetup_r+0x58> lui	a5,0x1c008
1c002e8a <__swsetup_r+0x5c> addi	a5,a5,1476 # 1c0085c4 <__sf_fake_stdout>
1c002e8e <__swsetup_r+0x60> bne	s0,a5,1c002e96 <__swsetup_r+0x68>
1c002e92 <__swsetup_r+0x64> lw	s0,8(s1)
1c002e94 <__swsetup_r+0x66> j	1c002e5e <__swsetup_r+0x30>
1c002e96 <__swsetup_r+0x68> lui	a5,0x1c008
1c002e9a <__swsetup_r+0x6c> addi	a5,a5,1412 # 1c008584 <__sf_fake_stderr>
1c002e9e <__swsetup_r+0x70> bne	s0,a5,1c002e5e <__swsetup_r+0x30>
1c002ea2 <__swsetup_r+0x74> lw	s0,12(s1)
1c002ea4 <__swsetup_r+0x76> j	1c002e5e <__swsetup_r+0x30>
1c002ea6 <__swsetup_r+0x78> andi	a4,a4,4
1c002ea8 <__swsetup_r+0x7a> beqz	a4,1c002ed4 <__swsetup_r+0xa6>
1c002eaa <__swsetup_r+0x7c> lw	a1,52(s0)
1c002eac <__swsetup_r+0x7e> beqz	a1,1c002ec0 <__swsetup_r+0x92>
1c002eae <__swsetup_r+0x80> addi	a5,s0,68
1c002eb2 <__swsetup_r+0x84> beq	a1,a5,1c002ebc <__swsetup_r+0x8e>
1c002eb6 <__swsetup_r+0x88> mv	a0,s2
1c002eb8 <__swsetup_r+0x8a> jal	ra,1c0026d0 <_free_r>
1c002ebc <__swsetup_r+0x8e> sw	zero,52(s0)
1c002ec0 <__swsetup_r+0x92> lhu	a5,12(s0)
1c002ec4 <__swsetup_r+0x96> sw	zero,4(s0)
1c002ec8 <__swsetup_r+0x9a> andi	a5,a5,-37
1c002ecc <__swsetup_r+0x9e> sh	a5,12(s0)
1c002ed0 <__swsetup_r+0xa2> lw	a5,16(s0)
1c002ed2 <__swsetup_r+0xa4> sw	a5,0(s0)
1c002ed4 <__swsetup_r+0xa6> lhu	a5,12(s0)
1c002ed8 <__swsetup_r+0xaa> ori	a5,a5,8
1c002edc <__swsetup_r+0xae> sh	a5,12(s0)
1c002ee0 <__swsetup_r+0xb2> lw	a5,16(s0)
1c002ee2 <__swsetup_r+0xb4> bnez	a5,1c002efc <__swsetup_r+0xce>
1c002ee4 <__swsetup_r+0xb6> lhu	a5,12(s0)
1c002ee8 <__swsetup_r+0xba> li	a4,512
1c002eec <__swsetup_r+0xbe> andi	a5,a5,640
1c002ef0 <__swsetup_r+0xc2> beq	a5,a4,1c002efc <__swsetup_r+0xce>
1c002ef4 <__swsetup_r+0xc6> mv	a1,s0
1c002ef6 <__swsetup_r+0xc8> mv	a0,s2
1c002ef8 <__swsetup_r+0xca> jal	ra,1c0034c8 <__smakebuf_r>
1c002efc <__swsetup_r+0xce> lh	a5,12(s0)
1c002f00 <__swsetup_r+0xd2> slli	a4,a5,0x10
1c002f04 <__swsetup_r+0xd6> andi	a3,a5,1
1c002f08 <__swsetup_r+0xda> srli	a4,a4,0x10
1c002f0a <__swsetup_r+0xdc> beqz	a3,1c002f30 <__swsetup_r+0x102>
1c002f0c <__swsetup_r+0xde> lw	a3,20(s0)
1c002f0e <__swsetup_r+0xe0> sw	zero,8(s0)
1c002f12 <__swsetup_r+0xe4> neg	a3,a3
1c002f16 <__swsetup_r+0xe8> sw	a3,24(s0)
1c002f18 <__swsetup_r+0xea> lw	a3,16(s0)
1c002f1a <__swsetup_r+0xec> li	a0,0
1c002f1c <__swsetup_r+0xee> bnez	a3,1c002f24 <__swsetup_r+0xf6>
1c002f1e <__swsetup_r+0xf0> andi	a4,a4,128
1c002f22 <__swsetup_r+0xf4> bnez	a4,1c002e7a <__swsetup_r+0x4c>
1c002f24 <__swsetup_r+0xf6> lw	ra,12(sp)
1c002f26 <__swsetup_r+0xf8> lw	s0,8(sp)
1c002f28 <__swsetup_r+0xfa> lw	s1,4(sp)
1c002f2a <__swsetup_r+0xfc> lw	s2,0(sp)
1c002f2c <__swsetup_r+0xfe> addi	sp,sp,16
1c002f2e <__swsetup_r+0x100> ret
1c002f30 <__swsetup_r+0x102> andi	a3,a4,2
1c002f34 <__swsetup_r+0x106> li	a2,0
1c002f36 <__swsetup_r+0x108> bnez	a3,1c002f3a <__swsetup_r+0x10c>
1c002f38 <__swsetup_r+0x10a> lw	a2,20(s0)
1c002f3a <__swsetup_r+0x10c> sw	a2,8(s0)
1c002f3c <__swsetup_r+0x10e> j	1c002f18 <__swsetup_r+0xea>
__register_exitproc():
1c002f3e <__register_exitproc> lw	a5,-88(gp) # 1c008e0c <_global_atexit>
1c002f42 <__register_exitproc+0x4> mv	a7,a0
1c002f44 <__register_exitproc+0x6> bnez	a5,1c002f66 <__register_exitproc+0x28>
1c002f46 <__register_exitproc+0x8> addi	a0,gp,-288 # 1c008d44 <_global_atexit0>
1c002f4a <__register_exitproc+0xc> sw	a0,-88(gp) # 1c008e0c <_global_atexit>
1c002f4e <__register_exitproc+0x10> li	t1,0
1c002f52 <__register_exitproc+0x14> addi	a5,gp,-288 # 1c008d44 <_global_atexit0>
1c002f56 <__register_exitproc+0x18> beqz	t1,1c002f66 <__register_exitproc+0x28>
1c002f5a <__register_exitproc+0x1c> lw	a5,0(zero) # 00000000 <__heap_size>
1c002f5e <__register_exitproc+0x20> sw	a5,136(a0)
1c002f62 <__register_exitproc+0x24> addi	a5,gp,-288 # 1c008d44 <_global_atexit0>
1c002f66 <__register_exitproc+0x28> lw	a4,4(a5)
1c002f68 <__register_exitproc+0x2a> li	a6,31
1c002f6a <__register_exitproc+0x2c> li	a0,-1
1c002f6c <__register_exitproc+0x2e> blt	a6,a4,1c002fb8 <__register_exitproc+0x7a>
1c002f70 <__register_exitproc+0x32> beqz	a7,1c002faa <__register_exitproc+0x6c>
1c002f74 <__register_exitproc+0x36> lw	a6,136(a5)
1c002f78 <__register_exitproc+0x3a> beqz	a6,1c002fb8 <__register_exitproc+0x7a>
1c002f7c <__register_exitproc+0x3e> slli	a0,a4,0x2
1c002f80 <__register_exitproc+0x42> add	a0,a0,a6
1c002f82 <__register_exitproc+0x44> sw	a2,0(a0)
1c002f84 <__register_exitproc+0x46> lw	t1,256(a6)
1c002f88 <__register_exitproc+0x4a> li	a2,1
1c002f8a <__register_exitproc+0x4c> sll	a2,a2,a4
1c002f8e <__register_exitproc+0x50> or	t1,t1,a2
1c002f92 <__register_exitproc+0x54> sw	t1,256(a6)
1c002f96 <__register_exitproc+0x58> sw	a3,128(a0)
1c002f9a <__register_exitproc+0x5c> li	a3,2
1c002f9c <__register_exitproc+0x5e> bne	a7,a3,1c002faa <__register_exitproc+0x6c>
1c002fa0 <__register_exitproc+0x62> lw	a3,260(a6)
1c002fa4 <__register_exitproc+0x66> or	a2,a2,a3
1c002fa6 <__register_exitproc+0x68> sw	a2,260(a6)
1c002faa <__register_exitproc+0x6c> addi	a3,a4,1
1c002fae <__register_exitproc+0x70> slli	a4,a4,0x2
1c002fb0 <__register_exitproc+0x72> sw	a3,4(a5)
1c002fb2 <__register_exitproc+0x74> add	a5,a5,a4
1c002fb4 <__register_exitproc+0x76> sw	a1,8(a5)
1c002fb6 <__register_exitproc+0x78> li	a0,0
1c002fb8 <__register_exitproc+0x7a> ret
__call_exitprocs():
1c002fba <__call_exitprocs> addi	sp,sp,-48
1c002fbc <__call_exitprocs+0x2> sw	s4,24(sp)
1c002fbe <__call_exitprocs+0x4> sw	s5,20(sp)
1c002fc0 <__call_exitprocs+0x6> sw	s6,16(sp)
1c002fc2 <__call_exitprocs+0x8> sw	s8,8(sp)
1c002fc4 <__call_exitprocs+0xa> sw	ra,44(sp)
1c002fc6 <__call_exitprocs+0xc> sw	s0,40(sp)
1c002fc8 <__call_exitprocs+0xe> sw	s1,36(sp)
1c002fca <__call_exitprocs+0x10> sw	s2,32(sp)
1c002fcc <__call_exitprocs+0x12> sw	s3,28(sp)
1c002fce <__call_exitprocs+0x14> sw	s7,12(sp)
1c002fd0 <__call_exitprocs+0x16> sw	s9,4(sp)
1c002fd2 <__call_exitprocs+0x18> mv	s5,a0
1c002fd4 <__call_exitprocs+0x1a> mv	s4,a1
1c002fd6 <__call_exitprocs+0x1c> li	s8,1
1c002fd8 <__call_exitprocs+0x1e> lw	s0,-88(gp) # 1c008e0c <_global_atexit>
1c002fdc <__call_exitprocs+0x22> addi	s7,gp,-88 # 1c008e0c <_global_atexit>
1c002fe0 <__call_exitprocs+0x26> beqz	s0,1c002ff4 <__call_exitprocs+0x3a>
1c002fe2 <__call_exitprocs+0x28> lw	s1,4(s0)
1c002fe4 <__call_exitprocs+0x2a> lw	s3,136(s0)
1c002fe8 <__call_exitprocs+0x2e> addi	s2,s1,-1
1c002fec <__call_exitprocs+0x32> slli	s1,s1,0x2
1c002fee <__call_exitprocs+0x34> add	s1,s1,s0
1c002ff0 <__call_exitprocs+0x36> bgez	s2,1c00300e <__call_exitprocs+0x54>
1c002ff4 <__call_exitprocs+0x3a> lw	ra,44(sp)
1c002ff6 <__call_exitprocs+0x3c> lw	s0,40(sp)
1c002ff8 <__call_exitprocs+0x3e> lw	s1,36(sp)
1c002ffa <__call_exitprocs+0x40> lw	s2,32(sp)
1c002ffc <__call_exitprocs+0x42> lw	s3,28(sp)
1c002ffe <__call_exitprocs+0x44> lw	s4,24(sp)
1c003000 <__call_exitprocs+0x46> lw	s5,20(sp)
1c003002 <__call_exitprocs+0x48> lw	s6,16(sp)
1c003004 <__call_exitprocs+0x4a> lw	s7,12(sp)
1c003006 <__call_exitprocs+0x4c> lw	s8,8(sp)
1c003008 <__call_exitprocs+0x4e> lw	s9,4(sp)
1c00300a <__call_exitprocs+0x50> addi	sp,sp,48
1c00300c <__call_exitprocs+0x52> ret
1c00300e <__call_exitprocs+0x54> beqz	s4,1c00302a <__call_exitprocs+0x70>
1c003012 <__call_exitprocs+0x58> bnez	s3,1c00301c <__call_exitprocs+0x62>
1c003016 <__call_exitprocs+0x5c> addi	s2,s2,-1
1c003018 <__call_exitprocs+0x5e> addi	s1,s1,-4
1c00301a <__call_exitprocs+0x60> j	1c002ff0 <__call_exitprocs+0x36>
1c00301c <__call_exitprocs+0x62> slli	a5,s2,0x2
1c003020 <__call_exitprocs+0x66> add	a5,a5,s3
1c003022 <__call_exitprocs+0x68> lw	a5,128(a5)
1c003026 <__call_exitprocs+0x6c> bne	a5,s4,1c003016 <__call_exitprocs+0x5c>
1c00302a <__call_exitprocs+0x70> lw	a4,4(s0)
1c00302c <__call_exitprocs+0x72> lw	a5,4(s1)
1c00302e <__call_exitprocs+0x74> addi	a4,a4,-1
1c003030 <__call_exitprocs+0x76> bne	a4,s2,1c003060 <__call_exitprocs+0xa6>
1c003034 <__call_exitprocs+0x7a> sw	s2,4(s0)
1c003038 <__call_exitprocs+0x7e> beqz	a5,1c003016 <__call_exitprocs+0x5c>
1c00303a <__call_exitprocs+0x80> lw	s9,4(s0)
1c00303e <__call_exitprocs+0x84> beqz	s3,1c00304e <__call_exitprocs+0x94>
1c003042 <__call_exitprocs+0x88> lw	a3,256(s3)
1c003046 <__call_exitprocs+0x8c> sll	a4,s8,s2
1c00304a <__call_exitprocs+0x90> and	a3,a3,a4
1c00304c <__call_exitprocs+0x92> bnez	a3,1c003066 <__call_exitprocs+0xac>
1c00304e <__call_exitprocs+0x94> jalr	a5
1c003050 <__call_exitprocs+0x96> lw	a4,4(s0)
1c003052 <__call_exitprocs+0x98> lw	a5,0(s7)
1c003056 <__call_exitprocs+0x9c> bne	a4,s9,1c002fd8 <__call_exitprocs+0x1e>
1c00305a <__call_exitprocs+0xa0> beq	s0,a5,1c003016 <__call_exitprocs+0x5c>
1c00305e <__call_exitprocs+0xa4> j	1c002fd8 <__call_exitprocs+0x1e>
1c003060 <__call_exitprocs+0xa6> sw	zero,4(s1)
1c003064 <__call_exitprocs+0xaa> j	1c003038 <__call_exitprocs+0x7e>
1c003066 <__call_exitprocs+0xac> slli	a3,s2,0x2
1c00306a <__call_exitprocs+0xb0> add	a3,a3,s3
1c00306c <__call_exitprocs+0xb2> lw	a1,0(a3)
1c00306e <__call_exitprocs+0xb4> lw	a3,260(s3)
1c003072 <__call_exitprocs+0xb8> and	a4,a4,a3
1c003074 <__call_exitprocs+0xba> bnez	a4,1c00307c <__call_exitprocs+0xc2>
1c003076 <__call_exitprocs+0xbc> mv	a0,s5
1c003078 <__call_exitprocs+0xbe> jalr	a5
1c00307a <__call_exitprocs+0xc0> j	1c003050 <__call_exitprocs+0x96>
1c00307c <__call_exitprocs+0xc2> mv	a0,a1
1c00307e <__call_exitprocs+0xc4> jalr	a5
1c003080 <__call_exitprocs+0xc6> j	1c003050 <__call_exitprocs+0x96>
__sflush_r():
1c003082 <__sflush_r> lhu	a5,12(a1)
1c003086 <__sflush_r+0x4> addi	sp,sp,-32
1c003088 <__sflush_r+0x6> sw	s0,24(sp)
1c00308a <__sflush_r+0x8> sw	s1,20(sp)
1c00308c <__sflush_r+0xa> sw	ra,28(sp)
1c00308e <__sflush_r+0xc> sw	s2,16(sp)
1c003090 <__sflush_r+0xe> sw	s3,12(sp)
1c003092 <__sflush_r+0x10> andi	a4,a5,8
1c003096 <__sflush_r+0x14> mv	s1,a0
1c003098 <__sflush_r+0x16> mv	s0,a1
1c00309a <__sflush_r+0x18> bnez	a4,1c003184 <__sflush_r+0x102>
1c00309c <__sflush_r+0x1a> lw	a4,4(a1)
1c00309e <__sflush_r+0x1c> bgtz	a4,1c0030ac <__sflush_r+0x2a>
1c0030a2 <__sflush_r+0x20> lw	a4,64(a1)
1c0030a4 <__sflush_r+0x22> bgtz	a4,1c0030ac <__sflush_r+0x2a>
1c0030a8 <__sflush_r+0x26> li	a0,0
1c0030aa <__sflush_r+0x28> j	1c00316c <__sflush_r+0xea>
1c0030ac <__sflush_r+0x2a> lw	a4,44(s0)
1c0030ae <__sflush_r+0x2c> beqz	a4,1c0030a8 <__sflush_r+0x26>
1c0030b0 <__sflush_r+0x2e> lw	s2,0(s1)
1c0030b4 <__sflush_r+0x32> slli	a3,a5,0x13
1c0030b8 <__sflush_r+0x36> sw	zero,0(s1)
1c0030bc <__sflush_r+0x3a> bgez	a3,1c00313a <__sflush_r+0xb8>
1c0030c0 <__sflush_r+0x3e> lw	a0,84(s0)
1c0030c2 <__sflush_r+0x40> lhu	a5,12(s0)
1c0030c6 <__sflush_r+0x44> andi	a5,a5,4
1c0030c8 <__sflush_r+0x46> beqz	a5,1c0030d6 <__sflush_r+0x54>
1c0030ca <__sflush_r+0x48> lw	a5,4(s0)
1c0030cc <__sflush_r+0x4a> sub	a0,a0,a5
1c0030ce <__sflush_r+0x4c> lw	a5,52(s0)
1c0030d0 <__sflush_r+0x4e> beqz	a5,1c0030d6 <__sflush_r+0x54>
1c0030d2 <__sflush_r+0x50> lw	a5,64(s0)
1c0030d4 <__sflush_r+0x52> sub	a0,a0,a5
1c0030d6 <__sflush_r+0x54> lw	a5,44(s0)
1c0030d8 <__sflush_r+0x56> lw	a1,32(s0)
1c0030da <__sflush_r+0x58> mv	a2,a0
1c0030dc <__sflush_r+0x5a> li	a3,0
1c0030de <__sflush_r+0x5c> mv	a0,s1
1c0030e0 <__sflush_r+0x5e> jalr	a5
1c0030e2 <__sflush_r+0x60> li	a5,-1
1c0030e4 <__sflush_r+0x62> lhu	a4,12(s0)
1c0030e8 <__sflush_r+0x66> bne	a0,a5,1c003102 <__sflush_r+0x80>
1c0030ec <__sflush_r+0x6a> lw	a3,0(s1)
1c0030ee <__sflush_r+0x6c> li	a5,29
1c0030f0 <__sflush_r+0x6e> bltu	a5,a3,1c00317a <__sflush_r+0xf8>
1c0030f4 <__sflush_r+0x72> lui	a5,0x20400
1c0030f8 <__sflush_r+0x76> addi	a5,a5,1
1c0030fa <__sflush_r+0x78> srl	a5,a5,a3
1c0030fe <__sflush_r+0x7c> andi	a5,a5,1
1c003100 <__sflush_r+0x7e> beqz	a5,1c00317a <__sflush_r+0xf8>
1c003102 <__sflush_r+0x80> lw	a5,16(s0)
1c003104 <__sflush_r+0x82> sw	zero,4(s0)
1c003108 <__sflush_r+0x86> sw	a5,0(s0)
1c00310a <__sflush_r+0x88> slli	a5,a4,0x13
1c00310e <__sflush_r+0x8c> bgez	a5,1c00311e <__sflush_r+0x9c>
1c003112 <__sflush_r+0x90> li	a5,-1
1c003114 <__sflush_r+0x92> bne	a0,a5,1c00311c <__sflush_r+0x9a>
1c003118 <__sflush_r+0x96> lw	a5,0(s1)
1c00311a <__sflush_r+0x98> bnez	a5,1c00311e <__sflush_r+0x9c>
1c00311c <__sflush_r+0x9a> sw	a0,84(s0)
1c00311e <__sflush_r+0x9c> lw	a1,52(s0)
1c003120 <__sflush_r+0x9e> sw	s2,0(s1)
1c003124 <__sflush_r+0xa2> beqz	a1,1c0030a8 <__sflush_r+0x26>
1c003126 <__sflush_r+0xa4> addi	a5,s0,68
1c00312a <__sflush_r+0xa8> beq	a1,a5,1c003134 <__sflush_r+0xb2>
1c00312e <__sflush_r+0xac> mv	a0,s1
1c003130 <__sflush_r+0xae> jal	ra,1c0026d0 <_free_r>
1c003134 <__sflush_r+0xb2> sw	zero,52(s0)
1c003138 <__sflush_r+0xb6> j	1c0030a8 <__sflush_r+0x26>
1c00313a <__sflush_r+0xb8> lw	a1,32(s0)
1c00313c <__sflush_r+0xba> li	a3,1
1c00313e <__sflush_r+0xbc> li	a2,0
1c003140 <__sflush_r+0xbe> mv	a0,s1
1c003142 <__sflush_r+0xc0> jalr	a4
1c003144 <__sflush_r+0xc2> li	a5,-1
1c003146 <__sflush_r+0xc4> bne	a0,a5,1c0030c2 <__sflush_r+0x40>
1c00314a <__sflush_r+0xc8> lw	a5,0(s1)
1c00314c <__sflush_r+0xca> beqz	a5,1c0030c2 <__sflush_r+0x40>
1c00314e <__sflush_r+0xcc> li	a4,29
1c003150 <__sflush_r+0xce> beq	a5,a4,1c00315a <__sflush_r+0xd8>
1c003154 <__sflush_r+0xd2> li	a4,22
1c003156 <__sflush_r+0xd4> bne	a5,a4,1c003160 <__sflush_r+0xde>
1c00315a <__sflush_r+0xd8> sw	s2,0(s1)
1c00315e <__sflush_r+0xdc> j	1c0030a8 <__sflush_r+0x26>
1c003160 <__sflush_r+0xde> lhu	a5,12(s0)
1c003164 <__sflush_r+0xe2> ori	a5,a5,64
1c003168 <__sflush_r+0xe6> sh	a5,12(s0)
1c00316c <__sflush_r+0xea> lw	ra,28(sp)
1c00316e <__sflush_r+0xec> lw	s0,24(sp)
1c003170 <__sflush_r+0xee> lw	s1,20(sp)
1c003172 <__sflush_r+0xf0> lw	s2,16(sp)
1c003174 <__sflush_r+0xf2> lw	s3,12(sp)
1c003176 <__sflush_r+0xf4> addi	sp,sp,32
1c003178 <__sflush_r+0xf6> ret
1c00317a <__sflush_r+0xf8> ori	a4,a4,64
1c00317e <__sflush_r+0xfc> sh	a4,12(s0)
1c003182 <__sflush_r+0x100> j	1c00316c <__sflush_r+0xea>
1c003184 <__sflush_r+0x102> lw	s3,16(a1)
1c003188 <__sflush_r+0x106> beqz	s3,1c0030a8 <__sflush_r+0x26>
1c00318c <__sflush_r+0x10a> lw	s2,0(a1)
1c003190 <__sflush_r+0x10e> andi	a5,a5,3
1c003192 <__sflush_r+0x110> sw	s3,0(a1)
1c003196 <__sflush_r+0x114> sub	s2,s2,s3
1c00319a <__sflush_r+0x118> li	a4,0
1c00319c <__sflush_r+0x11a> bnez	a5,1c0031a0 <__sflush_r+0x11e>
1c00319e <__sflush_r+0x11c> lw	a4,20(a1)
1c0031a0 <__sflush_r+0x11e> sw	a4,8(s0)
1c0031a2 <__sflush_r+0x120> blez	s2,1c0030a8 <__sflush_r+0x26>
1c0031a6 <__sflush_r+0x124> lw	a5,40(s0)
1c0031a8 <__sflush_r+0x126> lw	a1,32(s0)
1c0031aa <__sflush_r+0x128> mv	a3,s2
1c0031ac <__sflush_r+0x12a> mv	a2,s3
1c0031ae <__sflush_r+0x12c> mv	a0,s1
1c0031b0 <__sflush_r+0x12e> jalr	a5
1c0031b2 <__sflush_r+0x130> bgtz	a0,1c0031c6 <__sflush_r+0x144>
1c0031b6 <__sflush_r+0x134> lhu	a5,12(s0)
1c0031ba <__sflush_r+0x138> li	a0,-1
1c0031bc <__sflush_r+0x13a> ori	a5,a5,64
1c0031c0 <__sflush_r+0x13e> sh	a5,12(s0)
1c0031c4 <__sflush_r+0x142> j	1c00316c <__sflush_r+0xea>
1c0031c6 <__sflush_r+0x144> add	s3,s3,a0
1c0031c8 <__sflush_r+0x146> sub	s2,s2,a0
1c0031cc <__sflush_r+0x14a> j	1c0031a2 <__sflush_r+0x120>
_fflush_r():
1c0031ce <_fflush_r> lw	a5,16(a1)
1c0031d0 <_fflush_r+0x2> beqz	a5,1c003230 <_fflush_r+0x62>
1c0031d2 <_fflush_r+0x4> addi	sp,sp,-32
1c0031d4 <_fflush_r+0x6> sw	s0,24(sp)
1c0031d6 <_fflush_r+0x8> sw	ra,28(sp)
1c0031d8 <_fflush_r+0xa> mv	s0,a0
1c0031da <_fflush_r+0xc> beqz	a0,1c0031e6 <_fflush_r+0x18>
1c0031dc <_fflush_r+0xe> lw	a5,24(a0)
1c0031de <_fflush_r+0x10> bnez	a5,1c0031e6 <_fflush_r+0x18>
1c0031e0 <_fflush_r+0x12> sw	a1,12(sp)
1c0031e2 <_fflush_r+0x14> jal	1c0032f0 <__sinit>
1c0031e4 <_fflush_r+0x16> lw	a1,12(sp)
1c0031e6 <_fflush_r+0x18> lui	a5,0x1c008
1c0031ea <_fflush_r+0x1c> addi	a5,a5,1444 # 1c0085a4 <__sf_fake_stdin>
1c0031ee <_fflush_r+0x20> bne	a1,a5,1c003206 <_fflush_r+0x38>
1c0031f2 <_fflush_r+0x24> lw	a1,4(s0)
1c0031f4 <_fflush_r+0x26> lh	a5,12(a1)
1c0031f8 <_fflush_r+0x2a> beqz	a5,1c003226 <_fflush_r+0x58>
1c0031fa <_fflush_r+0x2c> mv	a0,s0
1c0031fc <_fflush_r+0x2e> lw	s0,24(sp)
1c0031fe <_fflush_r+0x30> lw	ra,28(sp)
1c003200 <_fflush_r+0x32> addi	sp,sp,32
1c003202 <_fflush_r+0x34> j	1c003082 <__sflush_r>
1c003206 <_fflush_r+0x38> lui	a5,0x1c008
1c00320a <_fflush_r+0x3c> addi	a5,a5,1476 # 1c0085c4 <__sf_fake_stdout>
1c00320e <_fflush_r+0x40> bne	a1,a5,1c003216 <_fflush_r+0x48>
1c003212 <_fflush_r+0x44> lw	a1,8(s0)
1c003214 <_fflush_r+0x46> j	1c0031f4 <_fflush_r+0x26>
1c003216 <_fflush_r+0x48> lui	a5,0x1c008
1c00321a <_fflush_r+0x4c> addi	a5,a5,1412 # 1c008584 <__sf_fake_stderr>
1c00321e <_fflush_r+0x50> bne	a1,a5,1c0031f4 <_fflush_r+0x26>
1c003222 <_fflush_r+0x54> lw	a1,12(s0)
1c003224 <_fflush_r+0x56> j	1c0031f4 <_fflush_r+0x26>
1c003226 <_fflush_r+0x58> lw	ra,28(sp)
1c003228 <_fflush_r+0x5a> lw	s0,24(sp)
1c00322a <_fflush_r+0x5c> li	a0,0
1c00322c <_fflush_r+0x5e> addi	sp,sp,32
1c00322e <_fflush_r+0x60> ret
1c003230 <_fflush_r+0x62> li	a0,0
1c003232 <_fflush_r+0x64> ret
std():
1c003234 <std> addi	sp,sp,-16
1c003236 <std+0x2> sw	s0,8(sp)
1c003238 <std+0x4> sw	ra,12(sp)
1c00323a <std+0x6> mv	s0,a0
1c00323c <std+0x8> sh	a1,12(a0)
1c003240 <std+0xc> sh	a2,14(a0)
1c003244 <std+0x10> sw	zero,0(a0)
1c003248 <std+0x14> sw	zero,4(a0)
1c00324c <std+0x18> sw	zero,8(a0)
1c003250 <std+0x1c> sw	zero,100(a0)
1c003254 <std+0x20> sw	zero,16(a0)
1c003258 <std+0x24> sw	zero,20(a0)
1c00325c <std+0x28> sw	zero,24(a0)
1c003260 <std+0x2c> li	a2,8
1c003262 <std+0x2e> li	a1,0
1c003264 <std+0x30> addi	a0,a0,92
1c003268 <std+0x34> jal	ra,1c000fa6 <memset>
1c00326c <std+0x38> lui	a5,0x1c004
1c003270 <std+0x3c> addi	a5,a5,-1790 # 1c003902 <__sread>
1c003274 <std+0x40> sw	a5,36(s0)
1c003276 <std+0x42> lui	a5,0x1c004
1c00327a <std+0x46> addi	a5,a5,-1742 # 1c003932 <__swrite>
1c00327e <std+0x4a> sw	a5,40(s0)
1c003280 <std+0x4c> lui	a5,0x1c004
1c003284 <std+0x50> addi	a5,a5,-1664 # 1c003980 <__sseek>
1c003288 <std+0x54> sw	a5,44(s0)
1c00328a <std+0x56> lui	a5,0x1c004
1c00328e <std+0x5a> addi	a5,a5,-1610 # 1c0039b6 <__sclose>
1c003292 <std+0x5e> lw	ra,12(sp)
1c003294 <std+0x60> sw	s0,32(s0)
1c003296 <std+0x62> sw	a5,48(s0)
1c003298 <std+0x64> lw	s0,8(sp)
1c00329a <std+0x66> addi	sp,sp,16
1c00329c <std+0x68> ret
_cleanup_r():
1c00329e <_cleanup_r> lui	a1,0x1c003
1c0032a2 <_cleanup_r+0x4> addi	a1,a1,462 # 1c0031ce <_fflush_r>
1c0032a6 <_cleanup_r+0x8> j	1c003402 <_fwalk_reent>
__sfmoreglue():
1c0032a8 <__sfmoreglue> addi	sp,sp,-16
1c0032aa <__sfmoreglue+0x2> sw	s1,4(sp)
1c0032ac <__sfmoreglue+0x4> li	a2,104
1c0032b0 <__sfmoreglue+0x8> addi	s1,a1,-1
1c0032b4 <__sfmoreglue+0xc> mul	s1,s1,a2
1c0032b8 <__sfmoreglue+0x10> sw	s2,0(sp)
1c0032ba <__sfmoreglue+0x12> mv	s2,a1
1c0032bc <__sfmoreglue+0x14> sw	s0,8(sp)
1c0032be <__sfmoreglue+0x16> sw	ra,12(sp)
1c0032c0 <__sfmoreglue+0x18> addi	a1,s1,116
1c0032c4 <__sfmoreglue+0x1c> jal	ra,1c002778 <_malloc_r>
1c0032c8 <__sfmoreglue+0x20> mv	s0,a0
1c0032ca <__sfmoreglue+0x22> beqz	a0,1c0032e2 <__sfmoreglue+0x3a>
1c0032cc <__sfmoreglue+0x24> sw	zero,0(a0)
1c0032d0 <__sfmoreglue+0x28> sw	s2,4(a0)
1c0032d4 <__sfmoreglue+0x2c> addi	a0,a0,12
1c0032d6 <__sfmoreglue+0x2e> sw	a0,8(s0)
1c0032d8 <__sfmoreglue+0x30> addi	a2,s1,104
1c0032dc <__sfmoreglue+0x34> li	a1,0
1c0032de <__sfmoreglue+0x36> jal	ra,1c000fa6 <memset>
1c0032e2 <__sfmoreglue+0x3a> lw	ra,12(sp)
1c0032e4 <__sfmoreglue+0x3c> mv	a0,s0
1c0032e6 <__sfmoreglue+0x3e> lw	s0,8(sp)
1c0032e8 <__sfmoreglue+0x40> lw	s1,4(sp)
1c0032ea <__sfmoreglue+0x42> lw	s2,0(sp)
1c0032ec <__sfmoreglue+0x44> addi	sp,sp,16
1c0032ee <__sfmoreglue+0x46> ret
__sinit():
1c0032f0 <__sinit> lw	a5,24(a0)
1c0032f2 <__sinit+0x2> bnez	a5,1c00335e <__sinit+0x6e>
1c0032f4 <__sinit+0x4> addi	sp,sp,-16
1c0032f6 <__sinit+0x6> lui	a5,0x1c003
1c0032fa <__sinit+0xa> sw	s0,8(sp)
1c0032fc <__sinit+0xc> sw	ra,12(sp)
1c0032fe <__sinit+0xe> addi	a5,a5,670 # 1c00329e <_cleanup_r>
1c003302 <__sinit+0x12> sw	a5,40(a0)
1c003304 <__sinit+0x14> lui	a5,0x1c009
1c003308 <__sinit+0x18> lw	a5,-1772(a5) # 1c008914 <_global_impure_ptr>
1c00330c <__sinit+0x1c> sw	zero,72(a0)
1c003310 <__sinit+0x20> sw	zero,76(a0)
1c003314 <__sinit+0x24> sw	zero,80(a0)
1c003318 <__sinit+0x28> mv	s0,a0
1c00331a <__sinit+0x2a> bne	a0,a5,1c003322 <__sinit+0x32>
1c00331e <__sinit+0x2e> li	a5,1
1c003320 <__sinit+0x30> sw	a5,24(a0)
1c003322 <__sinit+0x32> mv	a0,s0
1c003324 <__sinit+0x34> jal	1c003360 <__sfp>
1c003326 <__sinit+0x36> sw	a0,4(s0)
1c003328 <__sinit+0x38> mv	a0,s0
1c00332a <__sinit+0x3a> jal	1c003360 <__sfp>
1c00332c <__sinit+0x3c> sw	a0,8(s0)
1c00332e <__sinit+0x3e> mv	a0,s0
1c003330 <__sinit+0x40> jal	1c003360 <__sfp>
1c003332 <__sinit+0x42> sw	a0,12(s0)
1c003334 <__sinit+0x44> lw	a0,4(s0)
1c003336 <__sinit+0x46> li	a2,0
1c003338 <__sinit+0x48> li	a1,4
1c00333a <__sinit+0x4a> jal	ra,1c003234 <std>
1c00333e <__sinit+0x4e> lw	a0,8(s0)
1c003340 <__sinit+0x50> li	a2,1
1c003342 <__sinit+0x52> li	a1,9
1c003344 <__sinit+0x54> jal	ra,1c003234 <std>
1c003348 <__sinit+0x58> lw	a0,12(s0)
1c00334a <__sinit+0x5a> li	a2,2
1c00334c <__sinit+0x5c> li	a1,18
1c00334e <__sinit+0x5e> jal	ra,1c003234 <std>
1c003352 <__sinit+0x62> li	a5,1
1c003354 <__sinit+0x64> lw	ra,12(sp)
1c003356 <__sinit+0x66> sw	a5,24(s0)
1c003358 <__sinit+0x68> lw	s0,8(sp)
1c00335a <__sinit+0x6a> addi	sp,sp,16
1c00335c <__sinit+0x6c> ret
1c00335e <__sinit+0x6e> ret
__sfp():
1c003360 <__sfp> addi	sp,sp,-16
1c003362 <__sfp+0x2> lui	a5,0x1c009
1c003366 <__sfp+0x6> sw	s1,4(sp)
1c003368 <__sfp+0x8> lw	s1,-1772(a5) # 1c008914 <_global_impure_ptr>
1c00336c <__sfp+0xc> sw	s2,0(sp)
1c00336e <__sfp+0xe> sw	ra,12(sp)
1c003370 <__sfp+0x10> lw	a5,24(s1)
1c003372 <__sfp+0x12> sw	s0,8(sp)
1c003374 <__sfp+0x14> mv	s2,a0
1c003376 <__sfp+0x16> bnez	a5,1c00337e <__sfp+0x1e>
1c003378 <__sfp+0x18> mv	a0,s1
1c00337a <__sfp+0x1a> jal	ra,1c0032f0 <__sinit>
1c00337e <__sfp+0x1e> addi	s1,s1,72
1c003382 <__sfp+0x22> lw	s0,8(s1)
1c003384 <__sfp+0x24> lw	a5,4(s1)
1c003386 <__sfp+0x26> addi	a5,a5,-1
1c003388 <__sfp+0x28> bgez	a5,1c003394 <__sfp+0x34>
1c00338c <__sfp+0x2c> lw	a5,0(s1)
1c00338e <__sfp+0x2e> beqz	a5,1c0033ec <__sfp+0x8c>
1c003390 <__sfp+0x30> lw	s1,0(s1)
1c003392 <__sfp+0x32> j	1c003382 <__sfp+0x22>
1c003394 <__sfp+0x34> lh	a4,12(s0)
1c003398 <__sfp+0x38> bnez	a4,1c0033e6 <__sfp+0x86>
1c00339a <__sfp+0x3a> lui	a5,0xffff0
1c00339c <__sfp+0x3c> addi	a5,a5,1
1c00339e <__sfp+0x3e> sw	zero,100(s0)
1c0033a2 <__sfp+0x42> sw	zero,0(s0)
1c0033a6 <__sfp+0x46> sw	zero,4(s0)
1c0033aa <__sfp+0x4a> sw	zero,8(s0)
1c0033ae <__sfp+0x4e> sw	a5,12(s0)
1c0033b0 <__sfp+0x50> sw	zero,16(s0)
1c0033b4 <__sfp+0x54> sw	zero,20(s0)
1c0033b8 <__sfp+0x58> sw	zero,24(s0)
1c0033bc <__sfp+0x5c> li	a2,8
1c0033be <__sfp+0x5e> li	a1,0
1c0033c0 <__sfp+0x60> addi	a0,s0,92
1c0033c4 <__sfp+0x64> jal	ra,1c000fa6 <memset>
1c0033c8 <__sfp+0x68> sw	zero,52(s0)
1c0033cc <__sfp+0x6c> sw	zero,56(s0)
1c0033d0 <__sfp+0x70> sw	zero,72(s0)
1c0033d4 <__sfp+0x74> sw	zero,76(s0)
1c0033d8 <__sfp+0x78> lw	ra,12(sp)
1c0033da <__sfp+0x7a> mv	a0,s0
1c0033dc <__sfp+0x7c> lw	s0,8(sp)
1c0033de <__sfp+0x7e> lw	s1,4(sp)
1c0033e0 <__sfp+0x80> lw	s2,0(sp)
1c0033e2 <__sfp+0x82> addi	sp,sp,16
1c0033e4 <__sfp+0x84> ret
1c0033e6 <__sfp+0x86> addi	s0,s0,104
1c0033ea <__sfp+0x8a> j	1c003386 <__sfp+0x26>
1c0033ec <__sfp+0x8c> li	a1,4
1c0033ee <__sfp+0x8e> mv	a0,s2
1c0033f0 <__sfp+0x90> jal	ra,1c0032a8 <__sfmoreglue>
1c0033f4 <__sfp+0x94> sw	a0,0(s1)
1c0033f6 <__sfp+0x96> mv	s0,a0
1c0033f8 <__sfp+0x98> bnez	a0,1c003390 <__sfp+0x30>
1c0033fa <__sfp+0x9a> li	a5,12
1c0033fc <__sfp+0x9c> sw	a5,0(s2)
1c003400 <__sfp+0xa0> j	1c0033d8 <__sfp+0x78>
_fwalk_reent():
1c003402 <_fwalk_reent> addi	sp,sp,-48
1c003404 <_fwalk_reent+0x2> sw	s0,40(sp)
1c003406 <_fwalk_reent+0x4> sw	s2,32(sp)
1c003408 <_fwalk_reent+0x6> sw	s3,28(sp)
1c00340a <_fwalk_reent+0x8> sw	s4,24(sp)
1c00340c <_fwalk_reent+0xa> sw	s6,16(sp)
1c00340e <_fwalk_reent+0xc> sw	s7,12(sp)
1c003410 <_fwalk_reent+0xe> sw	ra,44(sp)
1c003412 <_fwalk_reent+0x10> sw	s1,36(sp)
1c003414 <_fwalk_reent+0x12> sw	s5,20(sp)
1c003416 <_fwalk_reent+0x14> mv	s2,a0
1c003418 <_fwalk_reent+0x16> mv	s4,a1
1c00341a <_fwalk_reent+0x18> addi	s0,a0,72
1c00341e <_fwalk_reent+0x1c> li	s3,0
1c003420 <_fwalk_reent+0x1e> li	s6,1
1c003422 <_fwalk_reent+0x20> li	s7,-1
1c003424 <_fwalk_reent+0x22> lw	s1,8(s0)
1c003426 <_fwalk_reent+0x24> lw	s5,4(s0)
1c00342a <_fwalk_reent+0x28> addi	s5,s5,-1
1c00342c <_fwalk_reent+0x2a> bgez	s5,1c00344c <_fwalk_reent+0x4a>
1c003430 <_fwalk_reent+0x2e> lw	s0,0(s0)
1c003432 <_fwalk_reent+0x30> bnez	s0,1c003424 <_fwalk_reent+0x22>
1c003434 <_fwalk_reent+0x32> lw	ra,44(sp)
1c003436 <_fwalk_reent+0x34> lw	s0,40(sp)
1c003438 <_fwalk_reent+0x36> lw	s1,36(sp)
1c00343a <_fwalk_reent+0x38> lw	s2,32(sp)
1c00343c <_fwalk_reent+0x3a> lw	s4,24(sp)
1c00343e <_fwalk_reent+0x3c> lw	s5,20(sp)
1c003440 <_fwalk_reent+0x3e> lw	s6,16(sp)
1c003442 <_fwalk_reent+0x40> lw	s7,12(sp)
1c003444 <_fwalk_reent+0x42> mv	a0,s3
1c003446 <_fwalk_reent+0x44> lw	s3,28(sp)
1c003448 <_fwalk_reent+0x46> addi	sp,sp,48
1c00344a <_fwalk_reent+0x48> ret
1c00344c <_fwalk_reent+0x4a> lhu	a5,12(s1)
1c003450 <_fwalk_reent+0x4e> bgeu	s6,a5,1c003466 <_fwalk_reent+0x64>
1c003454 <_fwalk_reent+0x52> lh	a5,14(s1)
1c003458 <_fwalk_reent+0x56> beq	a5,s7,1c003466 <_fwalk_reent+0x64>
1c00345c <_fwalk_reent+0x5a> mv	a1,s1
1c00345e <_fwalk_reent+0x5c> mv	a0,s2
1c003460 <_fwalk_reent+0x5e> jalr	s4
1c003462 <_fwalk_reent+0x60> or	s3,s3,a0
1c003466 <_fwalk_reent+0x64> addi	s1,s1,104
1c00346a <_fwalk_reent+0x68> j	1c00342a <_fwalk_reent+0x28>
__swhatbuf_r():
1c00346c <__swhatbuf_r> addi	sp,sp,-112
1c00346e <__swhatbuf_r+0x2> sw	s2,96(sp)
1c003470 <__swhatbuf_r+0x4> mv	s2,a1
1c003472 <__swhatbuf_r+0x6> lh	a1,14(a1)
1c003476 <__swhatbuf_r+0xa> sw	s0,104(sp)
1c003478 <__swhatbuf_r+0xc> sw	s1,100(sp)
1c00347a <__swhatbuf_r+0xe> sw	ra,108(sp)
1c00347c <__swhatbuf_r+0x10> mv	s0,a2
1c00347e <__swhatbuf_r+0x12> mv	s1,a3
1c003480 <__swhatbuf_r+0x14> bgez	a1,1c003498 <__swhatbuf_r+0x2c>
1c003484 <__swhatbuf_r+0x18> lhu	a5,12(s2)
1c003488 <__swhatbuf_r+0x1c> sw	zero,0(s1)
1c00348c <__swhatbuf_r+0x20> andi	a5,a5,128
1c003490 <__swhatbuf_r+0x24> bnez	a5,1c0034b4 <__swhatbuf_r+0x48>
1c003492 <__swhatbuf_r+0x26> li	a5,1024
1c003496 <__swhatbuf_r+0x2a> j	1c0034b8 <__swhatbuf_r+0x4c>
1c003498 <__swhatbuf_r+0x2c> addi	a2,sp,8
1c00349a <__swhatbuf_r+0x2e> jal	ra,1c003a18 <_fstat_r>
1c00349e <__swhatbuf_r+0x32> bltz	a0,1c003484 <__swhatbuf_r+0x18>
1c0034a2 <__swhatbuf_r+0x36> lw	a4,12(sp)
1c0034a4 <__swhatbuf_r+0x38> lui	a5,0xf
1c0034a6 <__swhatbuf_r+0x3a> and	a5,a5,a4
1c0034a8 <__swhatbuf_r+0x3c> lui	a4,0xffffe
1c0034aa <__swhatbuf_r+0x3e> add	a5,a5,a4
1c0034ac <__swhatbuf_r+0x40> seqz	a5,a5
1c0034b0 <__swhatbuf_r+0x44> sw	a5,0(s1)
1c0034b2 <__swhatbuf_r+0x46> j	1c003492 <__swhatbuf_r+0x26>
1c0034b4 <__swhatbuf_r+0x48> li	a5,64
1c0034b8 <__swhatbuf_r+0x4c> lw	ra,108(sp)
1c0034ba <__swhatbuf_r+0x4e> sw	a5,0(s0)
1c0034bc <__swhatbuf_r+0x50> lw	s0,104(sp)
1c0034be <__swhatbuf_r+0x52> lw	s1,100(sp)
1c0034c0 <__swhatbuf_r+0x54> lw	s2,96(sp)
1c0034c2 <__swhatbuf_r+0x56> li	a0,0
1c0034c4 <__swhatbuf_r+0x58> addi	sp,sp,112
1c0034c6 <__swhatbuf_r+0x5a> ret
__smakebuf_r():
1c0034c8 <__smakebuf_r> lhu	a5,12(a1)
1c0034cc <__smakebuf_r+0x4> addi	sp,sp,-32
1c0034ce <__smakebuf_r+0x6> sw	s0,24(sp)
1c0034d0 <__smakebuf_r+0x8> sw	ra,28(sp)
1c0034d2 <__smakebuf_r+0xa> sw	s1,20(sp)
1c0034d4 <__smakebuf_r+0xc> sw	s2,16(sp)
1c0034d6 <__smakebuf_r+0xe> andi	a5,a5,2
1c0034d8 <__smakebuf_r+0x10> mv	s0,a1
1c0034da <__smakebuf_r+0x12> beqz	a5,1c0034f4 <__smakebuf_r+0x2c>
1c0034dc <__smakebuf_r+0x14> addi	a5,s0,71
1c0034e0 <__smakebuf_r+0x18> sw	a5,0(s0)
1c0034e2 <__smakebuf_r+0x1a> sw	a5,16(s0)
1c0034e4 <__smakebuf_r+0x1c> li	a5,1
1c0034e6 <__smakebuf_r+0x1e> sw	a5,20(s0)
1c0034e8 <__smakebuf_r+0x20> lw	ra,28(sp)
1c0034ea <__smakebuf_r+0x22> lw	s0,24(sp)
1c0034ec <__smakebuf_r+0x24> lw	s1,20(sp)
1c0034ee <__smakebuf_r+0x26> lw	s2,16(sp)
1c0034f0 <__smakebuf_r+0x28> addi	sp,sp,32
1c0034f2 <__smakebuf_r+0x2a> ret
1c0034f4 <__smakebuf_r+0x2c> addi	a3,sp,12
1c0034f6 <__smakebuf_r+0x2e> addi	a2,sp,8
1c0034f8 <__smakebuf_r+0x30> mv	s2,a0
1c0034fa <__smakebuf_r+0x32> jal	ra,1c00346c <__swhatbuf_r>
1c0034fe <__smakebuf_r+0x36> lw	a1,8(sp)
1c003500 <__smakebuf_r+0x38> mv	s1,a0
1c003502 <__smakebuf_r+0x3a> mv	a0,s2
1c003504 <__smakebuf_r+0x3c> jal	ra,1c002778 <_malloc_r>
1c003508 <__smakebuf_r+0x40> bnez	a0,1c003520 <__smakebuf_r+0x58>
1c00350a <__smakebuf_r+0x42> lh	a5,12(s0)
1c00350e <__smakebuf_r+0x46> andi	a4,a5,512
1c003512 <__smakebuf_r+0x4a> bnez	a4,1c0034e8 <__smakebuf_r+0x20>
1c003514 <__smakebuf_r+0x4c> andi	a5,a5,-4
1c003516 <__smakebuf_r+0x4e> ori	a5,a5,2
1c00351a <__smakebuf_r+0x52> sh	a5,12(s0)
1c00351e <__smakebuf_r+0x56> j	1c0034dc <__smakebuf_r+0x14>
1c003520 <__smakebuf_r+0x58> lui	a5,0x1c003
1c003524 <__smakebuf_r+0x5c> addi	a5,a5,670 # 1c00329e <_cleanup_r>
1c003528 <__smakebuf_r+0x60> sw	a5,40(s2)
1c00352c <__smakebuf_r+0x64> lhu	a5,12(s0)
1c003530 <__smakebuf_r+0x68> sw	a0,0(s0)
1c003532 <__smakebuf_r+0x6a> sw	a0,16(s0)
1c003534 <__smakebuf_r+0x6c> ori	a5,a5,128
1c003538 <__smakebuf_r+0x70> sh	a5,12(s0)
1c00353c <__smakebuf_r+0x74> lw	a5,8(sp)
1c00353e <__smakebuf_r+0x76> sw	a5,20(s0)
1c003540 <__smakebuf_r+0x78> lw	a5,12(sp)
1c003542 <__smakebuf_r+0x7a> beqz	a5,1c00355e <__smakebuf_r+0x96>
1c003544 <__smakebuf_r+0x7c> lh	a1,14(s0)
1c003548 <__smakebuf_r+0x80> mv	a0,s2
1c00354a <__smakebuf_r+0x82> jal	ra,1c003a46 <_isatty_r>
1c00354e <__smakebuf_r+0x86> beqz	a0,1c00355e <__smakebuf_r+0x96>
1c003550 <__smakebuf_r+0x88> lhu	a5,12(s0)
1c003554 <__smakebuf_r+0x8c> andi	a5,a5,-4
1c003556 <__smakebuf_r+0x8e> ori	a5,a5,1
1c00355a <__smakebuf_r+0x92> sh	a5,12(s0)
1c00355e <__smakebuf_r+0x96> lhu	a0,12(s0)
1c003562 <__smakebuf_r+0x9a> or	s1,s1,a0
1c003564 <__smakebuf_r+0x9c> sh	s1,12(s0)
1c003568 <__smakebuf_r+0xa0> j	1c0034e8 <__smakebuf_r+0x20>
memchr():
1c00356a <memchr> andi	a1,a1,255
1c00356e <memchr+0x4> add	a2,a2,a0
1c003570 <memchr+0x6> bne	a0,a2,1c003578 <memchr+0xe>
1c003574 <memchr+0xa> li	a0,0
1c003576 <memchr+0xc> ret
1c003578 <memchr+0xe> lbu	a5,0(a0)
1c00357c <memchr+0x12> beq	a5,a1,1c003576 <memchr+0xc>
1c003580 <memchr+0x16> addi	a0,a0,1
1c003582 <memchr+0x18> j	1c003570 <memchr+0x6>
_printf_common():
1c003584 <_printf_common> addi	sp,sp,-48
1c003586 <_printf_common+0x2> sw	s4,24(sp)
1c003588 <_printf_common+0x4> lw	a5,16(a1)
1c00358a <_printf_common+0x6> mv	s4,a4
1c00358c <_printf_common+0x8> lw	a4,8(a1)
1c00358e <_printf_common+0xa> sw	s0,40(sp)
1c003590 <_printf_common+0xc> sw	s1,36(sp)
1c003592 <_printf_common+0xe> sw	s3,28(sp)
1c003594 <_printf_common+0x10> sw	s5,20(sp)
1c003596 <_printf_common+0x12> sw	ra,44(sp)
1c003598 <_printf_common+0x14> sw	s2,32(sp)
1c00359a <_printf_common+0x16> sw	s6,16(sp)
1c00359c <_printf_common+0x18> sw	s7,12(sp)
1c00359e <_printf_common+0x1a> mv	s3,a0
1c0035a0 <_printf_common+0x1c> mv	s0,a1
1c0035a2 <_printf_common+0x1e> mv	s1,a2
1c0035a4 <_printf_common+0x20> mv	s5,a3
1c0035a6 <_printf_common+0x22> bge	a5,a4,1c0035ac <_printf_common+0x28>
1c0035aa <_printf_common+0x26> mv	a5,a4
1c0035ac <_printf_common+0x28> sw	a5,0(s1)
1c0035ae <_printf_common+0x2a> lbu	a4,67(s0)
1c0035b2 <_printf_common+0x2e> beqz	a4,1c0035b8 <_printf_common+0x34>
1c0035b4 <_printf_common+0x30> addi	a5,a5,1
1c0035b6 <_printf_common+0x32> sw	a5,0(s1)
1c0035b8 <_printf_common+0x34> lw	a5,0(s0)
1c0035ba <_printf_common+0x36> andi	a5,a5,32
1c0035be <_printf_common+0x3a> beqz	a5,1c0035c6 <_printf_common+0x42>
1c0035c0 <_printf_common+0x3c> lw	a5,0(s1)
1c0035c2 <_printf_common+0x3e> addi	a5,a5,2
1c0035c4 <_printf_common+0x40> sw	a5,0(s1)
1c0035c6 <_printf_common+0x42> lw	s2,0(s0)
1c0035ca <_printf_common+0x46> andi	s2,s2,6
1c0035ce <_printf_common+0x4a> bnez	s2,1c0035e2 <_printf_common+0x5e>
1c0035d2 <_printf_common+0x4e> addi	s6,s0,25
1c0035d6 <_printf_common+0x52> li	s7,-1
1c0035d8 <_printf_common+0x54> lw	a5,12(s0)
1c0035da <_printf_common+0x56> lw	a4,0(s1)
1c0035dc <_printf_common+0x58> sub	a5,a5,a4
1c0035de <_printf_common+0x5a> blt	s2,a5,1c003636 <_printf_common+0xb2>
1c0035e2 <_printf_common+0x5e> lbu	a5,67(s0)
1c0035e6 <_printf_common+0x62> snez	a3,a5
1c0035ea <_printf_common+0x66> lw	a5,0(s0)
1c0035ec <_printf_common+0x68> andi	a5,a5,32
1c0035f0 <_printf_common+0x6c> bnez	a5,1c003660 <_printf_common+0xdc>
1c0035f2 <_printf_common+0x6e> addi	a2,s0,67
1c0035f6 <_printf_common+0x72> mv	a1,s5
1c0035f8 <_printf_common+0x74> mv	a0,s3
1c0035fa <_printf_common+0x76> jalr	s4
1c0035fc <_printf_common+0x78> li	a5,-1
1c0035fe <_printf_common+0x7a> beq	a0,a5,1c003644 <_printf_common+0xc0>
1c003602 <_printf_common+0x7e> lw	a5,0(s0)
1c003604 <_printf_common+0x80> li	a2,4
1c003606 <_printf_common+0x82> lw	a4,0(s1)
1c003608 <_printf_common+0x84> andi	a5,a5,6
1c00360a <_printf_common+0x86> lw	a3,12(s0)
1c00360c <_printf_common+0x88> li	s1,0
1c00360e <_printf_common+0x8a> bne	a5,a2,1c00361c <_printf_common+0x98>
1c003612 <_printf_common+0x8e> sub	s1,a3,a4
1c003616 <_printf_common+0x92> bgez	s1,1c00361c <_printf_common+0x98>
1c00361a <_printf_common+0x96> li	s1,0
1c00361c <_printf_common+0x98> lw	a5,8(s0)
1c00361e <_printf_common+0x9a> lw	a4,16(s0)
1c003620 <_printf_common+0x9c> bge	a4,a5,1c003628 <_printf_common+0xa4>
1c003624 <_printf_common+0xa0> sub	a5,a5,a4
1c003626 <_printf_common+0xa2> add	s1,s1,a5
1c003628 <_printf_common+0xa4> li	s2,0
1c00362a <_printf_common+0xa6> addi	s0,s0,26
1c00362c <_printf_common+0xa8> li	s6,-1
1c00362e <_printf_common+0xaa> bne	s1,s2,1c00367e <_printf_common+0xfa>
1c003632 <_printf_common+0xae> li	a0,0
1c003634 <_printf_common+0xb0> j	1c003646 <_printf_common+0xc2>
1c003636 <_printf_common+0xb2> li	a3,1
1c003638 <_printf_common+0xb4> mv	a2,s6
1c00363a <_printf_common+0xb6> mv	a1,s5
1c00363c <_printf_common+0xb8> mv	a0,s3
1c00363e <_printf_common+0xba> jalr	s4
1c003640 <_printf_common+0xbc> bne	a0,s7,1c00365c <_printf_common+0xd8>
1c003644 <_printf_common+0xc0> li	a0,-1
1c003646 <_printf_common+0xc2> lw	ra,44(sp)
1c003648 <_printf_common+0xc4> lw	s0,40(sp)
1c00364a <_printf_common+0xc6> lw	s1,36(sp)
1c00364c <_printf_common+0xc8> lw	s2,32(sp)
1c00364e <_printf_common+0xca> lw	s3,28(sp)
1c003650 <_printf_common+0xcc> lw	s4,24(sp)
1c003652 <_printf_common+0xce> lw	s5,20(sp)
1c003654 <_printf_common+0xd0> lw	s6,16(sp)
1c003656 <_printf_common+0xd2> lw	s7,12(sp)
1c003658 <_printf_common+0xd4> addi	sp,sp,48
1c00365a <_printf_common+0xd6> ret
1c00365c <_printf_common+0xd8> addi	s2,s2,1
1c00365e <_printf_common+0xda> j	1c0035d8 <_printf_common+0x54>
1c003660 <_printf_common+0xdc> add	a4,s0,a3
1c003664 <_printf_common+0xe0> li	a2,48
1c003668 <_printf_common+0xe4> sb	a2,67(a4) # ffffe043 <__heap_l2_shared_start+0xe3fed963>
1c00366c <_printf_common+0xe8> lbu	a4,69(s0)
1c003670 <_printf_common+0xec> addi	a5,a3,1
1c003674 <_printf_common+0xf0> add	a5,a5,s0
1c003676 <_printf_common+0xf2> addi	a3,a3,2
1c003678 <_printf_common+0xf4> sb	a4,67(a5)
1c00367c <_printf_common+0xf8> j	1c0035f2 <_printf_common+0x6e>
1c00367e <_printf_common+0xfa> li	a3,1
1c003680 <_printf_common+0xfc> mv	a2,s0
1c003682 <_printf_common+0xfe> mv	a1,s5
1c003684 <_printf_common+0x100> mv	a0,s3
1c003686 <_printf_common+0x102> jalr	s4
1c003688 <_printf_common+0x104> beq	a0,s6,1c003644 <_printf_common+0xc0>
1c00368c <_printf_common+0x108> addi	s2,s2,1
1c00368e <_printf_common+0x10a> j	1c00362e <_printf_common+0xaa>
_printf_i():
1c003690 <_printf_i> addi	sp,sp,-48
1c003692 <_printf_i+0x2> sw	s0,40(sp)
1c003694 <_printf_i+0x4> sw	s1,36(sp)
1c003696 <_printf_i+0x6> sw	s2,32(sp)
1c003698 <_printf_i+0x8> sw	s3,28(sp)
1c00369a <_printf_i+0xa> sw	ra,44(sp)
1c00369c <_printf_i+0xc> sw	s4,24(sp)
1c00369e <_printf_i+0xe> sw	s5,20(sp)
1c0036a0 <_printf_i+0x10> sw	s6,16(sp)
1c0036a2 <_printf_i+0x12> lbu	a6,24(a1)
1c0036a6 <_printf_i+0x16> li	a5,120
1c0036aa <_printf_i+0x1a> mv	s1,a0
1c0036ac <_printf_i+0x1c> mv	s0,a1
1c0036ae <_printf_i+0x1e> mv	s2,a2
1c0036b0 <_printf_i+0x20> mv	s3,a3
1c0036b2 <_printf_i+0x22> bltu	a5,a6,1c0036ce <_printf_i+0x3e>
1c0036b6 <_printf_i+0x26> li	a5,98
1c0036ba <_printf_i+0x2a> addi	a3,a1,67
1c0036be <_printf_i+0x2e> bltu	a5,a6,1c0036d8 <_printf_i+0x48>
1c0036c2 <_printf_i+0x32> beqz	a6,1c00388c <_printf_i+0x1fc>
1c0036c6 <_printf_i+0x36> li	a5,88
1c0036ca <_printf_i+0x3a> beq	a6,a5,1c0037fe <_printf_i+0x16e>
1c0036ce <_printf_i+0x3e> addi	s5,s0,66
1c0036d2 <_printf_i+0x42> sb	a6,66(s0)
1c0036d6 <_printf_i+0x46> j	1c003708 <_printf_i+0x78>
1c0036d8 <_printf_i+0x48> addi	a5,a6,-99
1c0036dc <_printf_i+0x4c> andi	a5,a5,255
1c0036e0 <_printf_i+0x50> li	a2,21
1c0036e2 <_printf_i+0x52> bltu	a2,a5,1c0036ce <_printf_i+0x3e>
1c0036e6 <_printf_i+0x56> lui	a2,0x1c008
1c0036ea <_printf_i+0x5a> slli	a5,a5,0x2
1c0036ec <_printf_i+0x5c> addi	a2,a2,1548 # 1c00860c <__sf_fake_stdout+0x48>
1c0036f0 <_printf_i+0x60> add	a5,a5,a2
1c0036f2 <_printf_i+0x62> lw	a5,0(a5)
1c0036f4 <_printf_i+0x64> jr	a5
1c0036f6 <_printf_i+0x66> lw	a5,0(a4)
1c0036f8 <_printf_i+0x68> addi	s5,a1,66
1c0036fc <_printf_i+0x6c> addi	a3,a5,4
1c003700 <_printf_i+0x70> lw	a5,0(a5)
1c003702 <_printf_i+0x72> sw	a3,0(a4)
1c003704 <_printf_i+0x74> sb	a5,66(a1)
1c003708 <_printf_i+0x78> li	a5,1
1c00370a <_printf_i+0x7a> j	1c0038b4 <_printf_i+0x224>
1c00370c <_printf_i+0x7c> lw	a5,0(a1)
1c00370e <_printf_i+0x7e> lw	a0,0(a4)
1c003710 <_printf_i+0x80> andi	a2,a5,128
1c003714 <_printf_i+0x84> addi	a1,a0,4
1c003718 <_printf_i+0x88> beqz	a2,1c00373a <_printf_i+0xaa>
1c00371a <_printf_i+0x8a> lw	a5,0(a0)
1c00371c <_printf_i+0x8c> sw	a1,0(a4)
1c00371e <_printf_i+0x8e> lui	a1,0x1c008
1c003722 <_printf_i+0x92> bgez	a5,1c003732 <_printf_i+0xa2>
1c003726 <_printf_i+0x96> li	a4,45
1c00372a <_printf_i+0x9a> neg	a5,a5
1c00372e <_printf_i+0x9e> sb	a4,67(s0)
1c003732 <_printf_i+0xa2> addi	a1,a1,1508 # 1c0085e4 <__sf_fake_stdout+0x20>
1c003736 <_printf_i+0xa6> li	a4,10
1c003738 <_printf_i+0xa8> j	1c003780 <_printf_i+0xf0>
1c00373a <_printf_i+0xaa> andi	a2,a5,64
1c00373e <_printf_i+0xae> lw	a5,0(a0)
1c003740 <_printf_i+0xb0> sw	a1,0(a4)
1c003742 <_printf_i+0xb2> beqz	a2,1c00371e <_printf_i+0x8e>
1c003744 <_printf_i+0xb4> slli	a5,a5,0x10
1c003746 <_printf_i+0xb6> srai	a5,a5,0x10
1c003748 <_printf_i+0xb8> j	1c00371e <_printf_i+0x8e>
1c00374a <_printf_i+0xba> lw	a2,0(a1)
1c00374c <_printf_i+0xbc> lw	a5,0(a4)
1c00374e <_printf_i+0xbe> andi	a0,a2,128
1c003752 <_printf_i+0xc2> addi	a1,a5,4
1c003756 <_printf_i+0xc6> beqz	a0,1c00375e <_printf_i+0xce>
1c003758 <_printf_i+0xc8> sw	a1,0(a4)
1c00375a <_printf_i+0xca> lw	a5,0(a5)
1c00375c <_printf_i+0xcc> j	1c00376a <_printf_i+0xda>
1c00375e <_printf_i+0xce> andi	a2,a2,64
1c003762 <_printf_i+0xd2> sw	a1,0(a4)
1c003764 <_printf_i+0xd4> beqz	a2,1c00375a <_printf_i+0xca>
1c003766 <_printf_i+0xd6> lhu	a5,0(a5)
1c00376a <_printf_i+0xda> lui	a1,0x1c008
1c00376e <_printf_i+0xde> li	a4,111
1c003772 <_printf_i+0xe2> addi	a1,a1,1508 # 1c0085e4 <__sf_fake_stdout+0x20>
1c003776 <_printf_i+0xe6> beq	a6,a4,1c003860 <_printf_i+0x1d0>
1c00377a <_printf_i+0xea> li	a4,10
1c00377c <_printf_i+0xec> sb	zero,67(s0)
1c003780 <_printf_i+0xf0> lw	a2,4(s0)
1c003782 <_printf_i+0xf2> sw	a2,8(s0)
1c003784 <_printf_i+0xf4> bltz	a2,1c00378e <_printf_i+0xfe>
1c003788 <_printf_i+0xf8> lw	a0,0(s0)
1c00378a <_printf_i+0xfa> andi	a0,a0,-5
1c00378c <_printf_i+0xfc> sw	a0,0(s0)
1c00378e <_printf_i+0xfe> bnez	a5,1c003794 <_printf_i+0x104>
1c003790 <_printf_i+0x100> mv	s5,a3
1c003792 <_printf_i+0x102> beqz	a2,1c0037b0 <_printf_i+0x120>
1c003794 <_printf_i+0x104> mv	s5,a3
1c003796 <_printf_i+0x106> remu	a2,a5,a4
1c00379a <_printf_i+0x10a> addi	s5,s5,-1
1c00379c <_printf_i+0x10c> add	a2,a2,a1
1c00379e <_printf_i+0x10e> lbu	a2,0(a2)
1c0037a2 <_printf_i+0x112> sb	a2,0(s5)
1c0037a6 <_printf_i+0x116> mv	a2,a5
1c0037a8 <_printf_i+0x118> divu	a5,a5,a4
1c0037ac <_printf_i+0x11c> bgeu	a2,a4,1c003796 <_printf_i+0x106>
1c0037b0 <_printf_i+0x120> li	a5,8
1c0037b2 <_printf_i+0x122> bne	a4,a5,1c0037ce <_printf_i+0x13e>
1c0037b6 <_printf_i+0x126> lw	a5,0(s0)
1c0037b8 <_printf_i+0x128> andi	a5,a5,1
1c0037ba <_printf_i+0x12a> beqz	a5,1c0037ce <_printf_i+0x13e>
1c0037bc <_printf_i+0x12c> lw	a4,4(s0)
1c0037be <_printf_i+0x12e> lw	a5,16(s0)
1c0037c0 <_printf_i+0x130> blt	a5,a4,1c0037ce <_printf_i+0x13e>
1c0037c4 <_printf_i+0x134> li	a5,48
1c0037c8 <_printf_i+0x138> sb	a5,-1(s5)
1c0037cc <_printf_i+0x13c> addi	s5,s5,-1
1c0037ce <_printf_i+0x13e> sub	a3,a3,s5
1c0037d2 <_printf_i+0x142> sw	a3,16(s0)
1c0037d4 <_printf_i+0x144> mv	a4,s3
1c0037d6 <_printf_i+0x146> mv	a3,s2
1c0037d8 <_printf_i+0x148> addi	a2,sp,12
1c0037da <_printf_i+0x14a> mv	a1,s0
1c0037dc <_printf_i+0x14c> mv	a0,s1
1c0037de <_printf_i+0x14e> jal	ra,1c003584 <_printf_common>
1c0037e2 <_printf_i+0x152> li	s4,-1
1c0037e4 <_printf_i+0x154> bne	a0,s4,1c0038bc <_printf_i+0x22c>
1c0037e8 <_printf_i+0x158> li	a0,-1
1c0037ea <_printf_i+0x15a> lw	ra,44(sp)
1c0037ec <_printf_i+0x15c> lw	s0,40(sp)
1c0037ee <_printf_i+0x15e> lw	s1,36(sp)
1c0037f0 <_printf_i+0x160> lw	s2,32(sp)
1c0037f2 <_printf_i+0x162> lw	s3,28(sp)
1c0037f4 <_printf_i+0x164> lw	s4,24(sp)
1c0037f6 <_printf_i+0x166> lw	s5,20(sp)
1c0037f8 <_printf_i+0x168> lw	s6,16(sp)
1c0037fa <_printf_i+0x16a> addi	sp,sp,48
1c0037fc <_printf_i+0x16c> ret
1c0037fe <_printf_i+0x16e> sb	a6,69(a1)
1c003802 <_printf_i+0x172> lui	a1,0x1c008
1c003806 <_printf_i+0x176> addi	a1,a1,1508 # 1c0085e4 <__sf_fake_stdout+0x20>
1c00380a <_printf_i+0x17a> lw	a2,0(s0)
1c00380c <_printf_i+0x17c> lw	a0,0(a4)
1c00380e <_printf_i+0x17e> andi	a6,a2,128
1c003812 <_printf_i+0x182> lw	a5,0(a0)
1c003814 <_printf_i+0x184> addi	a0,a0,4
1c003816 <_printf_i+0x186> beqz	a6,1c003850 <_printf_i+0x1c0>
1c00381a <_printf_i+0x18a> sw	a0,0(a4)
1c00381c <_printf_i+0x18c> andi	a4,a2,1
1c003820 <_printf_i+0x190> beqz	a4,1c003828 <_printf_i+0x198>
1c003822 <_printf_i+0x192> ori	a2,a2,32
1c003826 <_printf_i+0x196> sw	a2,0(s0)
1c003828 <_printf_i+0x198> li	a4,16
1c00382a <_printf_i+0x19a> bnez	a5,1c00377c <_printf_i+0xec>
1c00382c <_printf_i+0x19c> lw	a2,0(s0)
1c00382e <_printf_i+0x19e> andi	a2,a2,-33
1c003832 <_printf_i+0x1a2> sw	a2,0(s0)
1c003834 <_printf_i+0x1a4> j	1c00377c <_printf_i+0xec>
1c003836 <_printf_i+0x1a6> lw	a5,0(a1)
1c003838 <_printf_i+0x1a8> ori	a5,a5,32
1c00383c <_printf_i+0x1ac> sw	a5,0(a1)
1c00383e <_printf_i+0x1ae> li	a5,120
1c003842 <_printf_i+0x1b2> lui	a1,0x1c008
1c003846 <_printf_i+0x1b6> sb	a5,69(s0)
1c00384a <_printf_i+0x1ba> addi	a1,a1,1528 # 1c0085f8 <__sf_fake_stdout+0x34>
1c00384e <_printf_i+0x1be> j	1c00380a <_printf_i+0x17a>
1c003850 <_printf_i+0x1c0> andi	a6,a2,64
1c003854 <_printf_i+0x1c4> sw	a0,0(a4)
1c003856 <_printf_i+0x1c6> beqz	a6,1c00381c <_printf_i+0x18c>
1c00385a <_printf_i+0x1ca> slli	a5,a5,0x10
1c00385c <_printf_i+0x1cc> srli	a5,a5,0x10
1c00385e <_printf_i+0x1ce> j	1c00381c <_printf_i+0x18c>
1c003860 <_printf_i+0x1d0> li	a4,8
1c003862 <_printf_i+0x1d2> j	1c00377c <_printf_i+0xec>
1c003864 <_printf_i+0x1d4> lw	a2,0(a1)
1c003866 <_printf_i+0x1d6> lw	a5,0(a4)
1c003868 <_printf_i+0x1d8> lw	a1,20(a1)
1c00386a <_printf_i+0x1da> andi	a6,a2,128
1c00386e <_printf_i+0x1de> addi	a0,a5,4
1c003872 <_printf_i+0x1e2> beqz	a6,1c00387e <_printf_i+0x1ee>
1c003876 <_printf_i+0x1e6> sw	a0,0(a4)
1c003878 <_printf_i+0x1e8> lw	a5,0(a5)
1c00387a <_printf_i+0x1ea> sw	a1,0(a5)
1c00387c <_printf_i+0x1ec> j	1c00388c <_printf_i+0x1fc>
1c00387e <_printf_i+0x1ee> sw	a0,0(a4)
1c003880 <_printf_i+0x1f0> andi	a2,a2,64
1c003884 <_printf_i+0x1f4> lw	a5,0(a5)
1c003886 <_printf_i+0x1f6> beqz	a2,1c00387a <_printf_i+0x1ea>
1c003888 <_printf_i+0x1f8> sh	a1,0(a5)
1c00388c <_printf_i+0x1fc> sw	zero,16(s0)
1c003890 <_printf_i+0x200> mv	s5,a3
1c003892 <_printf_i+0x202> j	1c0037d4 <_printf_i+0x144>
1c003894 <_printf_i+0x204> lw	a5,0(a4)
1c003896 <_printf_i+0x206> lw	a2,4(a1)
1c003898 <_printf_i+0x208> li	a1,0
1c00389a <_printf_i+0x20a> addi	a3,a5,4
1c00389e <_printf_i+0x20e> sw	a3,0(a4)
1c0038a0 <_printf_i+0x210> lw	s5,0(a5)
1c0038a4 <_printf_i+0x214> mv	a0,s5
1c0038a6 <_printf_i+0x216> jal	ra,1c00356a <memchr>
1c0038aa <_printf_i+0x21a> beqz	a0,1c0038b2 <_printf_i+0x222>
1c0038ac <_printf_i+0x21c> sub	a0,a0,s5
1c0038b0 <_printf_i+0x220> sw	a0,4(s0)
1c0038b2 <_printf_i+0x222> lw	a5,4(s0)
1c0038b4 <_printf_i+0x224> sw	a5,16(s0)
1c0038b6 <_printf_i+0x226> sb	zero,67(s0)
1c0038ba <_printf_i+0x22a> j	1c0037d4 <_printf_i+0x144>
1c0038bc <_printf_i+0x22c> lw	a3,16(s0)
1c0038be <_printf_i+0x22e> mv	a2,s5
1c0038c0 <_printf_i+0x230> mv	a1,s2
1c0038c2 <_printf_i+0x232> mv	a0,s1
1c0038c4 <_printf_i+0x234> jalr	s3
1c0038c6 <_printf_i+0x236> beq	a0,s4,1c0037e8 <_printf_i+0x158>
1c0038ca <_printf_i+0x23a> lw	a5,0(s0)
1c0038cc <_printf_i+0x23c> andi	a5,a5,2
1c0038ce <_printf_i+0x23e> bnez	a5,1c0038f8 <_printf_i+0x268>
1c0038d0 <_printf_i+0x240> lw	a5,12(sp)
1c0038d2 <_printf_i+0x242> lw	a0,12(s0)
1c0038d4 <_printf_i+0x244> bge	a0,a5,1c0037ea <_printf_i+0x15a>
1c0038d8 <_printf_i+0x248> mv	a0,a5
1c0038da <_printf_i+0x24a> j	1c0037ea <_printf_i+0x15a>
1c0038dc <_printf_i+0x24c> li	a3,1
1c0038de <_printf_i+0x24e> mv	a2,s5
1c0038e0 <_printf_i+0x250> mv	a1,s2
1c0038e2 <_printf_i+0x252> mv	a0,s1
1c0038e4 <_printf_i+0x254> jalr	s3
1c0038e6 <_printf_i+0x256> beq	a0,s6,1c0037e8 <_printf_i+0x158>
1c0038ea <_printf_i+0x25a> addi	s4,s4,1
1c0038ec <_printf_i+0x25c> lw	a5,12(s0)
1c0038ee <_printf_i+0x25e> lw	a4,12(sp)
1c0038f0 <_printf_i+0x260> sub	a5,a5,a4
1c0038f2 <_printf_i+0x262> blt	s4,a5,1c0038dc <_printf_i+0x24c>
1c0038f6 <_printf_i+0x266> j	1c0038d0 <_printf_i+0x240>
1c0038f8 <_printf_i+0x268> li	s4,0
1c0038fa <_printf_i+0x26a> addi	s5,s0,25
1c0038fe <_printf_i+0x26e> li	s6,-1
1c003900 <_printf_i+0x270> j	1c0038ec <_printf_i+0x25c>
__sread():
1c003902 <__sread> addi	sp,sp,-16
1c003904 <__sread+0x2> sw	s0,8(sp)
1c003906 <__sread+0x4> mv	s0,a1
1c003908 <__sread+0x6> lh	a1,14(a1)
1c00390c <__sread+0xa> sw	ra,12(sp)
1c00390e <__sread+0xc> jal	1c003aa2 <_read_r>
1c003910 <__sread+0xe> bltz	a0,1c003922 <__sread+0x20>
1c003914 <__sread+0x12> lw	a5,84(s0)
1c003916 <__sread+0x14> add	a5,a5,a0
1c003918 <__sread+0x16> sw	a5,84(s0)
1c00391a <__sread+0x18> lw	ra,12(sp)
1c00391c <__sread+0x1a> lw	s0,8(sp)
1c00391e <__sread+0x1c> addi	sp,sp,16
1c003920 <__sread+0x1e> ret
1c003922 <__sread+0x20> lhu	a5,12(s0)
1c003926 <__sread+0x24> lui	a4,0xfffff
1c003928 <__sread+0x26> addi	a4,a4,-1
1c00392a <__sread+0x28> and	a5,a5,a4
1c00392c <__sread+0x2a> sh	a5,12(s0)
1c003930 <__sread+0x2e> j	1c00391a <__sread+0x18>
__swrite():
1c003932 <__swrite> lhu	a5,12(a1)
1c003936 <__swrite+0x4> addi	sp,sp,-32
1c003938 <__swrite+0x6> sw	s0,24(sp)
1c00393a <__swrite+0x8> sw	s1,20(sp)
1c00393c <__swrite+0xa> sw	s2,16(sp)
1c00393e <__swrite+0xc> sw	s3,12(sp)
1c003940 <__swrite+0xe> sw	ra,28(sp)
1c003942 <__swrite+0x10> andi	a5,a5,256
1c003946 <__swrite+0x14> mv	s1,a0
1c003948 <__swrite+0x16> mv	s0,a1
1c00394a <__swrite+0x18> mv	s2,a2
1c00394c <__swrite+0x1a> mv	s3,a3
1c00394e <__swrite+0x1c> beqz	a5,1c00395a <__swrite+0x28>
1c003950 <__swrite+0x1e> lh	a1,14(a1)
1c003954 <__swrite+0x22> li	a3,2
1c003956 <__swrite+0x24> li	a2,0
1c003958 <__swrite+0x26> jal	1c003a72 <_lseek_r>
1c00395a <__swrite+0x28> lhu	a5,12(s0)
1c00395e <__swrite+0x2c> lui	a4,0xfffff
1c003960 <__swrite+0x2e> addi	a4,a4,-1
1c003962 <__swrite+0x30> and	a5,a5,a4
1c003964 <__swrite+0x32> lh	a1,14(s0)
1c003968 <__swrite+0x36> sh	a5,12(s0)
1c00396c <__swrite+0x3a> lw	s0,24(sp)
1c00396e <__swrite+0x3c> lw	ra,28(sp)
1c003970 <__swrite+0x3e> mv	a3,s3
1c003972 <__swrite+0x40> mv	a2,s2
1c003974 <__swrite+0x42> lw	s3,12(sp)
1c003976 <__swrite+0x44> lw	s2,16(sp)
1c003978 <__swrite+0x46> mv	a0,s1
1c00397a <__swrite+0x48> lw	s1,20(sp)
1c00397c <__swrite+0x4a> addi	sp,sp,32
1c00397e <__swrite+0x4c> j	1c0039bc <_write_r>
__sseek():
1c003980 <__sseek> addi	sp,sp,-16
1c003982 <__sseek+0x2> sw	s0,8(sp)
1c003984 <__sseek+0x4> mv	s0,a1
1c003986 <__sseek+0x6> lh	a1,14(a1)
1c00398a <__sseek+0xa> sw	ra,12(sp)
1c00398c <__sseek+0xc> jal	1c003a72 <_lseek_r>
1c00398e <__sseek+0xe> li	a5,-1
1c003990 <__sseek+0x10> lhu	a4,12(s0)
1c003994 <__sseek+0x14> bne	a0,a5,1c0039aa <__sseek+0x2a>
1c003998 <__sseek+0x18> lui	a5,0xfffff
1c00399a <__sseek+0x1a> addi	a5,a5,-1
1c00399c <__sseek+0x1c> and	a5,a5,a4
1c00399e <__sseek+0x1e> sh	a5,12(s0)
1c0039a2 <__sseek+0x22> lw	ra,12(sp)
1c0039a4 <__sseek+0x24> lw	s0,8(sp)
1c0039a6 <__sseek+0x26> addi	sp,sp,16
1c0039a8 <__sseek+0x28> ret
1c0039aa <__sseek+0x2a> lui	a5,0x1
1c0039ac <__sseek+0x2c> or	a5,a5,a4
1c0039ae <__sseek+0x2e> sh	a5,12(s0)
1c0039b2 <__sseek+0x32> sw	a0,84(s0)
1c0039b4 <__sseek+0x34> j	1c0039a2 <__sseek+0x22>
__sclose():
1c0039b6 <__sclose> lh	a1,14(a1)
1c0039ba <__sclose+0x4> j	1c0039ec <_close_r>
_write_r():
1c0039bc <_write_r> addi	sp,sp,-16
1c0039be <_write_r+0x2> sw	s0,8(sp)
1c0039c0 <_write_r+0x4> sw	s1,4(sp)
1c0039c2 <_write_r+0x6> mv	s0,a0
1c0039c4 <_write_r+0x8> mv	a0,a1
1c0039c6 <_write_r+0xa> mv	a1,a2
1c0039c8 <_write_r+0xc> mv	a2,a3
1c0039ca <_write_r+0xe> sw	ra,12(sp)
1c0039cc <_write_r+0x10> sw	zero,964(gp) # 1c009228 <errno>
1c0039d0 <_write_r+0x14> jal	ra,1c001516 <_write>
1c0039d4 <_write_r+0x18> li	a5,-1
1c0039d6 <_write_r+0x1a> bne	a0,a5,1c0039e2 <_write_r+0x26>
1c0039da <_write_r+0x1e> lw	a5,964(gp) # 1c009228 <errno>
1c0039de <_write_r+0x22> beqz	a5,1c0039e2 <_write_r+0x26>
1c0039e0 <_write_r+0x24> sw	a5,0(s0)
1c0039e2 <_write_r+0x26> lw	ra,12(sp)
1c0039e4 <_write_r+0x28> lw	s0,8(sp)
1c0039e6 <_write_r+0x2a> lw	s1,4(sp)
1c0039e8 <_write_r+0x2c> addi	sp,sp,16
1c0039ea <_write_r+0x2e> ret
_close_r():
1c0039ec <_close_r> addi	sp,sp,-16
1c0039ee <_close_r+0x2> sw	s0,8(sp)
1c0039f0 <_close_r+0x4> sw	s1,4(sp)
1c0039f2 <_close_r+0x6> mv	s0,a0
1c0039f4 <_close_r+0x8> mv	a0,a1
1c0039f6 <_close_r+0xa> sw	ra,12(sp)
1c0039f8 <_close_r+0xc> sw	zero,964(gp) # 1c009228 <errno>
1c0039fc <_close_r+0x10> jal	ra,1c0014b0 <_close>
1c003a00 <_close_r+0x14> li	a5,-1
1c003a02 <_close_r+0x16> bne	a0,a5,1c003a0e <_close_r+0x22>
1c003a06 <_close_r+0x1a> lw	a5,964(gp) # 1c009228 <errno>
1c003a0a <_close_r+0x1e> beqz	a5,1c003a0e <_close_r+0x22>
1c003a0c <_close_r+0x20> sw	a5,0(s0)
1c003a0e <_close_r+0x22> lw	ra,12(sp)
1c003a10 <_close_r+0x24> lw	s0,8(sp)
1c003a12 <_close_r+0x26> lw	s1,4(sp)
1c003a14 <_close_r+0x28> addi	sp,sp,16
1c003a16 <_close_r+0x2a> ret
_fstat_r():
1c003a18 <_fstat_r> addi	sp,sp,-16
1c003a1a <_fstat_r+0x2> sw	s0,8(sp)
1c003a1c <_fstat_r+0x4> sw	s1,4(sp)
1c003a1e <_fstat_r+0x6> mv	s0,a0
1c003a20 <_fstat_r+0x8> mv	a0,a1
1c003a22 <_fstat_r+0xa> mv	a1,a2
1c003a24 <_fstat_r+0xc> sw	ra,12(sp)
1c003a26 <_fstat_r+0xe> sw	zero,964(gp) # 1c009228 <errno>
1c003a2a <_fstat_r+0x12> jal	ra,1c0014f0 <_fstat>
1c003a2e <_fstat_r+0x16> li	a5,-1
1c003a30 <_fstat_r+0x18> bne	a0,a5,1c003a3c <_fstat_r+0x24>
1c003a34 <_fstat_r+0x1c> lw	a5,964(gp) # 1c009228 <errno>
1c003a38 <_fstat_r+0x20> beqz	a5,1c003a3c <_fstat_r+0x24>
1c003a3a <_fstat_r+0x22> sw	a5,0(s0)
1c003a3c <_fstat_r+0x24> lw	ra,12(sp)
1c003a3e <_fstat_r+0x26> lw	s0,8(sp)
1c003a40 <_fstat_r+0x28> lw	s1,4(sp)
1c003a42 <_fstat_r+0x2a> addi	sp,sp,16
1c003a44 <_fstat_r+0x2c> ret
_isatty_r():
1c003a46 <_isatty_r> addi	sp,sp,-16
1c003a48 <_isatty_r+0x2> sw	s0,8(sp)
1c003a4a <_isatty_r+0x4> sw	s1,4(sp)
1c003a4c <_isatty_r+0x6> mv	s0,a0
1c003a4e <_isatty_r+0x8> mv	a0,a1
1c003a50 <_isatty_r+0xa> sw	ra,12(sp)
1c003a52 <_isatty_r+0xc> sw	zero,964(gp) # 1c009228 <errno>
1c003a56 <_isatty_r+0x10> jal	ra,1c0014fc <_isatty>
1c003a5a <_isatty_r+0x14> li	a5,-1
1c003a5c <_isatty_r+0x16> bne	a0,a5,1c003a68 <_isatty_r+0x22>
1c003a60 <_isatty_r+0x1a> lw	a5,964(gp) # 1c009228 <errno>
1c003a64 <_isatty_r+0x1e> beqz	a5,1c003a68 <_isatty_r+0x22>
1c003a66 <_isatty_r+0x20> sw	a5,0(s0)
1c003a68 <_isatty_r+0x22> lw	ra,12(sp)
1c003a6a <_isatty_r+0x24> lw	s0,8(sp)
1c003a6c <_isatty_r+0x26> lw	s1,4(sp)
1c003a6e <_isatty_r+0x28> addi	sp,sp,16
1c003a70 <_isatty_r+0x2a> ret
_lseek_r():
1c003a72 <_lseek_r> addi	sp,sp,-16
1c003a74 <_lseek_r+0x2> sw	s0,8(sp)
1c003a76 <_lseek_r+0x4> sw	s1,4(sp)
1c003a78 <_lseek_r+0x6> mv	s0,a0
1c003a7a <_lseek_r+0x8> mv	a0,a1
1c003a7c <_lseek_r+0xa> mv	a1,a2
1c003a7e <_lseek_r+0xc> mv	a2,a3
1c003a80 <_lseek_r+0xe> sw	ra,12(sp)
1c003a82 <_lseek_r+0x10> sw	zero,964(gp) # 1c009228 <errno>
1c003a86 <_lseek_r+0x14> jal	ra,1c00150e <_lseek>
1c003a8a <_lseek_r+0x18> li	a5,-1
1c003a8c <_lseek_r+0x1a> bne	a0,a5,1c003a98 <_lseek_r+0x26>
1c003a90 <_lseek_r+0x1e> lw	a5,964(gp) # 1c009228 <errno>
1c003a94 <_lseek_r+0x22> beqz	a5,1c003a98 <_lseek_r+0x26>
1c003a96 <_lseek_r+0x24> sw	a5,0(s0)
1c003a98 <_lseek_r+0x26> lw	ra,12(sp)
1c003a9a <_lseek_r+0x28> lw	s0,8(sp)
1c003a9c <_lseek_r+0x2a> lw	s1,4(sp)
1c003a9e <_lseek_r+0x2c> addi	sp,sp,16
1c003aa0 <_lseek_r+0x2e> ret
_read_r():
1c003aa2 <_read_r> addi	sp,sp,-16
1c003aa4 <_read_r+0x2> sw	s0,8(sp)
1c003aa6 <_read_r+0x4> sw	s1,4(sp)
1c003aa8 <_read_r+0x6> mv	s0,a0
1c003aaa <_read_r+0x8> mv	a0,a1
1c003aac <_read_r+0xa> mv	a1,a2
1c003aae <_read_r+0xc> mv	a2,a3
1c003ab0 <_read_r+0xe> sw	ra,12(sp)
1c003ab2 <_read_r+0x10> sw	zero,964(gp) # 1c009228 <errno>
1c003ab6 <_read_r+0x14> jal	ra,1c001512 <_read>
1c003aba <_read_r+0x18> li	a5,-1
1c003abc <_read_r+0x1a> bne	a0,a5,1c003ac8 <_read_r+0x26>
1c003ac0 <_read_r+0x1e> lw	a5,964(gp) # 1c009228 <errno>
1c003ac4 <_read_r+0x22> beqz	a5,1c003ac8 <_read_r+0x26>
1c003ac6 <_read_r+0x24> sw	a5,0(s0)
1c003ac8 <_read_r+0x26> lw	ra,12(sp)
1c003aca <_read_r+0x28> lw	s0,8(sp)
1c003acc <_read_r+0x2a> lw	s1,4(sp)
1c003ace <_read_r+0x2c> addi	sp,sp,16
1c003ad0 <_read_r+0x2e> ret
	...
