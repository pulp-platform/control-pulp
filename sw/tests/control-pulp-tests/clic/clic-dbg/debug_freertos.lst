
debug_freertos:     file format elf32-littleriscv
debug_freertos
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1c000880

Program Header:
    LOAD off    0x00000004 vaddr 0x00000004 paddr 0x1c000004 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00000400 vaddr 0x1c000400 paddr 0x1c000400 align 2**12
         filesz 0x000032ec memsz 0x000032ec flags r-x
    LOAD off    0x00004000 vaddr 0x1c008000 paddr 0x1c008000 align 2**12
         filesz 0x00004c20 memsz 0x00005420 flags rw-
    LOAD off    0x00000004 vaddr 0x10000004 paddr 0x1c00d420 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00000010 vaddr 0x10000010 paddr 0x1c00d420 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x0000001c vaddr 0x1c01001c paddr 0x1c01001c align 2**12
         filesz 0x00000000 memsz 0x00000004 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .data_tiny_fc     0000000c  00000004  1c000004  00001004  2**2  ALLOC
  1 .vectors          00000400  1c000400  1c000400  00000400  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text             00002e6c  1c000880  1c000880  00000880  2**10  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata           00000550  1c008000  1c008000  00004000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data             00000070  1c008550  1c008550  00004550  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00000660  1c0085c0  1c0085c0  000045c0  2**3  ALLOC
  6 .heap             00004000  1c008c20  1c008c20  00004c20  2**4  CONTENTS, ALLOC, LOAD, DATA
  7 .stack            00000800  1c00cc20  1c00cc20  00008c20  2**4  ALLOC
  8 .l2_data          00000000  1c010000  1c010000  00008c20  2**0  CONTENTS
  9 .data_tiny_l1     0000000c  10000004  1c00d420  00009004  2**0  ALLOC
 10 .l1cluster_g      00000010  10000010  1c00d420  00009010  2**0  ALLOC
 11 .heap_l1_cluster  00000000  10000020  10000020  00008c20  2**0  CONTENTS
 12 .heap_l2_shared   00000004  1c01001c  1c01001c  0000901c  2**0  ALLOC
 13 .debug_info       0000f848  00000000  00000000  00008c20  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev     000026f1  00000000  00000000  00018468  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc        00004fe4  00000000  00000000  0001ab59  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges    000006f0  00000000  00000000  0001fb40  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges     00000910  00000000  00000000  00020230  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro      000058bc  00000000  00000000  00020b40  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line       0000d1ee  00000000  00000000  000263fc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str        0002219d  00000000  00000000  000335ea  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment          0000002c  00000000  00000000  00055787  2**0  CONTENTS, READONLY
 22 .riscv.attributes 0000003e  00000000  00000000  000557b3  2**0  CONTENTS, READONLY
 23 .debug_frame      00001288  00000000  00000000  000557f4  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1c000400 l    d  .vectors	00000000 .vectors
1c000880 l    d  .text	00000000 .text
1c008000 l    d  .rodata	00000000 .rodata
1c008550 l    d  .data	00000000 .data
1c0085c0 l    d  .bss	00000000 .bss
1c008c20 l    d  .heap	00000000 .heap
1c00cc20 l    d  .stack	00000000 .stack
1c010000 l    d  .l2_data	00000000 .l2_data
10000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
10000010 l    d  .l1cluster_g	00000000 .l1cluster_g
10000020 l    d  .heap_l1_cluster	00000000 .heap_l1_cluster
1c01001c l    d  .heap_l2_shared	00000000 .heap_l2_shared
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 target/control-pulp/vectors.o
1c000400 l       .vectors	00000000 vector_table
00000000 l    df *ABS*	00000000 kernel/portable/GCC/RISC-V/portASM.o
1c00097c l       .text	00000000 test_if_asynchronous
1c000992 l       .text	00000000 handle_synchronous
1c000984 l       .text	00000000 handle_asynchronous
1c0009c2 l       .text	00000000 processed_source
1c000996 l       .text	00000000 test_if_environment_call
1c0009ae l       .text	00000000 is_exception
1c0009bc l       .text	00000000 as_yet_unhandled
1c000e28 l       .text	00000000 chip_specific_stack_frame
00000000 l    df *ABS*	00000000 cluster_core.S
1c000f1e l       .text	00000000 cl_slave_loop
1c000e98 l       .text	00000000 cl_master_cluster_ready
1c000f10 l       .text	00000000 cl_master_sleep
1c000ea0 l       .text	00000000 cl_master_loop
1c000f06 l       .text	00000000 cl_master_cluster_task_end
1c000ed4 l       .text	00000000 cl_master_slave_barrier_sync_config
1c000ee4 l       .text	00000000 cl_master_master_slave_barrier_sync_config
1c000eec l       .text	00000000 cl_master_dispatch_stack
1c000f04 l       .text	00000000 cl_master_core_only
1c000f34 l       .text	00000000 cl_slave_barrier_trig_wait
1c000f38 l       .text	00000000 cl_slave_wait_for_dispatch
1c000f52 l       .text	00000000 cl_slave_entry_no_barrier
1c000f4c l       .text	00000000 cl_slave_entry_with_barrier
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tasks.c
1c000fc8 l     F .text	00000030 prvResetNextTaskUnblockTime
1c0085c0 l     O .bss	00000064 pxReadyTasksLists
1c008624 l     O .bss	00000014 xPendingReadyList
1c008124 l     O .rodata	0000000f __func__.3171
1c008134 l     O .rodata	00000013 __func__.3248
1c008148 l     O .rodata	00000013 __func__.3257
1c0087c8 l     O .bss	00000004 pxDelayedTaskList
1c0087cc l     O .bss	00000004 pxOverflowDelayedTaskList
1c0087d0 l     O .bss	00000004 uxCurrentNumberOfTasks
1c0087d4 l     O .bss	00000004 uxSchedulerSuspended
1c0087d8 l     O .bss	00000004 uxTopReadyPriority
1c0087dc l     O .bss	00000004 xNextTaskUnblockTime
1c0087e0 l     O .bss	00000004 xNumOfOverflows
1c0087e4 l     O .bss	00000004 xPendedTicks
1c0087e8 l     O .bss	00000004 xSchedulerRunning
1c0087ec l     O .bss	00000004 xTickCount
1c0087f0 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 syscalls.c
1c008638 l     O .bss	00000100 copyout_buf.4127
1c0085b0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 cl_l1_malloc.c
00000000 l    df *ABS*	00000000 malloc_internal.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 cl_to_fc_delegate.c
00000000 l    df *ABS*	00000000 fc_to_cl_delegate.c
1c0081e0 l     O .rodata	0000000f __func__.5341
1c0081f0 l     O .rodata	00000014 __func__.5439
00000000 l    df *ABS*	00000000 clic.c
1c00828c l     O .rodata	00000009 __func__.1889
00000000 l    df *ABS*	00000000 handler.o
1c001800 l       .text	00000000 default_exception_handler
1c001802 l       .text	00000000 software_handler
1c001804 l       .text	00000000 timer_handler
1c001806 l       .text	00000000 external_handler
1c001808 l       .text	00000000 __no_irq_handler
00000000 l    df *ABS*	00000000 debug_freertos.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1c00247e l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
1c008738 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1c002e5c l     F .text	0000006a std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 impure.c
1c008550 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 port.c
00000000 l    df *ABS*	00000000 
1c008550 l       .data	00000000 __fini_array_end
1c008550 l       .data	00000000 __fini_array_start
1c008550 l       .data	00000000 __init_array_end
1c008550 l       .data	00000000 __preinit_array_end
1c008550 l       .data	00000000 __init_array_start
1c008550 l       .data	00000000 __preinit_array_start
1c003660 g     F .text	0000002c _isatty_r
1c00146c g     F .text	00000004 _getpid
1c0027d0 g     F .text	000000de _puts_r
1c00368c g     F .text	00000030 _lseek_r
00000010 g       .data_tiny_fc	00000000 __l1FcShared_start
1c002954 g     F .text	0000002e _kill_r
1c002792 g     F .text	0000003e printf
1c008d50 g       *ABS*	00000000 __global_pointer$
1c00359a g     F .text	00000036 __sseek
1c000400 g       .vectors	00000000 __vector_start
1c002f18 g     F .text	0000006a __sinit
1c010000 g       .stack	00000000 __l1_preload_start_inL2
10000010 g       .data_tiny_l1	00000000 __data_tiny_l1_end
1c002986 g     F .text	000000c6 __swbuf_r
1c0016ee g     F .text	0000003e irq_pend
1c002ed0 g     F .text	00000048 __sfmoreglue
1c00152c g     F .text	0000000c __malloc_unlock
1c0012b2 g     F .text	00000022 vTaskEnterCritical
10000020 g       .heap_l1_cluster	00000000 __l1_heapsram_start
1c0087c4 g     O .bss	00000004 pxCurrentTCB
1c003632 g     F .text	0000002e _fstat_r
1c008c1c g     O .bss	00000004 errno
1c0036ec g       .text	00000000 _etext
00000800 g       *ABS*	00000000 __stack_size
1c001ffa g     F .text	0000001e exit_success
1c008550 g       .data	00000000 sdata
1c000880 g       *ABS*	00000000 __boot_address
1c000f66 g     F .text	00000016 memcpy
1c002ec6 g     F .text	0000000a _cleanup_r
1c0028ae g     F .text	0000000c puts
1c00d420 g       .stack	00000000 __freertos_irq_stack_top
1c0087f4 g     O .bss	00000004 __per_cluster_data
1c0028e6 g     F .text	00000062 _raise_r
1c001464 g     F .text	00000008 _fstat
1c0021a6 g     F .text	0000003e __assert_func
1c0085c0 g       .bss	00000000 _bss_start
1c0085c0 g       .data	00000000 edata
1c000f8c g     F .text	00000016 vListInsertEnd
1c002982 g     F .text	00000004 _getpid_r
1c0085b0 g       .data	00000000 __sdata_begin
1c010020 g       .heap_l2_shared	00000000 __heap_l2_shared_start
1c008804 g     O .bss	0000000c __cl_l1_malloc_mutex
1c008550 g       .data	00000000 _sdata
1c0015c4 g     F .text	00000044 pi_cl_send_task_to_fc
1c000e42 g     F .text	00000000 cluster_exec_loop
1c0028ba g     F .text	0000002c _sbrk_r
1c0036bc g     F .text	00000030 _read_r
1c008c20 g     O .heap	00004000 ucHeap
1c001470 g     F .text	00000008 _isatty
1c0085bc g     O .data	00000004 _global_impure_ptr
0000001c g       *ABS*	00000000 __l1_preload_size
1c00227e g     F .text	0000006e __libc_init_array
1c008c20 g       .bss	00000000 __bss_end
1c00d420 g       .stack	00000000 stack
10000020 g       .heap_l1_cluster	00000000 __heap_l1_cluster_start
1c002196 g     F .text	00000010 abort
1c0014f2 g     F .text	0000002c _sbrk
1c0008ec g     F .text	00000002 _init
0000ffe0 g       *ABS*	00000000 __heapsram_size
1c008c20 g       .bss	00000000 _bss_end
1c00221c g     F .text	0000003a __libc_fini_array
1c0015a6 g     F .text	0000001e vSystemIrqHandler
1c000b00 g       .text	00000000 freertos_risc_v_ctxt_handler
0000ffe0 g       *ABS*	00000000 __l1_heapsram_size
1c000900 g       .text	00000000 freertos_risc_v_trap_handler
1c00cc20 g       .stack	00000000 stack_start
1c002256 g     F .text	00000028 fprintf
1c002194 g     F .text	00000002 vApplicationTickHook
1c00d420 g       .stack	00000000 __stack_top
00000000 g     O *ABS*	00000004 __heap_size
1c008470 g     O .rodata	00000020 __sf_fake_stderr
1c001558 g     F .text	0000004e __malloc_free
1c001538 g     F .text	00000020 pi_cl_l1_free
1c001794 g     F .text	00000000 clic_setup_mtvt
1c0085b8 g     O .data	00000004 xISRStackTop
1c0024a8 g     F .text	00000042 __sfputs_r
1c003186 g     F .text	0000001a memchr
1c0022ec g     F .text	000000ac _free_r
1c008800 g     O .bss	00000004 _global_atexit
1c010000 g       .l2_data	00000000 __cluster_text_start
1c002be0 g     F .text	000000cc __call_exitprocs
1c000880 g     F .text	0000006c _start
1c000ff8 g     F .text	00000010 vTaskSuspendAll
1c001482 g     F .text	00000004 _lseek
0006ffe0 g       *ABS*	00000000 __heapl2ram_size
1c000fa2 g     F .text	00000026 uxListRemove
1c002b5c g     F .text	00000084 __register_exitproc
1c008c18 g     O .bss	00000004 clic_isr_hook
1c00118c g     F .text	00000126 vTaskSwitchContext
1c000f58 g     F .text	00000000 cl_slave_stack_setup
1c003606 g     F .text	0000002c _close_r
1c002a4c g     F .text	00000110 __swsetup_r
1c00217c g     F .text	00000018 vApplicationStackOverflowHook
1c002f82 g     F .text	0000009e __sfp
1c00351c g     F .text	00000030 __sread
1c00151e g     F .text	0000000e __malloc_lock
1c002df8 g     F .text	00000064 _fflush_r
1c00d420 g       .stack	00000000 __l2_priv1_end
1c008490 g     O .rodata	00000020 __sf_fake_stdin
1c001730 g       .text	00000000 __handle_clic_int
1c0085c0 g       .bss	00000000 __bss_start
1c000f7c g     F .text	00000010 memset
1c00202c g     F .text	00000150 main
1c002018 g     F .text	00000014 exit_fail
1c0035d0 g     F .text	00000006 __sclose
1c002398 g     F .text	000000e6 _malloc_r
1c0036ec g       .text	00000000 __l2_priv0_end
1c008818 g     O .bss	00000400 isr_table
1c010020 g       .heap_l2_shared	00000000 __heapl2ram_start
1c008550 g       .data	00000000 __data_begin
0000ffe0 g       *ABS*	00000000 __heap_l1_cluster_size
1c00cc20 g       .heap	00000000 __heap_end
00000000 g       *ABS*	00000000 __l1FcShared_size
1c0008ec g     F .text	00000002 _fini
1c002792 g     F .text	0000003e iprintf
1c001306 g     F .text	0000011e xTaskResumeAll
1c0021e4 g     F .text	0000000c atexit
1c0035d6 g     F .text	00000030 _write_r
1c000d00 g       .text	00000000 xPortStartFirstTask
1c0031a0 g     F .text	0000010c _printf_common
1c0085b4 g     O .data	00000004 _impure_ptr
1c00cc20 g       .stack	00000000 __stack_bottom
1c002cac g     F .text	0000014c __sflush_r
1c008810 g     O .bss	00000008 __cl_l1_malloc
0006ffe0 g       *ABS*	00000000 __heap_l2_shared_size
1c008c20 g       .heap	00000000 __heap_start
1c001008 g     F .text	00000184 xTaskIncrementTick
1c00308a g     F .text	0000005c __swhatbuf_r
1c001608 g     F .text	000000e6 cl_task_finish
10000020 g       .heap_l1_cluster	00000000 __heapsram_start
1c000400 g       .vectors	00000000 __irq_vector_base
1c00148a g     F .text	00000068 _write
1c0085c0 g       .data	00000000 _edata
1c001782 g     F .text	00000000 clic_setup_mtvec
1c008c20 g       .bss	00000000 _end
00000010 g       .data_tiny_fc	00000000 __l1FcShared_end
1c00354c g     F .text	0000004e __swrite
1c0021f0 g     F .text	0000002c exit
1c002256 g     F .text	00000028 fiprintf
1c0024ea g     F .text	000002a8 _vfiprintf_r
1c003020 g     F .text	0000006a _fwalk_reent
1c001478 g     F .text	0000000a _kill
10000010 g       .data_tiny_l1	00000000 __l1_preload_start
10000010 g       .l1cluster_g	00000000 __printf_lock_ptr_l1
1c0084b0 g     O .rodata	00000020 __sf_fake_stdout
1c001486 g     F .text	00000004 _read
1c001428 g     F .text	0000003c _exit
1c0030e6 g     F .text	000000a0 __smakebuf_r
1c000880 g       .text	00000000 _stext
1c0012d4 g     F .text	00000032 vTaskExitCritical
1c000e00 g       .text	00000000 pxPortInitialiseStack
1c0032ac g     F .text	00000270 _printf_i
1c0087fc g     O .bss	00000004 __malloc_sbrk_start
1c001c00 g       .text	00000000 __clic_vector_table
1c010000 g       .l2_data	00000000 __cluster_text_end
1c0087f8 g     O .bss	00000004 __malloc_free_list
1c0024ea g     F .text	000002a8 _vfprintf_r
1c0036ec g       .text	00000000 _endtext
1c002948 g     F .text	0000000c raise
1c001424 g     F .text	00000004 _close
10000020 g       .l1cluster_g	00000000 __l1_cluster_g_end



Disassembly of section .vectors:
vector_table():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:33
#ifdef CONFIG_CLIC
/* clic specific vector table */
.section .vectors, "ax"
.option norvc
vector_table:
	j freertos_risc_v_trap_handler
1c000400 <__irq_vector_base> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:34
	j freertos_risc_v_trap_handler
1c000404 <__irq_vector_base+0x4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:35
	j freertos_risc_v_trap_handler
1c000408 <__irq_vector_base+0x8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:36
	j freertos_risc_v_trap_handler
1c00040c <__irq_vector_base+0xc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:37
	j freertos_risc_v_trap_handler
1c000410 <__irq_vector_base+0x10> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:38
	j freertos_risc_v_trap_handler
1c000414 <__irq_vector_base+0x14> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:39
	j freertos_risc_v_trap_handler
1c000418 <__irq_vector_base+0x18> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:40
	j freertos_risc_v_trap_handler
1c00041c <__irq_vector_base+0x1c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:41
	j freertos_risc_v_trap_handler
1c000420 <__irq_vector_base+0x20> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:42
	j freertos_risc_v_trap_handler
1c000424 <__irq_vector_base+0x24> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:43
	j freertos_risc_v_trap_handler
1c000428 <__irq_vector_base+0x28> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:44
	j freertos_risc_v_trap_handler
1c00042c <__irq_vector_base+0x2c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:45
	j freertos_risc_v_trap_handler
1c000430 <__irq_vector_base+0x30> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:46
	j freertos_risc_v_trap_handler
1c000434 <__irq_vector_base+0x34> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:47
	j freertos_risc_v_trap_handler
1c000438 <__irq_vector_base+0x38> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:48
	j freertos_risc_v_trap_handler
1c00043c <__irq_vector_base+0x3c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:49
	j freertos_risc_v_trap_handler
1c000440 <__irq_vector_base+0x40> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:50
	j freertos_risc_v_trap_handler
1c000444 <__irq_vector_base+0x44> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:51
	j freertos_risc_v_trap_handler
1c000448 <__irq_vector_base+0x48> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:52
	j freertos_risc_v_trap_handler
1c00044c <__irq_vector_base+0x4c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:53
	j freertos_risc_v_trap_handler
1c000450 <__irq_vector_base+0x50> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:54
	j freertos_risc_v_trap_handler
1c000454 <__irq_vector_base+0x54> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:55
	j freertos_risc_v_trap_handler
1c000458 <__irq_vector_base+0x58> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:56
	j freertos_risc_v_trap_handler
1c00045c <__irq_vector_base+0x5c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:57
	j freertos_risc_v_trap_handler
1c000460 <__irq_vector_base+0x60> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:58
	j freertos_risc_v_trap_handler
1c000464 <__irq_vector_base+0x64> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:59
	j freertos_risc_v_trap_handler
1c000468 <__irq_vector_base+0x68> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:60
	j freertos_risc_v_trap_handler
1c00046c <__irq_vector_base+0x6c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:61
	j freertos_risc_v_trap_handler
1c000470 <__irq_vector_base+0x70> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:62
	j freertos_risc_v_trap_handler
1c000474 <__irq_vector_base+0x74> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:63
	j freertos_risc_v_trap_handler
1c000478 <__irq_vector_base+0x78> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:64
	j freertos_risc_v_trap_handler
1c00047c <__irq_vector_base+0x7c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:65
	j freertos_risc_v_trap_handler
1c000480 <__irq_vector_base+0x80> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:66
	j freertos_risc_v_trap_handler
1c000484 <__irq_vector_base+0x84> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:67
	j freertos_risc_v_trap_handler
1c000488 <__irq_vector_base+0x88> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:68
	j freertos_risc_v_trap_handler
1c00048c <__irq_vector_base+0x8c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:69
	j freertos_risc_v_trap_handler
1c000490 <__irq_vector_base+0x90> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:70
	j freertos_risc_v_trap_handler
1c000494 <__irq_vector_base+0x94> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:71
	j freertos_risc_v_trap_handler
1c000498 <__irq_vector_base+0x98> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:72
	j freertos_risc_v_trap_handler
1c00049c <__irq_vector_base+0x9c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:73
	j freertos_risc_v_trap_handler
1c0004a0 <__irq_vector_base+0xa0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:74
	j freertos_risc_v_trap_handler
1c0004a4 <__irq_vector_base+0xa4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:75
	j freertos_risc_v_trap_handler
1c0004a8 <__irq_vector_base+0xa8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:76
	j freertos_risc_v_trap_handler
1c0004ac <__irq_vector_base+0xac> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:77
	j freertos_risc_v_trap_handler
1c0004b0 <__irq_vector_base+0xb0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:78
	j freertos_risc_v_trap_handler
1c0004b4 <__irq_vector_base+0xb4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:79
	j freertos_risc_v_trap_handler
1c0004b8 <__irq_vector_base+0xb8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:80
	j freertos_risc_v_trap_handler
1c0004bc <__irq_vector_base+0xbc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:81
	j freertos_risc_v_trap_handler
1c0004c0 <__irq_vector_base+0xc0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:82
	j freertos_risc_v_trap_handler
1c0004c4 <__irq_vector_base+0xc4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:83
	j freertos_risc_v_trap_handler
1c0004c8 <__irq_vector_base+0xc8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:84
	j freertos_risc_v_trap_handler
1c0004cc <__irq_vector_base+0xcc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:85
	j freertos_risc_v_trap_handler
1c0004d0 <__irq_vector_base+0xd0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:86
	j freertos_risc_v_trap_handler
1c0004d4 <__irq_vector_base+0xd4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:87
	j freertos_risc_v_trap_handler
1c0004d8 <__irq_vector_base+0xd8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:88
	j freertos_risc_v_trap_handler
1c0004dc <__irq_vector_base+0xdc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:89
	j freertos_risc_v_trap_handler
1c0004e0 <__irq_vector_base+0xe0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:90
	j freertos_risc_v_trap_handler
1c0004e4 <__irq_vector_base+0xe4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:91
	j freertos_risc_v_trap_handler
1c0004e8 <__irq_vector_base+0xe8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:92
	j freertos_risc_v_trap_handler
1c0004ec <__irq_vector_base+0xec> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:93
	j freertos_risc_v_trap_handler
1c0004f0 <__irq_vector_base+0xf0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:94
	j freertos_risc_v_trap_handler
1c0004f4 <__irq_vector_base+0xf4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:95
	j freertos_risc_v_trap_handler
1c0004f8 <__irq_vector_base+0xf8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:96
	j freertos_risc_v_trap_handler
1c0004fc <__irq_vector_base+0xfc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:97
	j freertos_risc_v_trap_handler
1c000500 <__irq_vector_base+0x100> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:98
	j freertos_risc_v_trap_handler
1c000504 <__irq_vector_base+0x104> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:99
	j freertos_risc_v_trap_handler
1c000508 <__irq_vector_base+0x108> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:100
	j freertos_risc_v_trap_handler
1c00050c <__irq_vector_base+0x10c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:101
	j freertos_risc_v_trap_handler
1c000510 <__irq_vector_base+0x110> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:102
	j freertos_risc_v_trap_handler
1c000514 <__irq_vector_base+0x114> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:103
	j freertos_risc_v_trap_handler
1c000518 <__irq_vector_base+0x118> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:104
	j freertos_risc_v_trap_handler
1c00051c <__irq_vector_base+0x11c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:105
	j freertos_risc_v_trap_handler
1c000520 <__irq_vector_base+0x120> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:106
	j freertos_risc_v_trap_handler
1c000524 <__irq_vector_base+0x124> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:107
	j freertos_risc_v_trap_handler
1c000528 <__irq_vector_base+0x128> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:108
	j freertos_risc_v_trap_handler
1c00052c <__irq_vector_base+0x12c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:109
	j freertos_risc_v_trap_handler
1c000530 <__irq_vector_base+0x130> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:110
	j freertos_risc_v_trap_handler
1c000534 <__irq_vector_base+0x134> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:111
	j freertos_risc_v_trap_handler
1c000538 <__irq_vector_base+0x138> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:112
	j freertos_risc_v_trap_handler
1c00053c <__irq_vector_base+0x13c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:113
	j freertos_risc_v_trap_handler
1c000540 <__irq_vector_base+0x140> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:114
	j freertos_risc_v_trap_handler
1c000544 <__irq_vector_base+0x144> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:115
	j freertos_risc_v_trap_handler
1c000548 <__irq_vector_base+0x148> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:116
	j freertos_risc_v_trap_handler
1c00054c <__irq_vector_base+0x14c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:117
	j freertos_risc_v_trap_handler
1c000550 <__irq_vector_base+0x150> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:118
	j freertos_risc_v_trap_handler
1c000554 <__irq_vector_base+0x154> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:119
	j freertos_risc_v_trap_handler
1c000558 <__irq_vector_base+0x158> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:120
	j freertos_risc_v_trap_handler
1c00055c <__irq_vector_base+0x15c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:121
	j freertos_risc_v_trap_handler
1c000560 <__irq_vector_base+0x160> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:122
	j freertos_risc_v_trap_handler
1c000564 <__irq_vector_base+0x164> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:123
	j freertos_risc_v_trap_handler
1c000568 <__irq_vector_base+0x168> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:124
	j freertos_risc_v_trap_handler
1c00056c <__irq_vector_base+0x16c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:125
	j freertos_risc_v_trap_handler
1c000570 <__irq_vector_base+0x170> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:126
	j freertos_risc_v_trap_handler
1c000574 <__irq_vector_base+0x174> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:127
	j freertos_risc_v_trap_handler
1c000578 <__irq_vector_base+0x178> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:128
	j freertos_risc_v_trap_handler
1c00057c <__irq_vector_base+0x17c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:129
	j freertos_risc_v_trap_handler
1c000580 <__irq_vector_base+0x180> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:130
	j freertos_risc_v_trap_handler
1c000584 <__irq_vector_base+0x184> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:131
	j freertos_risc_v_trap_handler
1c000588 <__irq_vector_base+0x188> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:132
	j freertos_risc_v_trap_handler
1c00058c <__irq_vector_base+0x18c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:133
	j freertos_risc_v_trap_handler
1c000590 <__irq_vector_base+0x190> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:134
	j freertos_risc_v_trap_handler
1c000594 <__irq_vector_base+0x194> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:135
	j freertos_risc_v_trap_handler
1c000598 <__irq_vector_base+0x198> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:136
	j freertos_risc_v_trap_handler
1c00059c <__irq_vector_base+0x19c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:137
	j freertos_risc_v_trap_handler
1c0005a0 <__irq_vector_base+0x1a0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:138
	j freertos_risc_v_trap_handler
1c0005a4 <__irq_vector_base+0x1a4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:139
	j freertos_risc_v_trap_handler
1c0005a8 <__irq_vector_base+0x1a8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:140
	j freertos_risc_v_trap_handler
1c0005ac <__irq_vector_base+0x1ac> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:141
	j freertos_risc_v_trap_handler
1c0005b0 <__irq_vector_base+0x1b0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:142
	j freertos_risc_v_trap_handler
1c0005b4 <__irq_vector_base+0x1b4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:143
	j freertos_risc_v_trap_handler
1c0005b8 <__irq_vector_base+0x1b8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:144
	j freertos_risc_v_trap_handler
1c0005bc <__irq_vector_base+0x1bc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:145
	j freertos_risc_v_trap_handler
1c0005c0 <__irq_vector_base+0x1c0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:146
	j freertos_risc_v_trap_handler
1c0005c4 <__irq_vector_base+0x1c4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:147
	j freertos_risc_v_trap_handler
1c0005c8 <__irq_vector_base+0x1c8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:148
	j freertos_risc_v_trap_handler
1c0005cc <__irq_vector_base+0x1cc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:149
	j freertos_risc_v_trap_handler
1c0005d0 <__irq_vector_base+0x1d0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:150
	j freertos_risc_v_trap_handler
1c0005d4 <__irq_vector_base+0x1d4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:151
	j freertos_risc_v_trap_handler
1c0005d8 <__irq_vector_base+0x1d8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:152
	j freertos_risc_v_trap_handler
1c0005dc <__irq_vector_base+0x1dc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:153
	j freertos_risc_v_trap_handler
1c0005e0 <__irq_vector_base+0x1e0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:154
	j freertos_risc_v_trap_handler
1c0005e4 <__irq_vector_base+0x1e4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:155
	j freertos_risc_v_trap_handler
1c0005e8 <__irq_vector_base+0x1e8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:156
	j freertos_risc_v_trap_handler
1c0005ec <__irq_vector_base+0x1ec> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:157
	j freertos_risc_v_trap_handler
1c0005f0 <__irq_vector_base+0x1f0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:158
	j freertos_risc_v_trap_handler
1c0005f4 <__irq_vector_base+0x1f4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:159
	j freertos_risc_v_trap_handler
1c0005f8 <__irq_vector_base+0x1f8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:160
	j freertos_risc_v_trap_handler
1c0005fc <__irq_vector_base+0x1fc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:161
	j freertos_risc_v_trap_handler
1c000600 <__irq_vector_base+0x200> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:162
	j freertos_risc_v_trap_handler
1c000604 <__irq_vector_base+0x204> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:163
	j freertos_risc_v_trap_handler
1c000608 <__irq_vector_base+0x208> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:164
	j freertos_risc_v_trap_handler
1c00060c <__irq_vector_base+0x20c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:165
	j freertos_risc_v_trap_handler
1c000610 <__irq_vector_base+0x210> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:166
	j freertos_risc_v_trap_handler
1c000614 <__irq_vector_base+0x214> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:167
	j freertos_risc_v_trap_handler
1c000618 <__irq_vector_base+0x218> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:168
	j freertos_risc_v_trap_handler
1c00061c <__irq_vector_base+0x21c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:169
	j freertos_risc_v_trap_handler
1c000620 <__irq_vector_base+0x220> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:170
	j freertos_risc_v_trap_handler
1c000624 <__irq_vector_base+0x224> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:171
	j freertos_risc_v_trap_handler
1c000628 <__irq_vector_base+0x228> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:172
	j freertos_risc_v_trap_handler
1c00062c <__irq_vector_base+0x22c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:173
	j freertos_risc_v_trap_handler
1c000630 <__irq_vector_base+0x230> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:174
	j freertos_risc_v_trap_handler
1c000634 <__irq_vector_base+0x234> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:175
	j freertos_risc_v_trap_handler
1c000638 <__irq_vector_base+0x238> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:176
	j freertos_risc_v_trap_handler
1c00063c <__irq_vector_base+0x23c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:177
	j freertos_risc_v_trap_handler
1c000640 <__irq_vector_base+0x240> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:178
	j freertos_risc_v_trap_handler
1c000644 <__irq_vector_base+0x244> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:179
	j freertos_risc_v_trap_handler
1c000648 <__irq_vector_base+0x248> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:180
	j freertos_risc_v_trap_handler
1c00064c <__irq_vector_base+0x24c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:181
	j freertos_risc_v_trap_handler
1c000650 <__irq_vector_base+0x250> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:182
	j freertos_risc_v_trap_handler
1c000654 <__irq_vector_base+0x254> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:183
	j freertos_risc_v_trap_handler
1c000658 <__irq_vector_base+0x258> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:184
	j freertos_risc_v_trap_handler
1c00065c <__irq_vector_base+0x25c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:185
	j freertos_risc_v_trap_handler
1c000660 <__irq_vector_base+0x260> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:186
	j freertos_risc_v_trap_handler
1c000664 <__irq_vector_base+0x264> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:187
	j freertos_risc_v_trap_handler
1c000668 <__irq_vector_base+0x268> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:188
	j freertos_risc_v_trap_handler
1c00066c <__irq_vector_base+0x26c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:189
	j freertos_risc_v_trap_handler
1c000670 <__irq_vector_base+0x270> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:190
	j freertos_risc_v_trap_handler
1c000674 <__irq_vector_base+0x274> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:191
	j freertos_risc_v_trap_handler
1c000678 <__irq_vector_base+0x278> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:192
	j freertos_risc_v_trap_handler
1c00067c <__irq_vector_base+0x27c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:193
	j freertos_risc_v_trap_handler
1c000680 <__irq_vector_base+0x280> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:194
	j freertos_risc_v_trap_handler
1c000684 <__irq_vector_base+0x284> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:195
	j freertos_risc_v_trap_handler
1c000688 <__irq_vector_base+0x288> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:196
	j freertos_risc_v_trap_handler
1c00068c <__irq_vector_base+0x28c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:197
	j freertos_risc_v_trap_handler
1c000690 <__irq_vector_base+0x290> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:198
	j freertos_risc_v_trap_handler
1c000694 <__irq_vector_base+0x294> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:199
	j freertos_risc_v_trap_handler
1c000698 <__irq_vector_base+0x298> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:200
	j freertos_risc_v_trap_handler
1c00069c <__irq_vector_base+0x29c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:201
	j freertos_risc_v_trap_handler
1c0006a0 <__irq_vector_base+0x2a0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:202
	j freertos_risc_v_trap_handler
1c0006a4 <__irq_vector_base+0x2a4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:203
	j freertos_risc_v_trap_handler
1c0006a8 <__irq_vector_base+0x2a8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:204
	j freertos_risc_v_trap_handler
1c0006ac <__irq_vector_base+0x2ac> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:205
	j freertos_risc_v_trap_handler
1c0006b0 <__irq_vector_base+0x2b0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:206
	j freertos_risc_v_trap_handler
1c0006b4 <__irq_vector_base+0x2b4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:207
	j freertos_risc_v_trap_handler
1c0006b8 <__irq_vector_base+0x2b8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:208
	j freertos_risc_v_trap_handler
1c0006bc <__irq_vector_base+0x2bc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:209
	j freertos_risc_v_trap_handler
1c0006c0 <__irq_vector_base+0x2c0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:210
	j freertos_risc_v_trap_handler
1c0006c4 <__irq_vector_base+0x2c4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:211
	j freertos_risc_v_trap_handler
1c0006c8 <__irq_vector_base+0x2c8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:212
	j freertos_risc_v_trap_handler
1c0006cc <__irq_vector_base+0x2cc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:213
	j freertos_risc_v_trap_handler
1c0006d0 <__irq_vector_base+0x2d0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:214
	j freertos_risc_v_trap_handler
1c0006d4 <__irq_vector_base+0x2d4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:215
	j freertos_risc_v_trap_handler
1c0006d8 <__irq_vector_base+0x2d8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:216
	j freertos_risc_v_trap_handler
1c0006dc <__irq_vector_base+0x2dc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:217
	j freertos_risc_v_trap_handler
1c0006e0 <__irq_vector_base+0x2e0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:218
	j freertos_risc_v_trap_handler
1c0006e4 <__irq_vector_base+0x2e4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:219
	j freertos_risc_v_trap_handler
1c0006e8 <__irq_vector_base+0x2e8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:220
	j freertos_risc_v_trap_handler
1c0006ec <__irq_vector_base+0x2ec> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:221
	j freertos_risc_v_trap_handler
1c0006f0 <__irq_vector_base+0x2f0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:222
	j freertos_risc_v_trap_handler
1c0006f4 <__irq_vector_base+0x2f4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:223
	j freertos_risc_v_trap_handler
1c0006f8 <__irq_vector_base+0x2f8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:224
	j freertos_risc_v_trap_handler
1c0006fc <__irq_vector_base+0x2fc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:225
	j freertos_risc_v_trap_handler
1c000700 <__irq_vector_base+0x300> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:226
	j freertos_risc_v_trap_handler
1c000704 <__irq_vector_base+0x304> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:227
	j freertos_risc_v_trap_handler
1c000708 <__irq_vector_base+0x308> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:228
	j freertos_risc_v_trap_handler
1c00070c <__irq_vector_base+0x30c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:229
	j freertos_risc_v_trap_handler
1c000710 <__irq_vector_base+0x310> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:230
	j freertos_risc_v_trap_handler
1c000714 <__irq_vector_base+0x314> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:231
	j freertos_risc_v_trap_handler
1c000718 <__irq_vector_base+0x318> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:232
	j freertos_risc_v_trap_handler
1c00071c <__irq_vector_base+0x31c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:233
	j freertos_risc_v_trap_handler
1c000720 <__irq_vector_base+0x320> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:234
	j freertos_risc_v_trap_handler
1c000724 <__irq_vector_base+0x324> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:235
	j freertos_risc_v_trap_handler
1c000728 <__irq_vector_base+0x328> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:236
	j freertos_risc_v_trap_handler
1c00072c <__irq_vector_base+0x32c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:237
	j freertos_risc_v_trap_handler
1c000730 <__irq_vector_base+0x330> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:238
	j freertos_risc_v_trap_handler
1c000734 <__irq_vector_base+0x334> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:239
	j freertos_risc_v_trap_handler
1c000738 <__irq_vector_base+0x338> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:240
	j freertos_risc_v_trap_handler
1c00073c <__irq_vector_base+0x33c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:241
	j freertos_risc_v_trap_handler
1c000740 <__irq_vector_base+0x340> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:242
	j freertos_risc_v_trap_handler
1c000744 <__irq_vector_base+0x344> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:243
	j freertos_risc_v_trap_handler
1c000748 <__irq_vector_base+0x348> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:244
	j freertos_risc_v_trap_handler
1c00074c <__irq_vector_base+0x34c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:245
	j freertos_risc_v_trap_handler
1c000750 <__irq_vector_base+0x350> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:246
	j freertos_risc_v_trap_handler
1c000754 <__irq_vector_base+0x354> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:247
	j freertos_risc_v_trap_handler
1c000758 <__irq_vector_base+0x358> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:248
	j freertos_risc_v_trap_handler
1c00075c <__irq_vector_base+0x35c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:249
	j freertos_risc_v_trap_handler
1c000760 <__irq_vector_base+0x360> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:250
	j freertos_risc_v_trap_handler
1c000764 <__irq_vector_base+0x364> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:251
	j freertos_risc_v_trap_handler
1c000768 <__irq_vector_base+0x368> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:252
	j freertos_risc_v_trap_handler
1c00076c <__irq_vector_base+0x36c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:253
	j freertos_risc_v_trap_handler
1c000770 <__irq_vector_base+0x370> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:254
	j freertos_risc_v_trap_handler
1c000774 <__irq_vector_base+0x374> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:255
	j freertos_risc_v_trap_handler
1c000778 <__irq_vector_base+0x378> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:256
	j freertos_risc_v_trap_handler
1c00077c <__irq_vector_base+0x37c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:257
	j freertos_risc_v_trap_handler
1c000780 <__irq_vector_base+0x380> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:258
	j freertos_risc_v_trap_handler
1c000784 <__irq_vector_base+0x384> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:259
	j freertos_risc_v_trap_handler
1c000788 <__irq_vector_base+0x388> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:260
	j freertos_risc_v_trap_handler
1c00078c <__irq_vector_base+0x38c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:261
	j freertos_risc_v_trap_handler
1c000790 <__irq_vector_base+0x390> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:262
	j freertos_risc_v_trap_handler
1c000794 <__irq_vector_base+0x394> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:263
	j freertos_risc_v_trap_handler
1c000798 <__irq_vector_base+0x398> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:264
	j freertos_risc_v_trap_handler
1c00079c <__irq_vector_base+0x39c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:265
	j freertos_risc_v_trap_handler
1c0007a0 <__irq_vector_base+0x3a0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:266
	j freertos_risc_v_trap_handler
1c0007a4 <__irq_vector_base+0x3a4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:267
	j freertos_risc_v_trap_handler
1c0007a8 <__irq_vector_base+0x3a8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:268
	j freertos_risc_v_trap_handler
1c0007ac <__irq_vector_base+0x3ac> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:269
	j freertos_risc_v_trap_handler
1c0007b0 <__irq_vector_base+0x3b0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:270
	j freertos_risc_v_trap_handler
1c0007b4 <__irq_vector_base+0x3b4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:271
	j freertos_risc_v_trap_handler
1c0007b8 <__irq_vector_base+0x3b8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:272
	j freertos_risc_v_trap_handler
1c0007bc <__irq_vector_base+0x3bc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:273
	j freertos_risc_v_trap_handler
1c0007c0 <__irq_vector_base+0x3c0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:274
	j freertos_risc_v_trap_handler
1c0007c4 <__irq_vector_base+0x3c4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:275
	j freertos_risc_v_trap_handler
1c0007c8 <__irq_vector_base+0x3c8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:276
	j freertos_risc_v_trap_handler
1c0007cc <__irq_vector_base+0x3cc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:277
	j freertos_risc_v_trap_handler
1c0007d0 <__irq_vector_base+0x3d0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:278
	j freertos_risc_v_trap_handler
1c0007d4 <__irq_vector_base+0x3d4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:279
	j freertos_risc_v_trap_handler
1c0007d8 <__irq_vector_base+0x3d8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:280
	j freertos_risc_v_trap_handler
1c0007dc <__irq_vector_base+0x3dc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:281
	j freertos_risc_v_trap_handler
1c0007e0 <__irq_vector_base+0x3e0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:282
	j freertos_risc_v_trap_handler
1c0007e4 <__irq_vector_base+0x3e4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:283
	j freertos_risc_v_trap_handler
1c0007e8 <__irq_vector_base+0x3e8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:284
	j freertos_risc_v_trap_handler
1c0007ec <__irq_vector_base+0x3ec> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:285
	j freertos_risc_v_trap_handler
1c0007f0 <__irq_vector_base+0x3f0> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:286
	j freertos_risc_v_trap_handler
1c0007f4 <__irq_vector_base+0x3f4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:287
	j freertos_risc_v_trap_handler
1c0007f8 <__irq_vector_base+0x3f8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/vectors.S:288
	j freertos_risc_v_trap_handler
1c0007fc <__irq_vector_base+0x3fc> j	1c000900 <freertos_risc_v_trap_handler>

Disassembly of section .text:
_start():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:39

_start:
/* initialize global pointer */
.option push
.option norelax
1:	auipc gp, %pcrel_hi(__global_pointer$)
1c000880 <_start> auipc	gp,0x8
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:40
	addi  gp, gp, %pcrel_lo(1b)
1c000884 <_start+0x4> addi	gp,gp,1232 # 1c008d50 <__global_pointer$>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:43
.option pop

        csrr a0, 0xf14 /* Cluster ID */
1c000888 <_start+0x8> csrr	a0,mhartid
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:44
        andi a1, a0, 0x1f       /* Core ID */
1c00088c <_start+0xc> andi	a1,a0,31
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:45
        srli a0, a0, 5
1c000890 <_start+0x10> srli	a0,a0,0x5
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:48

#if defined(CONFIG_CLUSTER)
        li a2, 31 /* FC_Cluster ID */
1c000892 <_start+0x12> li	a2,31
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:51
        //bne a2, a0, cl_cluster_exec_loop
        .extern cluster_exec_loop
        bne a2, a0, cluster_exec_loop
1c000894 <_start+0x14> beq	a2,a0,1c00089c <_start+0x1c>
1c000898 <_start+0x18> j	1c000e42 <cluster_exec_loop>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:54
#endif
/* initialize stack pointer */
	la sp, __stack_top
1c00089c <_start+0x1c> auipc	sp,0xd
1c0008a0 <_start+0x20> addi	sp,sp,-1148 # 1c00d420 <__freertos_irq_stack_top>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:57

/* set vector table address */
	la a0, __vector_start
1c0008a4 <_start+0x24> auipc	a0,0x0
1c0008a8 <_start+0x28> addi	a0,a0,-1188 # 1c000400 <__irq_vector_base>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:58
	or a0, a0, 1 /* enable vectored mode (hardcoded anyway for RI5CY) */
1c0008ac <_start+0x2c> ori	a0,a0,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:59
	csrw mtvec, a0
1c0008b0 <_start+0x30> csrw	mtvec,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:61
#ifdef CONFIG_CLIC
	csrw 0x307, a0 /* mtvt=0x307 */ /* enable vectored mode TODO: should be clic mode */
1c0008b4 <_start+0x34> csrw	0x307,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:65
#endif

/* clear the bss segment */
	la t0, __bss_start
1c0008b8 <_start+0x38> auipc	t0,0x8
1c0008bc <_start+0x3c> addi	t0,t0,-760 # 1c0085c0 <pxReadyTasksLists>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:66
        la t1, __bss_end
1c0008c0 <_start+0x40> addi	t1,gp,-304 # 1c008c20 <ucHeap>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:68
1:
	sw zero,0(t0)
1c0008c4 <_start+0x44> sw	zero,0(t0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:69
	addi t0, t0, 4
1c0008c8 <_start+0x48> addi	t0,t0,4
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:70
	bltu t0, t1, 1b
1c0008ca <_start+0x4a> bltu	t0,t1,1c0008c4 <_start+0x44>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:74

/* new-style constructors and destructors */
#if defined(__PULP_USE_LIBC)
	la a0, __libc_fini_array
1c0008ce <_start+0x4e> auipc	a0,0x2
1c0008d2 <_start+0x52> addi	a0,a0,-1714 # 1c00221c <__libc_fini_array>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:75
	call atexit
1c0008d6 <_start+0x56> jal	ra,1c0021e4 <atexit>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:76
	call __libc_init_array
1c0008da <_start+0x5a> jal	ra,1c00227e <__libc_init_array>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:80
#endif

/* call main */
	lw a0, 0(sp)                    /* a0 = argc */
1c0008de <_start+0x5e> lw	a0,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:81
	addi a1, sp, __SIZEOF_POINTER__ /* a1 = argv */
1c0008e0 <_start+0x60> addi	a1,sp,4
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:82
	li a2, 0                        /* a2 = envp = NULL */
1c0008e2 <_start+0x62> li	a2,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:83
	call main
1c0008e4 <_start+0x64> jal	ra,1c00202c <main>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:84
	tail exit
1c0008e8 <_start+0x68> j	1c0021f0 <exit>
_init():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/crt0.S:96
.type   _fini, @function
_init:
_fini:
 /* These don't have to do anything since we use init_array/fini_array. Prevent
    missing symbol error */
	ret
1c0008ec <_fini> ret
	...
freertos_risc_v_trap_handler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:124
/*-----------------------------------------------------------*/

.align 8
.func
freertos_risc_v_trap_handler:
	addi sp, sp, -portCONTEXT_SIZE
1c000900 <freertos_risc_v_trap_handler> addi	sp,sp,-120
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:125
	store_x x1, 1 * portWORD_SIZE( sp )
1c000904 <freertos_risc_v_trap_handler+0x4> sw	ra,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:126
	store_x x5, 2 * portWORD_SIZE( sp )
1c000906 <freertos_risc_v_trap_handler+0x6> sw	t0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:127
	store_x x6, 3 * portWORD_SIZE( sp )
1c000908 <freertos_risc_v_trap_handler+0x8> sw	t1,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:128
	store_x x7, 4 * portWORD_SIZE( sp )
1c00090a <freertos_risc_v_trap_handler+0xa> sw	t2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:129
	store_x x8, 5 * portWORD_SIZE( sp )
1c00090c <freertos_risc_v_trap_handler+0xc> sw	s0,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:130
	store_x x9, 6 * portWORD_SIZE( sp )
1c00090e <freertos_risc_v_trap_handler+0xe> sw	s1,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:131
	store_x x10, 7 * portWORD_SIZE( sp )
1c000910 <freertos_risc_v_trap_handler+0x10> sw	a0,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:132
	store_x x11, 8 * portWORD_SIZE( sp )
1c000912 <freertos_risc_v_trap_handler+0x12> sw	a1,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:133
	store_x x12, 9 * portWORD_SIZE( sp )
1c000914 <freertos_risc_v_trap_handler+0x14> sw	a2,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:134
	store_x x13, 10 * portWORD_SIZE( sp )
1c000916 <freertos_risc_v_trap_handler+0x16> sw	a3,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:135
	store_x x14, 11 * portWORD_SIZE( sp )
1c000918 <freertos_risc_v_trap_handler+0x18> sw	a4,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:136
	store_x x15, 12 * portWORD_SIZE( sp )
1c00091a <freertos_risc_v_trap_handler+0x1a> sw	a5,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:138
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	store_x x16, 13 * portWORD_SIZE( sp )
1c00091c <freertos_risc_v_trap_handler+0x1c> sw	a6,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:139
	store_x x17, 14 * portWORD_SIZE( sp )
1c00091e <freertos_risc_v_trap_handler+0x1e> sw	a7,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:140
	store_x x18, 15 * portWORD_SIZE( sp )
1c000920 <freertos_risc_v_trap_handler+0x20> sw	s2,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:141
	store_x x19, 16 * portWORD_SIZE( sp )
1c000922 <freertos_risc_v_trap_handler+0x22> sw	s3,64(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:142
	store_x x20, 17 * portWORD_SIZE( sp )
1c000924 <freertos_risc_v_trap_handler+0x24> sw	s4,68(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:143
	store_x x21, 18 * portWORD_SIZE( sp )
1c000926 <freertos_risc_v_trap_handler+0x26> sw	s5,72(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:144
	store_x x22, 19 * portWORD_SIZE( sp )
1c000928 <freertos_risc_v_trap_handler+0x28> sw	s6,76(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:145
	store_x x23, 20 * portWORD_SIZE( sp )
1c00092a <freertos_risc_v_trap_handler+0x2a> sw	s7,80(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:146
	store_x x24, 21 * portWORD_SIZE( sp )
1c00092c <freertos_risc_v_trap_handler+0x2c> sw	s8,84(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:147
	store_x x25, 22 * portWORD_SIZE( sp )
1c00092e <freertos_risc_v_trap_handler+0x2e> sw	s9,88(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:148
	store_x x26, 23 * portWORD_SIZE( sp )
1c000930 <freertos_risc_v_trap_handler+0x30> sw	s10,92(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:149
	store_x x27, 24 * portWORD_SIZE( sp )
1c000932 <freertos_risc_v_trap_handler+0x32> sw	s11,96(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:150
	store_x x28, 25 * portWORD_SIZE( sp )
1c000934 <freertos_risc_v_trap_handler+0x34> sw	t3,100(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:151
	store_x x29, 26 * portWORD_SIZE( sp )
1c000936 <freertos_risc_v_trap_handler+0x36> sw	t4,104(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:152
	store_x x30, 27 * portWORD_SIZE( sp )
1c000938 <freertos_risc_v_trap_handler+0x38> sw	t5,108(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:153
	store_x x31, 28 * portWORD_SIZE( sp )
1c00093a <freertos_risc_v_trap_handler+0x3a> sw	t6,112(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:156
#endif
	
	csrr t0, mstatus					/* Required for MPIE bit. */
1c00093c <freertos_risc_v_trap_handler+0x3c> csrr	t0,mstatus
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:157
	store_x t0, 29 * portWORD_SIZE( sp )
1c000940 <freertos_risc_v_trap_handler+0x40> sw	t0,116(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:159
#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmSAVE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to save any registers unique to the RISC-V implementation. */
1c000942 <freertos_risc_v_trap_handler+0x42> addi	sp,sp,-24
1c000944 <freertos_risc_v_trap_handler+0x44> csrr	t0,lpstart0
1c000948 <freertos_risc_v_trap_handler+0x48> csrr	t1,lpend0
1c00094c <freertos_risc_v_trap_handler+0x4c> csrr	t2,lpcount0
1c000950 <freertos_risc_v_trap_handler+0x50> csrr	t3,lpstart1
1c000954 <freertos_risc_v_trap_handler+0x54> csrr	t4,lpend1
1c000958 <freertos_risc_v_trap_handler+0x58> csrr	t5,lpcount1
1c00095c <freertos_risc_v_trap_handler+0x5c> sw	t0,4(sp)
1c00095e <freertos_risc_v_trap_handler+0x5e> sw	t1,8(sp)
1c000960 <freertos_risc_v_trap_handler+0x60> sw	t2,12(sp)
1c000962 <freertos_risc_v_trap_handler+0x62> sw	t3,16(sp)
1c000964 <freertos_risc_v_trap_handler+0x64> sw	t4,20(sp)
1c000966 <freertos_risc_v_trap_handler+0x66> sw	t5,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:162
#endif

	load_x  t0, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000968 <freertos_risc_v_trap_handler+0x68> auipc	t0,0x8
1c00096c <freertos_risc_v_trap_handler+0x6c> lw	t0,-420(t0) # 1c0087c4 <pxCurrentTCB>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:163
	store_x  sp, 0( t0 )				/* Write sp to first TCB member. */
1c000970 <freertos_risc_v_trap_handler+0x70> sw	sp,0(t0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:165

	csrr a0, mcause
1c000974 <freertos_risc_v_trap_handler+0x74> csrr	a0,mcause
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:166
	csrr a1, mepc
1c000978 <freertos_risc_v_trap_handler+0x78> csrr	a1,mepc
test_if_asynchronous():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:169

test_if_asynchronous:
	srli a2, a0, __riscv_xlen - 1		/* MSB of mcause is 1 if handing an asynchronous interrupt - shift to LSB to clear other bits. */
1c00097c <test_if_asynchronous> srli	a2,a0,0x1f
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:170
	beq a2, x0, handle_synchronous		/* Branch past interrupt handing if not asynchronous. */
1c000980 <test_if_asynchronous+0x4> beqz	a2,1c000992 <handle_synchronous>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:171
	store_x a1, 0( sp )					/* Asynch so save unmodified exception return address. */
1c000982 <test_if_asynchronous+0x6> sw	a1,0(sp)
handle_asynchronous():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:229
		addi t1, t1, 4					/* 0x80000007 + 4 = 0x8000000b == Machine external interrupt. */
		bne a0, t1, as_yet_unhandled	/* Something as yet unhandled. */

#endif /* portasmHAS_MTIME */

	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
1c000984 <handle_asynchronous> auipc	sp,0x8
1c000988 <handle_asynchronous+0x4> lw	sp,-972(sp) # 1c0085b8 <xISRStackTop>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:230
	jal portasmHANDLE_INTERRUPT			/* Jump to the interrupt handler if there is no CLINT or if there is a CLINT and it has been determined that an external interrupt is pending. */
1c00098c <handle_asynchronous+0x8> jal	ra,1c0015a6 <vSystemIrqHandler>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:231
	j processed_source
1c000990 <handle_asynchronous+0xc> j	1c0009c2 <processed_source>
handle_synchronous():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:234

handle_synchronous:
	addi a1, a1, 4						/* Synchronous so updated exception return address to the instruction after the instruction that generated the exeption. */
1c000992 <handle_synchronous> addi	a1,a1,4
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:235
	store_x a1, 0( sp )					/* Save updated exception return address. */
1c000994 <handle_synchronous+0x2> sw	a1,0(sp)
test_if_environment_call():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:238

test_if_environment_call:
	li t0, 11 							/* 11 == environment call. */
1c000996 <test_if_environment_call> li	t0,11
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:239
	andi  a0, a0, 0x7ff					/* with the CLIC the lower 12 bits are the exception code and upper bits might be clobbered mpil, mie etc. */	
1c000998 <test_if_environment_call+0x2> andi	a0,a0,2047
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:240
	bne a0, t0, is_exception			/* Not an M environment call, so some other exception. */
1c00099c <test_if_environment_call+0x6> bne	a0,t0,1c0009ae <is_exception>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:241
	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
1c0009a0 <test_if_environment_call+0xa> auipc	sp,0x8
1c0009a4 <test_if_environment_call+0xe> lw	sp,-1000(sp) # 1c0085b8 <xISRStackTop>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:242
	jal vTaskSwitchContext
1c0009a8 <test_if_environment_call+0x12> jal	ra,1c00118c <vTaskSwitchContext>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:243
	j processed_source
1c0009ac <test_if_environment_call+0x16> j	1c0009c2 <processed_source>
is_exception():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:246

is_exception:
	csrr t0, mcause						/* For viewing in the debugger only. */
1c0009ae <is_exception> csrr	t0,mcause
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:247
	csrr t1, mepc						/* For viewing in the debugger only */
1c0009b2 <is_exception+0x4> csrr	t1,mepc
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:248
	csrr t2, mstatus
1c0009b6 <is_exception+0x8> csrr	t2,mstatus
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:249
	j is_exception						/* No other exceptions handled yet. */
1c0009ba <is_exception+0xc> j	1c0009ae <is_exception>
as_yet_unhandled():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:252

as_yet_unhandled:
	csrr t0, mcause						/* For viewing in the debugger only. */
1c0009bc <as_yet_unhandled> csrr	t0,mcause
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:253
	j as_yet_unhandled
1c0009c0 <as_yet_unhandled+0x4> j	1c0009bc <as_yet_unhandled>
processed_source():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:256

processed_source:
	load_x  t1, pxCurrentTCB			/* Load pxCurrentTCB. */
1c0009c2 <processed_source> auipc	t1,0x8
1c0009c6 <processed_source+0x4> lw	t1,-510(t1) # 1c0087c4 <pxCurrentTCB>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:257
	load_x  sp, 0( t1 )				 	/* Read sp from first TCB member. */
1c0009ca <processed_source+0x8> lw	sp,0(t1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:260

	/* Load mret with the address of the next instruction in the task to run next. */
	load_x t0, 0( sp )
1c0009ce <processed_source+0xc> lw	t0,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:261
	csrw mepc, t0
1c0009d0 <processed_source+0xe> csrw	mepc,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:264

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c0009d4 <processed_source+0x12> lw	t0,4(sp)
1c0009d6 <processed_source+0x14> lw	t1,8(sp)
1c0009d8 <processed_source+0x16> lw	t2,12(sp)
1c0009da <processed_source+0x18> lw	t3,16(sp)
1c0009dc <processed_source+0x1a> lw	t4,20(sp)
1c0009de <processed_source+0x1c> lw	t5,24(sp)
1c0009e0 <processed_source+0x1e> csrw	lpstart0,t0
1c0009e4 <processed_source+0x22> csrw	lpend0,t1
1c0009e8 <processed_source+0x26> csrw	lpcount0,t2
1c0009ec <processed_source+0x2a> csrw	lpstart1,t3
1c0009f0 <processed_source+0x2e> csrw	lpend1,t4
1c0009f4 <processed_source+0x32> csrw	lpcount1,t5
1c0009f8 <processed_source+0x36> addi	sp,sp,24
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:268
#endif

	/* Load mstatus with the interrupt enable bits used by the task. */
	load_x  t0, 29 * portWORD_SIZE( sp )
1c0009fa <processed_source+0x38> lw	t0,116(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:269
	csrw mstatus, t0						/* Required for MPIE bit. */
1c0009fc <processed_source+0x3a> csrw	mstatus,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:271

	load_x  x1, 1 * portWORD_SIZE( sp )
1c000a00 <processed_source+0x3e> lw	ra,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:272
	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
1c000a02 <processed_source+0x40> lw	t0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:273
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c000a04 <processed_source+0x42> lw	t1,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:274
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c000a06 <processed_source+0x44> lw	t2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:275
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c000a08 <processed_source+0x46> lw	s0,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:276
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c000a0a <processed_source+0x48> lw	s1,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:277
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c000a0c <processed_source+0x4a> lw	a0,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:278
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c000a0e <processed_source+0x4c> lw	a1,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:279
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c000a10 <processed_source+0x4e> lw	a2,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:280
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c000a12 <processed_source+0x50> lw	a3,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:281
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c000a14 <processed_source+0x52> lw	a4,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:282
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c000a16 <processed_source+0x54> lw	a5,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:284
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c000a18 <processed_source+0x56> lw	a6,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:285
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c000a1a <processed_source+0x58> lw	a7,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:286
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c000a1c <processed_source+0x5a> lw	s2,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:287
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c000a1e <processed_source+0x5c> lw	s3,64(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:288
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c000a20 <processed_source+0x5e> lw	s4,68(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:289
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c000a22 <processed_source+0x60> lw	s5,72(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:290
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c000a24 <processed_source+0x62> lw	s6,76(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:291
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c000a26 <processed_source+0x64> lw	s7,80(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:292
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c000a28 <processed_source+0x66> lw	s8,84(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:293
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c000a2a <processed_source+0x68> lw	s9,88(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:294
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c000a2c <processed_source+0x6a> lw	s10,92(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:295
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c000a2e <processed_source+0x6c> lw	s11,96(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:296
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c000a30 <processed_source+0x6e> lw	t3,100(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:297
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c000a32 <processed_source+0x70> lw	t4,104(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:298
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c000a34 <processed_source+0x72> lw	t5,108(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:299
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c000a36 <processed_source+0x74> lw	t6,112(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:301
#endif
	addi sp, sp, portCONTEXT_SIZE
1c000a38 <processed_source+0x76> addi	sp,sp,120
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:303

	mret
1c000a3c <processed_source+0x7a> mret
1c000a40 <processed_source+0x7e> nop
1c000a44 <processed_source+0x82> nop
1c000a48 <processed_source+0x86> nop
1c000a4c <processed_source+0x8a> nop
1c000a50 <processed_source+0x8e> nop
1c000a54 <processed_source+0x92> nop
1c000a58 <processed_source+0x96> nop
1c000a5c <processed_source+0x9a> nop
1c000a60 <processed_source+0x9e> nop
1c000a64 <processed_source+0xa2> nop
1c000a68 <processed_source+0xa6> nop
1c000a6c <processed_source+0xaa> nop
1c000a70 <processed_source+0xae> nop
1c000a74 <processed_source+0xb2> nop
1c000a78 <processed_source+0xb6> nop
1c000a7c <processed_source+0xba> nop
1c000a80 <processed_source+0xbe> nop
1c000a84 <processed_source+0xc2> nop
1c000a88 <processed_source+0xc6> nop
1c000a8c <processed_source+0xca> nop
1c000a90 <processed_source+0xce> nop
1c000a94 <processed_source+0xd2> nop
1c000a98 <processed_source+0xd6> nop
1c000a9c <processed_source+0xda> nop
1c000aa0 <processed_source+0xde> nop
1c000aa4 <processed_source+0xe2> nop
1c000aa8 <processed_source+0xe6> nop
1c000aac <processed_source+0xea> nop
1c000ab0 <processed_source+0xee> nop
1c000ab4 <processed_source+0xf2> nop
1c000ab8 <processed_source+0xf6> nop
1c000abc <processed_source+0xfa> nop
1c000ac0 <processed_source+0xfe> nop
1c000ac4 <processed_source+0x102> nop
1c000ac8 <processed_source+0x106> nop
1c000acc <processed_source+0x10a> nop
1c000ad0 <processed_source+0x10e> nop
1c000ad4 <processed_source+0x112> nop
1c000ad8 <processed_source+0x116> nop
1c000adc <processed_source+0x11a> nop
1c000ae0 <processed_source+0x11e> nop
1c000ae4 <processed_source+0x122> nop
1c000ae8 <processed_source+0x126> nop
1c000aec <processed_source+0x12a> nop
1c000af0 <processed_source+0x12e> nop
1c000af4 <processed_source+0x132> nop
1c000af8 <processed_source+0x136> nop
1c000afc <processed_source+0x13a> nop
freertos_risc_v_ctxt_handler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:311

/* for timer interrupt vectored context switches */
.align 8
.func
freertos_risc_v_ctxt_handler:
	addi sp, sp, -portCONTEXT_SIZE
1c000b00 <freertos_risc_v_ctxt_handler> addi	sp,sp,-120
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:312
	store_x x1, 1 * portWORD_SIZE( sp )
1c000b04 <freertos_risc_v_ctxt_handler+0x4> sw	ra,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:313
	store_x x5, 2 * portWORD_SIZE( sp )
1c000b06 <freertos_risc_v_ctxt_handler+0x6> sw	t0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:314
	store_x x6, 3 * portWORD_SIZE( sp )
1c000b08 <freertos_risc_v_ctxt_handler+0x8> sw	t1,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:315
	store_x x7, 4 * portWORD_SIZE( sp )
1c000b0a <freertos_risc_v_ctxt_handler+0xa> sw	t2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:316
	store_x x8, 5 * portWORD_SIZE( sp )
1c000b0c <freertos_risc_v_ctxt_handler+0xc> sw	s0,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:317
	store_x x9, 6 * portWORD_SIZE( sp )
1c000b0e <freertos_risc_v_ctxt_handler+0xe> sw	s1,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:318
	store_x x10, 7 * portWORD_SIZE( sp )
1c000b10 <freertos_risc_v_ctxt_handler+0x10> sw	a0,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:319
	store_x x11, 8 * portWORD_SIZE( sp )
1c000b12 <freertos_risc_v_ctxt_handler+0x12> sw	a1,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:320
	store_x x12, 9 * portWORD_SIZE( sp )
1c000b14 <freertos_risc_v_ctxt_handler+0x14> sw	a2,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:321
	store_x x13, 10 * portWORD_SIZE( sp )
1c000b16 <freertos_risc_v_ctxt_handler+0x16> sw	a3,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:322
	store_x x14, 11 * portWORD_SIZE( sp )
1c000b18 <freertos_risc_v_ctxt_handler+0x18> sw	a4,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:323
	store_x x15, 12 * portWORD_SIZE( sp )
1c000b1a <freertos_risc_v_ctxt_handler+0x1a> sw	a5,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:325
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	store_x x16, 13 * portWORD_SIZE( sp )
1c000b1c <freertos_risc_v_ctxt_handler+0x1c> sw	a6,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:326
	store_x x17, 14 * portWORD_SIZE( sp )
1c000b1e <freertos_risc_v_ctxt_handler+0x1e> sw	a7,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:327
	store_x x18, 15 * portWORD_SIZE( sp )
1c000b20 <freertos_risc_v_ctxt_handler+0x20> sw	s2,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:328
	store_x x19, 16 * portWORD_SIZE( sp )
1c000b22 <freertos_risc_v_ctxt_handler+0x22> sw	s3,64(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:329
	store_x x20, 17 * portWORD_SIZE( sp )
1c000b24 <freertos_risc_v_ctxt_handler+0x24> sw	s4,68(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:330
	store_x x21, 18 * portWORD_SIZE( sp )
1c000b26 <freertos_risc_v_ctxt_handler+0x26> sw	s5,72(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:331
	store_x x22, 19 * portWORD_SIZE( sp )
1c000b28 <freertos_risc_v_ctxt_handler+0x28> sw	s6,76(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:332
	store_x x23, 20 * portWORD_SIZE( sp )
1c000b2a <freertos_risc_v_ctxt_handler+0x2a> sw	s7,80(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:333
	store_x x24, 21 * portWORD_SIZE( sp )
1c000b2c <freertos_risc_v_ctxt_handler+0x2c> sw	s8,84(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:334
	store_x x25, 22 * portWORD_SIZE( sp )
1c000b2e <freertos_risc_v_ctxt_handler+0x2e> sw	s9,88(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:335
	store_x x26, 23 * portWORD_SIZE( sp )
1c000b30 <freertos_risc_v_ctxt_handler+0x30> sw	s10,92(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:336
	store_x x27, 24 * portWORD_SIZE( sp )
1c000b32 <freertos_risc_v_ctxt_handler+0x32> sw	s11,96(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:337
	store_x x28, 25 * portWORD_SIZE( sp )
1c000b34 <freertos_risc_v_ctxt_handler+0x34> sw	t3,100(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:338
	store_x x29, 26 * portWORD_SIZE( sp )
1c000b36 <freertos_risc_v_ctxt_handler+0x36> sw	t4,104(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:339
	store_x x30, 27 * portWORD_SIZE( sp )
1c000b38 <freertos_risc_v_ctxt_handler+0x38> sw	t5,108(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:340
	store_x x31, 28 * portWORD_SIZE( sp )
1c000b3a <freertos_risc_v_ctxt_handler+0x3a> sw	t6,112(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:343
#endif
	
	csrr t0, mstatus					/* Required for MPIE bit. */
1c000b3c <freertos_risc_v_ctxt_handler+0x3c> csrr	t0,mstatus
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:344
	store_x t0, 29 * portWORD_SIZE( sp )
1c000b40 <freertos_risc_v_ctxt_handler+0x40> sw	t0,116(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:346
#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmSAVE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to save any registers unique to the RISC-V implementation. */
1c000b42 <freertos_risc_v_ctxt_handler+0x42> addi	sp,sp,-24
1c000b44 <freertos_risc_v_ctxt_handler+0x44> csrr	t0,lpstart0
1c000b48 <freertos_risc_v_ctxt_handler+0x48> csrr	t1,lpend0
1c000b4c <freertos_risc_v_ctxt_handler+0x4c> csrr	t2,lpcount0
1c000b50 <freertos_risc_v_ctxt_handler+0x50> csrr	t3,lpstart1
1c000b54 <freertos_risc_v_ctxt_handler+0x54> csrr	t4,lpend1
1c000b58 <freertos_risc_v_ctxt_handler+0x58> csrr	t5,lpcount1
1c000b5c <freertos_risc_v_ctxt_handler+0x5c> sw	t0,4(sp)
1c000b5e <freertos_risc_v_ctxt_handler+0x5e> sw	t1,8(sp)
1c000b60 <freertos_risc_v_ctxt_handler+0x60> sw	t2,12(sp)
1c000b62 <freertos_risc_v_ctxt_handler+0x62> sw	t3,16(sp)
1c000b64 <freertos_risc_v_ctxt_handler+0x64> sw	t4,20(sp)
1c000b66 <freertos_risc_v_ctxt_handler+0x66> sw	t5,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:349
#endif

	load_x  t0, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000b68 <freertos_risc_v_ctxt_handler+0x68> auipc	t0,0x8
1c000b6c <freertos_risc_v_ctxt_handler+0x6c> lw	t0,-932(t0) # 1c0087c4 <pxCurrentTCB>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:350
	store_x  sp, 0( t0 )				/* Write sp to first TCB member. */
1c000b70 <freertos_risc_v_ctxt_handler+0x70> sw	sp,0(t0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:352

	csrr a0, mcause
1c000b74 <freertos_risc_v_ctxt_handler+0x74> csrr	a0,mcause
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:353
	csrr a1, mepc
1c000b78 <freertos_risc_v_ctxt_handler+0x78> csrr	a1,mepc
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:355

	store_x a1, 0( sp )				/* Asynch so save unmodified exception return address. */
1c000b7c <freertos_risc_v_ctxt_handler+0x7c> sw	a1,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:357

	load_x sp, xISRStackTop			/* Switch to ISR stack before function call. */
1c000b7e <freertos_risc_v_ctxt_handler+0x7e> auipc	sp,0x8
1c000b82 <freertos_risc_v_ctxt_handler+0x82> lw	sp,-1478(sp) # 1c0085b8 <xISRStackTop>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:358
	jal xTaskIncrementTick
1c000b86 <freertos_risc_v_ctxt_handler+0x86> jal	ra,1c001008 <xTaskIncrementTick>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:359
	beqz a0, processed_source		/* Don't switch context if incrementing tick didn't unblock a task. */
1c000b8a <freertos_risc_v_ctxt_handler+0x8a> beqz	a0,1c0009c2 <processed_source>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:360
	jal vTaskSwitchContext
1c000b8e <freertos_risc_v_ctxt_handler+0x8e> jal	ra,1c00118c <vTaskSwitchContext>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:362

	load_x  t1, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000b92 <freertos_risc_v_ctxt_handler+0x92> auipc	t1,0x8
1c000b96 <freertos_risc_v_ctxt_handler+0x96> lw	t1,-974(t1) # 1c0087c4 <pxCurrentTCB>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:363
	load_x  sp, 0( t1 )				 	/* Read sp from first TCB member. */
1c000b9a <freertos_risc_v_ctxt_handler+0x9a> lw	sp,0(t1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:366

	/* Load mret with the address of the next instruction in the task to run next. */
	load_x t0, 0( sp )
1c000b9e <freertos_risc_v_ctxt_handler+0x9e> lw	t0,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:367
	csrw mepc, t0
1c000ba0 <freertos_risc_v_ctxt_handler+0xa0> csrw	mepc,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:370

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c000ba4 <freertos_risc_v_ctxt_handler+0xa4> lw	t0,4(sp)
1c000ba6 <freertos_risc_v_ctxt_handler+0xa6> lw	t1,8(sp)
1c000ba8 <freertos_risc_v_ctxt_handler+0xa8> lw	t2,12(sp)
1c000baa <freertos_risc_v_ctxt_handler+0xaa> lw	t3,16(sp)
1c000bac <freertos_risc_v_ctxt_handler+0xac> lw	t4,20(sp)
1c000bae <freertos_risc_v_ctxt_handler+0xae> lw	t5,24(sp)
1c000bb0 <freertos_risc_v_ctxt_handler+0xb0> csrw	lpstart0,t0
1c000bb4 <freertos_risc_v_ctxt_handler+0xb4> csrw	lpend0,t1
1c000bb8 <freertos_risc_v_ctxt_handler+0xb8> csrw	lpcount0,t2
1c000bbc <freertos_risc_v_ctxt_handler+0xbc> csrw	lpstart1,t3
1c000bc0 <freertos_risc_v_ctxt_handler+0xc0> csrw	lpend1,t4
1c000bc4 <freertos_risc_v_ctxt_handler+0xc4> csrw	lpcount1,t5
1c000bc8 <freertos_risc_v_ctxt_handler+0xc8> addi	sp,sp,24
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:374
#endif

	/* Load mstatus with the interrupt enable bits used by the task. */
	load_x  t0, 29 * portWORD_SIZE( sp )
1c000bca <freertos_risc_v_ctxt_handler+0xca> lw	t0,116(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:375
	csrw mstatus, t0						/* Required for MPIE bit. */
1c000bcc <freertos_risc_v_ctxt_handler+0xcc> csrw	mstatus,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:377

	load_x  x1, 1 * portWORD_SIZE( sp )
1c000bd0 <freertos_risc_v_ctxt_handler+0xd0> lw	ra,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:378
	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
1c000bd2 <freertos_risc_v_ctxt_handler+0xd2> lw	t0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:379
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c000bd4 <freertos_risc_v_ctxt_handler+0xd4> lw	t1,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:380
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c000bd6 <freertos_risc_v_ctxt_handler+0xd6> lw	t2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:381
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c000bd8 <freertos_risc_v_ctxt_handler+0xd8> lw	s0,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:382
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c000bda <freertos_risc_v_ctxt_handler+0xda> lw	s1,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:383
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c000bdc <freertos_risc_v_ctxt_handler+0xdc> lw	a0,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:384
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c000bde <freertos_risc_v_ctxt_handler+0xde> lw	a1,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:385
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c000be0 <freertos_risc_v_ctxt_handler+0xe0> lw	a2,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:386
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c000be2 <freertos_risc_v_ctxt_handler+0xe2> lw	a3,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:387
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c000be4 <freertos_risc_v_ctxt_handler+0xe4> lw	a4,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:388
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c000be6 <freertos_risc_v_ctxt_handler+0xe6> lw	a5,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:390
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c000be8 <freertos_risc_v_ctxt_handler+0xe8> lw	a6,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:391
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c000bea <freertos_risc_v_ctxt_handler+0xea> lw	a7,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:392
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c000bec <freertos_risc_v_ctxt_handler+0xec> lw	s2,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:393
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c000bee <freertos_risc_v_ctxt_handler+0xee> lw	s3,64(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:394
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c000bf0 <freertos_risc_v_ctxt_handler+0xf0> lw	s4,68(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:395
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c000bf2 <freertos_risc_v_ctxt_handler+0xf2> lw	s5,72(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:396
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c000bf4 <freertos_risc_v_ctxt_handler+0xf4> lw	s6,76(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:397
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c000bf6 <freertos_risc_v_ctxt_handler+0xf6> lw	s7,80(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:398
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c000bf8 <freertos_risc_v_ctxt_handler+0xf8> lw	s8,84(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:399
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c000bfa <freertos_risc_v_ctxt_handler+0xfa> lw	s9,88(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:400
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c000bfc <freertos_risc_v_ctxt_handler+0xfc> lw	s10,92(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:401
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c000bfe <freertos_risc_v_ctxt_handler+0xfe> lw	s11,96(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:402
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c000c00 <freertos_risc_v_ctxt_handler+0x100> lw	t3,100(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:403
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c000c02 <freertos_risc_v_ctxt_handler+0x102> lw	t4,104(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:404
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c000c04 <freertos_risc_v_ctxt_handler+0x104> lw	t5,108(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:405
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c000c06 <freertos_risc_v_ctxt_handler+0x106> lw	t6,112(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:407
#endif
	addi sp, sp, portCONTEXT_SIZE
1c000c08 <freertos_risc_v_ctxt_handler+0x108> addi	sp,sp,120
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:409

	mret
1c000c0c <freertos_risc_v_ctxt_handler+0x10c> mret
1c000c10 <freertos_risc_v_ctxt_handler+0x110> nop
1c000c14 <freertos_risc_v_ctxt_handler+0x114> nop
1c000c18 <freertos_risc_v_ctxt_handler+0x118> nop
1c000c1c <freertos_risc_v_ctxt_handler+0x11c> nop
1c000c20 <freertos_risc_v_ctxt_handler+0x120> nop
1c000c24 <freertos_risc_v_ctxt_handler+0x124> nop
1c000c28 <freertos_risc_v_ctxt_handler+0x128> nop
1c000c2c <freertos_risc_v_ctxt_handler+0x12c> nop
1c000c30 <freertos_risc_v_ctxt_handler+0x130> nop
1c000c34 <freertos_risc_v_ctxt_handler+0x134> nop
1c000c38 <freertos_risc_v_ctxt_handler+0x138> nop
1c000c3c <freertos_risc_v_ctxt_handler+0x13c> nop
1c000c40 <freertos_risc_v_ctxt_handler+0x140> nop
1c000c44 <freertos_risc_v_ctxt_handler+0x144> nop
1c000c48 <freertos_risc_v_ctxt_handler+0x148> nop
1c000c4c <freertos_risc_v_ctxt_handler+0x14c> nop
1c000c50 <freertos_risc_v_ctxt_handler+0x150> nop
1c000c54 <freertos_risc_v_ctxt_handler+0x154> nop
1c000c58 <freertos_risc_v_ctxt_handler+0x158> nop
1c000c5c <freertos_risc_v_ctxt_handler+0x15c> nop
1c000c60 <freertos_risc_v_ctxt_handler+0x160> nop
1c000c64 <freertos_risc_v_ctxt_handler+0x164> nop
1c000c68 <freertos_risc_v_ctxt_handler+0x168> nop
1c000c6c <freertos_risc_v_ctxt_handler+0x16c> nop
1c000c70 <freertos_risc_v_ctxt_handler+0x170> nop
1c000c74 <freertos_risc_v_ctxt_handler+0x174> nop
1c000c78 <freertos_risc_v_ctxt_handler+0x178> nop
1c000c7c <freertos_risc_v_ctxt_handler+0x17c> nop
1c000c80 <freertos_risc_v_ctxt_handler+0x180> nop
1c000c84 <freertos_risc_v_ctxt_handler+0x184> nop
1c000c88 <freertos_risc_v_ctxt_handler+0x188> nop
1c000c8c <freertos_risc_v_ctxt_handler+0x18c> nop
1c000c90 <freertos_risc_v_ctxt_handler+0x190> nop
1c000c94 <freertos_risc_v_ctxt_handler+0x194> nop
1c000c98 <freertos_risc_v_ctxt_handler+0x198> nop
1c000c9c <freertos_risc_v_ctxt_handler+0x19c> nop
1c000ca0 <freertos_risc_v_ctxt_handler+0x1a0> nop
1c000ca4 <freertos_risc_v_ctxt_handler+0x1a4> nop
1c000ca8 <freertos_risc_v_ctxt_handler+0x1a8> nop
1c000cac <freertos_risc_v_ctxt_handler+0x1ac> nop
1c000cb0 <freertos_risc_v_ctxt_handler+0x1b0> nop
1c000cb4 <freertos_risc_v_ctxt_handler+0x1b4> nop
1c000cb8 <freertos_risc_v_ctxt_handler+0x1b8> nop
1c000cbc <freertos_risc_v_ctxt_handler+0x1bc> nop
1c000cc0 <freertos_risc_v_ctxt_handler+0x1c0> nop
1c000cc4 <freertos_risc_v_ctxt_handler+0x1c4> nop
1c000cc8 <freertos_risc_v_ctxt_handler+0x1c8> nop
1c000ccc <freertos_risc_v_ctxt_handler+0x1cc> nop
1c000cd0 <freertos_risc_v_ctxt_handler+0x1d0> nop
1c000cd4 <freertos_risc_v_ctxt_handler+0x1d4> nop
1c000cd8 <freertos_risc_v_ctxt_handler+0x1d8> nop
1c000cdc <freertos_risc_v_ctxt_handler+0x1dc> nop
1c000ce0 <freertos_risc_v_ctxt_handler+0x1e0> nop
1c000ce4 <freertos_risc_v_ctxt_handler+0x1e4> nop
1c000ce8 <freertos_risc_v_ctxt_handler+0x1e8> nop
1c000cec <freertos_risc_v_ctxt_handler+0x1ec> nop
1c000cf0 <freertos_risc_v_ctxt_handler+0x1f0> nop
1c000cf4 <freertos_risc_v_ctxt_handler+0x1f4> nop
1c000cf8 <freertos_risc_v_ctxt_handler+0x1f8> nop
1c000cfc <freertos_risc_v_ctxt_handler+0x1fc> nop
xPortStartFirstTask():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:426
	outside of this file. */
	la t0, freertos_risc_v_trap_handler
	csrw mtvec, t0
#endif /* portasmHAS_CLILNT */

	load_x  sp, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000d00 <xPortStartFirstTask> auipc	sp,0x8
1c000d04 <xPortStartFirstTask+0x4> lw	sp,-1340(sp) # 1c0087c4 <pxCurrentTCB>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:427
	load_x  sp, 0( sp )				 	/* Read sp from first TCB member. */
1c000d08 <xPortStartFirstTask+0x8> lw	sp,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:429

	load_x  x1, 0( sp ) /* Note for starting the scheduler the exception return address is used as the function return address. */
1c000d0a <xPortStartFirstTask+0xa> lw	ra,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:432

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c000d0c <xPortStartFirstTask+0xc> lw	t0,4(sp)
1c000d0e <xPortStartFirstTask+0xe> lw	t1,8(sp)
1c000d10 <xPortStartFirstTask+0x10> lw	t2,12(sp)
1c000d12 <xPortStartFirstTask+0x12> lw	t3,16(sp)
1c000d14 <xPortStartFirstTask+0x14> lw	t4,20(sp)
1c000d16 <xPortStartFirstTask+0x16> lw	t5,24(sp)
1c000d18 <xPortStartFirstTask+0x18> csrw	lpstart0,t0
1c000d1c <xPortStartFirstTask+0x1c> csrw	lpend0,t1
1c000d20 <xPortStartFirstTask+0x20> csrw	lpcount0,t2
1c000d24 <xPortStartFirstTask+0x24> csrw	lpstart1,t3
1c000d28 <xPortStartFirstTask+0x28> csrw	lpend1,t4
1c000d2c <xPortStartFirstTask+0x2c> csrw	lpcount1,t5
1c000d30 <xPortStartFirstTask+0x30> addi	sp,sp,24
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:435
#endif

	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c000d32 <xPortStartFirstTask+0x32> lw	t1,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:436
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c000d34 <xPortStartFirstTask+0x34> lw	t2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:437
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c000d36 <xPortStartFirstTask+0x36> lw	s0,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:438
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c000d38 <xPortStartFirstTask+0x38> lw	s1,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:439
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c000d3a <xPortStartFirstTask+0x3a> lw	a0,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:440
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c000d3c <xPortStartFirstTask+0x3c> lw	a1,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:441
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c000d3e <xPortStartFirstTask+0x3e> lw	a2,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:442
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c000d40 <xPortStartFirstTask+0x40> lw	a3,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:443
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c000d42 <xPortStartFirstTask+0x42> lw	a4,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:444
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c000d44 <xPortStartFirstTask+0x44> lw	a5,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:446
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c000d46 <xPortStartFirstTask+0x46> lw	a6,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:447
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c000d48 <xPortStartFirstTask+0x48> lw	a7,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:448
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c000d4a <xPortStartFirstTask+0x4a> lw	s2,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:449
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c000d4c <xPortStartFirstTask+0x4c> lw	s3,64(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:450
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c000d4e <xPortStartFirstTask+0x4e> lw	s4,68(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:451
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c000d50 <xPortStartFirstTask+0x50> lw	s5,72(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:452
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c000d52 <xPortStartFirstTask+0x52> lw	s6,76(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:453
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c000d54 <xPortStartFirstTask+0x54> lw	s7,80(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:454
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c000d56 <xPortStartFirstTask+0x56> lw	s8,84(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:455
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c000d58 <xPortStartFirstTask+0x58> lw	s9,88(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:456
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c000d5a <xPortStartFirstTask+0x5a> lw	s10,92(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:457
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c000d5c <xPortStartFirstTask+0x5c> lw	s11,96(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:458
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c000d5e <xPortStartFirstTask+0x5e> lw	t3,100(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:459
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c000d60 <xPortStartFirstTask+0x60> lw	t4,104(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:460
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c000d62 <xPortStartFirstTask+0x62> lw	t5,108(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:461
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c000d64 <xPortStartFirstTask+0x64> lw	t6,112(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:463
#endif
	load_x  x5, 29 * portWORD_SIZE( sp )	/* Initial mstatus into x5 (t0) */
1c000d66 <xPortStartFirstTask+0x66> lw	t0,116(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:464
	addi x5, x5, 0x08						/* Set MIE bit so the first task starts with interrupts enabled - required as returns with ret not eret. */
1c000d68 <xPortStartFirstTask+0x68> addi	t0,t0,8
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:465
	csrrw  x0, mstatus, x5					/* Interrupts enabled from here! */
1c000d6a <xPortStartFirstTask+0x6a> csrw	mstatus,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:466
	load_x  x5, 2 * portWORD_SIZE( sp )		/* Initial x5 (t0) value. */
1c000d6e <xPortStartFirstTask+0x6e> lw	t0,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:468

	addi	sp, sp, portCONTEXT_SIZE
1c000d70 <xPortStartFirstTask+0x70> addi	sp,sp,120
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:469
	ret
1c000d74 <xPortStartFirstTask+0x74> ret
1c000d76 <xPortStartFirstTask+0x76> nop
1c000d7a <xPortStartFirstTask+0x7a> nop
1c000d7e <xPortStartFirstTask+0x7e> nop
1c000d82 <xPortStartFirstTask+0x82> nop
1c000d86 <xPortStartFirstTask+0x86> nop
1c000d8a <xPortStartFirstTask+0x8a> nop
1c000d8e <xPortStartFirstTask+0x8e> nop
1c000d92 <xPortStartFirstTask+0x92> nop
1c000d96 <xPortStartFirstTask+0x96> nop
1c000d9a <xPortStartFirstTask+0x9a> nop
1c000d9e <xPortStartFirstTask+0x9e> nop
1c000da2 <xPortStartFirstTask+0xa2> nop
1c000da6 <xPortStartFirstTask+0xa6> nop
1c000daa <xPortStartFirstTask+0xaa> nop
1c000dae <xPortStartFirstTask+0xae> nop
1c000db2 <xPortStartFirstTask+0xb2> nop
1c000db6 <xPortStartFirstTask+0xb6> nop
1c000dba <xPortStartFirstTask+0xba> nop
1c000dbe <xPortStartFirstTask+0xbe> nop
1c000dc2 <xPortStartFirstTask+0xc2> nop
1c000dc6 <xPortStartFirstTask+0xc6> nop
1c000dca <xPortStartFirstTask+0xca> nop
1c000dce <xPortStartFirstTask+0xce> nop
1c000dd2 <xPortStartFirstTask+0xd2> nop
1c000dd6 <xPortStartFirstTask+0xd6> nop
1c000dda <xPortStartFirstTask+0xda> nop
1c000dde <xPortStartFirstTask+0xde> nop
1c000de2 <xPortStartFirstTask+0xe2> nop
1c000de6 <xPortStartFirstTask+0xe6> nop
1c000dea <xPortStartFirstTask+0xea> nop
1c000dee <xPortStartFirstTask+0xee> nop
1c000df2 <xPortStartFirstTask+0xf2> nop
1c000df6 <xPortStartFirstTask+0xf6> nop
1c000dfa <xPortStartFirstTask+0xfa> nop
1c000dfe <xPortStartFirstTask+0xfe> nop
pxPortInitialiseStack():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:539
 */
.align 8
.func
pxPortInitialiseStack:

	csrr t0, mstatus					/* Obtain current mstatus value. */
1c000e00 <pxPortInitialiseStack> csrr	t0,mstatus
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:540
	andi t0, t0, ~0x8					/* Ensure interrupts are disabled when the stack is restored within an ISR.  Required when a task is created after the schedulre has been started, otherwise interrupts would be disabled anyway. */
1c000e04 <pxPortInitialiseStack+0x4> andi	t0,t0,-9
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:541
	addi t1, x0, 0x188					/* Generate the value 0x1880, which are the MPIE and MPP bits to set in mstatus. */
1c000e08 <pxPortInitialiseStack+0x8> li	t1,392
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:542
	slli t1, t1, 4
1c000e0c <pxPortInitialiseStack+0xc> slli	t1,t1,0x4
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:543
	or t0, t0, t1						/* Set MPIE and MPP bits in mstatus value. */
1c000e0e <pxPortInitialiseStack+0xe> or	t0,t0,t1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:545

	addi a0, a0, -portWORD_SIZE
1c000e12 <pxPortInitialiseStack+0x12> addi	a0,a0,-4
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:546
	store_x t0, 0(a0)					/* mstatus onto the stack. */
1c000e14 <pxPortInitialiseStack+0x14> sw	t0,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:547
	addi a0, a0, -(22 * portWORD_SIZE)	/* Space for registers x11-x31. */
1c000e18 <pxPortInitialiseStack+0x18> addi	a0,a0,-88
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:548
	store_x a2, 0(a0)					/* Task parameters (pvParameters parameter) goes into register X10/a0 on the stack. */
1c000e1c <pxPortInitialiseStack+0x1c> sw	a2,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:549
	addi a0, a0, -(6 * portWORD_SIZE)	/* Space for registers x5-x9. */
1c000e1e <pxPortInitialiseStack+0x1e> addi	a0,a0,-24
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:550
	store_x x0, 0(a0)					/* Return address onto the stack, could be portTASK_RETURN_ADDRESS */
1c000e20 <pxPortInitialiseStack+0x20> sw	zero,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:551
	addi t0, x0, portasmADDITIONAL_CONTEXT_SIZE /* The number of chip specific additional registers. */
1c000e24 <pxPortInitialiseStack+0x24> li	t0,6
chip_specific_stack_frame():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:553
chip_specific_stack_frame:				/* First add any chip specific registers to the stack frame being created. */
	beq t0, x0, 1f						/* No more chip specific registers to save. */
1c000e28 <chip_specific_stack_frame> beqz	t0,1c000e36 <chip_specific_stack_frame+0xe>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:554
	addi a0, a0, -portWORD_SIZE			/* Make space for chip specific register. */
1c000e2c <chip_specific_stack_frame+0x4> addi	a0,a0,-4
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:555
	store_x x0, 0(a0)					/* Give the chip specific register an initial value of zero. */
1c000e2e <chip_specific_stack_frame+0x6> sw	zero,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:556
	addi t0, t0, -1						/* Decrement the count of chip specific registers remaining. */
1c000e32 <chip_specific_stack_frame+0xa> addi	t0,t0,-1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:557
	j chip_specific_stack_frame			/* Until no more chip specific registers. */
1c000e34 <chip_specific_stack_frame+0xc> j	1c000e28 <chip_specific_stack_frame>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:559
1:
	addi a0, a0, -portWORD_SIZE
1c000e36 <chip_specific_stack_frame+0xe> addi	a0,a0,-4
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:560
	store_x a1, 0(a0)					/* mret value (pxCode parameter) onto the stack. */
1c000e38 <chip_specific_stack_frame+0x10> sw	a1,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/portable/GCC/RISC-V/portASM.S:561
	ret
1c000e3a <chip_specific_stack_frame+0x12> ret
1c000e3c <chip_specific_stack_frame+0x14> unimp
1c000e3e <chip_specific_stack_frame+0x16> unimp
	...
cluster_exec_loop():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:90
        * s9=cl_master_cluster_task_end(fifo mgt + FC notify)
        * * slave
        * s4=cluster end of task -> barrier trig and wait
        * s5=cluster end of task -> no barrier, start over loop at dispatcher
        */
        or s10, zero, a1
1c000e42 <cluster_exec_loop> or	s10,zero,a1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:92
        // IRQ to wake cores : irq from dispatcher, HW mutex or barrier.
        li t0, ((1 << CL_IRQ_DISPATCH_EVT) | (1 << CL_IRQ_HW_MUTEX_EVT) | (1 << CL_IRQ_BARRIER_EVT))
1c000e46 <cluster_exec_loop+0x4> lui	t0,0x70
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:93
        li t1, ARCHI_CLUSTER_MASTER_CORE                        // Core ID of master core on cluster
1c000e4a <cluster_exec_loop+0x8> li	t1,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:94
        li t3, ARCHI_CLUSTER_SYNC_BARR_ID                       // Master-workers sync Barrier ID
1c000e4c <cluster_exec_loop+0xa> li	t3,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:95
        li s2, CL_DEMUX_EU_HW_BARRIER_ADDR
1c000e4e <cluster_exec_loop+0xc> lui	s2,0x204
1c000e52 <cluster_exec_loop+0x10> addi	s2,s2,512 # 00204200 <__heap_l2_shared_size+0x194220>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:96
        li t2, CL_DEMUX_EU_HW_BARRIER_SIZE                      // Size of barrier instance
1c000e56 <cluster_exec_loop+0x14> li	t2,32
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:97
        li s0, CL_DEMUX_EU_CORE_ADDR // + ARCHI_CLUSTER_GLOBAL_ADDR(0))
1c000e5a <cluster_exec_loop+0x18> lui	s0,0x204
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:98
        mul t3, t2, t3                                          // Master-workers sync barrier offset
1c000e5e <cluster_exec_loop+0x1c> mul	t3,t2,t3
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:99
        li s1, CL_DEMUX_EU_DISPATCH_ADDR
1c000e62 <cluster_exec_loop+0x20> lui	s1,0x204
1c000e66 <cluster_exec_loop+0x24> addi	s1,s1,128 # 00204080 <__heap_l2_shared_size+0x1940a0>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:100
        add s7, s2, t3                                          // Barrier used for dispatch sync
1c000e6a <cluster_exec_loop+0x28> add	s7,s2,t3
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:102

        sw t0, CL_DEMUX_EU_CORE_EVENT_MASK_OR(s0)               // CL_DEMUX_EU_CORE->MASK_OR = IRQ
1c000e6e <cluster_exec_loop+0x2c> sw	t0,8(s0) # 00204008 <__heap_l2_shared_size+0x194028>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:104

        bne a1, t1, cl_slave_loop                               // Slave cores
1c000e72 <cluster_exec_loop+0x30> bne	a1,t1,1c000f1e <cl_slave_loop>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:108


        /*** Cluster master ****/
        li t0, (1 << CL_IRQ_DMA1)                               // Enable DMA IRQ for master core
1c000e76 <cluster_exec_loop+0x34> li	t0,512
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:109
        la s8, cl_slave_stack_setup
1c000e7a <cluster_exec_loop+0x38> auipc	s8,0x0
1c000e7e <cluster_exec_loop+0x3c> addi	s8,s8,222 # 1c000f58 <cl_slave_stack_setup>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:110
        sw t0, CL_DEMUX_EU_CORE_IRQ_MASK_OR(s0)                 // CL_DEMUX_EU_CORE->IRQ_MASK_OR = IRQ
1c000e82 <cluster_exec_loop+0x40> sw	t0,20(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:111
        li s3, (1 << FC_TO_CLUSTER_NOTIFY_EVENT)
1c000e86 <cluster_exec_loop+0x44> li	s3,2
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:112
        la s4, __per_cluster_data                               // Cluster data
1c000e88 <cluster_exec_loop+0x46> auipc	s4,0x8
1c000e8c <cluster_exec_loop+0x4a> addi	s4,s4,-1684 # 1c0087f4 <__per_cluster_data>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:113
        ori s8, s8, 1
1c000e90 <cluster_exec_loop+0x4e> ori	s8,s8,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:115

        csrw mstatus, 0x8                                       // Enable IRQ for master core
1c000e94 <cluster_exec_loop+0x52> csrwi	mstatus,8
cl_master_cluster_ready():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:118

cl_master_cluster_ready:
        lw s5, 0(s4)                                            // Check if cluster driver is init
1c000e98 <cl_master_cluster_ready> lw	s5,0(s4)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:119
        beqz s5, cl_master_sleep                                // If cluster is not on, sleep
1c000e9c <cl_master_cluster_ready+0x4> beqz	s5,1c000f10 <cl_master_sleep>
cl_master_loop():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:122

cl_master_loop:
        la ra, cl_master_cluster_task_end                       // After finishing cluster task, take next task and notify FC
1c000ea0 <cl_master_loop> auipc	ra,0x0
1c000ea4 <cl_master_loop+0x4> addi	ra,ra,102 # 1c000f06 <cl_master_cluster_task_end>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:123
        lw s6, 0(s5)                                            // Check if there is cluster task in fifo
1c000ea8 <cl_master_loop+0x8> lw	s6,0(s5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:124
        beqz s6, cl_master_sleep                                // Sleep if there are no cluster task in fifo
1c000eac <cl_master_loop+0xc> beqz	s6,1c000f10 <cl_master_sleep>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:127

        // Load cluster task info :
        lw t0, PI_CLUSTER_TASK_FUNCTION_OFFSET(s6)              // t0=func
1c000eb0 <cl_master_loop+0x10> lw	t0,0(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:128
        lw a0, PI_CLUSTER_TASK_FUNC_ARGS_OFFSET(s6)             // a0=args
1c000eb4 <cl_master_loop+0x14> lw	a0,4(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:129
        lw t1, PI_CLUSTER_TASK_STACK_PTR_OFFSET(s6)             // t1=stack_ptr
1c000eb8 <cl_master_loop+0x18> lw	t1,8(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:130
        lw t2, PI_CLUSTER_TASK_STACK_MST_SIZE_OFFSET(s6)        // t2=stack_size
1c000ebc <cl_master_loop+0x1c> lw	t2,12(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:131
        lw t3, PI_CLUSTER_TASK_STACK_SLV_SIZE_OFFSET(s6)        // t3=stack_slave_size
1c000ec0 <cl_master_loop+0x20> lw	t3,16(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:132
        lw t4, PI_CLUSTER_TASK_TEAM_CORES_OFFSET(s6)            // t4=nb_cores
1c000ec4 <cl_master_loop+0x24> lw	t4,20(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:133
        add sp, t1, t2                                          // Master core sp, at the top of stack
1c000ec8 <cl_master_loop+0x28> add	sp,t1,t2
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:134
        lw t5, PI_CLUSTER_TASK_TEAM_MASK_OFFSET(s6)             // t5=team_mask
1c000ecc <cl_master_loop+0x2c> lw	t5,36(s6)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:136

        or t1, sp, zero                                         // Stack for slaves
1c000ed0 <cl_master_loop+0x30> or	t1,sp,zero
cl_master_slave_barrier_sync_config():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:140

        // Workers barrier sync(application)
cl_master_slave_barrier_sync_config:
        ori a2, t5, (1 << ARCHI_CLUSTER_MASTER_CORE)
1c000ed4 <cl_master_slave_barrier_sync_config> ori	a2,t5,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:141
        beqz t5, cl_master_master_slave_barrier_sync_config
1c000ed8 <cl_master_slave_barrier_sync_config+0x4> beqz	t5,1c000ee4 <cl_master_master_slave_barrier_sync_config>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:142
        sw t5, CL_DEMUX_EU_HW_BARRIER_TRIGGER_MASK(s2)          // Set workers barrier sync
1c000edc <cl_master_slave_barrier_sync_config+0x8> sw	t5,0(s2)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:143
        sw t5, CL_DEMUX_EU_HW_BARRIER_TARGET_MASK(s2)           // Set workers barrier sync
1c000ee0 <cl_master_slave_barrier_sync_config+0xc> sw	t5,12(s2)
cl_master_master_slave_barrier_sync_config():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:148

        // Master and workers barrier sync
cl_master_master_slave_barrier_sync_config:
        //ori a2, t5, (1 << ARCHI_CLUSTER_MASTER_CORE)
        sw a2, CL_DEMUX_EU_HW_BARRIER_TRIGGER_MASK(s7)          // Set master workers barrier sync
1c000ee4 <cl_master_master_slave_barrier_sync_config> sw	a2,0(s7)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:149
        sw a2, CL_DEMUX_EU_HW_BARRIER_TARGET_MASK(s7)           // Set master workers barrier sync
1c000ee8 <cl_master_master_slave_barrier_sync_config+0x4> sw	a2,12(s7)
cl_master_dispatch_stack():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:152

cl_master_dispatch_stack:
        xori t6, t5, (1 << ARCHI_CLUSTER_MASTER_CORE)
1c000eec <cl_master_dispatch_stack> xori	t6,t5,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:153
        beqz t4, cl_master_core_only                            // Only core master execute task
1c000ef0 <cl_master_dispatch_stack+0x4> beqz	t4,1c000f04 <cl_master_core_only>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:154
        sw t6, CL_DEMUX_EU_DISPATCH_TEAM_CONFIG(s1)             // Config current team
1c000ef4 <cl_master_dispatch_stack+0x8> sw	t6,4(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:155
        sw s8, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)             // Dispatch cluster setup to slaves
1c000ef8 <cl_master_dispatch_stack+0xc> sw	s8,0(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:156
        sw t1, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)             // Arg to cl_slave_stack_setup: sp
1c000efc <cl_master_dispatch_stack+0x10> sw	t1,0(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:157
        sw t3, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)             // Arg to cl_slave_stack_setup: stack_slave_size
1c000f00 <cl_master_dispatch_stack+0x14> sw	t3,0(s1)
cl_master_core_only():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:160

cl_master_core_only:
        jr t0                                                   // Execute cluster function
1c000f04 <cl_master_core_only> jr	t0
cl_master_cluster_task_end():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:163

cl_master_cluster_task_end:
        or a0, zero, s5
1c000f06 <cl_master_cluster_task_end> or	a0,zero,s5
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:164
        jal cl_task_finish
1c000f0a <cl_master_cluster_task_end+0x4> jal	ra,1c001608 <cl_task_finish>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:165
        j cl_master_loop
1c000f0e <cl_master_cluster_task_end+0x8> j	1c000ea0 <cl_master_loop>
cl_master_sleep():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:169

        // Wait and sleep until an IRQ is sent by FC to cluster(for a new task)
cl_master_sleep:
        sw s3, CL_DEMUX_EU_CORE_EVENT_MASK_OR(s0)
1c000f10 <cl_master_sleep> sw	s3,8(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:170
        p.elw t0, CL_DEMUX_EU_CORE_EVENT_WAIT_CLEAR(s0)
1c000f14 <cl_master_sleep+0x4> p.elw	t0,60(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:171
        sw s3, CL_DEMUX_EU_CORE_EVENT_MASK_AND(s0)
1c000f18 <cl_master_sleep+0x8> sw	s3,4(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:172
        j cl_master_loop
1c000f1c <cl_master_sleep+0xc> j	1c000ea0 <cl_master_loop>
cl_slave_loop():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:179


        /*** Cluster slaves ***/
        // Wait and sleep until a task is dispatched
cl_slave_loop:
        la s4, cl_slave_barrier_trig_wait
1c000f1e <cl_slave_loop> auipc	s4,0x0
1c000f22 <cl_slave_loop+0x4> addi	s4,s4,22 # 1c000f34 <cl_slave_barrier_trig_wait>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:180
        la s5, cl_slave_wait_for_dispatch
1c000f26 <cl_slave_loop+0x8> auipc	s5,0x0
1c000f2a <cl_slave_loop+0xc> addi	s5,s5,18 # 1c000f38 <cl_slave_wait_for_dispatch>
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:181
        or ra, zero, s4
1c000f2e <cl_slave_loop+0x10> or	ra,zero,s4
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:182
        j cl_slave_wait_for_dispatch
1c000f32 <cl_slave_loop+0x14> j	1c000f38 <cl_slave_wait_for_dispatch>
cl_slave_barrier_trig_wait():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:185

cl_slave_barrier_trig_wait:
        p.elw t0, CL_DEMUX_EU_HW_BARRIER_TRIGGER_WAIT_CLEAR(s7) // Trigger and wait on barrier
1c000f34 <cl_slave_barrier_trig_wait> p.elw	t0,28(s7)
cl_slave_wait_for_dispatch():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:188

cl_slave_wait_for_dispatch:
        p.elw t0, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)          // Pop the function to execute
1c000f38 <cl_slave_wait_for_dispatch> p.elw	t0,0(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:189
        p.elw a0, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)          // Pop function's args
1c000f3c <cl_slave_wait_for_dispatch+0x4> p.elw	a0,0(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:192

        // Should the core trigger and wait at barrier after exec
        andi t1, t0, 0x1
1c000f40 <cl_slave_wait_for_dispatch+0x8> andi	t1,t0,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:193
        p.bclr t0, t0, 0, 0                                     // Clear LSB barrier bit before function call
1c000f44 <cl_slave_wait_for_dispatch+0xc> p.bclr	t0,t0,0,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:194
        bne t1, zero, cl_slave_entry_no_barrier
1c000f48 <cl_slave_wait_for_dispatch+0x10> bnez	t1,1c000f52 <cl_slave_entry_no_barrier>
cl_slave_entry_with_barrier():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:197

cl_slave_entry_with_barrier:
        or ra, zero, s4                                         // Return to wait on barrier
1c000f4c <cl_slave_entry_with_barrier> or	ra,zero,s4
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:198
        jr t0                                                   // Jump to function to execute, on return trig and wait at barrier, and start over slave loop
1c000f50 <cl_slave_entry_with_barrier+0x4> jr	t0
cl_slave_entry_no_barrier():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:201

cl_slave_entry_no_barrier:
        or ra, zero, s5                                         // Return to wait on dispatcher
1c000f52 <cl_slave_entry_no_barrier> or	ra,zero,s5
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:202
        jr t0                                                   // Jump to function to execute, and start over slave loop
1c000f56 <cl_slave_entry_no_barrier+0x4> jr	t0
cl_slave_stack_setup():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:220
        * Cluster cores set stack pointer.
        * From cluster_exec_loop, s10=core_id
        * Master core is core_id=0, stack is at the top of stack ptr
        * Stack pointer adjusted for slave cores.
        */
        p.elw t0, CL_DEMUX_EU_DISPATCH_FIFO_ACCESS(s1)          // Stack slave size
1c000f58 <cl_slave_stack_setup> p.elw	t0,0(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:221
        mul t0, t0, s10                                         // Slave stack offset
1c000f5c <cl_slave_stack_setup+0x4> mul	t0,t0,s10
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:222
        add sp, a0, t0                                          // Slave sp
1c000f60 <cl_slave_stack_setup+0x8> add	sp,a0,t0
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/cluster.S:223
        jr ra
1c000f64 <cl_slave_stack_setup+0xc> ret
memcpy():
1c000f66 <memcpy> mv	t1,a0
1c000f68 <memcpy+0x2> beqz	a2,1c000f7a <memcpy+0x14>
1c000f6a <memcpy+0x4> lb	t2,0(a1)
1c000f6e <memcpy+0x8> sb	t2,0(t1)
1c000f72 <memcpy+0xc> addi	a2,a2,-1
1c000f74 <memcpy+0xe> addi	t1,t1,1
1c000f76 <memcpy+0x10> addi	a1,a1,1
1c000f78 <memcpy+0x12> bnez	a2,1c000f6a <memcpy+0x4>
1c000f7a <memcpy+0x14> ret
memset():
1c000f7c <memset> mv	t1,a0
1c000f7e <memset+0x2> beqz	a2,1c000f8a <memset+0xe>
1c000f80 <memset+0x4> sb	a1,0(t1)
1c000f84 <memset+0x8> addi	a2,a2,-1
1c000f86 <memset+0xa> addi	t1,t1,1
1c000f88 <memset+0xc> bnez	a2,1c000f80 <memset+0x4>
1c000f8a <memset+0xe> ret
vListInsertEnd():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:76
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1c000f8c <vListInsertEnd> lw	a5,4(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:87
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1c000f8e <vListInsertEnd+0x2> sw	a5,4(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:88
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1c000f90 <vListInsertEnd+0x4> lw	a4,8(a5)
1c000f92 <vListInsertEnd+0x6> sw	a4,8(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:93

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1c000f94 <vListInsertEnd+0x8> sw	a1,4(a4)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:94
	pxIndex->pxPrevious = pxNewListItem;
1c000f96 <vListInsertEnd+0xa> sw	a1,8(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:97

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
1c000f98 <vListInsertEnd+0xc> sw	a0,16(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:99

	( pxList->uxNumberOfItems )++;
1c000f9a <vListInsertEnd+0xe> lw	a5,0(a0)
1c000f9c <vListInsertEnd+0x10> addi	a5,a5,1
1c000f9e <vListInsertEnd+0x12> sw	a5,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:100
}
1c000fa0 <vListInsertEnd+0x14> ret
uxListRemove():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:174

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
1c000fa2 <uxListRemove> lw	a5,16(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:176

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1c000fa4 <uxListRemove+0x2> lw	a3,4(a0)
1c000fa6 <uxListRemove+0x4> lw	a4,8(a0)
1c000fa8 <uxListRemove+0x6> sw	a4,8(a3)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:177
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1c000faa <uxListRemove+0x8> lw	a3,4(a0)
1c000fac <uxListRemove+0xa> sw	a3,4(a4)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:183

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1c000fae <uxListRemove+0xc> lw	a4,4(a5)
1c000fb0 <uxListRemove+0xe> beq	a4,a0,1c000fc2 <uxListRemove+0x20>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:192
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
1c000fb4 <uxListRemove+0x12> sw	zero,16(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:193
	( pxList->uxNumberOfItems )--;
1c000fb8 <uxListRemove+0x16> lw	a4,0(a5)
1c000fba <uxListRemove+0x18> addi	a4,a4,-1
1c000fbc <uxListRemove+0x1a> sw	a4,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:195

	return pxList->uxNumberOfItems;
1c000fbe <uxListRemove+0x1c> lw	a0,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:196
}
1c000fc0 <uxListRemove+0x1e> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/list.c:185
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1c000fc2 <uxListRemove+0x20> lw	a4,8(a0)
1c000fc4 <uxListRemove+0x22> sw	a4,4(a5)
1c000fc6 <uxListRemove+0x24> j	1c000fb4 <uxListRemove+0x12>
prvResetNextTaskUnblockTime():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3947

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c000fc8 <prvResetNextTaskUnblockTime> lui	a5,0x1c008
1c000fcc <prvResetNextTaskUnblockTime+0x4> lw	a5,1992(a5) # 1c0087c8 <pxDelayedTaskList>
1c000fd0 <prvResetNextTaskUnblockTime+0x8> lw	a5,0(a5)
1c000fd2 <prvResetNextTaskUnblockTime+0xa> bnez	a5,1c000fe0 <prvResetNextTaskUnblockTime+0x18>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3953
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1c000fd4 <prvResetNextTaskUnblockTime+0xc> lui	a5,0x1c008
1c000fd8 <prvResetNextTaskUnblockTime+0x10> li	a4,-1
1c000fda <prvResetNextTaskUnblockTime+0x12> sw	a4,2012(a5) # 1c0087dc <xNextTaskUnblockTime>
1c000fde <prvResetNextTaskUnblockTime+0x16> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3961
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c000fe0 <prvResetNextTaskUnblockTime+0x18> lui	a5,0x1c008
1c000fe4 <prvResetNextTaskUnblockTime+0x1c> lw	a5,1992(a5) # 1c0087c8 <pxDelayedTaskList>
1c000fe8 <prvResetNextTaskUnblockTime+0x20> lw	a5,12(a5)
1c000fea <prvResetNextTaskUnblockTime+0x22> lw	a5,12(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3962
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1c000fec <prvResetNextTaskUnblockTime+0x24> lw	a4,4(a5)
1c000fee <prvResetNextTaskUnblockTime+0x26> lui	a5,0x1c008
1c000ff2 <prvResetNextTaskUnblockTime+0x2a> sw	a4,2012(a5) # 1c0087dc <xNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3964
	}
}
1c000ff6 <prvResetNextTaskUnblockTime+0x2e> ret
vTaskSuspendAll():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2123
	++uxSchedulerSuspended;
1c000ff8 <vTaskSuspendAll> lui	a5,0x1c008
1c000ffc <vTaskSuspendAll+0x4> addi	a5,a5,2004 # 1c0087d4 <uxSchedulerSuspended>
1c001000 <vTaskSuspendAll+0x8> lw	a4,0(a5)
1c001002 <vTaskSuspendAll+0xa> addi	a4,a4,1
1c001004 <vTaskSuspendAll+0xc> sw	a4,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2128
}
1c001006 <vTaskSuspendAll+0xe> ret
xTaskIncrementTick():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2708
{
1c001008 <xTaskIncrementTick> addi	sp,sp,-32
1c00100a <xTaskIncrementTick+0x2> sw	ra,28(sp)
1c00100c <xTaskIncrementTick+0x4> sw	s0,24(sp)
1c00100e <xTaskIncrementTick+0x6> sw	s1,20(sp)
1c001010 <xTaskIncrementTick+0x8> sw	s2,16(sp)
1c001012 <xTaskIncrementTick+0xa> sw	s3,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2717
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c001014 <xTaskIncrementTick+0xc> lui	a5,0x1c008
1c001018 <xTaskIncrementTick+0x10> lw	a5,2004(a5) # 1c0087d4 <uxSchedulerSuspended>
1c00101c <xTaskIncrementTick+0x14> bnez	a5,1c001172 <xTaskIncrementTick+0x16a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2721
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1c001020 <xTaskIncrementTick+0x18> lui	a5,0x1c008
1c001024 <xTaskIncrementTick+0x1c> addi	a5,a5,2028 # 1c0087ec <xTickCount>
1c001028 <xTaskIncrementTick+0x20> lw	s1,0(a5)
1c00102a <xTaskIncrementTick+0x22> addi	s1,s1,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2725
		xTickCount = xConstTickCount;
1c00102c <xTaskIncrementTick+0x24> sw	s1,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2727
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1c00102e <xTaskIncrementTick+0x26> bnez	s1,1c001064 <xTaskIncrementTick+0x5c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2729
			taskSWITCH_DELAYED_LISTS();
1c001030 <xTaskIncrementTick+0x28> lui	a5,0x1c008
1c001034 <xTaskIncrementTick+0x2c> lw	a5,1992(a5) # 1c0087c8 <pxDelayedTaskList>
1c001038 <xTaskIncrementTick+0x30> lw	a5,0(a5)
1c00103a <xTaskIncrementTick+0x32> bnez	a5,1c0010be <xTaskIncrementTick+0xb6>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2729 (discriminator 2)
1c00103c <xTaskIncrementTick+0x34> lui	a4,0x1c008
1c001040 <xTaskIncrementTick+0x38> addi	a4,a4,1992 # 1c0087c8 <pxDelayedTaskList>
1c001044 <xTaskIncrementTick+0x3c> lw	a3,0(a4)
1c001046 <xTaskIncrementTick+0x3e> lui	a5,0x1c008
1c00104a <xTaskIncrementTick+0x42> addi	a5,a5,1996 # 1c0087cc <pxOverflowDelayedTaskList>
1c00104e <xTaskIncrementTick+0x46> lw	a2,0(a5)
1c001050 <xTaskIncrementTick+0x48> sw	a2,0(a4)
1c001052 <xTaskIncrementTick+0x4a> sw	a3,0(a5)
1c001054 <xTaskIncrementTick+0x4c> lui	a5,0x1c008
1c001058 <xTaskIncrementTick+0x50> addi	a5,a5,2016 # 1c0087e0 <xNumOfOverflows>
1c00105c <xTaskIncrementTick+0x54> lw	a4,0(a5)
1c00105e <xTaskIncrementTick+0x56> addi	a4,a4,1
1c001060 <xTaskIncrementTick+0x58> sw	a4,0(a5)
1c001062 <xTaskIncrementTick+0x5a> jal	1c000fc8 <prvResetNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2740
		if( xConstTickCount >= xNextTaskUnblockTime )
1c001064 <xTaskIncrementTick+0x5c> lui	a5,0x1c008
1c001068 <xTaskIncrementTick+0x60> lw	a5,2012(a5) # 1c0087dc <xNextTaskUnblockTime>
1c00106c <xTaskIncrementTick+0x64> bgeu	s1,a5,1c001152 <xTaskIncrementTick+0x14a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2711
BaseType_t xSwitchRequired = pdFALSE;
1c001070 <xTaskIncrementTick+0x68> li	s2,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2823
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1c001072 <xTaskIncrementTick+0x6a> lui	a5,0x1c008
1c001076 <xTaskIncrementTick+0x6e> lw	a5,1988(a5) # 1c0087c4 <pxCurrentTCB>
1c00107a <xTaskIncrementTick+0x72> lw	a5,44(a5)
1c00107c <xTaskIncrementTick+0x74> slli	a4,a5,0x2
1c001080 <xTaskIncrementTick+0x78> add	a4,a4,a5
1c001082 <xTaskIncrementTick+0x7a> slli	a3,a4,0x2
1c001086 <xTaskIncrementTick+0x7e> lui	a5,0x1c008
1c00108a <xTaskIncrementTick+0x82> addi	a5,a5,1472 # 1c0085c0 <pxReadyTasksLists>
1c00108e <xTaskIncrementTick+0x86> add	a5,a5,a3
1c001090 <xTaskIncrementTick+0x88> lw	a4,0(a5)
1c001092 <xTaskIncrementTick+0x8a> li	a5,1
1c001094 <xTaskIncrementTick+0x8c> bgeu	a5,a4,1c00109a <xTaskIncrementTick+0x92>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2825
				xSwitchRequired = pdTRUE;
1c001098 <xTaskIncrementTick+0x90> li	s2,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2838
			if( xPendedTicks == ( TickType_t ) 0 )
1c00109a <xTaskIncrementTick+0x92> lui	a5,0x1c008
1c00109e <xTaskIncrementTick+0x96> lw	a5,2020(a5) # 1c0087e4 <xPendedTicks>
1c0010a2 <xTaskIncrementTick+0x9a> beqz	a5,1c00116c <xTaskIncrementTick+0x164>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2851
			if( xYieldPending != pdFALSE )
1c0010a4 <xTaskIncrementTick+0x9c> lui	a5,0x1c008
1c0010a8 <xTaskIncrementTick+0xa0> lw	a5,2032(a5) # 1c0087f0 <xYieldPending>
1c0010ac <xTaskIncrementTick+0xa4> bnez	a5,1c001188 <xTaskIncrementTick+0x180>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2876
}
1c0010ae <xTaskIncrementTick+0xa6> mv	a0,s2
1c0010b0 <xTaskIncrementTick+0xa8> lw	ra,28(sp)
1c0010b2 <xTaskIncrementTick+0xaa> lw	s0,24(sp)
1c0010b4 <xTaskIncrementTick+0xac> lw	s1,20(sp)
1c0010b6 <xTaskIncrementTick+0xae> lw	s2,16(sp)
1c0010b8 <xTaskIncrementTick+0xb0> lw	s3,12(sp)
1c0010ba <xTaskIncrementTick+0xb2> addi	sp,sp,32
1c0010bc <xTaskIncrementTick+0xb4> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2729 (discriminator 1)
			taskSWITCH_DELAYED_LISTS();
1c0010be <xTaskIncrementTick+0xb6> lui	a3,0x1c008
1c0010c2 <xTaskIncrementTick+0xba> addi	a3,a3,76 # 1c00804c <__l2_priv0_end+0x4960>
1c0010c6 <xTaskIncrementTick+0xbe> lui	a2,0x1c008
1c0010ca <xTaskIncrementTick+0xc2> addi	a2,a2,308 # 1c008134 <__func__.3248>
1c0010ce <xTaskIncrementTick+0xc6> lui	a1,0x1
1c0010d0 <xTaskIncrementTick+0xc8> addi	a1,a1,-1367 # 00000aa9 <__stack_size+0x2a9>
1c0010d4 <xTaskIncrementTick+0xcc> lui	a0,0x1c008
1c0010d8 <xTaskIncrementTick+0xd0> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x491c>
1c0010dc <xTaskIncrementTick+0xd4> jal	ra,1c0021a6 <__assert_func>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2806
							xSwitchRequired = pdTRUE;
1c0010e0 <xTaskIncrementTick+0xd8> li	s2,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2744
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c0010e2 <xTaskIncrementTick+0xda> lui	a5,0x1c008
1c0010e6 <xTaskIncrementTick+0xde> lw	a5,1992(a5) # 1c0087c8 <pxDelayedTaskList>
1c0010ea <xTaskIncrementTick+0xe2> lw	a5,0(a5)
1c0010ec <xTaskIncrementTick+0xe4> beqz	a5,1c001156 <xTaskIncrementTick+0x14e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2760
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0010ee <xTaskIncrementTick+0xe6> lui	a5,0x1c008
1c0010f2 <xTaskIncrementTick+0xea> lw	a5,1992(a5) # 1c0087c8 <pxDelayedTaskList>
1c0010f6 <xTaskIncrementTick+0xee> lw	a5,12(a5)
1c0010f8 <xTaskIncrementTick+0xf0> lw	s0,12(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2761
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1c0010fa <xTaskIncrementTick+0xf2> lw	a5,4(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2763
					if( xConstTickCount < xItemValue )
1c0010fc <xTaskIncrementTick+0xf4> bltu	s1,a5,1c001162 <xTaskIncrementTick+0x15a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2779
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c001100 <xTaskIncrementTick+0xf8> addi	s3,s0,4
1c001104 <xTaskIncrementTick+0xfc> mv	a0,s3
1c001106 <xTaskIncrementTick+0xfe> jal	1c000fa2 <uxListRemove>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2783
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1c001108 <xTaskIncrementTick+0x100> lw	a5,40(s0)
1c00110a <xTaskIncrementTick+0x102> beqz	a5,1c001112 <xTaskIncrementTick+0x10a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2785
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1c00110c <xTaskIncrementTick+0x104> addi	a0,s0,24
1c001110 <xTaskIncrementTick+0x108> jal	1c000fa2 <uxListRemove>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2794
					prvAddTaskToReadyList( pxTCB );
1c001112 <xTaskIncrementTick+0x10a> lw	a3,44(s0)
1c001114 <xTaskIncrementTick+0x10c> li	a5,1
1c001116 <xTaskIncrementTick+0x10e> sll	a5,a5,a3
1c00111a <xTaskIncrementTick+0x112> lui	a4,0x1c008
1c00111e <xTaskIncrementTick+0x116> addi	a4,a4,2008 # 1c0087d8 <uxTopReadyPriority>
1c001122 <xTaskIncrementTick+0x11a> lw	a2,0(a4)
1c001124 <xTaskIncrementTick+0x11c> or	a5,a5,a2
1c001126 <xTaskIncrementTick+0x11e> sw	a5,0(a4)
1c001128 <xTaskIncrementTick+0x120> slli	a5,a3,0x2
1c00112c <xTaskIncrementTick+0x124> add	a5,a5,a3
1c00112e <xTaskIncrementTick+0x126> slli	a0,a5,0x2
1c001132 <xTaskIncrementTick+0x12a> mv	a1,s3
1c001134 <xTaskIncrementTick+0x12c> lui	a5,0x1c008
1c001138 <xTaskIncrementTick+0x130> addi	a5,a5,1472 # 1c0085c0 <pxReadyTasksLists>
1c00113c <xTaskIncrementTick+0x134> add	a0,a0,a5
1c00113e <xTaskIncrementTick+0x136> jal	1c000f8c <vListInsertEnd>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2804
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1c001140 <xTaskIncrementTick+0x138> lw	a4,44(s0)
1c001142 <xTaskIncrementTick+0x13a> lui	a5,0x1c008
1c001146 <xTaskIncrementTick+0x13e> lw	a5,1988(a5) # 1c0087c4 <pxCurrentTCB>
1c00114a <xTaskIncrementTick+0x142> lw	a5,44(a5)
1c00114c <xTaskIncrementTick+0x144> bgeu	a4,a5,1c0010e0 <xTaskIncrementTick+0xd8>
1c001150 <xTaskIncrementTick+0x148> j	1c0010e2 <xTaskIncrementTick+0xda>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2711
BaseType_t xSwitchRequired = pdFALSE;
1c001152 <xTaskIncrementTick+0x14a> li	s2,0
1c001154 <xTaskIncrementTick+0x14c> j	1c0010e2 <xTaskIncrementTick+0xda>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2751
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c001156 <xTaskIncrementTick+0x14e> lui	a5,0x1c008
1c00115a <xTaskIncrementTick+0x152> li	a4,-1
1c00115c <xTaskIncrementTick+0x154> sw	a4,2012(a5) # 1c0087dc <xNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2752
					break;
1c001160 <xTaskIncrementTick+0x158> j	1c001072 <xTaskIncrementTick+0x6a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2770
						xNextTaskUnblockTime = xItemValue;
1c001162 <xTaskIncrementTick+0x15a> lui	a4,0x1c008
1c001166 <xTaskIncrementTick+0x15e> sw	a5,2012(a4) # 1c0087dc <xNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2771
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
1c00116a <xTaskIncrementTick+0x162> j	1c001072 <xTaskIncrementTick+0x6a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2840
				vApplicationTickHook();
1c00116c <xTaskIncrementTick+0x164> jal	ra,1c002194 <vApplicationTickHook>
1c001170 <xTaskIncrementTick+0x168> j	1c0010a4 <xTaskIncrementTick+0x9c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2864
		++xPendedTicks;
1c001172 <xTaskIncrementTick+0x16a> lui	a5,0x1c008
1c001176 <xTaskIncrementTick+0x16e> addi	a5,a5,2020 # 1c0087e4 <xPendedTicks>
1c00117a <xTaskIncrementTick+0x172> lw	a4,0(a5)
1c00117c <xTaskIncrementTick+0x174> addi	a4,a4,1
1c00117e <xTaskIncrementTick+0x176> sw	a4,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2870
			vApplicationTickHook();
1c001180 <xTaskIncrementTick+0x178> jal	ra,1c002194 <vApplicationTickHook>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2711
BaseType_t xSwitchRequired = pdFALSE;
1c001184 <xTaskIncrementTick+0x17c> li	s2,0
1c001186 <xTaskIncrementTick+0x17e> j	1c0010ae <xTaskIncrementTick+0xa6>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2853
				xSwitchRequired = pdTRUE;
1c001188 <xTaskIncrementTick+0x180> li	s2,1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2875
	return xSwitchRequired;
1c00118a <xTaskIncrementTick+0x182> j	1c0010ae <xTaskIncrementTick+0xa6>
vTaskSwitchContext():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2991
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1c00118c <vTaskSwitchContext> lui	a5,0x1c008
1c001190 <vTaskSwitchContext+0x4> lw	a5,2004(a5) # 1c0087d4 <uxSchedulerSuspended>
1c001194 <vTaskSwitchContext+0x8> beqz	a5,1c0011a2 <vTaskSwitchContext+0x16>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2995
		xYieldPending = pdTRUE;
1c001196 <vTaskSwitchContext+0xa> lui	a5,0x1c008
1c00119a <vTaskSwitchContext+0xe> li	a4,1
1c00119c <vTaskSwitchContext+0x10> sw	a4,2032(a5) # 1c0087f0 <xYieldPending>
1c0011a0 <vTaskSwitchContext+0x14> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2990
{
1c0011a2 <vTaskSwitchContext+0x16> addi	sp,sp,-16
1c0011a4 <vTaskSwitchContext+0x18> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2999
		xYieldPending = pdFALSE;
1c0011a6 <vTaskSwitchContext+0x1a> lui	a5,0x1c008
1c0011aa <vTaskSwitchContext+0x1e> sw	zero,2032(a5) # 1c0087f0 <xYieldPending>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3030
		taskCHECK_FOR_STACK_OVERFLOW();
1c0011ae <vTaskSwitchContext+0x22> lui	a5,0x1c008
1c0011b2 <vTaskSwitchContext+0x26> lw	a5,1988(a5) # 1c0087c4 <pxCurrentTCB>
1c0011b6 <vTaskSwitchContext+0x2a> lw	a4,48(a5)
1c0011b8 <vTaskSwitchContext+0x2c> lw	a3,0(a4)
1c0011ba <vTaskSwitchContext+0x2e> lui	a5,0xa5a5a
1c0011be <vTaskSwitchContext+0x32> addi	a5,a5,1445 # a5a5a5a5 <__heap_l2_shared_start+0x89a4a585>
1c0011c2 <vTaskSwitchContext+0x36> bne	a3,a5,1c0011d4 <vTaskSwitchContext+0x48>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3030 (discriminator 2)
1c0011c6 <vTaskSwitchContext+0x3a> lw	a3,4(a4)
1c0011c8 <vTaskSwitchContext+0x3c> lui	a5,0xa5a5a
1c0011cc <vTaskSwitchContext+0x40> addi	a5,a5,1445 # a5a5a5a5 <__heap_l2_shared_start+0x89a4a585>
1c0011d0 <vTaskSwitchContext+0x44> beq	a3,a5,1c001262 <vTaskSwitchContext+0xd6>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3030 (discriminator 7)
1c0011d4 <vTaskSwitchContext+0x48> lui	a5,0x1c008
1c0011d8 <vTaskSwitchContext+0x4c> addi	a5,a5,1988 # 1c0087c4 <pxCurrentTCB>
1c0011dc <vTaskSwitchContext+0x50> lw	a0,0(a5)
1c0011de <vTaskSwitchContext+0x52> lw	a1,0(a5)
1c0011e0 <vTaskSwitchContext+0x54> addi	a1,a1,52
1c0011e4 <vTaskSwitchContext+0x58> jal	ra,1c00217c <vApplicationStackOverflowHook>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3041 (discriminator 9)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0011e8 <vTaskSwitchContext+0x5c> lui	a5,0x1c008
1c0011ec <vTaskSwitchContext+0x60> lw	a4,2008(a5) # 1c0087d8 <uxTopReadyPriority>
1c0011f0 <vTaskSwitchContext+0x64> p.fl1	a4,a4
1c0011f4 <vTaskSwitchContext+0x68> slli	a3,a4,0x2
1c0011f8 <vTaskSwitchContext+0x6c> add	a3,a3,a4
1c0011fa <vTaskSwitchContext+0x6e> slli	a2,a3,0x2
1c0011fe <vTaskSwitchContext+0x72> lui	a5,0x1c008
1c001202 <vTaskSwitchContext+0x76> addi	a5,a5,1472 # 1c0085c0 <pxReadyTasksLists>
1c001206 <vTaskSwitchContext+0x7a> add	a5,a5,a2
1c001208 <vTaskSwitchContext+0x7c> lw	a5,0(a5)
1c00120a <vTaskSwitchContext+0x7e> beqz	a5,1c001280 <vTaskSwitchContext+0xf4>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3041 (discriminator 2)
1c00120c <vTaskSwitchContext+0x80> slli	a3,a4,0x2
1c001210 <vTaskSwitchContext+0x84> add	a3,a3,a4
1c001212 <vTaskSwitchContext+0x86> slli	a2,a3,0x2
1c001216 <vTaskSwitchContext+0x8a> lui	a5,0x1c008
1c00121a <vTaskSwitchContext+0x8e> addi	a5,a5,1472 # 1c0085c0 <pxReadyTasksLists>
1c00121e <vTaskSwitchContext+0x92> add	a5,a5,a2
1c001220 <vTaskSwitchContext+0x94> lw	a3,4(a5)
1c001222 <vTaskSwitchContext+0x96> lw	a3,4(a3)
1c001224 <vTaskSwitchContext+0x98> sw	a3,4(a5)
1c001226 <vTaskSwitchContext+0x9a> addi	a5,a5,8
1c001228 <vTaskSwitchContext+0x9c> beq	a3,a5,1c0012a2 <vTaskSwitchContext+0x116>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3041 (discriminator 5)
1c00122c <vTaskSwitchContext+0xa0> slli	a5,a4,0x2
1c001230 <vTaskSwitchContext+0xa4> add	a4,a4,a5
1c001232 <vTaskSwitchContext+0xa6> slli	a3,a4,0x2
1c001236 <vTaskSwitchContext+0xaa> lui	a5,0x1c008
1c00123a <vTaskSwitchContext+0xae> addi	a5,a5,1472 # 1c0085c0 <pxReadyTasksLists>
1c00123e <vTaskSwitchContext+0xb2> add	a5,a5,a3
1c001240 <vTaskSwitchContext+0xb4> lw	a5,4(a5)
1c001242 <vTaskSwitchContext+0xb6> lw	a4,12(a5)
1c001244 <vTaskSwitchContext+0xb8> lui	a5,0x1c008
1c001248 <vTaskSwitchContext+0xbc> addi	a5,a5,1988 # 1c0087c4 <pxCurrentTCB>
1c00124c <vTaskSwitchContext+0xc0> sw	a4,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3057 (discriminator 5)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1c00124e <vTaskSwitchContext+0xc2> lw	a5,0(a5)
1c001250 <vTaskSwitchContext+0xc4> addi	a5,a5,88
1c001254 <vTaskSwitchContext+0xc8> lui	a4,0x1c008
1c001258 <vTaskSwitchContext+0xcc> sw	a5,1460(a4) # 1c0085b4 <_impure_ptr>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3061 (discriminator 5)
}
1c00125c <vTaskSwitchContext+0xd0> lw	ra,12(sp)
1c00125e <vTaskSwitchContext+0xd2> addi	sp,sp,16
1c001260 <vTaskSwitchContext+0xd4> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3030 (discriminator 4)
		taskCHECK_FOR_STACK_OVERFLOW();
1c001262 <vTaskSwitchContext+0xd6> lw	a3,8(a4)
1c001264 <vTaskSwitchContext+0xd8> lui	a5,0xa5a5a
1c001268 <vTaskSwitchContext+0xdc> addi	a5,a5,1445 # a5a5a5a5 <__heap_l2_shared_start+0x89a4a585>
1c00126c <vTaskSwitchContext+0xe0> bne	a3,a5,1c0011d4 <vTaskSwitchContext+0x48>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3030 (discriminator 6)
1c001270 <vTaskSwitchContext+0xe4> lw	a4,12(a4)
1c001272 <vTaskSwitchContext+0xe6> lui	a5,0xa5a5a
1c001276 <vTaskSwitchContext+0xea> addi	a5,a5,1445 # a5a5a5a5 <__heap_l2_shared_start+0x89a4a585>
1c00127a <vTaskSwitchContext+0xee> bne	a4,a5,1c0011d4 <vTaskSwitchContext+0x48>
1c00127e <vTaskSwitchContext+0xf2> j	1c0011e8 <vTaskSwitchContext+0x5c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3041 (discriminator 1)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c001280 <vTaskSwitchContext+0xf4> lui	a3,0x1c008
1c001284 <vTaskSwitchContext+0xf8> addi	a3,a3,196 # 1c0080c4 <__l2_priv0_end+0x49d8>
1c001288 <vTaskSwitchContext+0xfc> lui	a2,0x1c008
1c00128c <vTaskSwitchContext+0x100> addi	a2,a2,328 # 1c008148 <__func__.3257>
1c001290 <vTaskSwitchContext+0x104> lui	a1,0x1
1c001292 <vTaskSwitchContext+0x106> addi	a1,a1,-1055 # 00000be1 <__stack_size+0x3e1>
1c001296 <vTaskSwitchContext+0x10a> lui	a0,0x1c008
1c00129a <vTaskSwitchContext+0x10e> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x491c>
1c00129e <vTaskSwitchContext+0x112> jal	ra,1c0021a6 <__assert_func>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:3041 (discriminator 3)
1c0012a2 <vTaskSwitchContext+0x116> lw	a1,4(a3)
1c0012a4 <vTaskSwitchContext+0x118> lui	a5,0x1c008
1c0012a8 <vTaskSwitchContext+0x11c> addi	a5,a5,1472 # 1c0085c0 <pxReadyTasksLists>
1c0012ac <vTaskSwitchContext+0x120> add	a5,a5,a2
1c0012ae <vTaskSwitchContext+0x122> sw	a1,4(a5)
1c0012b0 <vTaskSwitchContext+0x124> j	1c00122c <vTaskSwitchContext+0xa0>
vTaskEnterCritical():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4291

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
		portDISABLE_INTERRUPTS();
1c0012b2 <vTaskEnterCritical> csrci	mstatus,8
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4293

		if( xSchedulerRunning != pdFALSE )
1c0012b6 <vTaskEnterCritical+0x4> lui	a5,0x1c008
1c0012ba <vTaskEnterCritical+0x8> lw	a5,2024(a5) # 1c0087e8 <xSchedulerRunning>
1c0012be <vTaskEnterCritical+0xc> beqz	a5,1c0012d2 <vTaskEnterCritical+0x20>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4295
		{
			( pxCurrentTCB->uxCriticalNesting )++;
1c0012c0 <vTaskEnterCritical+0xe> lui	a5,0x1c008
1c0012c4 <vTaskEnterCritical+0x12> addi	a5,a5,1988 # 1c0087c4 <pxCurrentTCB>
1c0012c8 <vTaskEnterCritical+0x16> lw	a3,0(a5)
1c0012ca <vTaskEnterCritical+0x18> lw	a4,68(a3)
1c0012cc <vTaskEnterCritical+0x1a> addi	a4,a4,1
1c0012ce <vTaskEnterCritical+0x1c> sw	a4,68(a3)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4303
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
1c0012d0 <vTaskEnterCritical+0x1e> lw	a5,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4312
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1c0012d2 <vTaskEnterCritical+0x20> ret
vTaskExitCritical():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4321

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
		if( xSchedulerRunning != pdFALSE )
1c0012d4 <vTaskExitCritical> lui	a5,0x1c008
1c0012d8 <vTaskExitCritical+0x4> lw	a5,2024(a5) # 1c0087e8 <xSchedulerRunning>
1c0012dc <vTaskExitCritical+0x8> beqz	a5,1c001304 <vTaskExitCritical+0x30>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4323
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
1c0012de <vTaskExitCritical+0xa> lui	a5,0x1c008
1c0012e2 <vTaskExitCritical+0xe> lw	a5,1988(a5) # 1c0087c4 <pxCurrentTCB>
1c0012e6 <vTaskExitCritical+0x12> lw	a5,68(a5)
1c0012e8 <vTaskExitCritical+0x14> beqz	a5,1c001304 <vTaskExitCritical+0x30>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4325
			{
				( pxCurrentTCB->uxCriticalNesting )--;
1c0012ea <vTaskExitCritical+0x16> lui	a5,0x1c008
1c0012ee <vTaskExitCritical+0x1a> addi	a5,a5,1988 # 1c0087c4 <pxCurrentTCB>
1c0012f2 <vTaskExitCritical+0x1e> lw	a3,0(a5)
1c0012f4 <vTaskExitCritical+0x20> lw	a4,68(a3)
1c0012f6 <vTaskExitCritical+0x22> addi	a4,a4,-1
1c0012f8 <vTaskExitCritical+0x24> sw	a4,68(a3)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4327

				if( pxCurrentTCB->uxCriticalNesting == 0U )
1c0012fa <vTaskExitCritical+0x26> lw	a5,0(a5)
1c0012fc <vTaskExitCritical+0x28> lw	a5,68(a5)
1c0012fe <vTaskExitCritical+0x2a> bnez	a5,1c001304 <vTaskExitCritical+0x30>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4329
				{
					portENABLE_INTERRUPTS();
1c001300 <vTaskExitCritical+0x2c> csrsi	mstatus,8
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:4345
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1c001304 <vTaskExitCritical+0x30> ret
xTaskResumeAll():
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2195
{
1c001306 <xTaskResumeAll> addi	sp,sp,-16
1c001308 <xTaskResumeAll+0x2> sw	ra,12(sp)
1c00130a <xTaskResumeAll+0x4> sw	s0,8(sp)
1c00130c <xTaskResumeAll+0x6> sw	s1,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2201
	configASSERT( uxSchedulerSuspended );
1c00130e <xTaskResumeAll+0x8> lui	a5,0x1c008
1c001312 <xTaskResumeAll+0xc> lw	a5,2004(a5) # 1c0087d4 <uxSchedulerSuspended>
1c001316 <xTaskResumeAll+0x10> beqz	a5,1c00133c <xTaskResumeAll+0x36>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2208
	taskENTER_CRITICAL();
1c001318 <xTaskResumeAll+0x12> jal	1c0012b2 <vTaskEnterCritical>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2210
		--uxSchedulerSuspended;
1c00131a <xTaskResumeAll+0x14> lui	a5,0x1c008
1c00131e <xTaskResumeAll+0x18> addi	a5,a5,2004 # 1c0087d4 <uxSchedulerSuspended>
1c001322 <xTaskResumeAll+0x1c> lw	a4,0(a5)
1c001324 <xTaskResumeAll+0x1e> addi	a4,a4,-1
1c001326 <xTaskResumeAll+0x20> sw	a4,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2212
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c001328 <xTaskResumeAll+0x22> lw	a5,0(a5)
1c00132a <xTaskResumeAll+0x24> bnez	a5,1c001414 <xTaskResumeAll+0x10e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2214
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1c00132e <xTaskResumeAll+0x28> lui	a5,0x1c008
1c001332 <xTaskResumeAll+0x2c> lw	a5,2000(a5) # 1c0087d0 <uxCurrentNumberOfTasks>
1c001336 <xTaskResumeAll+0x30> bnez	a5,1c00135e <xTaskResumeAll+0x58>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2197
BaseType_t xAlreadyYielded = pdFALSE;
1c001338 <xTaskResumeAll+0x32> li	s0,0
1c00133a <xTaskResumeAll+0x34> j	1c001416 <xTaskResumeAll+0x110>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2201 (discriminator 1)
	configASSERT( uxSchedulerSuspended );
1c00133c <xTaskResumeAll+0x36> lui	a3,0x1c008
1c001340 <xTaskResumeAll+0x3a> addi	a3,a3,268 # 1c00810c <__l2_priv0_end+0x4a20>
1c001344 <xTaskResumeAll+0x3e> lui	a2,0x1c008
1c001348 <xTaskResumeAll+0x42> addi	a2,a2,292 # 1c008124 <__func__.3171>
1c00134c <xTaskResumeAll+0x46> lui	a1,0x1
1c00134e <xTaskResumeAll+0x48> addi	a1,a1,-1895 # 00000899 <__stack_size+0x99>
1c001352 <xTaskResumeAll+0x4c> lui	a0,0x1c008
1c001356 <xTaskResumeAll+0x50> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x491c>
1c00135a <xTaskResumeAll+0x54> jal	ra,1c0021a6 <__assert_func>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2196
TCB_t *pxTCB = NULL;
1c00135e <xTaskResumeAll+0x58> li	s0,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2218
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1c001360 <xTaskResumeAll+0x5a> lui	a5,0x1c008
1c001364 <xTaskResumeAll+0x5e> lw	a5,1572(a5) # 1c008624 <xPendingReadyList>
1c001368 <xTaskResumeAll+0x62> beqz	a5,1c0013d2 <xTaskResumeAll+0xcc>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2220
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c00136a <xTaskResumeAll+0x64> lui	a5,0x1c008
1c00136e <xTaskResumeAll+0x68> addi	a5,a5,1572 # 1c008624 <xPendingReadyList>
1c001372 <xTaskResumeAll+0x6c> lw	a5,12(a5)
1c001374 <xTaskResumeAll+0x6e> lw	s0,12(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2221
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1c001376 <xTaskResumeAll+0x70> addi	a0,s0,24
1c00137a <xTaskResumeAll+0x74> jal	ra,1c000fa2 <uxListRemove>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2222
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c00137e <xTaskResumeAll+0x78> addi	s1,s0,4
1c001382 <xTaskResumeAll+0x7c> mv	a0,s1
1c001384 <xTaskResumeAll+0x7e> jal	ra,1c000fa2 <uxListRemove>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2223
					prvAddTaskToReadyList( pxTCB );
1c001388 <xTaskResumeAll+0x82> lw	a0,44(s0)
1c00138a <xTaskResumeAll+0x84> li	a4,1
1c00138c <xTaskResumeAll+0x86> sll	a4,a4,a0
1c001390 <xTaskResumeAll+0x8a> lui	a3,0x1c008
1c001394 <xTaskResumeAll+0x8e> addi	a3,a3,2008 # 1c0087d8 <uxTopReadyPriority>
1c001398 <xTaskResumeAll+0x92> lw	a5,0(a3)
1c00139a <xTaskResumeAll+0x94> or	a4,a4,a5
1c00139c <xTaskResumeAll+0x96> sw	a4,0(a3)
1c00139e <xTaskResumeAll+0x98> slli	a5,a0,0x2
1c0013a2 <xTaskResumeAll+0x9c> add	a5,a5,a0
1c0013a4 <xTaskResumeAll+0x9e> slli	a5,a5,0x2
1c0013a6 <xTaskResumeAll+0xa0> mv	a1,s1
1c0013a8 <xTaskResumeAll+0xa2> lui	a0,0x1c008
1c0013ac <xTaskResumeAll+0xa6> addi	a0,a0,1472 # 1c0085c0 <pxReadyTasksLists>
1c0013b0 <xTaskResumeAll+0xaa> add	a0,a0,a5
1c0013b2 <xTaskResumeAll+0xac> jal	ra,1c000f8c <vListInsertEnd>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2227
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1c0013b6 <xTaskResumeAll+0xb0> lw	a4,44(s0)
1c0013b8 <xTaskResumeAll+0xb2> lui	a5,0x1c008
1c0013bc <xTaskResumeAll+0xb6> lw	a5,1988(a5) # 1c0087c4 <pxCurrentTCB>
1c0013c0 <xTaskResumeAll+0xba> lw	a5,44(a5)
1c0013c2 <xTaskResumeAll+0xbc> bltu	a4,a5,1c001360 <xTaskResumeAll+0x5a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2229
						xYieldPending = pdTRUE;
1c0013c6 <xTaskResumeAll+0xc0> lui	a5,0x1c008
1c0013ca <xTaskResumeAll+0xc4> li	a4,1
1c0013cc <xTaskResumeAll+0xc6> sw	a4,2032(a5) # 1c0087f0 <xYieldPending>
1c0013d0 <xTaskResumeAll+0xca> j	1c001360 <xTaskResumeAll+0x5a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2237
				if( pxTCB != NULL )
1c0013d2 <xTaskResumeAll+0xcc> beqz	s0,1c0013d8 <xTaskResumeAll+0xd2>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2245
					prvResetNextTaskUnblockTime();
1c0013d4 <xTaskResumeAll+0xce> jal	ra,1c000fc8 <prvResetNextTaskUnblockTime>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2253
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
1c0013d8 <xTaskResumeAll+0xd2> lui	a5,0x1c008
1c0013dc <xTaskResumeAll+0xd6> lw	s0,2020(a5) # 1c0087e4 <xPendedTicks>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2255
					if( xPendedCounts > ( TickType_t ) 0U )
1c0013e0 <xTaskResumeAll+0xda> bnez	s0,1c0013f8 <xTaskResumeAll+0xf2>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2278
				if( xYieldPending != pdFALSE )
1c0013e2 <xTaskResumeAll+0xdc> lui	a5,0x1c008
1c0013e6 <xTaskResumeAll+0xe0> lw	s0,2032(a5) # 1c0087f0 <xYieldPending>
1c0013ea <xTaskResumeAll+0xe4> beqz	s0,1c001416 <xTaskResumeAll+0x110>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2285
					taskYIELD_IF_USING_PREEMPTION();
1c0013ec <xTaskResumeAll+0xe6> ecall
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2282
						xAlreadyYielded = pdTRUE;
1c0013f0 <xTaskResumeAll+0xea> li	s0,1
1c0013f2 <xTaskResumeAll+0xec> j	1c001416 <xTaskResumeAll+0x110>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2267
							--xPendedCounts;
1c0013f4 <xTaskResumeAll+0xee> addi	s0,s0,-1
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2268
						} while( xPendedCounts > ( TickType_t ) 0U );
1c0013f6 <xTaskResumeAll+0xf0> beqz	s0,1c00140a <xTaskResumeAll+0x104>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2259
							if( xTaskIncrementTick() != pdFALSE )
1c0013f8 <xTaskResumeAll+0xf2> jal	ra,1c001008 <xTaskIncrementTick>
1c0013fc <xTaskResumeAll+0xf6> beqz	a0,1c0013f4 <xTaskResumeAll+0xee>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2261
								xYieldPending = pdTRUE;
1c0013fe <xTaskResumeAll+0xf8> lui	a5,0x1c008
1c001402 <xTaskResumeAll+0xfc> li	a4,1
1c001404 <xTaskResumeAll+0xfe> sw	a4,2032(a5) # 1c0087f0 <xYieldPending>
1c001408 <xTaskResumeAll+0x102> j	1c0013f4 <xTaskResumeAll+0xee>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2270
						xPendedTicks = 0;
1c00140a <xTaskResumeAll+0x104> lui	a5,0x1c008
1c00140e <xTaskResumeAll+0x108> sw	zero,2020(a5) # 1c0087e4 <xPendedTicks>
1c001412 <xTaskResumeAll+0x10c> j	1c0013e2 <xTaskResumeAll+0xdc>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2197
BaseType_t xAlreadyYielded = pdFALSE;
1c001414 <xTaskResumeAll+0x10e> li	s0,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2298
	taskEXIT_CRITICAL();
1c001416 <xTaskResumeAll+0x110> jal	1c0012d4 <vTaskExitCritical>
/scratch/adelvecchio/control-pulp-open/sw/freertos/kernel/tasks.c:2301
}
1c001418 <xTaskResumeAll+0x112> mv	a0,s0
1c00141a <xTaskResumeAll+0x114> lw	ra,12(sp)
1c00141c <xTaskResumeAll+0x116> lw	s0,8(sp)
1c00141e <xTaskResumeAll+0x118> lw	s1,4(sp)
1c001420 <xTaskResumeAll+0x11a> addi	sp,sp,16
1c001422 <xTaskResumeAll+0x11c> ret
_close():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:134
}

int _close(int file)
{
	return -1;
}
1c001424 <_close> li	a0,-1
1c001426 <_close+0x2> ret
_exit():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:143
	errno = ENOMEM;
	return -1;
}

void _exit(int exit_status)
{
1c001428 <_exit> addi	sp,sp,-16
1c00142a <_exit+0x2> mv	a4,a0
readw():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:82 (discriminator 1)

static inline uint32_t readw(const uintptr_t addr)
{
	uint32_t val;

	asm volatile("lw %0, 0(%1)"
1c00142c <_exit+0x4> lui	a5,0x1a102
1c001430 <_exit+0x8> addi	a5,a5,152 # 1a102098 <__heap_l1_cluster_start+0xa102078>
1c001434 <_exit+0xc> lw	a5,0(a5)
_exit():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:148 (discriminator 1)
#if CONFIG_STDIO == STDIO_UART
	/* wait for the udma stdout to be emptied */
	while (readw((UDMA_UART(STDIO_UART_DEVICE_ID) +
		      UDMA_CHANNEL_TX_OFFSET +
		      UDMA_CHANNEL_CFG_OFFSET)) & UDMA_CORE_RX_CFG_EN_MASK) {
1c001436 <_exit+0xe> andi	a5,a5,16
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:146 (discriminator 1)
	while (readw((UDMA_UART(STDIO_UART_DEVICE_ID) +
1c001438 <_exit+0x10> bnez	a5,1c00142c <_exit+0x4>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:152
	}
	/* there is no way to check when the udma output fifo is empty so we
	 * just wait a few cycles */
	for (volatile int i = 0; i < 1024 * 3; i++)
1c00143a <_exit+0x12> sw	zero,12(sp)
1c00143c <_exit+0x14> j	1c001444 <_exit+0x1c>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:152 (discriminator 3)
1c00143e <_exit+0x16> lw	a5,12(sp)
1c001440 <_exit+0x18> addi	a5,a5,1
1c001442 <_exit+0x1a> sw	a5,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:152 (discriminator 1)
1c001444 <_exit+0x1c> lw	a3,12(sp)
1c001446 <_exit+0x1e> lui	a5,0x1
1c001448 <_exit+0x20> addi	a5,a5,-1025 # 00000bff <__stack_size+0x3ff>
1c00144c <_exit+0x24> bge	a5,a3,1c00143e <_exit+0x16>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:155
	    ;
#endif
	writew(exit_status | (1 << APB_SOC_STATUS_EOC_BIT),
1c001450 <_exit+0x28> p.bset	a5,a4,0,31
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
	asm volatile("sw %0, 0(%1)"
1c001454 <_exit+0x2c> lui	a4,0x1a104
1c001458 <_exit+0x30> addi	a4,a4,160 # 1a1040a0 <__heap_l1_cluster_start+0xa104080>
1c00145c <_exit+0x34> sw	a5,0(a4)
_exit():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:158 (discriminator 1)
	       (uintptr_t)(APB_SOC_CTRL_ADDR + APB_SOC_CORESTATUS_OFFSET));
	for (;;)
	    asm volatile("wfi");
1c00145e <_exit+0x36> wfi
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:157 (discriminator 1)
	for (;;)
1c001462 <_exit+0x3a> j	1c00145e <_exit+0x36>
_fstat():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:175
	return -1;
}

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1c001464 <_fstat> lui	a5,0x2
1c001466 <_fstat+0x2> sw	a5,4(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:179
	return 0;
	// errno = -ENOSYS;
	// return -1;
}
1c001468 <_fstat+0x4> li	a0,0
1c00146a <_fstat+0x6> ret
_getpid():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:202
}

int _getpid()
{
	return 1;
}
1c00146c <_getpid> li	a0,1
1c00146e <_getpid+0x2> ret
_isatty():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:212
	return -1;
}

int _isatty(int file)
{
	return (file == STDOUT_FILENO);
1c001470 <_isatty> addi	a0,a0,-1
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:213
}
1c001472 <_isatty+0x2> seqz	a0,a0
1c001476 <_isatty+0x6> ret
_kill():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:217

int _kill(int pid, int sig)
{
	errno = EINVAL;
1c001478 <_kill> li	a4,22
1c00147a <_kill+0x2> sw	a4,-308(gp) # 1c008c1c <errno>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:219
	return -1;
}
1c00147e <_kill+0x6> li	a0,-1
1c001480 <_kill+0x8> ret
_lseek():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:230
}

off_t _lseek(int file, off_t ptr, int dir)
{
	return 0;
}
1c001482 <_lseek> li	a0,0
1c001484 <_lseek+0x2> ret
_read():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:252
}

ssize_t _read(int file, void *ptr, size_t len)
{
	return 0;
}
1c001486 <_read> li	a0,0
1c001488 <_read+0x2> ret
_write():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:306
	uint32_t mhartid = csr_read(CSR_MHARTID);
	return (mhartid >> 5) & 0x3f;
}

ssize_t _write(int file, const void *ptr, size_t len)
{
1c00148a <_write> addi	sp,sp,-16
1c00148c <_write+0x2> sw	ra,12(sp)
1c00148e <_write+0x4> sw	s0,8(sp)
1c001490 <_write+0x6> sw	s1,4(sp)
1c001492 <_write+0x8> sw	s2,0(sp)
1c001494 <_write+0xa> mv	s1,a2
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:308
	/* fuse stout and stderr. remains to be seen if this is a good idea */
	if (file != STDOUT_FILENO && file != STDERR_FILENO) {
1c001496 <_write+0xc> addi	a0,a0,-1
1c001498 <_write+0xe> li	a5,1
1c00149a <_write+0x10> bltu	a5,a0,1c0014e6 <_write+0x5c>
readw():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:82 (discriminator 1)
	asm volatile("lw %0, 0(%1)"
1c00149e <_write+0x14> lui	a5,0x1a102
1c0014a2 <_write+0x18> addi	a5,a5,152 # 1a102098 <__heap_l1_cluster_start+0xa102078>
1c0014a6 <_write+0x1c> lw	a5,0(a5)
_write():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:328 (discriminator 1)
	static char copyout_buf[STDIO_UART_BUFSIZE] = {0};

	/* make sure we can issue a dma transfer, so wait until tx is done */
	while (readw((UDMA_UART(STDIO_UART_DEVICE_ID) +
		      UDMA_CHANNEL_TX_OFFSET +
		      UDMA_CHANNEL_CFG_OFFSET)) & UDMA_CORE_RX_CFG_EN_MASK) {
1c0014a8 <_write+0x1e> andi	a5,a5,16
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:326 (discriminator 1)
	while (readw((UDMA_UART(STDIO_UART_DEVICE_ID) +
1c0014aa <_write+0x20> bnez	a5,1c00149e <_write+0x14>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:335
	/* TODO: there is a race condition here when multiple threads start
	 * executing from here */

	/* copy to tmp buffer so that when we later functions don't clobber our
	 * buffer */
	memcpy(copyout_buf, ptr, len < STDIO_UART_BUFSIZE ? len : STDIO_UART_BUFSIZE);
1c0014ac <_write+0x22> li	s0,256
1c0014b0 <_write+0x26> p.minu	s0,s1,s0
1c0014b4 <_write+0x2a> lui	a0,0x1c008
1c0014b8 <_write+0x2e> addi	s2,a0,1592 # 1c008638 <copyout_buf.4127>
1c0014bc <_write+0x32> mv	a2,s0
1c0014be <_write+0x34> addi	a0,a0,1592
1c0014c2 <_write+0x38> jal	ra,1c000f66 <memcpy>
hal_write32():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/include/target.h:35
}

static inline void hal_write32(volatile void *addr, uint32_t value)
{
	asm volatile("" : : : "memory");
	*((volatile uint32_t *)addr) = value;
1c0014c6 <_write+0x3c> lui	a5,0x1a102
1c0014ca <_write+0x40> addi	a5,a5,128 # 1a102080 <__heap_l1_cluster_start+0xa102060>
1c0014ce <_write+0x44> sw	s2,16(a5)
1c0014d2 <_write+0x48> sw	s1,20(a5)
1c0014d4 <_write+0x4a> li	a4,16
1c0014d6 <_write+0x4c> sw	a4,24(a5)
_write():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:346

	/* We don't wait for the dma transfer to finish despite _write()'s
	 * blocking semantics. This should be ok since we are the only one's
	 * writing to uart */

	return len < STDIO_UART_BUFSIZE ? len : STDIO_UART_BUFSIZE;
1c0014d8 <_write+0x4e> mv	a0,s0
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:353
	/* just nop */
	return len;
#else
#error "CONFIG_STDIO is undefined"
#endif
}
1c0014da <_write+0x50> lw	ra,12(sp)
1c0014dc <_write+0x52> lw	s0,8(sp)
1c0014de <_write+0x54> lw	s1,4(sp)
1c0014e0 <_write+0x56> lw	s2,0(sp)
1c0014e2 <_write+0x58> addi	sp,sp,16
1c0014e4 <_write+0x5a> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:309
		errno = ENOSYS;
1c0014e6 <_write+0x5c> li	a4,88
1c0014ea <_write+0x60> sw	a4,-308(gp) # 1c008c1c <errno>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:310
		return -1;
1c0014ee <_write+0x64> li	a0,-1
1c0014f0 <_write+0x66> j	1c0014da <_write+0x50>
_sbrk():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:366
	brk = addr;
	return 0;
}

void *_sbrk(ptrdiff_t incr)
{
1c0014f2 <_sbrk> mv	a5,a0
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:368
	/* TODO: Check for stack collision by reading sp */
	char *old_brk = brk;
1c0014f4 <_sbrk+0x2> lui	a4,0x1c008
1c0014f8 <_sbrk+0x6> lw	a0,1456(a4) # 1c0085b0 <brk>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:370

	if (brk + incr >= __heap_end) {
1c0014fc <_sbrk+0xa> add	a5,a5,a0
1c0014fe <_sbrk+0xc> lui	a4,0x1c00d
1c001502 <_sbrk+0x10> addi	a4,a4,-992 # 1c00cc20 <__heap_end>
1c001506 <_sbrk+0x14> bgeu	a5,a4,1c001514 <_sbrk+0x22>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:375
		errno = ENOMEM;
		return (void *)-1;
	}

	brk += incr;
1c00150a <_sbrk+0x18> lui	a4,0x1c008
1c00150e <_sbrk+0x1c> sw	a5,1456(a4) # 1c0085b0 <brk>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:377
	return old_brk;
}
1c001512 <_sbrk+0x20> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:371
		errno = ENOMEM;
1c001514 <_sbrk+0x22> li	a4,12
1c001516 <_sbrk+0x24> sw	a4,-308(gp) # 1c008c1c <errno>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:372
		return (void *)-1;
1c00151a <_sbrk+0x28> li	a0,-1
1c00151c <_sbrk+0x2a> ret
__malloc_lock():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:380

void __malloc_lock(struct _reent *p)
{
1c00151e <__malloc_lock> addi	sp,sp,-16
1c001520 <__malloc_lock+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:384
	/* Make sure no mallocs inside ISRs */
	/* configASSERT(!xPortIsInsideInterrupt()); */
#ifdef CONFIG_FREERTOS_KERNEL
	vTaskSuspendAll();
1c001522 <__malloc_lock+0x4> jal	ra,1c000ff8 <vTaskSuspendAll>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:386
#endif
}
1c001526 <__malloc_lock+0x8> lw	ra,12(sp)
1c001528 <__malloc_lock+0xa> addi	sp,sp,16
1c00152a <__malloc_lock+0xc> ret
__malloc_unlock():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:389

void __malloc_unlock(struct _reent *p)
{
1c00152c <__malloc_unlock> addi	sp,sp,-16
1c00152e <__malloc_unlock+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:391
#ifdef CONFIG_FREERTOS_KERNEL
	(void)xTaskResumeAll();
1c001530 <__malloc_unlock+0x4> jal	1c001306 <xTaskResumeAll>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/syscalls.c:393
#endif
}
1c001532 <__malloc_unlock+0x6> lw	ra,12(sp)
1c001534 <__malloc_unlock+0x8> addi	sp,sp,16
1c001536 <__malloc_unlock+0xa> ret
pi_cl_l1_free():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/cl_l1_malloc.c:50
    __restore_irq(irq);
    return ret_ptr;
}

void pi_cl_l1_free(struct pi_device *device, void *_chunk, int size)
{
1c001538 <pi_cl_l1_free> addi	sp,sp,-16
1c00153a <pi_cl_l1_free+0x2> sw	ra,12(sp)
1c00153c <pi_cl_l1_free+0x4> sw	s0,8(sp)
__disable_irq():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/riscv.h:177
  \details Disables IRQ interrupts by clearing the MPIE-bit in the CPSR.
	   Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) static inline uint32_t __disable_irq(void)
{
	uint32_t val = csr_read_clear(MSTATUS_ADDR, BIT(MSTATUS_MIE_Pos));
1c00153e <pi_cl_l1_free+0x6> csrrci	s0,mstatus,8
pi_cl_l1_free():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/cl_l1_malloc.c:52
    uint32_t irq = __disable_irq();
    __malloc_free(&__cl_l1_malloc, _chunk, size);
1c001542 <pi_cl_l1_free+0xa> lui	a0,0x1c009
1c001546 <pi_cl_l1_free+0xe> addi	a0,a0,-2032 # 1c008810 <__cl_l1_malloc>
1c00154a <pi_cl_l1_free+0x12> jal	1c001558 <__malloc_free>
__restore_irq():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/riscv.h:157
	csr_write(MSTATUS_ADDR, irq);
1c00154c <pi_cl_l1_free+0x14> csrw	mstatus,s0
pi_cl_l1_free():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/cl_l1_malloc.c:54
    __restore_irq(irq);
}
1c001550 <pi_cl_l1_free+0x18> lw	ra,12(sp)
1c001552 <pi_cl_l1_free+0x1a> lw	s0,8(sp)
1c001554 <pi_cl_l1_free+0x1c> addi	sp,sp,16
1c001556 <pi_cl_l1_free+0x1e> ret
__malloc_free():
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:168
}

void __attribute__((noinline)) __malloc_free(malloc_t *a, void *_chunk, int32_t size)
{
    malloc_chunk_t *chunk = (malloc_chunk_t *) _chunk;
    malloc_chunk_t *next = a->first_free, *prev = 0;
1c001558 <__malloc_free> lw	a5,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:169
    size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c00155a <__malloc_free+0x2> addi	a2,a2,7
1c00155c <__malloc_free+0x4> p.bclr	a2,a2,2,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:168
    malloc_chunk_t *next = a->first_free, *prev = 0;
1c001560 <__malloc_free+0x8> li	a4,0
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:171

    while (next && (next < chunk))
1c001562 <__malloc_free+0xa> beqz	a5,1c00156e <__malloc_free+0x16>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:171 (discriminator 1)
1c001564 <__malloc_free+0xc> bgeu	a5,a1,1c00156e <__malloc_free+0x16>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:173
    {
        prev = next;
1c001568 <__malloc_free+0x10> mv	a4,a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:174
        next = next->next;
1c00156a <__malloc_free+0x12> lw	a5,4(a5)
1c00156c <__malloc_free+0x14> j	1c001562 <__malloc_free+0xa>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:177
    }

    if (((int8_t *) chunk + size) == (int8_t *) next)
1c00156e <__malloc_free+0x16> add	a3,a1,a2
1c001572 <__malloc_free+0x1a> beq	a3,a5,1c00158a <__malloc_free+0x32>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:185
        chunk->size = size + next->size;
        chunk->next = next->next;
    }
    else
    {
        chunk->size = size;
1c001576 <__malloc_free+0x1e> sw	a2,0(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:186
        chunk->next = next;
1c001578 <__malloc_free+0x20> sw	a5,4(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:189
    }

    if (prev)
1c00157a <__malloc_free+0x22> beqz	a4,1c0015a2 <__malloc_free+0x4a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:191
    {
        if (((int8_t *) prev + prev->size) == (int8_t *) chunk)
1c00157c <__malloc_free+0x24> lw	a5,0(a4)
1c00157e <__malloc_free+0x26> add	a3,a4,a5
1c001582 <__malloc_free+0x2a> beq	a3,a1,1c001596 <__malloc_free+0x3e>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:199
            prev->size += chunk->size;
            prev->next = chunk->next;
        }
        else
        {
            prev->next = chunk;
1c001586 <__malloc_free+0x2e> sw	a1,4(a4)
1c001588 <__malloc_free+0x30> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:180
        chunk->size = size + next->size;
1c00158a <__malloc_free+0x32> lw	a3,0(a5)
1c00158c <__malloc_free+0x34> add	a2,a2,a3
1c00158e <__malloc_free+0x36> sw	a2,0(a1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:181
        chunk->next = next->next;
1c001590 <__malloc_free+0x38> lw	a5,4(a5)
1c001592 <__malloc_free+0x3a> sw	a5,4(a1)
1c001594 <__malloc_free+0x3c> j	1c00157a <__malloc_free+0x22>
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:194
            prev->size += chunk->size;
1c001596 <__malloc_free+0x3e> lw	a3,0(a1)
1c001598 <__malloc_free+0x40> add	a5,a5,a3
1c00159a <__malloc_free+0x42> sw	a5,0(a4)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:195
            prev->next = chunk->next;
1c00159c <__malloc_free+0x44> lw	a5,4(a1)
1c00159e <__malloc_free+0x46> sw	a5,4(a4)
1c0015a0 <__malloc_free+0x48> ret
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:204
        }
    }
    else
    {
        a->first_free = chunk;
1c0015a2 <__malloc_free+0x4a> sw	a1,0(a0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/libc/malloc/malloc_internal.c:206
    }
}
1c0015a4 <__malloc_free+0x4c> ret
vSystemIrqHandler():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:177
	/* TODO: allow setting interrupt priority (to super high(?)) */
	irq_enable(IRQ_FC_EVT_TIMER0_LO);
}

void vSystemIrqHandler(uint32_t mcause)
{
1c0015a6 <vSystemIrqHandler> addi	sp,sp,-16
1c0015a8 <vSystemIrqHandler+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:179
	extern void (*isr_table[ISR_TABLE_SIZE])(void);
	isr_table[mcause & (ISR_TABLE_SIZE-1)]();
1c0015aa <vSystemIrqHandler+0x4> andi	a5,a0,255
1c0015ae <vSystemIrqHandler+0x8> lui	a0,0x1c009
1c0015b2 <vSystemIrqHandler+0xc> slli	a5,a5,0x2
1c0015b4 <vSystemIrqHandler+0xe> addi	a0,a0,-2024 # 1c008818 <isr_table>
1c0015b8 <vSystemIrqHandler+0x12> add	a0,a0,a5
1c0015ba <vSystemIrqHandler+0x14> lw	a5,0(a0)
1c0015bc <vSystemIrqHandler+0x16> jalr	a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/system.c:180
}
1c0015be <vSystemIrqHandler+0x18> lw	ra,12(sp)
1c0015c0 <vSystemIrqHandler+0x1a> addi	sp,sp,16
1c0015c2 <vSystemIrqHandler+0x1c> ret
pi_cl_send_task_to_fc():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:98
    hal_compiler_barrier();
    hal_eu_cluster_evt_trig_set(FC_NOTIFY_CLUSTER_EVENT, 0);
}

void pi_cl_send_task_to_fc(pi_task_t *task)
{
1c0015c4 <pi_cl_send_task_to_fc> addi	sp,sp,-16
1c0015c6 <pi_cl_send_task_to_fc+0x2> sw	ra,12(sp)
hal_evt_read32():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:197
 the core has been waken-up. This value depends on the feature which is accessed.
*/
static inline uint32_t hal_evt_read32(uint32_t base, uint32_t offset)
{
	uint32_t value;
	value = __builtin_pulp_event_unit_read((int *)base, 0);
1c0015c8 <pi_cl_send_task_to_fc+0x4> lui	a5,0x204
1c0015cc <pi_cl_send_task_to_fc+0x8> addi	a5,a5,192 # 002040c0 <__heap_l2_shared_size+0x1940e0>
1c0015d0 <pi_cl_send_task_to_fc+0xc> p.elw	a4,0(a5)
pi_cl_send_task_to_fc():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:100
	hal_eu_mutex_lock(0);
	struct cluster_driver_data *data = __per_cluster_data[0];
1c0015d4 <pi_cl_send_task_to_fc+0x10> lui	a5,0x1c008
1c0015d8 <pi_cl_send_task_to_fc+0x14> lw	a2,2036(a5) # 1c0087f4 <__per_cluster_data>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:101
	while (data->task_to_fc != NULL) {
1c0015dc <pi_cl_send_task_to_fc+0x18> lw	a5,52(a2)
1c0015de <pi_cl_send_task_to_fc+0x1a> beqz	a5,1c0015f4 <pi_cl_send_task_to_fc+0x30>
hal_eu_evt_mask_set():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:260
   instructions) \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1
   means the corresponding bit is set in the event mask.
*/
static inline void hal_eu_evt_mask_set(uint32_t evtMask)
{
	EU_CORE_DEMUX->MASK_OR = evtMask;
1c0015e0 <pi_cl_send_task_to_fc+0x1c> lui	a5,0x204
1c0015e4 <pi_cl_send_task_to_fc+0x20> li	a4,2
1c0015e6 <pi_cl_send_task_to_fc+0x22> sw	a4,8(a5)
hal_evt_read32():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:197
	value = __builtin_pulp_event_unit_read((int *)base, 0);
1c0015e8 <pi_cl_send_task_to_fc+0x24> addi	a3,a5,60 # 0020403c <__heap_l2_shared_size+0x19405c>
1c0015ec <pi_cl_send_task_to_fc+0x28> p.elw	a1,0(a3)
hal_eu_evt_mask_clr():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:271
   update the event mask. There is 1 bit per event, 1 means the corresponding bit is cleared in the
   event mask.
*/
static inline void hal_eu_evt_mask_clr(uint32_t evtMask)
{
	EU_CORE_DEMUX->MASK_AND = evtMask;
1c0015f0 <pi_cl_send_task_to_fc+0x2c> sw	a4,4(a5)
hal_compiler_barrier():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/include/target.h:30
}
1c0015f2 <pi_cl_send_task_to_fc+0x2e> j	1c0015dc <pi_cl_send_task_to_fc+0x18>
pi_cl_send_task_to_fc():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:106
		hal_compiler_barrier();
		hal_eu_evt_mask_wait_and_clr(1 << FC_NOTIFY_CLUSTER_EVENT);
		hal_compiler_barrier();
	}
	data->task_to_fc = task;
1c0015f4 <pi_cl_send_task_to_fc+0x30> sw	a0,52(a2)
hal_eu_fc_evt_trig_set():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:409


static inline void hal_eu_fc_evt_trig_set(int event_num, uint32_t value)
{
	/* pend software interrupt in fc */
	irq_pend(event_num);
1c0015f6 <pi_cl_send_task_to_fc+0x32> li	a0,2
1c0015f8 <pi_cl_send_task_to_fc+0x34> jal	1c0016ee <irq_pend>
hal_eu_mutex_unlock():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/event_unit.h:501
}

static inline void hal_eu_mutex_unlock(uint32_t mutex_id)
{
	__asm__ __volatile__("" : : : "memory");
	EU_MUTEX_DEMUX->MUTEX[mutex_id] = 0;
1c0015fa <pi_cl_send_task_to_fc+0x36> lui	a5,0x204
1c0015fe <pi_cl_send_task_to_fc+0x3a> sw	zero,192(a5) # 002040c0 <__heap_l2_shared_size+0x1940e0>
pi_cl_send_task_to_fc():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/cl_to_fc_delegate.c:109
	hal_eu_fc_evt_trig_set(CLUSTER_TO_FC_NOTIFY_IRQN, 0);
	hal_eu_mutex_unlock(0);
}
1c001602 <pi_cl_send_task_to_fc+0x3e> lw	ra,12(sp)
1c001604 <pi_cl_send_task_to_fc+0x40> addi	sp,sp,16
1c001606 <pi_cl_send_task_to_fc+0x42> ret
cl_task_finish():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:115
							      .heap_start = (void *)0x10000004,
							      .heap_size = 0x400};


void cl_task_finish(void)
{
1c001608 <cl_task_finish> addi	sp,sp,-16
1c00160a <cl_task_finish+0x2> sw	ra,12(sp)
1c00160c <cl_task_finish+0x4> sw	s0,8(sp)
1c00160e <cl_task_finish+0x6> sw	s1,4(sp)
1c001610 <cl_task_finish+0x8> sw	s2,0(sp)
__native_cluster_id():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/include/target.h:89

static inline uint32_t __native_cluster_id()
{
	/* encoding of mhartid {21'b0, cluster_id_i[5:0], 1'b0, core_id_i[3:0]}
	 */
	uint32_t mhartid = csr_read(MHARTID_ADDR);
1c001612 <cl_task_finish+0xa> csrr	a5,mhartid
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/control-pulp/include/target.h:90
	return (mhartid >> 5) & 0x3f;
1c001616 <cl_task_finish+0xe> srli	a5,a5,0x5
1c001618 <cl_task_finish+0x10> p.bclr	a5,a5,25,6
cl_task_finish():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:120
	int id = __native_cluster_id();

	// TODO: send callback if it exists
	// -----
	struct cluster_driver_data *data = __per_cluster_data[id];
1c00161c <cl_task_finish+0x14> slli	a5,a5,0x2
1c00161e <cl_task_finish+0x16> lui	a4,0x1c008
1c001622 <cl_task_finish+0x1a> addi	a4,a4,2036 # 1c0087f4 <__per_cluster_data>
1c001626 <cl_task_finish+0x1e> add	a5,a5,a4
1c001628 <cl_task_finish+0x20> lw	s0,0(a5)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:121
	struct pi_cluster_task *task = data->task_first;
1c00162a <cl_task_finish+0x22> lw	s2,0(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:123

	PRINTF("cl_task_finish: task=%p\n\r", task);
1c00162e <cl_task_finish+0x26> mv	a3,s2
1c001630 <cl_task_finish+0x28> li	a2,123
1c001634 <cl_task_finish+0x2c> lui	a1,0x1c008
1c001638 <cl_task_finish+0x30> addi	a1,a1,480 # 1c0081e0 <__func__.5341>
1c00163c <cl_task_finish+0x34> lui	a0,0x1c008
1c001640 <cl_task_finish+0x38> addi	a0,a0,348 # 1c00815c <__func__.3257+0x14>
1c001644 <cl_task_finish+0x3c> jal	ra,1c002792 <iprintf>
cl_sync_test_and_set_lock():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/cl_synchronisation.h:301
 * \param  spinlock spinlock structure to take lock on
 */
static inline int32_t cl_sync_test_and_set_lock(spinlock_t *spinlock)
{
	hal_compiler_barrier();
	int32_t value = *(volatile int32_t *)spinlock->lock_ptr;
1c001648 <cl_task_finish+0x40> lw	a5,36(s0)
1c00164a <cl_task_finish+0x42> lw	a5,0(a5)
cl_sync_spinlock_take():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/cl_synchronisation.h:314
 * \param  spinlock spinlock structure to take the lock on
 */
static inline void cl_sync_spinlock_take(spinlock_t *spinlock)
{
	// the test and set is linked directly to the address, nothing special to do
	while (cl_sync_test_and_set_lock(spinlock) == -1) {
1c00164c <cl_task_finish+0x44> p.beqimm	a5,-1,1c001648 <cl_task_finish+0x40>
cl_pop_cluster_task():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:432
static inline void cl_pop_cluster_task(struct cluster_driver_data *data)
{
	// critical section for cluster and fc
	// Uses spinlock as it is pretty much the only reliable synchronisation we have
	cl_sync_spinlock_take(&data->fifo_access);
	struct pi_cluster_task *task = data->task_first;
1c001650 <cl_task_finish+0x48> lw	s1,0(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:433
	data->task_first = task->next;
1c001652 <cl_task_finish+0x4a> lw	a5,32(s1)
1c001654 <cl_task_finish+0x4c> sw	a5,0(s0)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:434
	if (data->task_first == NULL) {
1c001656 <cl_task_finish+0x4e> beqz	a5,1c0016aa <cl_task_finish+0xa2>
cl_sync_spinlock_release():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/include/cluster/cl_synchronisation.h:326
 * \param  spinlock spinlock structure to release
 */
static inline void cl_sync_spinlock_release(spinlock_t *spinlock)
{
	hal_compiler_barrier();
	*(volatile int32_t *)spinlock->release_ptr = 0;
1c001658 <cl_task_finish+0x50> lw	a5,40(s0)
1c00165a <cl_task_finish+0x52> sw	zero,0(a5)
cl_pop_cluster_task():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:438
		data->task_last = NULL;
	}
	cl_sync_spinlock_release(&data->fifo_access);
	if (task->stack_allocated) {
1c00165e <cl_task_finish+0x56> lw	a5,28(s1)
1c001660 <cl_task_finish+0x58> bnez	a5,1c0016b0 <cl_task_finish+0xa8>
cl_task_finish():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:127
	PRINTF("cl_pop_cluster_task done\n\r");
1c001662 <cl_task_finish+0x5a> li	a2,127
1c001666 <cl_task_finish+0x5e> lui	a1,0x1c008
1c00166a <cl_task_finish+0x62> addi	a1,a1,480 # 1c0081e0 <__func__.5341>
1c00166e <cl_task_finish+0x66> lui	a0,0x1c008
1c001672 <cl_task_finish+0x6a> addi	a0,a0,408 # 1c008198 <__func__.3257+0x50>
1c001676 <cl_task_finish+0x6e> jal	ra,1c002792 <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:129
	if (task->completion_callback) {
1c00167a <cl_task_finish+0x72> lw	a5,24(s2)
1c00167e <cl_task_finish+0x76> beqz	a5,1c00169e <cl_task_finish+0x96>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:130
	        PRINTF("send notification to fc\n\r");
1c001680 <cl_task_finish+0x78> li	a2,130
1c001684 <cl_task_finish+0x7c> lui	a1,0x1c008
1c001688 <cl_task_finish+0x80> addi	a1,a1,480 # 1c0081e0 <__func__.5341>
1c00168c <cl_task_finish+0x84> lui	a0,0x1c008
1c001690 <cl_task_finish+0x88> addi	a0,a0,444 # 1c0081bc <__func__.3257+0x74>
1c001694 <cl_task_finish+0x8c> jal	ra,1c002792 <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:131
		pi_cl_send_task_to_fc(task->completion_callback);
1c001698 <cl_task_finish+0x90> lw	a0,24(s2)
1c00169c <cl_task_finish+0x94> jal	1c0015c4 <pi_cl_send_task_to_fc>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:134
}
1c00169e <cl_task_finish+0x96> lw	ra,12(sp)
1c0016a0 <cl_task_finish+0x98> lw	s0,8(sp)
1c0016a2 <cl_task_finish+0x9a> lw	s1,4(sp)
1c0016a4 <cl_task_finish+0x9c> lw	s2,0(sp)
1c0016a6 <cl_task_finish+0x9e> addi	sp,sp,16
1c0016a8 <cl_task_finish+0xa0> ret
cl_pop_cluster_task():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:435
		data->task_last = NULL;
1c0016aa <cl_task_finish+0xa2> sw	zero,4(s0)
1c0016ae <cl_task_finish+0xa6> j	1c001658 <cl_task_finish+0x50>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:440
		// put everything back as it was before
		uint32_t stack_size = task->slave_stack_size * ((uint32_t)ARCHI_CLUSTER_NB_PE - 1);
1c0016b0 <cl_task_finish+0xa8> lw	a5,16(s1)
1c0016b2 <cl_task_finish+0xaa> slli	s0,a5,0x3
1c0016b6 <cl_task_finish+0xae> sub	s0,s0,a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:441
		stack_size += task->stack_size;
1c0016b8 <cl_task_finish+0xb0> lw	a5,12(s1)
1c0016ba <cl_task_finish+0xb2> add	s0,s0,a5
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:442
		pi_cl_l1_free(NULL, task->stacks, stack_size);
1c0016bc <cl_task_finish+0xb4> mv	a2,s0
1c0016be <cl_task_finish+0xb6> lw	a1,8(s1)
1c0016c0 <cl_task_finish+0xb8> li	a0,0
1c0016c2 <cl_task_finish+0xba> jal	1c001538 <pi_cl_l1_free>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:443
		PRINTF("free %p %ld\n\r", task->stacks, stack_size);
1c0016c4 <cl_task_finish+0xbc> mv	a4,s0
1c0016c6 <cl_task_finish+0xbe> lw	a3,8(s1)
1c0016c8 <cl_task_finish+0xc0> li	a2,443
1c0016cc <cl_task_finish+0xc4> lui	a1,0x1c008
1c0016d0 <cl_task_finish+0xc8> addi	a1,a1,496 # 1c0081f0 <__func__.5439>
1c0016d4 <cl_task_finish+0xcc> lui	a0,0x1c008
1c0016d8 <cl_task_finish+0xd0> addi	a0,a0,384 # 1c008180 <__func__.3257+0x38>
1c0016dc <cl_task_finish+0xd4> jal	ra,1c002792 <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:444
		task->stacks = NULL;
1c0016e0 <cl_task_finish+0xd8> sw	zero,8(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:445
		task->stack_size = 0;
1c0016e4 <cl_task_finish+0xdc> sw	zero,12(s1)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/cluster/fc_to_cl_delegate.c:446
		task->stack_allocated = 0;
1c0016e8 <cl_task_finish+0xe0> sw	zero,28(s1)
1c0016ec <cl_task_finish+0xe4> j	1c001662 <cl_task_finish+0x5a>
irq_pend():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:68
	writew(0ul, (uintptr_t)(CLIC_ADDR + CLIC_CLICINTIE_REG_OFFSET(id)));
}

void irq_pend(int id)
{
	assert(0 <= id && id < CLIC_PARAM_NUM_SRC);
1c0016ee <irq_pend> li	a5,255
1c0016f2 <irq_pend+0x4> bltu	a5,a0,1c001708 <irq_pend+0x1a>
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:69
	writew(1ul, (uintptr_t)(CLIC_ADDR + CLIC_CLICINTIP_REG_OFFSET(id)));
1c0016f6 <irq_pend+0x8> lui	a5,0x1a20
1c0016fa <irq_pend+0xc> addi	a5,a5,256 # 01a20100 <__heap_l2_shared_size+0x19b0120>
1c0016fe <irq_pend+0x10> add	a0,a0,a5
1c001700 <irq_pend+0x12> slli	a0,a0,0x4
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
	asm volatile("sw %0, 0(%1)"
1c001702 <irq_pend+0x14> li	a5,1
1c001704 <irq_pend+0x16> sw	a5,0(a0)
1c001706 <irq_pend+0x18> ret
irq_pend():
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:67 (discriminator 1)
{
1c001708 <irq_pend+0x1a> addi	sp,sp,-16
1c00170a <irq_pend+0x1c> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/freertos/drivers/clic.c:68 (discriminator 1)
	assert(0 <= id && id < CLIC_PARAM_NUM_SRC);
1c00170c <irq_pend+0x1e> lui	a3,0x1c008
1c001710 <irq_pend+0x22> addi	a3,a3,616 # 1c008268 <__func__.5439+0x78>
1c001714 <irq_pend+0x26> lui	a2,0x1c008
1c001718 <irq_pend+0x2a> addi	a2,a2,652 # 1c00828c <__func__.1889>
1c00171c <irq_pend+0x2e> li	a1,68
1c001720 <irq_pend+0x32> lui	a0,0x1c008
1c001724 <irq_pend+0x36> addi	a0,a0,548 # 1c008224 <__func__.5439+0x34>
1c001728 <irq_pend+0x3a> jal	ra,1c0021a6 <__assert_func>
1c00172c <irq_pend+0x3e> unimp
	...
__handle_clic_int():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:28
/* TODO: consider __riscv_32e */
/* regular integer abi */
.global __handle_clic_int
.func
__handle_clic_int:
	addi sp, sp, -(4 * 16)
1c001730 <__handle_clic_int> addi	sp,sp,-64
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:29
	sw ra, 0(sp)
1c001732 <__handle_clic_int+0x2> sw	ra,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:30
	sw t0, 4(sp)
1c001734 <__handle_clic_int+0x4> sw	t0,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:31
	sw t1, 8(sp)
1c001736 <__handle_clic_int+0x6> sw	t1,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:32
	sw t2, 12(sp)
1c001738 <__handle_clic_int+0x8> sw	t2,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:33
	sw a0, 16(sp)
1c00173a <__handle_clic_int+0xa> sw	a0,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:34
	sw a1, 20(sp)
1c00173c <__handle_clic_int+0xc> sw	a1,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:35
	sw a2, 24(sp)
1c00173e <__handle_clic_int+0xe> sw	a2,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:36
	sw a3, 28(sp)
1c001740 <__handle_clic_int+0x10> sw	a3,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:37
	sw a4, 32(sp)
1c001742 <__handle_clic_int+0x12> sw	a4,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:38
	sw a5, 36(sp)
1c001744 <__handle_clic_int+0x14> sw	a5,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:39
	sw a6, 40(sp)
1c001746 <__handle_clic_int+0x16> sw	a6,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:40
	sw a7, 44(sp)
1c001748 <__handle_clic_int+0x18> sw	a7,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:41
	sw t3, 48(sp)
1c00174a <__handle_clic_int+0x1a> sw	t3,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:42
	sw t4, 52(sp)
1c00174c <__handle_clic_int+0x1c> sw	t4,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:43
	sw t5, 56(sp)
1c00174e <__handle_clic_int+0x1e> sw	t5,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:44
	sw t6, 60(sp)
1c001750 <__handle_clic_int+0x20> sw	t6,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:46

	la   t0, clic_isr_hook
1c001752 <__handle_clic_int+0x22> addi	t0,gp,-312 # 1c008c18 <clic_isr_hook>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:47
	lw   t0, 0(t0) /* load function pointer */
1c001756 <__handle_clic_int+0x26> lw	t0,0(t0) # 00070000 <__heap_l2_shared_size+0x20>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:49

	jalr t0 /* vector into hook */
1c00175a <__handle_clic_int+0x2a> jalr	t0
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:53

	/* TODO: write to completion register */

	lw ra, 0(sp)
1c00175c <__handle_clic_int+0x2c> lw	ra,0(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:54
	lw t0, 4(sp)
1c00175e <__handle_clic_int+0x2e> lw	t0,4(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:55
	lw t1, 8(sp)
1c001760 <__handle_clic_int+0x30> lw	t1,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:56
	lw t2, 12(sp)
1c001762 <__handle_clic_int+0x32> lw	t2,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:57
	lw a0, 16(sp)
1c001764 <__handle_clic_int+0x34> lw	a0,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:58
	lw a1, 20(sp)
1c001766 <__handle_clic_int+0x36> lw	a1,20(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:59
	lw a2, 24(sp)
1c001768 <__handle_clic_int+0x38> lw	a2,24(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:60
	lw a3, 28(sp)
1c00176a <__handle_clic_int+0x3a> lw	a3,28(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:61
	lw a4, 32(sp)
1c00176c <__handle_clic_int+0x3c> lw	a4,32(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:62
	lw a5, 36(sp)
1c00176e <__handle_clic_int+0x3e> lw	a5,36(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:63
	lw a6, 40(sp)
1c001770 <__handle_clic_int+0x40> lw	a6,40(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:64
	lw a7, 44(sp)
1c001772 <__handle_clic_int+0x42> lw	a7,44(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:65
	lw t3, 48(sp)
1c001774 <__handle_clic_int+0x44> lw	t3,48(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:66
	lw t4, 52(sp)
1c001776 <__handle_clic_int+0x46> lw	t4,52(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:67
	lw t5, 56(sp)
1c001778 <__handle_clic_int+0x48> lw	t5,56(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:68
	lw t6, 60(sp)
1c00177a <__handle_clic_int+0x4a> lw	t6,60(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:69
	addi sp, sp, (4 * 16)
1c00177c <__handle_clic_int+0x4c> addi	sp,sp,64
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:70
	mret
1c00177e <__handle_clic_int+0x4e> mret
clic_setup_mtvec():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:76

.section .text.int
.global clic_setup_mtvec
.type clic_setup_mtvec,@function
clic_setup_mtvec:
	la t0, __clic_vector_table
1c001782 <clic_setup_mtvec> auipc	t0,0x0
1c001786 <clic_setup_mtvec+0x4> addi	t0,t0,1150 # 1c001c00 <__clic_vector_table>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:77
	or t0, t0, 1 /* enable vectored mode TODO: should be clic mode */
1c00178a <clic_setup_mtvec+0x8> ori	t0,t0,1
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:78
	csrw mtvec, t0
1c00178e <clic_setup_mtvec+0xc> csrw	mtvec,t0
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:79
	ret
1c001792 <clic_setup_mtvec+0x10> ret
clic_setup_mtvt():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:85

.section .text.int
.global clic_setup_mtvt
.type clic_setup_mtvt,@function
clic_setup_mtvt:
	la t0, __clic_vector_table
1c001794 <clic_setup_mtvt> auipc	t0,0x0
1c001798 <clic_setup_mtvt+0x4> addi	t0,t0,1132 # 1c001c00 <__clic_vector_table>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:86
	or t0, t0, 1 /* enable vectored mode TODO: should be clic mode */
1c00179c <clic_setup_mtvt+0x8> ori	t0,t0,1
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:87
	csrw 0x307, t0 /* mtvt=0x307 */
1c0017a0 <clic_setup_mtvt+0xc> csrw	0x307,t0
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:88
	ret
1c0017a4 <clic_setup_mtvt+0x10> ret
	...
default_exception_handler():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:92

.section .text.vectors
default_exception_handler:
	j default_exception_handler
1c001800 <default_exception_handler> j	1c001800 <default_exception_handler>
software_handler():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:94
software_handler:
	j software_handler
1c001802 <software_handler> j	1c001802 <software_handler>
timer_handler():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:96
timer_handler:
	j timer_handler
1c001804 <timer_handler> j	1c001804 <timer_handler>
external_handler():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:98
external_handler:
	j external_handler
1c001806 <external_handler> j	1c001806 <external_handler>
__no_irq_handler():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:100
__no_irq_handler:
	j __no_irq_handler
1c001808 <__no_irq_handler> j	1c001808 <__no_irq_handler>
1c00180a <__no_irq_handler+0x2> nop
1c00180e <__no_irq_handler+0x6> nop
1c001812 <__no_irq_handler+0xa> nop
1c001816 <__no_irq_handler+0xe> nop
1c00181a <__no_irq_handler+0x12> nop
1c00181e <__no_irq_handler+0x16> nop
1c001822 <__no_irq_handler+0x1a> nop
1c001826 <__no_irq_handler+0x1e> nop
1c00182a <__no_irq_handler+0x22> nop
1c00182e <__no_irq_handler+0x26> nop
1c001832 <__no_irq_handler+0x2a> nop
1c001836 <__no_irq_handler+0x2e> nop
1c00183a <__no_irq_handler+0x32> nop
1c00183e <__no_irq_handler+0x36> nop
1c001842 <__no_irq_handler+0x3a> nop
1c001846 <__no_irq_handler+0x3e> nop
1c00184a <__no_irq_handler+0x42> nop
1c00184e <__no_irq_handler+0x46> nop
1c001852 <__no_irq_handler+0x4a> nop
1c001856 <__no_irq_handler+0x4e> nop
1c00185a <__no_irq_handler+0x52> nop
1c00185e <__no_irq_handler+0x56> nop
1c001862 <__no_irq_handler+0x5a> nop
1c001866 <__no_irq_handler+0x5e> nop
1c00186a <__no_irq_handler+0x62> nop
1c00186e <__no_irq_handler+0x66> nop
1c001872 <__no_irq_handler+0x6a> nop
1c001876 <__no_irq_handler+0x6e> nop
1c00187a <__no_irq_handler+0x72> nop
1c00187e <__no_irq_handler+0x76> nop
1c001882 <__no_irq_handler+0x7a> nop
1c001886 <__no_irq_handler+0x7e> nop
1c00188a <__no_irq_handler+0x82> nop
1c00188e <__no_irq_handler+0x86> nop
1c001892 <__no_irq_handler+0x8a> nop
1c001896 <__no_irq_handler+0x8e> nop
1c00189a <__no_irq_handler+0x92> nop
1c00189e <__no_irq_handler+0x96> nop
1c0018a2 <__no_irq_handler+0x9a> nop
1c0018a6 <__no_irq_handler+0x9e> nop
1c0018aa <__no_irq_handler+0xa2> nop
1c0018ae <__no_irq_handler+0xa6> nop
1c0018b2 <__no_irq_handler+0xaa> nop
1c0018b6 <__no_irq_handler+0xae> nop
1c0018ba <__no_irq_handler+0xb2> nop
1c0018be <__no_irq_handler+0xb6> nop
1c0018c2 <__no_irq_handler+0xba> nop
1c0018c6 <__no_irq_handler+0xbe> nop
1c0018ca <__no_irq_handler+0xc2> nop
1c0018ce <__no_irq_handler+0xc6> nop
1c0018d2 <__no_irq_handler+0xca> nop
1c0018d6 <__no_irq_handler+0xce> nop
1c0018da <__no_irq_handler+0xd2> nop
1c0018de <__no_irq_handler+0xd6> nop
1c0018e2 <__no_irq_handler+0xda> nop
1c0018e6 <__no_irq_handler+0xde> nop
1c0018ea <__no_irq_handler+0xe2> nop
1c0018ee <__no_irq_handler+0xe6> nop
1c0018f2 <__no_irq_handler+0xea> nop
1c0018f6 <__no_irq_handler+0xee> nop
1c0018fa <__no_irq_handler+0xf2> nop
1c0018fe <__no_irq_handler+0xf6> nop
1c001902 <__no_irq_handler+0xfa> nop
1c001906 <__no_irq_handler+0xfe> nop
1c00190a <__no_irq_handler+0x102> nop
1c00190e <__no_irq_handler+0x106> nop
1c001912 <__no_irq_handler+0x10a> nop
1c001916 <__no_irq_handler+0x10e> nop
1c00191a <__no_irq_handler+0x112> nop
1c00191e <__no_irq_handler+0x116> nop
1c001922 <__no_irq_handler+0x11a> nop
1c001926 <__no_irq_handler+0x11e> nop
1c00192a <__no_irq_handler+0x122> nop
1c00192e <__no_irq_handler+0x126> nop
1c001932 <__no_irq_handler+0x12a> nop
1c001936 <__no_irq_handler+0x12e> nop
1c00193a <__no_irq_handler+0x132> nop
1c00193e <__no_irq_handler+0x136> nop
1c001942 <__no_irq_handler+0x13a> nop
1c001946 <__no_irq_handler+0x13e> nop
1c00194a <__no_irq_handler+0x142> nop
1c00194e <__no_irq_handler+0x146> nop
1c001952 <__no_irq_handler+0x14a> nop
1c001956 <__no_irq_handler+0x14e> nop
1c00195a <__no_irq_handler+0x152> nop
1c00195e <__no_irq_handler+0x156> nop
1c001962 <__no_irq_handler+0x15a> nop
1c001966 <__no_irq_handler+0x15e> nop
1c00196a <__no_irq_handler+0x162> nop
1c00196e <__no_irq_handler+0x166> nop
1c001972 <__no_irq_handler+0x16a> nop
1c001976 <__no_irq_handler+0x16e> nop
1c00197a <__no_irq_handler+0x172> nop
1c00197e <__no_irq_handler+0x176> nop
1c001982 <__no_irq_handler+0x17a> nop
1c001986 <__no_irq_handler+0x17e> nop
1c00198a <__no_irq_handler+0x182> nop
1c00198e <__no_irq_handler+0x186> nop
1c001992 <__no_irq_handler+0x18a> nop
1c001996 <__no_irq_handler+0x18e> nop
1c00199a <__no_irq_handler+0x192> nop
1c00199e <__no_irq_handler+0x196> nop
1c0019a2 <__no_irq_handler+0x19a> nop
1c0019a6 <__no_irq_handler+0x19e> nop
1c0019aa <__no_irq_handler+0x1a2> nop
1c0019ae <__no_irq_handler+0x1a6> nop
1c0019b2 <__no_irq_handler+0x1aa> nop
1c0019b6 <__no_irq_handler+0x1ae> nop
1c0019ba <__no_irq_handler+0x1b2> nop
1c0019be <__no_irq_handler+0x1b6> nop
1c0019c2 <__no_irq_handler+0x1ba> nop
1c0019c6 <__no_irq_handler+0x1be> nop
1c0019ca <__no_irq_handler+0x1c2> nop
1c0019ce <__no_irq_handler+0x1c6> nop
1c0019d2 <__no_irq_handler+0x1ca> nop
1c0019d6 <__no_irq_handler+0x1ce> nop
1c0019da <__no_irq_handler+0x1d2> nop
1c0019de <__no_irq_handler+0x1d6> nop
1c0019e2 <__no_irq_handler+0x1da> nop
1c0019e6 <__no_irq_handler+0x1de> nop
1c0019ea <__no_irq_handler+0x1e2> nop
1c0019ee <__no_irq_handler+0x1e6> nop
1c0019f2 <__no_irq_handler+0x1ea> nop
1c0019f6 <__no_irq_handler+0x1ee> nop
1c0019fa <__no_irq_handler+0x1f2> nop
1c0019fe <__no_irq_handler+0x1f6> nop
1c001a02 <__no_irq_handler+0x1fa> nop
1c001a06 <__no_irq_handler+0x1fe> nop
1c001a0a <__no_irq_handler+0x202> nop
1c001a0e <__no_irq_handler+0x206> nop
1c001a12 <__no_irq_handler+0x20a> nop
1c001a16 <__no_irq_handler+0x20e> nop
1c001a1a <__no_irq_handler+0x212> nop
1c001a1e <__no_irq_handler+0x216> nop
1c001a22 <__no_irq_handler+0x21a> nop
1c001a26 <__no_irq_handler+0x21e> nop
1c001a2a <__no_irq_handler+0x222> nop
1c001a2e <__no_irq_handler+0x226> nop
1c001a32 <__no_irq_handler+0x22a> nop
1c001a36 <__no_irq_handler+0x22e> nop
1c001a3a <__no_irq_handler+0x232> nop
1c001a3e <__no_irq_handler+0x236> nop
1c001a42 <__no_irq_handler+0x23a> nop
1c001a46 <__no_irq_handler+0x23e> nop
1c001a4a <__no_irq_handler+0x242> nop
1c001a4e <__no_irq_handler+0x246> nop
1c001a52 <__no_irq_handler+0x24a> nop
1c001a56 <__no_irq_handler+0x24e> nop
1c001a5a <__no_irq_handler+0x252> nop
1c001a5e <__no_irq_handler+0x256> nop
1c001a62 <__no_irq_handler+0x25a> nop
1c001a66 <__no_irq_handler+0x25e> nop
1c001a6a <__no_irq_handler+0x262> nop
1c001a6e <__no_irq_handler+0x266> nop
1c001a72 <__no_irq_handler+0x26a> nop
1c001a76 <__no_irq_handler+0x26e> nop
1c001a7a <__no_irq_handler+0x272> nop
1c001a7e <__no_irq_handler+0x276> nop
1c001a82 <__no_irq_handler+0x27a> nop
1c001a86 <__no_irq_handler+0x27e> nop
1c001a8a <__no_irq_handler+0x282> nop
1c001a8e <__no_irq_handler+0x286> nop
1c001a92 <__no_irq_handler+0x28a> nop
1c001a96 <__no_irq_handler+0x28e> nop
1c001a9a <__no_irq_handler+0x292> nop
1c001a9e <__no_irq_handler+0x296> nop
1c001aa2 <__no_irq_handler+0x29a> nop
1c001aa6 <__no_irq_handler+0x29e> nop
1c001aaa <__no_irq_handler+0x2a2> nop
1c001aae <__no_irq_handler+0x2a6> nop
1c001ab2 <__no_irq_handler+0x2aa> nop
1c001ab6 <__no_irq_handler+0x2ae> nop
1c001aba <__no_irq_handler+0x2b2> nop
1c001abe <__no_irq_handler+0x2b6> nop
1c001ac2 <__no_irq_handler+0x2ba> nop
1c001ac6 <__no_irq_handler+0x2be> nop
1c001aca <__no_irq_handler+0x2c2> nop
1c001ace <__no_irq_handler+0x2c6> nop
1c001ad2 <__no_irq_handler+0x2ca> nop
1c001ad6 <__no_irq_handler+0x2ce> nop
1c001ada <__no_irq_handler+0x2d2> nop
1c001ade <__no_irq_handler+0x2d6> nop
1c001ae2 <__no_irq_handler+0x2da> nop
1c001ae6 <__no_irq_handler+0x2de> nop
1c001aea <__no_irq_handler+0x2e2> nop
1c001aee <__no_irq_handler+0x2e6> nop
1c001af2 <__no_irq_handler+0x2ea> nop
1c001af6 <__no_irq_handler+0x2ee> nop
1c001afa <__no_irq_handler+0x2f2> nop
1c001afe <__no_irq_handler+0x2f6> nop
1c001b02 <__no_irq_handler+0x2fa> nop
1c001b06 <__no_irq_handler+0x2fe> nop
1c001b0a <__no_irq_handler+0x302> nop
1c001b0e <__no_irq_handler+0x306> nop
1c001b12 <__no_irq_handler+0x30a> nop
1c001b16 <__no_irq_handler+0x30e> nop
1c001b1a <__no_irq_handler+0x312> nop
1c001b1e <__no_irq_handler+0x316> nop
1c001b22 <__no_irq_handler+0x31a> nop
1c001b26 <__no_irq_handler+0x31e> nop
1c001b2a <__no_irq_handler+0x322> nop
1c001b2e <__no_irq_handler+0x326> nop
1c001b32 <__no_irq_handler+0x32a> nop
1c001b36 <__no_irq_handler+0x32e> nop
1c001b3a <__no_irq_handler+0x332> nop
1c001b3e <__no_irq_handler+0x336> nop
1c001b42 <__no_irq_handler+0x33a> nop
1c001b46 <__no_irq_handler+0x33e> nop
1c001b4a <__no_irq_handler+0x342> nop
1c001b4e <__no_irq_handler+0x346> nop
1c001b52 <__no_irq_handler+0x34a> nop
1c001b56 <__no_irq_handler+0x34e> nop
1c001b5a <__no_irq_handler+0x352> nop
1c001b5e <__no_irq_handler+0x356> nop
1c001b62 <__no_irq_handler+0x35a> nop
1c001b66 <__no_irq_handler+0x35e> nop
1c001b6a <__no_irq_handler+0x362> nop
1c001b6e <__no_irq_handler+0x366> nop
1c001b72 <__no_irq_handler+0x36a> nop
1c001b76 <__no_irq_handler+0x36e> nop
1c001b7a <__no_irq_handler+0x372> nop
1c001b7e <__no_irq_handler+0x376> nop
1c001b82 <__no_irq_handler+0x37a> nop
1c001b86 <__no_irq_handler+0x37e> nop
1c001b8a <__no_irq_handler+0x382> nop
1c001b8e <__no_irq_handler+0x386> nop
1c001b92 <__no_irq_handler+0x38a> nop
1c001b96 <__no_irq_handler+0x38e> nop
1c001b9a <__no_irq_handler+0x392> nop
1c001b9e <__no_irq_handler+0x396> nop
1c001ba2 <__no_irq_handler+0x39a> nop
1c001ba6 <__no_irq_handler+0x39e> nop
1c001baa <__no_irq_handler+0x3a2> nop
1c001bae <__no_irq_handler+0x3a6> nop
1c001bb2 <__no_irq_handler+0x3aa> nop
1c001bb6 <__no_irq_handler+0x3ae> nop
1c001bba <__no_irq_handler+0x3b2> nop
1c001bbe <__no_irq_handler+0x3b6> nop
1c001bc2 <__no_irq_handler+0x3ba> nop
1c001bc6 <__no_irq_handler+0x3be> nop
1c001bca <__no_irq_handler+0x3c2> nop
1c001bce <__no_irq_handler+0x3c6> nop
1c001bd2 <__no_irq_handler+0x3ca> nop
1c001bd6 <__no_irq_handler+0x3ce> nop
1c001bda <__no_irq_handler+0x3d2> nop
1c001bde <__no_irq_handler+0x3d6> nop
1c001be2 <__no_irq_handler+0x3da> nop
1c001be6 <__no_irq_handler+0x3de> nop
1c001bea <__no_irq_handler+0x3e2> nop
1c001bee <__no_irq_handler+0x3e6> nop
1c001bf2 <__no_irq_handler+0x3ea> nop
1c001bf6 <__no_irq_handler+0x3ee> nop
1c001bfa <__no_irq_handler+0x3f2> nop
1c001bfe <__no_irq_handler+0x3f6> nop
__clic_vector_table():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:108
.option norvc
.balign 1024
.global __clic_vector_table

__clic_vector_table:
	j default_exception_handler
1c001c00 <__clic_vector_table> j	1c001800 <default_exception_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:109
	j __no_irq_handler
1c001c04 <__clic_vector_table+0x4> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:110
	j __no_irq_handler
1c001c08 <__clic_vector_table+0x8> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:111
	j software_handler
1c001c0c <__clic_vector_table+0xc> j	1c001802 <software_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:112
	j __no_irq_handler
1c001c10 <__clic_vector_table+0x10> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:113
	j __no_irq_handler
1c001c14 <__clic_vector_table+0x14> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:114
	j __no_irq_handler
1c001c18 <__clic_vector_table+0x18> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:115
	j timer_handler
1c001c1c <__clic_vector_table+0x1c> j	1c001804 <timer_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:116
	j __no_irq_handler
1c001c20 <__clic_vector_table+0x20> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:117
	j __no_irq_handler
1c001c24 <__clic_vector_table+0x24> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:118
	j __no_irq_handler
1c001c28 <__clic_vector_table+0x28> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:119
	j external_handler
1c001c2c <__clic_vector_table+0x2c> j	1c001806 <external_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:120
	j __no_irq_handler
1c001c30 <__clic_vector_table+0x30> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:121
	j __no_irq_handler
1c001c34 <__clic_vector_table+0x34> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:122
	j __no_irq_handler
1c001c38 <__clic_vector_table+0x38> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:123
	j __no_irq_handler
1c001c3c <__clic_vector_table+0x3c> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:124
	j __no_irq_handler
1c001c40 <__clic_vector_table+0x40> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:125
	j __no_irq_handler
1c001c44 <__clic_vector_table+0x44> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:126
	j __no_irq_handler
1c001c48 <__clic_vector_table+0x48> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:127
	j __no_irq_handler
1c001c4c <__clic_vector_table+0x4c> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:128
	j __no_irq_handler
1c001c50 <__clic_vector_table+0x50> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:129
	j __no_irq_handler
1c001c54 <__clic_vector_table+0x54> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:130
	j __no_irq_handler
1c001c58 <__clic_vector_table+0x58> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:131
	j __no_irq_handler
1c001c5c <__clic_vector_table+0x5c> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:132
	j __no_irq_handler
1c001c60 <__clic_vector_table+0x60> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:133
	j __no_irq_handler
1c001c64 <__clic_vector_table+0x64> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:134
	j __no_irq_handler
1c001c68 <__clic_vector_table+0x68> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:135
	j __no_irq_handler
1c001c6c <__clic_vector_table+0x6c> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:136
	j __no_irq_handler
1c001c70 <__clic_vector_table+0x70> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:137
	j __no_irq_handler
1c001c74 <__clic_vector_table+0x74> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:138
	j __no_irq_handler
1c001c78 <__clic_vector_table+0x78> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:139
	j __no_irq_handler
1c001c7c <__clic_vector_table+0x7c> j	1c001808 <__no_irq_handler>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/handler.S:140
	j __handle_clic_int
1c001c80 <__clic_vector_table+0x80> j	1c001730 <__handle_clic_int>
	...
exit_success():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:82
void (*clic_isr_hook[1])(void);


/* need void functions for isr table entries */
void exit_success(void)
{
1c001ffa <exit_success> addi	sp,sp,-16
1c001ffc <exit_success+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:83
	puts("exit success");
1c001ffe <exit_success+0x4> lui	a0,0x1c008
1c002002 <exit_success+0x8> addi	a0,a0,664 # 1c008298 <__func__.1889+0xc>
1c002006 <exit_success+0xc> jal	ra,1c0028ae <puts>
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45
1c00200a <exit_success+0x10> li	a4,0
1c00200c <exit_success+0x12> lui	a5,0xffff0
1c00200e <exit_success+0x14> addi	a5,a5,160 # ffff00a0 <__heap_l2_shared_start+0xe3fe0080>
1c002012 <exit_success+0x18> sw	a4,0(a5)
exit_success():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:85
	writew(0x00, MBOX_START_ADDRESS + SCMI_DOORBELL_C0_REG_OFFSET);
	exit(0);
1c002014 <exit_success+0x1a> li	a0,0
1c002016 <exit_success+0x1c> jal	1c0021f0 <exit>
exit_fail():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:89
}

void exit_fail(void)
{
1c002018 <exit_fail> addi	sp,sp,-16
1c00201a <exit_fail+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:90
	puts("exit fail");
1c00201c <exit_fail+0x4> lui	a0,0x1c008
1c002020 <exit_fail+0x8> addi	a0,a0,680 # 1c0082a8 <__func__.1889+0x1c>
1c002024 <exit_fail+0xc> jal	ra,1c0028ae <puts>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:91
	exit(1);
1c002028 <exit_fail+0x10> li	a0,1
1c00202a <exit_fail+0x12> jal	1c0021f0 <exit>
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:97
}



int main(void)
{
1c00202c <main> addi	sp,sp,-32
1c00202e <main+0x2> sw	ra,28(sp)
1c002030 <main+0x4> sw	s0,24(sp)
1c002032 <main+0x6> sw	s1,20(sp)
1c002034 <main+0x8> sw	s2,16(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:117
	 * line in HW.
	 */

	/* TODO: hook illegal insn handler to exit(1) */

	printf("test csr accesses\n");
1c002036 <main+0xa> lui	a0,0x1c008
1c00203a <main+0xe> addi	a0,a0,692 # 1c0082b4 <__func__.1889+0x28>
1c00203e <main+0x12> jal	ra,1c0028ae <puts>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:120
	uint32_t thresh = 0xffaa;
	uint32_t cmp = 0;
	csr_write(CSR_MINTTHRESH, thresh);
1c002042 <main+0x16> lui	a5,0x10
1c002044 <main+0x18> addi	a5,a5,-86 # 0000ffaa <__stack_size+0xf7aa>
1c002048 <main+0x1c> csrw	0x347,a5
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:121
	cmp = csr_read(CSR_MINTTHRESH);
1c00204c <main+0x20> csrr	a4,0x347
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:122
	csr_write(CSR_MINTTHRESH, 0);	/* reset threshold */
1c002050 <main+0x24> csrwi	0x347,0
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:123
	assert(cmp == (thresh & 0xff)); /* only lower 8 bits are writable */
1c002054 <main+0x28> li	a5,170
1c002058 <main+0x2c> bne	a4,a5,1c00212c <main+0x100>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:127 (discriminator 2)


	/* redirect vector table to our custom one */
	printf("set up vector table\n");
1c00205c <main+0x30> lui	a0,0x1c008
1c002060 <main+0x34> addi	a0,a0,712 # 1c0082c8 <__func__.1889+0x3c>
1c002064 <main+0x38> jal	ra,1c0028ae <puts>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:128 (discriminator 2)
	clic_setup_mtvec();
1c002068 <main+0x3c> jal	ra,1c001782 <clic_setup_mtvec>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:129 (discriminator 2)
	clic_setup_mtvt();
1c00206c <main+0x40> jal	ra,1c001794 <clic_setup_mtvt>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:133 (discriminator 2)


	/* enable selective hardware vectoring */
	printf("set shv\n");
1c002070 <main+0x44> lui	a0,0x1c008
1c002074 <main+0x48> addi	a0,a0,732 # 1c0082dc <__func__.1889+0x50>
1c002078 <main+0x4c> jal	ra,1c0028ae <puts>
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45 (discriminator 2)
1c00207c <main+0x50> li	s2,1
1c00207e <main+0x52> lui	s0,0x1a201
1c002082 <main+0x56> addi	s1,s0,504 # 1a2011f8 <__heap_l1_cluster_start+0xa2011d8>
1c002086 <main+0x5a> sw	s2,0(s1)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:138 (discriminator 2)
	writew((0x1 << CLIC_CLICINTATTR_SHV_BIT),
	       CLIC_BASE_ADDR + CLIC_CLICINTATTR_REG_OFFSET(31));

	/* set trigger type to edge-triggered */
	printf("set trigger type: edge-triggered\n");
1c00208a <main+0x5e> lui	a0,0x1c008
1c00208e <main+0x62> addi	a0,a0,740 # 1c0082e4 <__func__.1889+0x58>
1c002092 <main+0x66> jal	ra,1c0028ae <puts>
readw():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:82 (discriminator 2)
	asm volatile("lw %0, 0(%1)"
1c002096 <main+0x6a> lw	a5,0(s1)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:139 (discriminator 2)
	writeb((0x1 << CLIC_CLICINTATTR_TRIG_OFFSET) |
1c002098 <main+0x6c> p.bset	a5,a5,0,1
writeb():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:31 (discriminator 2)
	asm volatile("sb %0, 0(%1)"
1c00209c <main+0x70> sb	a5,0(s1)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:144 (discriminator 2)
	       readw(CLIC_BASE_ADDR + CLIC_CLICINTATTR_REG_OFFSET(31)),
	       CLIC_BASE_ADDR + CLIC_CLICINTATTR_REG_OFFSET(31));

	/* enable irq31 via SW by writing to clicintip31 */
	printf("enable irq31: set clicintip31 bit\n");
1c0020a0 <main+0x74> lui	a0,0x1c008
1c0020a4 <main+0x78> addi	a0,a0,776 # 1c008308 <__func__.1889+0x7c>
1c0020a8 <main+0x7c> jal	ra,1c0028ae <puts>
writeb():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:31 (discriminator 2)
1c0020ac <main+0x80> addi	a4,s0,496
1c0020b0 <main+0x84> li	a5,1
1c0020b2 <main+0x86> sb	a5,0(a4)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:150 (discriminator 2)
	writeb(0x1, CLIC_BASE_ADDR + CLIC_CLICINTIP_REG_OFFSET(31));

	/* set number of bits for level encoding:
	 * nlbits
	 */
	printf("set nlbits\n");
1c0020b6 <main+0x8a> lui	a0,0x1c008
1c0020ba <main+0x8e> addi	a0,a0,812 # 1c00832c <__func__.1889+0xa0>
1c0020be <main+0x92> jal	ra,1c0028ae <puts>
writeb():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:31 (discriminator 2)
1c0020c2 <main+0x96> li	a5,8
1c0020c4 <main+0x98> lui	a4,0x1a200
1c0020c8 <main+0x9c> sb	a5,0(a4) # 1a200000 <__heap_l1_cluster_start+0xa1fffe0>
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:155 (discriminator 2)
	writeb((0x4 << CLIC_CLICCFG_NLBITS_OFFSET),
	       CLIC_BASE_ADDR + CLIC_CLICCFG_REG_OFFSET);

	/* set interrupt level and priority for interrupt 31 */
	printf("set interrupt priority and level\n");
1c0020cc <main+0xa0> lui	a0,0x1c008
1c0020d0 <main+0xa4> addi	a0,a0,824 # 1c008338 <__func__.1889+0xac>
1c0020d4 <main+0xa8> jal	ra,1c0028ae <puts>
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45 (discriminator 2)
	asm volatile("sw %0, 0(%1)"
1c0020d8 <main+0xac> addi	a4,s0,508
1c0020dc <main+0xb0> li	a5,170
1c0020e0 <main+0xb4> sw	a5,0(a4)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:160 (discriminator 2)
	writew(0xaa, CLIC_BASE_ADDR + CLIC_CLICINTCTL_REG_OFFSET(31));

	/* raise interrupt threshold to max and check that the interrupt doesn't
	 * fire yet */
	printf("raise interrupt threshold to max (no interrupt should happen)\n");
1c0020e2 <main+0xb6> lui	a0,0x1c008
1c0020e6 <main+0xba> addi	a0,a0,860 # 1c00835c <__func__.1889+0xd0>
1c0020ea <main+0xbe> jal	ra,1c0028ae <puts>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:161 (discriminator 2)
	csr_write(CSR_MINTTHRESH, 0xff); /* 0xff > 0xaa */
1c0020ee <main+0xc2> li	a5,255
1c0020f2 <main+0xc6> csrw	0x347,a5
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:162 (discriminator 2)
	clic_isr_hook[0] = exit_fail; /* if we take an interrupt then we failed
1c0020f6 <main+0xca> lui	a5,0x1c002
1c0020fa <main+0xce> addi	a5,a5,24 # 1c002018 <exit_fail>
1c0020fe <main+0xd2> sw	a5,-312(gp) # 1c008c18 <clic_isr_hook>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:165 (discriminator 2)
				       */

	printf("enable interrupt 31\n");
1c002102 <main+0xd6> lui	a0,0x1c008
1c002106 <main+0xda> addi	a0,a0,924 # 1c00839c <__func__.1889+0x110>
1c00210a <main+0xde> jal	ra,1c0028ae <puts>
writew():
/scratch/adelvecchio/control-pulp-open/sw/freertos/target/arch/io.h:45 (discriminator 2)
1c00210e <main+0xe2> addi	s0,s0,500
1c002112 <main+0xe6> sw	s2,0(s0)
main():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:170 (discriminator 2)
	/* enable interrupt 31 on clic */
	writew(0x1, CLIC_BASE_ADDR + CLIC_CLICINTIE_REG_OFFSET(31));

	/* no interrupt should happen */
	for (volatile int i = 0; i < 10000; i++)
1c002116 <main+0xea> sw	zero,8(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:170 (discriminator 1)
1c002118 <main+0xec> lw	a4,8(sp)
1c00211a <main+0xee> lui	a5,0x2
1c00211c <main+0xf0> addi	a5,a5,1807 # 0000270f <__stack_size+0x1f0f>
1c002120 <main+0xf4> blt	a5,a4,1c002130 <main+0x104>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:170 (discriminator 3)
1c002124 <main+0xf8> lw	a5,8(sp)
1c002126 <main+0xfa> addi	a5,a5,1
1c002128 <main+0xfc> sw	a5,8(sp)
1c00212a <main+0xfe> j	1c002118 <main+0xec>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:123 (discriminator 1)
	assert(cmp == (thresh & 0xff)); /* only lower 8 bits are writable */
1c00212c <main+0x100> li	a0,1
1c00212e <main+0x102> jal	1c0021f0 <exit>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:173
		;

	printf("lower interrupt threshold (interrupt should happen, maybe)\n");
1c002130 <main+0x104> lui	a0,0x1c008
1c002134 <main+0x108> addi	a0,a0,944 # 1c0083b0 <__func__.1889+0x124>
1c002138 <main+0x10c> jal	ra,1c0028ae <puts>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:174
	clic_isr_hook[0] = exit_success;
1c00213c <main+0x110> lui	a5,0x1c002
1c002140 <main+0x114> addi	a5,a5,-6 # 1c001ffa <exit_success>
1c002144 <main+0x118> sw	a5,-312(gp) # 1c008c18 <clic_isr_hook>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:175
	csr_write(CSR_MINTTHRESH, 0); /* 0 < 0xaa */
1c002148 <main+0x11c> csrwi	0x347,0
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:177

	for (volatile int i = 0; i < 10000; i++)
1c00214c <main+0x120> sw	zero,12(sp)
1c00214e <main+0x122> j	1c002156 <main+0x12a>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:177 (discriminator 3)
1c002150 <main+0x124> lw	a5,12(sp)
1c002152 <main+0x126> addi	a5,a5,1
1c002154 <main+0x128> sw	a5,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:177 (discriminator 1)
1c002156 <main+0x12a> lw	a4,12(sp)
1c002158 <main+0x12c> lui	a5,0x2
1c00215a <main+0x12e> addi	a5,a5,1807 # 0000270f <__stack_size+0x1f0f>
1c00215e <main+0x132> bge	a5,a4,1c002150 <main+0x124>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:180
		;

	printf("Interrupt took too long\n");
1c002162 <main+0x136> lui	a0,0x1c008
1c002166 <main+0x13a> addi	a0,a0,1004 # 1c0083ec <__func__.1889+0x160>
1c00216a <main+0x13e> jal	ra,1c0028ae <puts>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:183

	return 1;
}
1c00216e <main+0x142> li	a0,1
1c002170 <main+0x144> lw	ra,28(sp)
1c002172 <main+0x146> lw	s0,24(sp)
1c002174 <main+0x148> lw	s1,20(sp)
1c002176 <main+0x14a> lw	s2,16(sp)
1c002178 <main+0x14c> addi	sp,sp,32
1c00217a <main+0x14e> ret
vApplicationStackOverflowHook():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:221
	the idle task to clean up memory allocated by the kernel to any task
	that has since been deleted. */
}

void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
1c00217c <vApplicationStackOverflowHook> addi	sp,sp,-16
1c00217e <vApplicationStackOverflowHook+0x2> sw	ra,12(sp)
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:228
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
1c002180 <vApplicationStackOverflowHook+0x4> csrci	mstatus,8
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:229
	printf("error: stack overflow\n\r");
1c002184 <vApplicationStackOverflowHook+0x8> lui	a0,0x1c008
1c002188 <vApplicationStackOverflowHook+0xc> addi	a0,a0,1028 # 1c008404 <__func__.1889+0x178>
1c00218c <vApplicationStackOverflowHook+0x10> jal	ra,1c002792 <iprintf>
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:230
	__asm volatile("ebreak");
1c002190 <vApplicationStackOverflowHook+0x14> ebreak
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:231 (discriminator 1)
	for (;;)
1c002192 <vApplicationStackOverflowHook+0x16> j	1c002192 <vApplicationStackOverflowHook+0x16>
vApplicationTickHook():
/scratch/adelvecchio/control-pulp-open/sw/tests/control-pulp-tests/clic/clic-dbg/debug_freertos.c:237
		;
}

void vApplicationTickHook(void)
{
}
1c002194 <vApplicationTickHook> ret
abort():
1c002196 <abort> addi	sp,sp,-16
1c002198 <abort+0x2> li	a0,6
1c00219a <abort+0x4> sw	ra,12(sp)
1c00219c <abort+0x6> jal	ra,1c002948 <raise>
1c0021a0 <abort+0xa> li	a0,1
1c0021a2 <abort+0xc> jal	ra,1c001428 <_exit>
__assert_func():
1c0021a6 <__assert_func> lui	a5,0x1c008
1c0021aa <__assert_func+0x4> lw	a5,1460(a5) # 1c0085b4 <_impure_ptr>
1c0021ae <__assert_func+0x8> addi	sp,sp,-16
1c0021b0 <__assert_func+0xa> mv	a6,a2
1c0021b2 <__assert_func+0xc> sw	ra,12(sp)
1c0021b4 <__assert_func+0xe> mv	a7,a0
1c0021b6 <__assert_func+0x10> mv	a4,a1
1c0021b8 <__assert_func+0x12> lw	a0,12(a5)
1c0021ba <__assert_func+0x14> mv	a2,a3
1c0021bc <__assert_func+0x16> beqz	a6,1c0021d6 <__assert_func+0x30>
1c0021c0 <__assert_func+0x1a> lui	a5,0x1c008
1c0021c4 <__assert_func+0x1e> addi	a5,a5,1052 # 1c00841c <__func__.1889+0x190>
1c0021c8 <__assert_func+0x22> lui	a1,0x1c008
1c0021cc <__assert_func+0x26> mv	a3,a7
1c0021ce <__assert_func+0x28> addi	a1,a1,1068 # 1c00842c <__func__.1889+0x1a0>
1c0021d2 <__assert_func+0x2c> jal	1c002256 <fiprintf>
1c0021d4 <__assert_func+0x2e> jal	1c002196 <abort>
1c0021d6 <__assert_func+0x30> lui	a6,0x1c008
1c0021da <__assert_func+0x34> addi	a5,a6,476 # 1c0081dc <__func__.3257+0x94>
1c0021de <__assert_func+0x38> addi	a6,a6,476
1c0021e2 <__assert_func+0x3c> j	1c0021c8 <__assert_func+0x22>
atexit():
1c0021e4 <atexit> mv	a1,a0
1c0021e6 <atexit+0x2> li	a3,0
1c0021e8 <atexit+0x4> li	a2,0
1c0021ea <atexit+0x6> li	a0,0
1c0021ec <atexit+0x8> j	1c002b5c <__register_exitproc>
exit():
1c0021f0 <exit> addi	sp,sp,-16
1c0021f2 <exit+0x2> lui	a5,0x1c003
1c0021f6 <exit+0x6> sw	s0,8(sp)
1c0021f8 <exit+0x8> sw	ra,12(sp)
1c0021fa <exit+0xa> addi	a5,a5,-1056 # 1c002be0 <__call_exitprocs>
1c0021fe <exit+0xe> mv	s0,a0
1c002200 <exit+0x10> beqz	a5,1c002208 <exit+0x18>
1c002202 <exit+0x12> li	a1,0
1c002204 <exit+0x14> jal	ra,1c002be0 <__call_exitprocs>
1c002208 <exit+0x18> lui	a5,0x1c008
1c00220c <exit+0x1c> lw	a0,1468(a5) # 1c0085bc <_global_impure_ptr>
1c002210 <exit+0x20> lw	a5,40(a0)
1c002212 <exit+0x22> beqz	a5,1c002216 <exit+0x26>
1c002214 <exit+0x24> jalr	a5
1c002216 <exit+0x26> mv	a0,s0
1c002218 <exit+0x28> jal	ra,1c001428 <_exit>
__libc_fini_array():
1c00221c <__libc_fini_array> addi	sp,sp,-16
1c00221e <__libc_fini_array+0x2> lui	a5,0x1c008
1c002222 <__libc_fini_array+0x6> sw	s0,8(sp)
1c002224 <__libc_fini_array+0x8> lui	s0,0x1c008
1c002228 <__libc_fini_array+0xc> addi	a4,a5,1360 # 1c008550 <impure_data>
1c00222c <__libc_fini_array+0x10> addi	s0,s0,1360 # 1c008550 <impure_data>
1c002230 <__libc_fini_array+0x14> sub	s0,s0,a4
1c002232 <__libc_fini_array+0x16> sw	s1,4(sp)
1c002234 <__libc_fini_array+0x18> sw	ra,12(sp)
1c002236 <__libc_fini_array+0x1a> srai	s0,s0,0x2
1c002238 <__libc_fini_array+0x1c> addi	s1,a5,1360
1c00223c <__libc_fini_array+0x20> bnez	s0,1c002248 <__libc_fini_array+0x2c>
1c00223e <__libc_fini_array+0x22> lw	ra,12(sp)
1c002240 <__libc_fini_array+0x24> lw	s0,8(sp)
1c002242 <__libc_fini_array+0x26> lw	s1,4(sp)
1c002244 <__libc_fini_array+0x28> addi	sp,sp,16
1c002246 <__libc_fini_array+0x2a> ret
1c002248 <__libc_fini_array+0x2c> addi	s0,s0,-1
1c00224a <__libc_fini_array+0x2e> slli	a5,s0,0x2
1c00224e <__libc_fini_array+0x32> add	a5,a5,s1
1c002250 <__libc_fini_array+0x34> lw	a5,0(a5)
1c002252 <__libc_fini_array+0x36> jalr	a5
1c002254 <__libc_fini_array+0x38> j	1c00223c <__libc_fini_array+0x20>
fprintf():
1c002256 <fiprintf> addi	sp,sp,-64
1c002258 <fiprintf+0x2> sw	a5,52(sp)
1c00225a <fiprintf+0x4> lui	a5,0x1c008
1c00225e <fiprintf+0x8> sw	a2,40(sp)
1c002260 <fiprintf+0xa> mv	a2,a1
1c002262 <fiprintf+0xc> mv	a1,a0
1c002264 <fiprintf+0xe> lw	a0,1460(a5) # 1c0085b4 <_impure_ptr>
1c002268 <fiprintf+0x12> sw	a3,44(sp)
1c00226a <fiprintf+0x14> addi	a3,sp,40
1c00226c <fiprintf+0x16> sw	ra,28(sp)
1c00226e <fiprintf+0x18> sw	a4,48(sp)
1c002270 <fiprintf+0x1a> sw	a6,56(sp)
1c002272 <fiprintf+0x1c> sw	a7,60(sp)
1c002274 <fiprintf+0x1e> sw	a3,12(sp)
1c002276 <fiprintf+0x20> jal	1c0024ea <_vfiprintf_r>
1c002278 <fiprintf+0x22> lw	ra,28(sp)
1c00227a <fiprintf+0x24> addi	sp,sp,64
1c00227c <fiprintf+0x26> ret
__libc_init_array():
1c00227e <__libc_init_array> addi	sp,sp,-16
1c002280 <__libc_init_array+0x2> lui	a5,0x1c008
1c002284 <__libc_init_array+0x6> sw	s0,8(sp)
1c002286 <__libc_init_array+0x8> lui	s0,0x1c008
1c00228a <__libc_init_array+0xc> addi	a4,a5,1360 # 1c008550 <impure_data>
1c00228e <__libc_init_array+0x10> addi	s0,s0,1360 # 1c008550 <impure_data>
1c002292 <__libc_init_array+0x14> sub	s0,s0,a4
1c002294 <__libc_init_array+0x16> sw	s1,4(sp)
1c002296 <__libc_init_array+0x18> sw	s2,0(sp)
1c002298 <__libc_init_array+0x1a> sw	ra,12(sp)
1c00229a <__libc_init_array+0x1c> srai	s0,s0,0x2
1c00229c <__libc_init_array+0x1e> li	s1,0
1c00229e <__libc_init_array+0x20> addi	s2,a5,1360
1c0022a2 <__libc_init_array+0x24> bne	s1,s0,1c0022d0 <__libc_init_array+0x52>
1c0022a6 <__libc_init_array+0x28> lui	a5,0x1c008
1c0022aa <__libc_init_array+0x2c> lui	s0,0x1c008
1c0022ae <__libc_init_array+0x30> addi	a4,a5,1360 # 1c008550 <impure_data>
1c0022b2 <__libc_init_array+0x34> addi	s0,s0,1360 # 1c008550 <impure_data>
1c0022b6 <__libc_init_array+0x38> sub	s0,s0,a4
1c0022b8 <__libc_init_array+0x3a> srai	s0,s0,0x2
1c0022ba <__libc_init_array+0x3c> li	s1,0
1c0022bc <__libc_init_array+0x3e> addi	s2,a5,1360
1c0022c0 <__libc_init_array+0x42> bne	s1,s0,1c0022de <__libc_init_array+0x60>
1c0022c4 <__libc_init_array+0x46> lw	ra,12(sp)
1c0022c6 <__libc_init_array+0x48> lw	s0,8(sp)
1c0022c8 <__libc_init_array+0x4a> lw	s1,4(sp)
1c0022ca <__libc_init_array+0x4c> lw	s2,0(sp)
1c0022cc <__libc_init_array+0x4e> addi	sp,sp,16
1c0022ce <__libc_init_array+0x50> ret
1c0022d0 <__libc_init_array+0x52> slli	a5,s1,0x2
1c0022d4 <__libc_init_array+0x56> add	a5,a5,s2
1c0022d6 <__libc_init_array+0x58> lw	a5,0(a5)
1c0022d8 <__libc_init_array+0x5a> addi	s1,s1,1
1c0022da <__libc_init_array+0x5c> jalr	a5
1c0022dc <__libc_init_array+0x5e> j	1c0022a2 <__libc_init_array+0x24>
1c0022de <__libc_init_array+0x60> slli	a5,s1,0x2
1c0022e2 <__libc_init_array+0x64> add	a5,a5,s2
1c0022e4 <__libc_init_array+0x66> lw	a5,0(a5)
1c0022e6 <__libc_init_array+0x68> addi	s1,s1,1
1c0022e8 <__libc_init_array+0x6a> jalr	a5
1c0022ea <__libc_init_array+0x6c> j	1c0022c0 <__libc_init_array+0x42>
_free_r():
1c0022ec <_free_r> beqz	a1,1c002396 <_free_r+0xaa>
1c0022ee <_free_r+0x2> lw	a5,-4(a1)
1c0022f2 <_free_r+0x6> addi	sp,sp,-32
1c0022f4 <_free_r+0x8> sw	s0,24(sp)
1c0022f6 <_free_r+0xa> sw	ra,28(sp)
1c0022f8 <_free_r+0xc> addi	s0,a1,-4
1c0022fc <_free_r+0x10> bgez	a5,1c002302 <_free_r+0x16>
1c002300 <_free_r+0x14> add	s0,s0,a5
1c002302 <_free_r+0x16> sw	a0,12(sp)
1c002304 <_free_r+0x18> jal	ra,1c00151e <__malloc_lock>
1c002308 <_free_r+0x1c> lui	a4,0x1c008
1c00230c <_free_r+0x20> lw	a5,2040(a4) # 1c0087f8 <__malloc_free_list>
1c002310 <_free_r+0x24> lw	a0,12(sp)
1c002312 <_free_r+0x26> mv	a2,a4
1c002314 <_free_r+0x28> bnez	a5,1c002328 <_free_r+0x3c>
1c002316 <_free_r+0x2a> sw	zero,4(s0)
1c00231a <_free_r+0x2e> sw	s0,2040(a4)
1c00231e <_free_r+0x32> lw	s0,24(sp)
1c002320 <_free_r+0x34> lw	ra,28(sp)
1c002322 <_free_r+0x36> addi	sp,sp,32
1c002324 <_free_r+0x38> j	1c00152c <__malloc_unlock>
1c002328 <_free_r+0x3c> bgeu	s0,a5,1c002346 <_free_r+0x5a>
1c00232c <_free_r+0x40> lw	a3,0(s0)
1c00232e <_free_r+0x42> add	a4,s0,a3
1c002332 <_free_r+0x46> bne	a5,a4,1c00233e <_free_r+0x52>
1c002336 <_free_r+0x4a> lw	a4,0(a5)
1c002338 <_free_r+0x4c> lw	a5,4(a5)
1c00233a <_free_r+0x4e> add	a4,a4,a3
1c00233c <_free_r+0x50> sw	a4,0(s0)
1c00233e <_free_r+0x52> sw	a5,4(s0)
1c002340 <_free_r+0x54> sw	s0,2040(a2)
1c002344 <_free_r+0x58> j	1c00231e <_free_r+0x32>
1c002346 <_free_r+0x5a> mv	a4,a5
1c002348 <_free_r+0x5c> lw	a5,4(a5)
1c00234a <_free_r+0x5e> beqz	a5,1c002350 <_free_r+0x64>
1c00234c <_free_r+0x60> bgeu	s0,a5,1c002346 <_free_r+0x5a>
1c002350 <_free_r+0x64> lw	a3,0(a4)
1c002352 <_free_r+0x66> add	a2,a4,a3
1c002356 <_free_r+0x6a> bne	a2,s0,1c002374 <_free_r+0x88>
1c00235a <_free_r+0x6e> lw	a2,0(s0)
1c00235c <_free_r+0x70> add	a3,a3,a2
1c00235e <_free_r+0x72> sw	a3,0(a4)
1c002360 <_free_r+0x74> add	a2,a4,a3
1c002364 <_free_r+0x78> bne	a5,a2,1c00231e <_free_r+0x32>
1c002368 <_free_r+0x7c> lw	a2,0(a5)
1c00236a <_free_r+0x7e> lw	a5,4(a5)
1c00236c <_free_r+0x80> add	a3,a3,a2
1c00236e <_free_r+0x82> sw	a3,0(a4)
1c002370 <_free_r+0x84> sw	a5,4(a4)
1c002372 <_free_r+0x86> j	1c00231e <_free_r+0x32>
1c002374 <_free_r+0x88> bgeu	s0,a2,1c00237e <_free_r+0x92>
1c002378 <_free_r+0x8c> li	a5,12
1c00237a <_free_r+0x8e> sw	a5,0(a0)
1c00237c <_free_r+0x90> j	1c00231e <_free_r+0x32>
1c00237e <_free_r+0x92> lw	a2,0(s0)
1c002380 <_free_r+0x94> add	a3,s0,a2
1c002384 <_free_r+0x98> bne	a5,a3,1c002390 <_free_r+0xa4>
1c002388 <_free_r+0x9c> lw	a3,0(a5)
1c00238a <_free_r+0x9e> lw	a5,4(a5)
1c00238c <_free_r+0xa0> add	a3,a3,a2
1c00238e <_free_r+0xa2> sw	a3,0(s0)
1c002390 <_free_r+0xa4> sw	a5,4(s0)
1c002392 <_free_r+0xa6> sw	s0,4(a4)
1c002394 <_free_r+0xa8> j	1c00231e <_free_r+0x32>
1c002396 <_free_r+0xaa> ret
_malloc_r():
1c002398 <_malloc_r> addi	sp,sp,-32
1c00239a <_malloc_r+0x2> sw	s1,20(sp)
1c00239c <_malloc_r+0x4> addi	s1,a1,3
1c0023a0 <_malloc_r+0x8> andi	s1,s1,-4
1c0023a2 <_malloc_r+0xa> sw	s2,16(sp)
1c0023a4 <_malloc_r+0xc> sw	ra,28(sp)
1c0023a6 <_malloc_r+0xe> sw	s0,24(sp)
1c0023a8 <_malloc_r+0x10> sw	s3,12(sp)
1c0023aa <_malloc_r+0x12> addi	s1,s1,8
1c0023ac <_malloc_r+0x14> li	a5,12
1c0023ae <_malloc_r+0x16> mv	s2,a0
1c0023b0 <_malloc_r+0x18> bgeu	s1,a5,1c002402 <_malloc_r+0x6a>
1c0023b4 <_malloc_r+0x1c> li	s1,12
1c0023b6 <_malloc_r+0x1e> bltu	s1,a1,1c002406 <_malloc_r+0x6e>
1c0023ba <_malloc_r+0x22> mv	a0,s2
1c0023bc <_malloc_r+0x24> jal	ra,1c00151e <__malloc_lock>
1c0023c0 <_malloc_r+0x28> lui	a5,0x1c008
1c0023c4 <_malloc_r+0x2c> lw	a4,2040(a5) # 1c0087f8 <__malloc_free_list>
1c0023c8 <_malloc_r+0x30> addi	a3,a5,2040
1c0023cc <_malloc_r+0x34> mv	s0,a4
1c0023ce <_malloc_r+0x36> bnez	s0,1c00241c <_malloc_r+0x84>
1c0023d0 <_malloc_r+0x38> lui	s0,0x1c008
1c0023d4 <_malloc_r+0x3c> addi	s0,s0,2044 # 1c0087fc <__malloc_sbrk_start>
1c0023d8 <_malloc_r+0x40> lw	a5,0(s0)
1c0023da <_malloc_r+0x42> bnez	a5,1c0023e6 <_malloc_r+0x4e>
1c0023dc <_malloc_r+0x44> li	a1,0
1c0023de <_malloc_r+0x46> mv	a0,s2
1c0023e0 <_malloc_r+0x48> jal	ra,1c0028ba <_sbrk_r>
1c0023e4 <_malloc_r+0x4c> sw	a0,0(s0)
1c0023e6 <_malloc_r+0x4e> mv	a1,s1
1c0023e8 <_malloc_r+0x50> mv	a0,s2
1c0023ea <_malloc_r+0x52> jal	ra,1c0028ba <_sbrk_r>
1c0023ee <_malloc_r+0x56> li	s3,-1
1c0023f0 <_malloc_r+0x58> bne	a0,s3,1c002464 <_malloc_r+0xcc>
1c0023f4 <_malloc_r+0x5c> li	a5,12
1c0023f6 <_malloc_r+0x5e> sw	a5,0(s2)
1c0023fa <_malloc_r+0x62> mv	a0,s2
1c0023fc <_malloc_r+0x64> jal	ra,1c00152c <__malloc_unlock>
1c002400 <_malloc_r+0x68> j	1c00240c <_malloc_r+0x74>
1c002402 <_malloc_r+0x6a> bgez	s1,1c0023b6 <_malloc_r+0x1e>
1c002406 <_malloc_r+0x6e> li	a5,12
1c002408 <_malloc_r+0x70> sw	a5,0(s2)
1c00240c <_malloc_r+0x74> li	a0,0
1c00240e <_malloc_r+0x76> lw	ra,28(sp)
1c002410 <_malloc_r+0x78> lw	s0,24(sp)
1c002412 <_malloc_r+0x7a> lw	s1,20(sp)
1c002414 <_malloc_r+0x7c> lw	s2,16(sp)
1c002416 <_malloc_r+0x7e> lw	s3,12(sp)
1c002418 <_malloc_r+0x80> addi	sp,sp,32
1c00241a <_malloc_r+0x82> ret
1c00241c <_malloc_r+0x84> lw	a5,0(s0)
1c00241e <_malloc_r+0x86> sub	a5,a5,s1
1c002420 <_malloc_r+0x88> bltz	a5,1c00245e <_malloc_r+0xc6>
1c002424 <_malloc_r+0x8c> li	a2,11
1c002426 <_malloc_r+0x8e> bgeu	a2,a5,1c002432 <_malloc_r+0x9a>
1c00242a <_malloc_r+0x92> sw	a5,0(s0)
1c00242c <_malloc_r+0x94> add	s0,s0,a5
1c00242e <_malloc_r+0x96> sw	s1,0(s0)
1c002430 <_malloc_r+0x98> j	1c00243a <_malloc_r+0xa2>
1c002432 <_malloc_r+0x9a> lw	a5,4(s0)
1c002434 <_malloc_r+0x9c> bne	a4,s0,1c00245a <_malloc_r+0xc2>
1c002438 <_malloc_r+0xa0> sw	a5,0(a3)
1c00243a <_malloc_r+0xa2> mv	a0,s2
1c00243c <_malloc_r+0xa4> jal	ra,1c00152c <__malloc_unlock>
1c002440 <_malloc_r+0xa8> addi	a0,s0,11
1c002444 <_malloc_r+0xac> addi	a5,s0,4
1c002448 <_malloc_r+0xb0> andi	a0,a0,-8
1c00244a <_malloc_r+0xb2> sub	a4,a0,a5
1c00244e <_malloc_r+0xb6> beq	a0,a5,1c00240e <_malloc_r+0x76>
1c002452 <_malloc_r+0xba> add	s0,s0,a4
1c002454 <_malloc_r+0xbc> sub	a5,a5,a0
1c002456 <_malloc_r+0xbe> sw	a5,0(s0)
1c002458 <_malloc_r+0xc0> j	1c00240e <_malloc_r+0x76>
1c00245a <_malloc_r+0xc2> sw	a5,4(a4)
1c00245c <_malloc_r+0xc4> j	1c00243a <_malloc_r+0xa2>
1c00245e <_malloc_r+0xc6> mv	a4,s0
1c002460 <_malloc_r+0xc8> lw	s0,4(s0)
1c002462 <_malloc_r+0xca> j	1c0023ce <_malloc_r+0x36>
1c002464 <_malloc_r+0xcc> addi	s0,a0,3
1c002468 <_malloc_r+0xd0> andi	s0,s0,-4
1c00246a <_malloc_r+0xd2> beq	a0,s0,1c00242e <_malloc_r+0x96>
1c00246e <_malloc_r+0xd6> sub	a1,s0,a0
1c002472 <_malloc_r+0xda> mv	a0,s2
1c002474 <_malloc_r+0xdc> jal	ra,1c0028ba <_sbrk_r>
1c002478 <_malloc_r+0xe0> bne	a0,s3,1c00242e <_malloc_r+0x96>
1c00247c <_malloc_r+0xe4> j	1c0023f4 <_malloc_r+0x5c>
__sfputc_r():
1c00247e <__sfputc_r> lw	a5,8(a2)
1c002480 <__sfputc_r+0x2> addi	a5,a5,-1
1c002482 <__sfputc_r+0x4> sw	a5,8(a2)
1c002484 <__sfputc_r+0x6> bgez	a5,1c002498 <__sfputc_r+0x1a>
1c002488 <__sfputc_r+0xa> lw	a4,24(a2)
1c00248a <__sfputc_r+0xc> blt	a5,a4,1c002494 <__sfputc_r+0x16>
1c00248e <__sfputc_r+0x10> li	a5,10
1c002490 <__sfputc_r+0x12> bne	a1,a5,1c002498 <__sfputc_r+0x1a>
1c002494 <__sfputc_r+0x16> j	1c002986 <__swbuf_r>
1c002498 <__sfputc_r+0x1a> lw	a5,0(a2)
1c00249a <__sfputc_r+0x1c> mv	a0,a1
1c00249c <__sfputc_r+0x1e> addi	a4,a5,1
1c0024a0 <__sfputc_r+0x22> sw	a4,0(a2)
1c0024a2 <__sfputc_r+0x24> sb	a1,0(a5)
1c0024a6 <__sfputc_r+0x28> ret
__sfputs_r():
1c0024a8 <__sfputs_r> addi	sp,sp,-32
1c0024aa <__sfputs_r+0x2> sw	s0,24(sp)
1c0024ac <__sfputs_r+0x4> sw	s1,20(sp)
1c0024ae <__sfputs_r+0x6> sw	s2,16(sp)
1c0024b0 <__sfputs_r+0x8> sw	s3,12(sp)
1c0024b2 <__sfputs_r+0xa> sw	s4,8(sp)
1c0024b4 <__sfputs_r+0xc> sw	ra,28(sp)
1c0024b6 <__sfputs_r+0xe> mv	s2,a0
1c0024b8 <__sfputs_r+0x10> mv	s3,a1
1c0024ba <__sfputs_r+0x12> mv	s0,a2
1c0024bc <__sfputs_r+0x14> add	s1,a2,a3
1c0024c0 <__sfputs_r+0x18> li	s4,-1
1c0024c2 <__sfputs_r+0x1a> bne	s0,s1,1c0024ca <__sfputs_r+0x22>
1c0024c6 <__sfputs_r+0x1e> li	a0,0
1c0024c8 <__sfputs_r+0x20> j	1c0024da <__sfputs_r+0x32>
1c0024ca <__sfputs_r+0x22> lbu	a1,0(s0)
1c0024ce <__sfputs_r+0x26> mv	a2,s3
1c0024d0 <__sfputs_r+0x28> mv	a0,s2
1c0024d2 <__sfputs_r+0x2a> jal	1c00247e <__sfputc_r>
1c0024d4 <__sfputs_r+0x2c> addi	s0,s0,1
1c0024d6 <__sfputs_r+0x2e> bne	a0,s4,1c0024c2 <__sfputs_r+0x1a>
1c0024da <__sfputs_r+0x32> lw	ra,28(sp)
1c0024dc <__sfputs_r+0x34> lw	s0,24(sp)
1c0024de <__sfputs_r+0x36> lw	s1,20(sp)
1c0024e0 <__sfputs_r+0x38> lw	s2,16(sp)
1c0024e2 <__sfputs_r+0x3a> lw	s3,12(sp)
1c0024e4 <__sfputs_r+0x3c> lw	s4,8(sp)
1c0024e6 <__sfputs_r+0x3e> addi	sp,sp,32
1c0024e8 <__sfputs_r+0x40> ret
_vfiprintf_r():
1c0024ea <_vfiprintf_r> addi	sp,sp,-176
1c0024ec <_vfiprintf_r+0x2> sw	s0,168(sp)
1c0024ee <_vfiprintf_r+0x4> sw	s1,164(sp)
1c0024f0 <_vfiprintf_r+0x6> sw	s2,160(sp)
1c0024f2 <_vfiprintf_r+0x8> sw	s3,156(sp)
1c0024f4 <_vfiprintf_r+0xa> sw	ra,172(sp)
1c0024f6 <_vfiprintf_r+0xc> sw	s4,152(sp)
1c0024f8 <_vfiprintf_r+0xe> sw	s5,148(sp)
1c0024fa <_vfiprintf_r+0x10> sw	s6,144(sp)
1c0024fc <_vfiprintf_r+0x12> sw	s7,140(sp)
1c0024fe <_vfiprintf_r+0x14> sw	s8,136(sp)
1c002500 <_vfiprintf_r+0x16> sw	s9,132(sp)
1c002502 <_vfiprintf_r+0x18> sw	s10,128(sp)
1c002504 <_vfiprintf_r+0x1a> sw	s11,124(sp)
1c002506 <_vfiprintf_r+0x1c> mv	s3,a0
1c002508 <_vfiprintf_r+0x1e> mv	s1,a1
1c00250a <_vfiprintf_r+0x20> mv	s2,a2
1c00250c <_vfiprintf_r+0x22> mv	s0,a3
1c00250e <_vfiprintf_r+0x24> beqz	a0,1c002518 <_vfiprintf_r+0x2e>
1c002510 <_vfiprintf_r+0x26> lw	a5,24(a0)
1c002512 <_vfiprintf_r+0x28> bnez	a5,1c002518 <_vfiprintf_r+0x2e>
1c002514 <_vfiprintf_r+0x2a> jal	ra,1c002f18 <__sinit>
1c002518 <_vfiprintf_r+0x2e> lui	a5,0x1c008
1c00251c <_vfiprintf_r+0x32> addi	a5,a5,1168 # 1c008490 <__sf_fake_stdin>
1c002520 <_vfiprintf_r+0x36> bne	s1,a5,1c00260a <_vfiprintf_r+0x120>
1c002524 <_vfiprintf_r+0x3a> lw	s1,4(s3)
1c002528 <_vfiprintf_r+0x3e> lhu	a5,12(s1)
1c00252c <_vfiprintf_r+0x42> andi	a5,a5,8
1c00252e <_vfiprintf_r+0x44> beqz	a5,1c00262e <_vfiprintf_r+0x144>
1c002532 <_vfiprintf_r+0x48> lw	a5,16(s1)
1c002534 <_vfiprintf_r+0x4a> beqz	a5,1c00262e <_vfiprintf_r+0x144>
1c002538 <_vfiprintf_r+0x4e> li	a5,32
1c00253c <_vfiprintf_r+0x52> sb	a5,41(sp)
1c002540 <_vfiprintf_r+0x56> li	a5,48
1c002544 <_vfiprintf_r+0x5a> sw	zero,36(sp)
1c002546 <_vfiprintf_r+0x5c> sb	a5,42(sp)
1c00254a <_vfiprintf_r+0x60> sw	s0,12(sp)
1c00254c <_vfiprintf_r+0x62> li	s9,37
1c002550 <_vfiprintf_r+0x66> lui	s6,0x1c008
1c002554 <_vfiprintf_r+0x6a> lui	s7,0x1c008
1c002558 <_vfiprintf_r+0x6e> lui	s10,0x1c008
1c00255c <_vfiprintf_r+0x72> lui	s8,0x1c002
1c002560 <_vfiprintf_r+0x76> li	s5,0
1c002564 <_vfiprintf_r+0x7a> mv	s0,s2
1c002566 <_vfiprintf_r+0x7c> lbu	a5,0(s0)
1c00256a <_vfiprintf_r+0x80> beqz	a5,1c002570 <_vfiprintf_r+0x86>
1c00256c <_vfiprintf_r+0x82> bne	a5,s9,1c00265a <_vfiprintf_r+0x170>
1c002570 <_vfiprintf_r+0x86> sub	s11,s0,s2
1c002574 <_vfiprintf_r+0x8a> beq	s0,s2,1c00258e <_vfiprintf_r+0xa4>
1c002578 <_vfiprintf_r+0x8e> mv	a3,s11
1c00257a <_vfiprintf_r+0x90> mv	a2,s2
1c00257c <_vfiprintf_r+0x92> mv	a1,s1
1c00257e <_vfiprintf_r+0x94> mv	a0,s3
1c002580 <_vfiprintf_r+0x96> jal	1c0024a8 <__sfputs_r>
1c002582 <_vfiprintf_r+0x98> li	a5,-1
1c002584 <_vfiprintf_r+0x9a> beq	a0,a5,1c002770 <_vfiprintf_r+0x286>
1c002588 <_vfiprintf_r+0x9e> lw	a5,36(sp)
1c00258a <_vfiprintf_r+0xa0> add	a5,a5,s11
1c00258c <_vfiprintf_r+0xa2> sw	a5,36(sp)
1c00258e <_vfiprintf_r+0xa4> lbu	a5,0(s0)
1c002592 <_vfiprintf_r+0xa8> beqz	a5,1c002770 <_vfiprintf_r+0x286>
1c002596 <_vfiprintf_r+0xac> li	a5,-1
1c002598 <_vfiprintf_r+0xae> addi	s2,s0,1
1c00259c <_vfiprintf_r+0xb2> sw	zero,16(sp)
1c00259e <_vfiprintf_r+0xb4> sw	zero,28(sp)
1c0025a0 <_vfiprintf_r+0xb6> sw	a5,20(sp)
1c0025a2 <_vfiprintf_r+0xb8> sw	zero,24(sp)
1c0025a4 <_vfiprintf_r+0xba> sb	zero,83(sp)
1c0025a8 <_vfiprintf_r+0xbe> sw	zero,104(sp)
1c0025aa <_vfiprintf_r+0xc0> li	s11,1
1c0025ac <_vfiprintf_r+0xc2> lbu	a1,0(s2)
1c0025b0 <_vfiprintf_r+0xc6> li	a2,5
1c0025b2 <_vfiprintf_r+0xc8> addi	a0,s6,1116 # 1c00845c <__func__.1889+0x1d0>
1c0025b6 <_vfiprintf_r+0xcc> jal	ra,1c003186 <memchr>
1c0025ba <_vfiprintf_r+0xd0> lw	a5,16(sp)
1c0025bc <_vfiprintf_r+0xd2> addi	s0,s2,1
1c0025c0 <_vfiprintf_r+0xd6> bnez	a0,1c00265e <_vfiprintf_r+0x174>
1c0025c2 <_vfiprintf_r+0xd8> andi	a4,a5,16
1c0025c6 <_vfiprintf_r+0xdc> beqz	a4,1c0025d0 <_vfiprintf_r+0xe6>
1c0025c8 <_vfiprintf_r+0xde> li	a4,32
1c0025cc <_vfiprintf_r+0xe2> sb	a4,83(sp)
1c0025d0 <_vfiprintf_r+0xe6> andi	a4,a5,8
1c0025d4 <_vfiprintf_r+0xea> beqz	a4,1c0025de <_vfiprintf_r+0xf4>
1c0025d6 <_vfiprintf_r+0xec> li	a4,43
1c0025da <_vfiprintf_r+0xf0> sb	a4,83(sp)
1c0025de <_vfiprintf_r+0xf4> lbu	a3,0(s2)
1c0025e2 <_vfiprintf_r+0xf8> li	a4,42
1c0025e6 <_vfiprintf_r+0xfc> beq	a3,a4,1c002670 <_vfiprintf_r+0x186>
1c0025ea <_vfiprintf_r+0x100> lw	a5,28(sp)
1c0025ec <_vfiprintf_r+0x102> mv	s0,s2
1c0025ee <_vfiprintf_r+0x104> li	a3,0
1c0025f0 <_vfiprintf_r+0x106> li	a2,9
1c0025f2 <_vfiprintf_r+0x108> li	a0,10
1c0025f4 <_vfiprintf_r+0x10a> lbu	a4,0(s0)
1c0025f8 <_vfiprintf_r+0x10e> addi	a1,s0,1
1c0025fc <_vfiprintf_r+0x112> addi	a4,a4,-48
1c002600 <_vfiprintf_r+0x116> bgeu	a2,a4,1c0026ba <_vfiprintf_r+0x1d0>
1c002604 <_vfiprintf_r+0x11a> beqz	a3,1c002680 <_vfiprintf_r+0x196>
1c002606 <_vfiprintf_r+0x11c> sw	a5,28(sp)
1c002608 <_vfiprintf_r+0x11e> j	1c002680 <_vfiprintf_r+0x196>
1c00260a <_vfiprintf_r+0x120> lui	a5,0x1c008
1c00260e <_vfiprintf_r+0x124> addi	a5,a5,1200 # 1c0084b0 <__sf_fake_stdout>
1c002612 <_vfiprintf_r+0x128> bne	s1,a5,1c00261c <_vfiprintf_r+0x132>
1c002616 <_vfiprintf_r+0x12c> lw	s1,8(s3)
1c00261a <_vfiprintf_r+0x130> j	1c002528 <_vfiprintf_r+0x3e>
1c00261c <_vfiprintf_r+0x132> lui	a5,0x1c008
1c002620 <_vfiprintf_r+0x136> addi	a5,a5,1136 # 1c008470 <__sf_fake_stderr>
1c002624 <_vfiprintf_r+0x13a> bne	s1,a5,1c002528 <_vfiprintf_r+0x3e>
1c002628 <_vfiprintf_r+0x13e> lw	s1,12(s3)
1c00262c <_vfiprintf_r+0x142> j	1c002528 <_vfiprintf_r+0x3e>
1c00262e <_vfiprintf_r+0x144> mv	a1,s1
1c002630 <_vfiprintf_r+0x146> mv	a0,s3
1c002632 <_vfiprintf_r+0x148> jal	ra,1c002a4c <__swsetup_r>
1c002636 <_vfiprintf_r+0x14c> beqz	a0,1c002538 <_vfiprintf_r+0x4e>
1c00263a <_vfiprintf_r+0x150> li	a0,-1
1c00263c <_vfiprintf_r+0x152> lw	ra,172(sp)
1c00263e <_vfiprintf_r+0x154> lw	s0,168(sp)
1c002640 <_vfiprintf_r+0x156> lw	s1,164(sp)
1c002642 <_vfiprintf_r+0x158> lw	s2,160(sp)
1c002644 <_vfiprintf_r+0x15a> lw	s3,156(sp)
1c002646 <_vfiprintf_r+0x15c> lw	s4,152(sp)
1c002648 <_vfiprintf_r+0x15e> lw	s5,148(sp)
1c00264a <_vfiprintf_r+0x160> lw	s6,144(sp)
1c00264c <_vfiprintf_r+0x162> lw	s7,140(sp)
1c00264e <_vfiprintf_r+0x164> lw	s8,136(sp)
1c002650 <_vfiprintf_r+0x166> lw	s9,132(sp)
1c002652 <_vfiprintf_r+0x168> lw	s10,128(sp)
1c002654 <_vfiprintf_r+0x16a> lw	s11,124(sp)
1c002656 <_vfiprintf_r+0x16c> addi	sp,sp,176
1c002658 <_vfiprintf_r+0x16e> ret
1c00265a <_vfiprintf_r+0x170> addi	s0,s0,1
1c00265c <_vfiprintf_r+0x172> j	1c002566 <_vfiprintf_r+0x7c>
1c00265e <_vfiprintf_r+0x174> addi	a4,s6,1116
1c002662 <_vfiprintf_r+0x178> sub	a0,a0,a4
1c002664 <_vfiprintf_r+0x17a> sll	a0,s11,a0
1c002668 <_vfiprintf_r+0x17e> or	a5,a5,a0
1c00266a <_vfiprintf_r+0x180> sw	a5,16(sp)
1c00266c <_vfiprintf_r+0x182> mv	s2,s0
1c00266e <_vfiprintf_r+0x184> j	1c0025ac <_vfiprintf_r+0xc2>
1c002670 <_vfiprintf_r+0x186> lw	a4,12(sp)
1c002672 <_vfiprintf_r+0x188> addi	a3,a4,4
1c002676 <_vfiprintf_r+0x18c> lw	a4,0(a4)
1c002678 <_vfiprintf_r+0x18e> sw	a3,12(sp)
1c00267a <_vfiprintf_r+0x190> bltz	a4,1c0026ac <_vfiprintf_r+0x1c2>
1c00267e <_vfiprintf_r+0x194> sw	a4,28(sp)
1c002680 <_vfiprintf_r+0x196> lbu	a4,0(s0)
1c002684 <_vfiprintf_r+0x19a> li	a5,46
1c002688 <_vfiprintf_r+0x19e> bne	a4,a5,1c0026e8 <_vfiprintf_r+0x1fe>
1c00268c <_vfiprintf_r+0x1a2> lbu	a4,1(s0)
1c002690 <_vfiprintf_r+0x1a6> li	a5,42
1c002694 <_vfiprintf_r+0x1aa> bne	a4,a5,1c0026ca <_vfiprintf_r+0x1e0>
1c002698 <_vfiprintf_r+0x1ae> lw	a5,12(sp)
1c00269a <_vfiprintf_r+0x1b0> addi	s0,s0,2
1c00269c <_vfiprintf_r+0x1b2> addi	a4,a5,4
1c0026a0 <_vfiprintf_r+0x1b6> lw	a5,0(a5)
1c0026a2 <_vfiprintf_r+0x1b8> sw	a4,12(sp)
1c0026a4 <_vfiprintf_r+0x1ba> bltz	a5,1c0026c6 <_vfiprintf_r+0x1dc>
1c0026a8 <_vfiprintf_r+0x1be> sw	a5,20(sp)
1c0026aa <_vfiprintf_r+0x1c0> j	1c0026e8 <_vfiprintf_r+0x1fe>
1c0026ac <_vfiprintf_r+0x1c2> neg	a4,a4
1c0026b0 <_vfiprintf_r+0x1c6> ori	a5,a5,2
1c0026b4 <_vfiprintf_r+0x1ca> sw	a4,28(sp)
1c0026b6 <_vfiprintf_r+0x1cc> sw	a5,16(sp)
1c0026b8 <_vfiprintf_r+0x1ce> j	1c002680 <_vfiprintf_r+0x196>
1c0026ba <_vfiprintf_r+0x1d0> mul	a5,a5,a0
1c0026be <_vfiprintf_r+0x1d4> mv	s0,a1
1c0026c0 <_vfiprintf_r+0x1d6> li	a3,1
1c0026c2 <_vfiprintf_r+0x1d8> add	a5,a5,a4
1c0026c4 <_vfiprintf_r+0x1da> j	1c0025f4 <_vfiprintf_r+0x10a>
1c0026c6 <_vfiprintf_r+0x1dc> li	a5,-1
1c0026c8 <_vfiprintf_r+0x1de> j	1c0026a8 <_vfiprintf_r+0x1be>
1c0026ca <_vfiprintf_r+0x1e0> addi	s0,s0,1
1c0026cc <_vfiprintf_r+0x1e2> sw	zero,20(sp)
1c0026ce <_vfiprintf_r+0x1e4> li	a3,0
1c0026d0 <_vfiprintf_r+0x1e6> li	a5,0
1c0026d2 <_vfiprintf_r+0x1e8> li	a2,9
1c0026d4 <_vfiprintf_r+0x1ea> li	a0,10
1c0026d6 <_vfiprintf_r+0x1ec> lbu	a4,0(s0)
1c0026da <_vfiprintf_r+0x1f0> addi	a1,s0,1
1c0026de <_vfiprintf_r+0x1f4> addi	a4,a4,-48
1c0026e2 <_vfiprintf_r+0x1f8> bgeu	a2,a4,1c002740 <_vfiprintf_r+0x256>
1c0026e6 <_vfiprintf_r+0x1fc> bnez	a3,1c0026a8 <_vfiprintf_r+0x1be>
1c0026e8 <_vfiprintf_r+0x1fe> lbu	a1,0(s0)
1c0026ec <_vfiprintf_r+0x202> li	a2,3
1c0026ee <_vfiprintf_r+0x204> addi	a0,s7,1124 # 1c008464 <__func__.1889+0x1d8>
1c0026f2 <_vfiprintf_r+0x208> jal	ra,1c003186 <memchr>
1c0026f6 <_vfiprintf_r+0x20c> beqz	a0,1c00270e <_vfiprintf_r+0x224>
1c0026f8 <_vfiprintf_r+0x20e> addi	a5,s7,1124
1c0026fc <_vfiprintf_r+0x212> sub	a0,a0,a5
1c0026fe <_vfiprintf_r+0x214> li	a5,64
1c002702 <_vfiprintf_r+0x218> sll	a5,a5,a0
1c002706 <_vfiprintf_r+0x21c> lw	a0,16(sp)
1c002708 <_vfiprintf_r+0x21e> addi	s0,s0,1
1c00270a <_vfiprintf_r+0x220> or	a0,a0,a5
1c00270c <_vfiprintf_r+0x222> sw	a0,16(sp)
1c00270e <_vfiprintf_r+0x224> lbu	a1,0(s0)
1c002712 <_vfiprintf_r+0x228> li	a2,6
1c002714 <_vfiprintf_r+0x22a> addi	a0,s10,1128 # 1c008468 <__func__.1889+0x1dc>
1c002718 <_vfiprintf_r+0x22e> addi	s2,s0,1
1c00271c <_vfiprintf_r+0x232> sb	a1,40(sp)
1c002720 <_vfiprintf_r+0x236> jal	ra,1c003186 <memchr>
1c002724 <_vfiprintf_r+0x23a> beqz	a0,1c002780 <_vfiprintf_r+0x296>
1c002726 <_vfiprintf_r+0x23c> bnez	s5,1c002754 <_vfiprintf_r+0x26a>
1c00272a <_vfiprintf_r+0x240> lw	a4,16(sp)
1c00272c <_vfiprintf_r+0x242> lw	a5,12(sp)
1c00272e <_vfiprintf_r+0x244> andi	a4,a4,256
1c002732 <_vfiprintf_r+0x248> beqz	a4,1c00274c <_vfiprintf_r+0x262>
1c002734 <_vfiprintf_r+0x24a> addi	a5,a5,4
1c002736 <_vfiprintf_r+0x24c> sw	a5,12(sp)
1c002738 <_vfiprintf_r+0x24e> lw	a5,36(sp)
1c00273a <_vfiprintf_r+0x250> add	a5,a5,s4
1c00273c <_vfiprintf_r+0x252> sw	a5,36(sp)
1c00273e <_vfiprintf_r+0x254> j	1c002564 <_vfiprintf_r+0x7a>
1c002740 <_vfiprintf_r+0x256> mul	a5,a5,a0
1c002744 <_vfiprintf_r+0x25a> mv	s0,a1
1c002746 <_vfiprintf_r+0x25c> li	a3,1
1c002748 <_vfiprintf_r+0x25e> add	a5,a5,a4
1c00274a <_vfiprintf_r+0x260> j	1c0026d6 <_vfiprintf_r+0x1ec>
1c00274c <_vfiprintf_r+0x262> addi	a5,a5,7
1c00274e <_vfiprintf_r+0x264> andi	a5,a5,-8
1c002750 <_vfiprintf_r+0x266> addi	a5,a5,8
1c002752 <_vfiprintf_r+0x268> j	1c002736 <_vfiprintf_r+0x24c>
1c002754 <_vfiprintf_r+0x26a> addi	a4,sp,12
1c002756 <_vfiprintf_r+0x26c> addi	a3,s8,1192 # 1c0024a8 <__sfputs_r>
1c00275a <_vfiprintf_r+0x270> mv	a2,s1
1c00275c <_vfiprintf_r+0x272> addi	a1,sp,16
1c00275e <_vfiprintf_r+0x274> mv	a0,s3
1c002760 <_vfiprintf_r+0x276> auipc	ra,0x0
1c002764 <_vfiprintf_r+0x27a> jalr	zero # 00000000 <__heap_size>
1c002768 <_vfiprintf_r+0x27e> li	a5,-1
1c00276a <_vfiprintf_r+0x280> mv	s4,a0
1c00276c <_vfiprintf_r+0x282> bne	a0,a5,1c002738 <_vfiprintf_r+0x24e>
1c002770 <_vfiprintf_r+0x286> lhu	a5,12(s1)
1c002774 <_vfiprintf_r+0x28a> andi	a5,a5,64
1c002778 <_vfiprintf_r+0x28e> bnez	a5,1c00263a <_vfiprintf_r+0x150>
1c00277c <_vfiprintf_r+0x292> lw	a0,36(sp)
1c00277e <_vfiprintf_r+0x294> j	1c00263c <_vfiprintf_r+0x152>
1c002780 <_vfiprintf_r+0x296> addi	a4,sp,12
1c002782 <_vfiprintf_r+0x298> addi	a3,s8,1192
1c002786 <_vfiprintf_r+0x29c> mv	a2,s1
1c002788 <_vfiprintf_r+0x29e> addi	a1,sp,16
1c00278a <_vfiprintf_r+0x2a0> mv	a0,s3
1c00278c <_vfiprintf_r+0x2a2> jal	ra,1c0032ac <_printf_i>
1c002790 <_vfiprintf_r+0x2a6> j	1c002768 <_vfiprintf_r+0x27e>
printf():
1c002792 <iprintf> addi	sp,sp,-80
1c002794 <iprintf+0x2> sw	a5,68(sp)
1c002796 <iprintf+0x4> lui	a5,0x1c008
1c00279a <iprintf+0x8> sw	s0,40(sp)
1c00279c <iprintf+0xa> mv	s0,a0
1c00279e <iprintf+0xc> lw	a0,1460(a5) # 1c0085b4 <_impure_ptr>
1c0027a2 <iprintf+0x10> sw	ra,44(sp)
1c0027a4 <iprintf+0x12> sw	a1,52(sp)
1c0027a6 <iprintf+0x14> sw	a2,56(sp)
1c0027a8 <iprintf+0x16> sw	a3,60(sp)
1c0027aa <iprintf+0x18> sw	a4,64(sp)
1c0027ac <iprintf+0x1a> sw	a6,72(sp)
1c0027ae <iprintf+0x1c> sw	a7,76(sp)
1c0027b0 <iprintf+0x1e> beqz	a0,1c0027be <iprintf+0x2c>
1c0027b2 <iprintf+0x20> lw	a5,24(a0)
1c0027b4 <iprintf+0x22> bnez	a5,1c0027be <iprintf+0x2c>
1c0027b6 <iprintf+0x24> sw	a0,12(sp)
1c0027b8 <iprintf+0x26> jal	ra,1c002f18 <__sinit>
1c0027bc <iprintf+0x2a> lw	a0,12(sp)
1c0027be <iprintf+0x2c> lw	a1,8(a0)
1c0027c0 <iprintf+0x2e> addi	a3,sp,52
1c0027c2 <iprintf+0x30> mv	a2,s0
1c0027c4 <iprintf+0x32> sw	a3,28(sp)
1c0027c6 <iprintf+0x34> jal	1c0024ea <_vfiprintf_r>
1c0027c8 <iprintf+0x36> lw	ra,44(sp)
1c0027ca <iprintf+0x38> lw	s0,40(sp)
1c0027cc <iprintf+0x3a> addi	sp,sp,80
1c0027ce <iprintf+0x3c> ret
_puts_r():
1c0027d0 <_puts_r> addi	sp,sp,-32
1c0027d2 <_puts_r+0x2> sw	s1,20(sp)
1c0027d4 <_puts_r+0x4> sw	s2,16(sp)
1c0027d6 <_puts_r+0x6> sw	ra,28(sp)
1c0027d8 <_puts_r+0x8> sw	s0,24(sp)
1c0027da <_puts_r+0xa> sw	s3,12(sp)
1c0027dc <_puts_r+0xc> sw	s4,8(sp)
1c0027de <_puts_r+0xe> mv	s1,a0
1c0027e0 <_puts_r+0x10> mv	s2,a1
1c0027e2 <_puts_r+0x12> beqz	a0,1c0027ec <_puts_r+0x1c>
1c0027e4 <_puts_r+0x14> lw	a5,24(a0)
1c0027e6 <_puts_r+0x16> bnez	a5,1c0027ec <_puts_r+0x1c>
1c0027e8 <_puts_r+0x18> jal	ra,1c002f18 <__sinit>
1c0027ec <_puts_r+0x1c> lw	a5,24(s1)
1c0027ee <_puts_r+0x1e> lw	s0,8(s1)
1c0027f0 <_puts_r+0x20> bnez	a5,1c0027f8 <_puts_r+0x28>
1c0027f2 <_puts_r+0x22> mv	a0,s1
1c0027f4 <_puts_r+0x24> jal	ra,1c002f18 <__sinit>
1c0027f8 <_puts_r+0x28> lui	a5,0x1c008
1c0027fc <_puts_r+0x2c> addi	a5,a5,1168 # 1c008490 <__sf_fake_stdin>
1c002800 <_puts_r+0x30> bne	s0,a5,1c002838 <_puts_r+0x68>
1c002804 <_puts_r+0x34> lw	s0,4(s1)
1c002806 <_puts_r+0x36> lhu	a5,12(s0)
1c00280a <_puts_r+0x3a> andi	a5,a5,8
1c00280c <_puts_r+0x3c> beqz	a5,1c002858 <_puts_r+0x88>
1c00280e <_puts_r+0x3e> lw	a5,16(s0)
1c002810 <_puts_r+0x40> beqz	a5,1c002858 <_puts_r+0x88>
1c002812 <_puts_r+0x42> li	s3,-1
1c002814 <_puts_r+0x44> li	s4,10
1c002816 <_puts_r+0x46> lw	a5,8(s0)
1c002818 <_puts_r+0x48> lbu	a1,0(s2)
1c00281c <_puts_r+0x4c> addi	a5,a5,-1
1c00281e <_puts_r+0x4e> bnez	a1,1c002872 <_puts_r+0xa2>
1c002820 <_puts_r+0x50> sw	a5,8(s0)
1c002822 <_puts_r+0x52> bgez	a5,1c00289e <_puts_r+0xce>
1c002826 <_puts_r+0x56> mv	a2,s0
1c002828 <_puts_r+0x58> li	a1,10
1c00282a <_puts_r+0x5a> mv	a0,s1
1c00282c <_puts_r+0x5c> jal	1c002986 <__swbuf_r>
1c00282e <_puts_r+0x5e> li	a5,-1
1c002830 <_puts_r+0x60> beq	a0,a5,1c002860 <_puts_r+0x90>
1c002834 <_puts_r+0x64> li	a0,10
1c002836 <_puts_r+0x66> j	1c002862 <_puts_r+0x92>
1c002838 <_puts_r+0x68> lui	a5,0x1c008
1c00283c <_puts_r+0x6c> addi	a5,a5,1200 # 1c0084b0 <__sf_fake_stdout>
1c002840 <_puts_r+0x70> bne	s0,a5,1c002848 <_puts_r+0x78>
1c002844 <_puts_r+0x74> lw	s0,8(s1)
1c002846 <_puts_r+0x76> j	1c002806 <_puts_r+0x36>
1c002848 <_puts_r+0x78> lui	a5,0x1c008
1c00284c <_puts_r+0x7c> addi	a5,a5,1136 # 1c008470 <__sf_fake_stderr>
1c002850 <_puts_r+0x80> bne	s0,a5,1c002806 <_puts_r+0x36>
1c002854 <_puts_r+0x84> lw	s0,12(s1)
1c002856 <_puts_r+0x86> j	1c002806 <_puts_r+0x36>
1c002858 <_puts_r+0x88> mv	a1,s0
1c00285a <_puts_r+0x8a> mv	a0,s1
1c00285c <_puts_r+0x8c> jal	1c002a4c <__swsetup_r>
1c00285e <_puts_r+0x8e> beqz	a0,1c002812 <_puts_r+0x42>
1c002860 <_puts_r+0x90> li	a0,-1
1c002862 <_puts_r+0x92> lw	ra,28(sp)
1c002864 <_puts_r+0x94> lw	s0,24(sp)
1c002866 <_puts_r+0x96> lw	s1,20(sp)
1c002868 <_puts_r+0x98> lw	s2,16(sp)
1c00286a <_puts_r+0x9a> lw	s3,12(sp)
1c00286c <_puts_r+0x9c> lw	s4,8(sp)
1c00286e <_puts_r+0x9e> addi	sp,sp,32
1c002870 <_puts_r+0xa0> ret
1c002872 <_puts_r+0xa2> sw	a5,8(s0)
1c002874 <_puts_r+0xa4> addi	s2,s2,1
1c002876 <_puts_r+0xa6> bgez	a5,1c002884 <_puts_r+0xb4>
1c00287a <_puts_r+0xaa> lw	a4,24(s0)
1c00287c <_puts_r+0xac> blt	a5,a4,1c002892 <_puts_r+0xc2>
1c002880 <_puts_r+0xb0> beq	a1,s4,1c002892 <_puts_r+0xc2>
1c002884 <_puts_r+0xb4> lw	a5,0(s0)
1c002886 <_puts_r+0xb6> addi	a4,a5,1
1c00288a <_puts_r+0xba> sw	a4,0(s0)
1c00288c <_puts_r+0xbc> sb	a1,0(a5)
1c002890 <_puts_r+0xc0> j	1c002816 <_puts_r+0x46>
1c002892 <_puts_r+0xc2> mv	a2,s0
1c002894 <_puts_r+0xc4> mv	a0,s1
1c002896 <_puts_r+0xc6> jal	1c002986 <__swbuf_r>
1c002898 <_puts_r+0xc8> bne	a0,s3,1c002816 <_puts_r+0x46>
1c00289c <_puts_r+0xcc> j	1c002860 <_puts_r+0x90>
1c00289e <_puts_r+0xce> lw	a5,0(s0)
1c0028a0 <_puts_r+0xd0> addi	a4,a5,1
1c0028a4 <_puts_r+0xd4> sw	a4,0(s0)
1c0028a6 <_puts_r+0xd6> li	a4,10
1c0028a8 <_puts_r+0xd8> sb	a4,0(a5)
1c0028ac <_puts_r+0xdc> j	1c002834 <_puts_r+0x64>
puts():
1c0028ae <puts> lui	a5,0x1c008
1c0028b2 <puts+0x4> mv	a1,a0
1c0028b4 <puts+0x6> lw	a0,1460(a5) # 1c0085b4 <_impure_ptr>
1c0028b8 <puts+0xa> j	1c0027d0 <_puts_r>
_sbrk_r():
1c0028ba <_sbrk_r> addi	sp,sp,-16
1c0028bc <_sbrk_r+0x2> sw	s0,8(sp)
1c0028be <_sbrk_r+0x4> sw	s1,4(sp)
1c0028c0 <_sbrk_r+0x6> mv	s0,a0
1c0028c2 <_sbrk_r+0x8> mv	a0,a1
1c0028c4 <_sbrk_r+0xa> sw	ra,12(sp)
1c0028c6 <_sbrk_r+0xc> sw	zero,-308(gp) # 1c008c1c <errno>
1c0028ca <_sbrk_r+0x10> jal	ra,1c0014f2 <_sbrk>
1c0028ce <_sbrk_r+0x14> li	a5,-1
1c0028d0 <_sbrk_r+0x16> bne	a0,a5,1c0028dc <_sbrk_r+0x22>
1c0028d4 <_sbrk_r+0x1a> lw	a5,-308(gp) # 1c008c1c <errno>
1c0028d8 <_sbrk_r+0x1e> beqz	a5,1c0028dc <_sbrk_r+0x22>
1c0028da <_sbrk_r+0x20> sw	a5,0(s0)
1c0028dc <_sbrk_r+0x22> lw	ra,12(sp)
1c0028de <_sbrk_r+0x24> lw	s0,8(sp)
1c0028e0 <_sbrk_r+0x26> lw	s1,4(sp)
1c0028e2 <_sbrk_r+0x28> addi	sp,sp,16
1c0028e4 <_sbrk_r+0x2a> ret
_raise_r():
1c0028e6 <_raise_r> addi	sp,sp,-32
1c0028e8 <_raise_r+0x2> sw	s0,24(sp)
1c0028ea <_raise_r+0x4> sw	ra,28(sp)
1c0028ec <_raise_r+0x6> li	a5,31
1c0028ee <_raise_r+0x8> mv	s0,a0
1c0028f0 <_raise_r+0xa> bgeu	a5,a1,1c002902 <_raise_r+0x1c>
1c0028f4 <_raise_r+0xe> li	a5,22
1c0028f6 <_raise_r+0x10> sw	a5,0(a0)
1c0028f8 <_raise_r+0x12> li	a0,-1
1c0028fa <_raise_r+0x14> lw	ra,28(sp)
1c0028fc <_raise_r+0x16> lw	s0,24(sp)
1c0028fe <_raise_r+0x18> addi	sp,sp,32
1c002900 <_raise_r+0x1a> ret
1c002902 <_raise_r+0x1c> lw	a5,68(a0)
1c002904 <_raise_r+0x1e> mv	a2,a1
1c002906 <_raise_r+0x20> beqz	a5,1c002912 <_raise_r+0x2c>
1c002908 <_raise_r+0x22> slli	a4,a1,0x2
1c00290c <_raise_r+0x26> add	a5,a5,a4
1c00290e <_raise_r+0x28> lw	a4,0(a5)
1c002910 <_raise_r+0x2a> bnez	a4,1c002926 <_raise_r+0x40>
1c002912 <_raise_r+0x2c> mv	a0,s0
1c002914 <_raise_r+0x2e> sw	a2,12(sp)
1c002916 <_raise_r+0x30> jal	1c002982 <_getpid_r>
1c002918 <_raise_r+0x32> mv	a1,a0
1c00291a <_raise_r+0x34> mv	a0,s0
1c00291c <_raise_r+0x36> lw	s0,24(sp)
1c00291e <_raise_r+0x38> lw	a2,12(sp)
1c002920 <_raise_r+0x3a> lw	ra,28(sp)
1c002922 <_raise_r+0x3c> addi	sp,sp,32
1c002924 <_raise_r+0x3e> j	1c002954 <_kill_r>
1c002926 <_raise_r+0x40> li	a3,1
1c002928 <_raise_r+0x42> li	a0,0
1c00292a <_raise_r+0x44> beq	a4,a3,1c0028fa <_raise_r+0x14>
1c00292e <_raise_r+0x48> li	a3,-1
1c002930 <_raise_r+0x4a> bne	a4,a3,1c00293c <_raise_r+0x56>
1c002934 <_raise_r+0x4e> li	a5,22
1c002936 <_raise_r+0x50> sw	a5,0(s0)
1c002938 <_raise_r+0x52> li	a0,1
1c00293a <_raise_r+0x54> j	1c0028fa <_raise_r+0x14>
1c00293c <_raise_r+0x56> mv	a0,a1
1c00293e <_raise_r+0x58> sw	zero,0(a5)
1c002942 <_raise_r+0x5c> jalr	a4
1c002944 <_raise_r+0x5e> li	a0,0
1c002946 <_raise_r+0x60> j	1c0028fa <_raise_r+0x14>
raise():
1c002948 <raise> lui	a5,0x1c008
1c00294c <raise+0x4> mv	a1,a0
1c00294e <raise+0x6> lw	a0,1460(a5) # 1c0085b4 <_impure_ptr>
1c002952 <raise+0xa> j	1c0028e6 <_raise_r>
_kill_r():
1c002954 <_kill_r> addi	sp,sp,-16
1c002956 <_kill_r+0x2> sw	s0,8(sp)
1c002958 <_kill_r+0x4> sw	s1,4(sp)
1c00295a <_kill_r+0x6> mv	s0,a0
1c00295c <_kill_r+0x8> mv	a0,a1
1c00295e <_kill_r+0xa> mv	a1,a2
1c002960 <_kill_r+0xc> sw	ra,12(sp)
1c002962 <_kill_r+0xe> sw	zero,-308(gp) # 1c008c1c <errno>
1c002966 <_kill_r+0x12> jal	ra,1c001478 <_kill>
1c00296a <_kill_r+0x16> li	a5,-1
1c00296c <_kill_r+0x18> bne	a0,a5,1c002978 <_kill_r+0x24>
1c002970 <_kill_r+0x1c> lw	a5,-308(gp) # 1c008c1c <errno>
1c002974 <_kill_r+0x20> beqz	a5,1c002978 <_kill_r+0x24>
1c002976 <_kill_r+0x22> sw	a5,0(s0)
1c002978 <_kill_r+0x24> lw	ra,12(sp)
1c00297a <_kill_r+0x26> lw	s0,8(sp)
1c00297c <_kill_r+0x28> lw	s1,4(sp)
1c00297e <_kill_r+0x2a> addi	sp,sp,16
1c002980 <_kill_r+0x2c> ret
_getpid_r():
1c002982 <_getpid_r> j	1c00146c <_getpid>
__swbuf_r():
1c002986 <__swbuf_r> addi	sp,sp,-32
1c002988 <__swbuf_r+0x2> sw	s0,24(sp)
1c00298a <__swbuf_r+0x4> sw	s1,20(sp)
1c00298c <__swbuf_r+0x6> sw	s2,16(sp)
1c00298e <__swbuf_r+0x8> sw	ra,28(sp)
1c002990 <__swbuf_r+0xa> sw	s3,12(sp)
1c002992 <__swbuf_r+0xc> mv	s1,a0
1c002994 <__swbuf_r+0xe> mv	s2,a1
1c002996 <__swbuf_r+0x10> mv	s0,a2
1c002998 <__swbuf_r+0x12> beqz	a0,1c0029a2 <__swbuf_r+0x1c>
1c00299a <__swbuf_r+0x14> lw	a5,24(a0)
1c00299c <__swbuf_r+0x16> bnez	a5,1c0029a2 <__swbuf_r+0x1c>
1c00299e <__swbuf_r+0x18> jal	ra,1c002f18 <__sinit>
1c0029a2 <__swbuf_r+0x1c> lui	a5,0x1c008
1c0029a6 <__swbuf_r+0x20> addi	a5,a5,1168 # 1c008490 <__sf_fake_stdin>
1c0029aa <__swbuf_r+0x24> bne	s0,a5,1c002a20 <__swbuf_r+0x9a>
1c0029ae <__swbuf_r+0x28> lw	s0,4(s1)
1c0029b0 <__swbuf_r+0x2a> lw	a5,24(s0)
1c0029b2 <__swbuf_r+0x2c> sw	a5,8(s0)
1c0029b4 <__swbuf_r+0x2e> lhu	a5,12(s0)
1c0029b8 <__swbuf_r+0x32> andi	a5,a5,8
1c0029ba <__swbuf_r+0x34> beqz	a5,1c002a40 <__swbuf_r+0xba>
1c0029bc <__swbuf_r+0x36> lw	a5,16(s0)
1c0029be <__swbuf_r+0x38> beqz	a5,1c002a40 <__swbuf_r+0xba>
1c0029c0 <__swbuf_r+0x3a> lw	a5,16(s0)
1c0029c2 <__swbuf_r+0x3c> lw	a0,0(s0)
1c0029c4 <__swbuf_r+0x3e> andi	s3,s2,255
1c0029c8 <__swbuf_r+0x42> andi	s2,s2,255
1c0029cc <__swbuf_r+0x46> sub	a0,a0,a5
1c0029ce <__swbuf_r+0x48> lw	a5,20(s0)
1c0029d0 <__swbuf_r+0x4a> blt	a0,a5,1c0029de <__swbuf_r+0x58>
1c0029d4 <__swbuf_r+0x4e> mv	a1,s0
1c0029d6 <__swbuf_r+0x50> mv	a0,s1
1c0029d8 <__swbuf_r+0x52> jal	ra,1c002df8 <_fflush_r>
1c0029dc <__swbuf_r+0x56> bnez	a0,1c002a48 <__swbuf_r+0xc2>
1c0029de <__swbuf_r+0x58> lw	a5,8(s0)
1c0029e0 <__swbuf_r+0x5a> addi	a0,a0,1
1c0029e2 <__swbuf_r+0x5c> addi	a5,a5,-1
1c0029e4 <__swbuf_r+0x5e> sw	a5,8(s0)
1c0029e6 <__swbuf_r+0x60> lw	a5,0(s0)
1c0029e8 <__swbuf_r+0x62> addi	a4,a5,1
1c0029ec <__swbuf_r+0x66> sw	a4,0(s0)
1c0029ee <__swbuf_r+0x68> sb	s3,0(a5)
1c0029f2 <__swbuf_r+0x6c> lw	a5,20(s0)
1c0029f4 <__swbuf_r+0x6e> beq	a5,a0,1c002a06 <__swbuf_r+0x80>
1c0029f8 <__swbuf_r+0x72> lhu	a5,12(s0)
1c0029fc <__swbuf_r+0x76> andi	a5,a5,1
1c0029fe <__swbuf_r+0x78> beqz	a5,1c002a10 <__swbuf_r+0x8a>
1c002a00 <__swbuf_r+0x7a> li	a5,10
1c002a02 <__swbuf_r+0x7c> bne	s2,a5,1c002a10 <__swbuf_r+0x8a>
1c002a06 <__swbuf_r+0x80> mv	a1,s0
1c002a08 <__swbuf_r+0x82> mv	a0,s1
1c002a0a <__swbuf_r+0x84> jal	ra,1c002df8 <_fflush_r>
1c002a0e <__swbuf_r+0x88> bnez	a0,1c002a48 <__swbuf_r+0xc2>
1c002a10 <__swbuf_r+0x8a> lw	ra,28(sp)
1c002a12 <__swbuf_r+0x8c> lw	s0,24(sp)
1c002a14 <__swbuf_r+0x8e> lw	s1,20(sp)
1c002a16 <__swbuf_r+0x90> lw	s3,12(sp)
1c002a18 <__swbuf_r+0x92> mv	a0,s2
1c002a1a <__swbuf_r+0x94> lw	s2,16(sp)
1c002a1c <__swbuf_r+0x96> addi	sp,sp,32
1c002a1e <__swbuf_r+0x98> ret
1c002a20 <__swbuf_r+0x9a> lui	a5,0x1c008
1c002a24 <__swbuf_r+0x9e> addi	a5,a5,1200 # 1c0084b0 <__sf_fake_stdout>
1c002a28 <__swbuf_r+0xa2> bne	s0,a5,1c002a30 <__swbuf_r+0xaa>
1c002a2c <__swbuf_r+0xa6> lw	s0,8(s1)
1c002a2e <__swbuf_r+0xa8> j	1c0029b0 <__swbuf_r+0x2a>
1c002a30 <__swbuf_r+0xaa> lui	a5,0x1c008
1c002a34 <__swbuf_r+0xae> addi	a5,a5,1136 # 1c008470 <__sf_fake_stderr>
1c002a38 <__swbuf_r+0xb2> bne	s0,a5,1c0029b0 <__swbuf_r+0x2a>
1c002a3c <__swbuf_r+0xb6> lw	s0,12(s1)
1c002a3e <__swbuf_r+0xb8> j	1c0029b0 <__swbuf_r+0x2a>
1c002a40 <__swbuf_r+0xba> mv	a1,s0
1c002a42 <__swbuf_r+0xbc> mv	a0,s1
1c002a44 <__swbuf_r+0xbe> jal	1c002a4c <__swsetup_r>
1c002a46 <__swbuf_r+0xc0> beqz	a0,1c0029c0 <__swbuf_r+0x3a>
1c002a48 <__swbuf_r+0xc2> li	s2,-1
1c002a4a <__swbuf_r+0xc4> j	1c002a10 <__swbuf_r+0x8a>
__swsetup_r():
1c002a4c <__swsetup_r> addi	sp,sp,-16
1c002a4e <__swsetup_r+0x2> lui	a5,0x1c008
1c002a52 <__swsetup_r+0x6> sw	s1,4(sp)
1c002a54 <__swsetup_r+0x8> lw	s1,1460(a5) # 1c0085b4 <_impure_ptr>
1c002a58 <__swsetup_r+0xc> sw	s0,8(sp)
1c002a5a <__swsetup_r+0xe> sw	s2,0(sp)
1c002a5c <__swsetup_r+0x10> sw	ra,12(sp)
1c002a5e <__swsetup_r+0x12> mv	s2,a0
1c002a60 <__swsetup_r+0x14> mv	s0,a1
1c002a62 <__swsetup_r+0x16> beqz	s1,1c002a6e <__swsetup_r+0x22>
1c002a64 <__swsetup_r+0x18> lw	a5,24(s1)
1c002a66 <__swsetup_r+0x1a> bnez	a5,1c002a6e <__swsetup_r+0x22>
1c002a68 <__swsetup_r+0x1c> mv	a0,s1
1c002a6a <__swsetup_r+0x1e> jal	ra,1c002f18 <__sinit>
1c002a6e <__swsetup_r+0x22> lui	a5,0x1c008
1c002a72 <__swsetup_r+0x26> addi	a5,a5,1168 # 1c008490 <__sf_fake_stdin>
1c002a76 <__swsetup_r+0x2a> bne	s0,a5,1c002aa4 <__swsetup_r+0x58>
1c002a7a <__swsetup_r+0x2e> lw	s0,4(s1)
1c002a7c <__swsetup_r+0x30> lh	a5,12(s0)
1c002a80 <__swsetup_r+0x34> slli	a4,a5,0x10
1c002a84 <__swsetup_r+0x38> andi	a3,a5,8
1c002a88 <__swsetup_r+0x3c> srli	a4,a4,0x10
1c002a8a <__swsetup_r+0x3e> bnez	a3,1c002afe <__swsetup_r+0xb2>
1c002a8c <__swsetup_r+0x40> andi	a3,a4,16
1c002a90 <__swsetup_r+0x44> bnez	a3,1c002ac4 <__swsetup_r+0x78>
1c002a92 <__swsetup_r+0x46> li	a4,9
1c002a94 <__swsetup_r+0x48> sw	a4,0(s2)
1c002a98 <__swsetup_r+0x4c> ori	a5,a5,64
1c002a9c <__swsetup_r+0x50> sh	a5,12(s0)
1c002aa0 <__swsetup_r+0x54> li	a0,-1
1c002aa2 <__swsetup_r+0x56> j	1c002b42 <__swsetup_r+0xf6>
1c002aa4 <__swsetup_r+0x58> lui	a5,0x1c008
1c002aa8 <__swsetup_r+0x5c> addi	a5,a5,1200 # 1c0084b0 <__sf_fake_stdout>
1c002aac <__swsetup_r+0x60> bne	s0,a5,1c002ab4 <__swsetup_r+0x68>
1c002ab0 <__swsetup_r+0x64> lw	s0,8(s1)
1c002ab2 <__swsetup_r+0x66> j	1c002a7c <__swsetup_r+0x30>
1c002ab4 <__swsetup_r+0x68> lui	a5,0x1c008
1c002ab8 <__swsetup_r+0x6c> addi	a5,a5,1136 # 1c008470 <__sf_fake_stderr>
1c002abc <__swsetup_r+0x70> bne	s0,a5,1c002a7c <__swsetup_r+0x30>
1c002ac0 <__swsetup_r+0x74> lw	s0,12(s1)
1c002ac2 <__swsetup_r+0x76> j	1c002a7c <__swsetup_r+0x30>
1c002ac4 <__swsetup_r+0x78> andi	a4,a4,4
1c002ac6 <__swsetup_r+0x7a> beqz	a4,1c002af2 <__swsetup_r+0xa6>
1c002ac8 <__swsetup_r+0x7c> lw	a1,52(s0)
1c002aca <__swsetup_r+0x7e> beqz	a1,1c002ade <__swsetup_r+0x92>
1c002acc <__swsetup_r+0x80> addi	a5,s0,68
1c002ad0 <__swsetup_r+0x84> beq	a1,a5,1c002ada <__swsetup_r+0x8e>
1c002ad4 <__swsetup_r+0x88> mv	a0,s2
1c002ad6 <__swsetup_r+0x8a> jal	ra,1c0022ec <_free_r>
1c002ada <__swsetup_r+0x8e> sw	zero,52(s0)
1c002ade <__swsetup_r+0x92> lhu	a5,12(s0)
1c002ae2 <__swsetup_r+0x96> sw	zero,4(s0)
1c002ae6 <__swsetup_r+0x9a> andi	a5,a5,-37
1c002aea <__swsetup_r+0x9e> sh	a5,12(s0)
1c002aee <__swsetup_r+0xa2> lw	a5,16(s0)
1c002af0 <__swsetup_r+0xa4> sw	a5,0(s0)
1c002af2 <__swsetup_r+0xa6> lhu	a5,12(s0)
1c002af6 <__swsetup_r+0xaa> ori	a5,a5,8
1c002afa <__swsetup_r+0xae> sh	a5,12(s0)
1c002afe <__swsetup_r+0xb2> lw	a5,16(s0)
1c002b00 <__swsetup_r+0xb4> bnez	a5,1c002b1a <__swsetup_r+0xce>
1c002b02 <__swsetup_r+0xb6> lhu	a5,12(s0)
1c002b06 <__swsetup_r+0xba> li	a4,512
1c002b0a <__swsetup_r+0xbe> andi	a5,a5,640
1c002b0e <__swsetup_r+0xc2> beq	a5,a4,1c002b1a <__swsetup_r+0xce>
1c002b12 <__swsetup_r+0xc6> mv	a1,s0
1c002b14 <__swsetup_r+0xc8> mv	a0,s2
1c002b16 <__swsetup_r+0xca> jal	ra,1c0030e6 <__smakebuf_r>
1c002b1a <__swsetup_r+0xce> lh	a5,12(s0)
1c002b1e <__swsetup_r+0xd2> slli	a4,a5,0x10
1c002b22 <__swsetup_r+0xd6> andi	a3,a5,1
1c002b26 <__swsetup_r+0xda> srli	a4,a4,0x10
1c002b28 <__swsetup_r+0xdc> beqz	a3,1c002b4e <__swsetup_r+0x102>
1c002b2a <__swsetup_r+0xde> lw	a3,20(s0)
1c002b2c <__swsetup_r+0xe0> sw	zero,8(s0)
1c002b30 <__swsetup_r+0xe4> neg	a3,a3
1c002b34 <__swsetup_r+0xe8> sw	a3,24(s0)
1c002b36 <__swsetup_r+0xea> lw	a3,16(s0)
1c002b38 <__swsetup_r+0xec> li	a0,0
1c002b3a <__swsetup_r+0xee> bnez	a3,1c002b42 <__swsetup_r+0xf6>
1c002b3c <__swsetup_r+0xf0> andi	a4,a4,128
1c002b40 <__swsetup_r+0xf4> bnez	a4,1c002a98 <__swsetup_r+0x4c>
1c002b42 <__swsetup_r+0xf6> lw	ra,12(sp)
1c002b44 <__swsetup_r+0xf8> lw	s0,8(sp)
1c002b46 <__swsetup_r+0xfa> lw	s1,4(sp)
1c002b48 <__swsetup_r+0xfc> lw	s2,0(sp)
1c002b4a <__swsetup_r+0xfe> addi	sp,sp,16
1c002b4c <__swsetup_r+0x100> ret
1c002b4e <__swsetup_r+0x102> andi	a3,a4,2
1c002b52 <__swsetup_r+0x106> li	a2,0
1c002b54 <__swsetup_r+0x108> bnez	a3,1c002b58 <__swsetup_r+0x10c>
1c002b56 <__swsetup_r+0x10a> lw	a2,20(s0)
1c002b58 <__swsetup_r+0x10c> sw	a2,8(s0)
1c002b5a <__swsetup_r+0x10e> j	1c002b36 <__swsetup_r+0xea>
__register_exitproc():
1c002b5c <__register_exitproc> lui	a6,0x1c009
1c002b60 <__register_exitproc+0x4> lw	a5,-2048(a6) # 1c008800 <_global_atexit>
1c002b64 <__register_exitproc+0x8> mv	a7,a0
1c002b66 <__register_exitproc+0xa> bnez	a5,1c002b8c <__register_exitproc+0x30>
1c002b68 <__register_exitproc+0xc> lui	a4,0x1c008
1c002b6c <__register_exitproc+0x10> addi	a0,a4,1848 # 1c008738 <_global_atexit0>
1c002b70 <__register_exitproc+0x14> sw	a0,-2048(a6)
1c002b74 <__register_exitproc+0x18> li	t1,0
1c002b78 <__register_exitproc+0x1c> addi	a5,a4,1848
1c002b7c <__register_exitproc+0x20> beqz	t1,1c002b8c <__register_exitproc+0x30>
1c002b80 <__register_exitproc+0x24> lw	a5,0(zero) # 00000000 <__heap_size>
1c002b84 <__register_exitproc+0x28> sw	a5,136(a0)
1c002b88 <__register_exitproc+0x2c> addi	a5,a4,1848
1c002b8c <__register_exitproc+0x30> lw	a4,4(a5)
1c002b8e <__register_exitproc+0x32> li	a6,31
1c002b90 <__register_exitproc+0x34> li	a0,-1
1c002b92 <__register_exitproc+0x36> blt	a6,a4,1c002bde <__register_exitproc+0x82>
1c002b96 <__register_exitproc+0x3a> beqz	a7,1c002bd0 <__register_exitproc+0x74>
1c002b9a <__register_exitproc+0x3e> lw	a6,136(a5)
1c002b9e <__register_exitproc+0x42> beqz	a6,1c002bde <__register_exitproc+0x82>
1c002ba2 <__register_exitproc+0x46> slli	a0,a4,0x2
1c002ba6 <__register_exitproc+0x4a> add	a0,a0,a6
1c002ba8 <__register_exitproc+0x4c> sw	a2,0(a0)
1c002baa <__register_exitproc+0x4e> lw	t1,256(a6)
1c002bae <__register_exitproc+0x52> li	a2,1
1c002bb0 <__register_exitproc+0x54> sll	a2,a2,a4
1c002bb4 <__register_exitproc+0x58> or	t1,t1,a2
1c002bb8 <__register_exitproc+0x5c> sw	t1,256(a6)
1c002bbc <__register_exitproc+0x60> sw	a3,128(a0)
1c002bc0 <__register_exitproc+0x64> li	a3,2
1c002bc2 <__register_exitproc+0x66> bne	a7,a3,1c002bd0 <__register_exitproc+0x74>
1c002bc6 <__register_exitproc+0x6a> lw	a3,260(a6)
1c002bca <__register_exitproc+0x6e> or	a2,a2,a3
1c002bcc <__register_exitproc+0x70> sw	a2,260(a6)
1c002bd0 <__register_exitproc+0x74> addi	a3,a4,1
1c002bd4 <__register_exitproc+0x78> slli	a4,a4,0x2
1c002bd6 <__register_exitproc+0x7a> sw	a3,4(a5)
1c002bd8 <__register_exitproc+0x7c> add	a5,a5,a4
1c002bda <__register_exitproc+0x7e> sw	a1,8(a5)
1c002bdc <__register_exitproc+0x80> li	a0,0
1c002bde <__register_exitproc+0x82> ret
__call_exitprocs():
1c002be0 <__call_exitprocs> addi	sp,sp,-48
1c002be2 <__call_exitprocs+0x2> sw	s4,24(sp)
1c002be4 <__call_exitprocs+0x4> sw	s5,20(sp)
1c002be6 <__call_exitprocs+0x6> sw	s6,16(sp)
1c002be8 <__call_exitprocs+0x8> sw	s8,8(sp)
1c002bea <__call_exitprocs+0xa> sw	ra,44(sp)
1c002bec <__call_exitprocs+0xc> sw	s0,40(sp)
1c002bee <__call_exitprocs+0xe> sw	s1,36(sp)
1c002bf0 <__call_exitprocs+0x10> sw	s2,32(sp)
1c002bf2 <__call_exitprocs+0x12> sw	s3,28(sp)
1c002bf4 <__call_exitprocs+0x14> sw	s7,12(sp)
1c002bf6 <__call_exitprocs+0x16> sw	s9,4(sp)
1c002bf8 <__call_exitprocs+0x18> mv	s5,a0
1c002bfa <__call_exitprocs+0x1a> mv	s4,a1
1c002bfc <__call_exitprocs+0x1c> lui	s6,0x1c009
1c002c00 <__call_exitprocs+0x20> li	s8,1
1c002c02 <__call_exitprocs+0x22> lw	s0,-2048(s6) # 1c008800 <_global_atexit>
1c002c06 <__call_exitprocs+0x26> addi	s7,s6,-2048
1c002c0a <__call_exitprocs+0x2a> beqz	s0,1c002c1e <__call_exitprocs+0x3e>
1c002c0c <__call_exitprocs+0x2c> lw	s1,4(s0)
1c002c0e <__call_exitprocs+0x2e> lw	s3,136(s0)
1c002c12 <__call_exitprocs+0x32> addi	s2,s1,-1
1c002c16 <__call_exitprocs+0x36> slli	s1,s1,0x2
1c002c18 <__call_exitprocs+0x38> add	s1,s1,s0
1c002c1a <__call_exitprocs+0x3a> bgez	s2,1c002c38 <__call_exitprocs+0x58>
1c002c1e <__call_exitprocs+0x3e> lw	ra,44(sp)
1c002c20 <__call_exitprocs+0x40> lw	s0,40(sp)
1c002c22 <__call_exitprocs+0x42> lw	s1,36(sp)
1c002c24 <__call_exitprocs+0x44> lw	s2,32(sp)
1c002c26 <__call_exitprocs+0x46> lw	s3,28(sp)
1c002c28 <__call_exitprocs+0x48> lw	s4,24(sp)
1c002c2a <__call_exitprocs+0x4a> lw	s5,20(sp)
1c002c2c <__call_exitprocs+0x4c> lw	s6,16(sp)
1c002c2e <__call_exitprocs+0x4e> lw	s7,12(sp)
1c002c30 <__call_exitprocs+0x50> lw	s8,8(sp)
1c002c32 <__call_exitprocs+0x52> lw	s9,4(sp)
1c002c34 <__call_exitprocs+0x54> addi	sp,sp,48
1c002c36 <__call_exitprocs+0x56> ret
1c002c38 <__call_exitprocs+0x58> beqz	s4,1c002c54 <__call_exitprocs+0x74>
1c002c3c <__call_exitprocs+0x5c> bnez	s3,1c002c46 <__call_exitprocs+0x66>
1c002c40 <__call_exitprocs+0x60> addi	s2,s2,-1
1c002c42 <__call_exitprocs+0x62> addi	s1,s1,-4
1c002c44 <__call_exitprocs+0x64> j	1c002c1a <__call_exitprocs+0x3a>
1c002c46 <__call_exitprocs+0x66> slli	a5,s2,0x2
1c002c4a <__call_exitprocs+0x6a> add	a5,a5,s3
1c002c4c <__call_exitprocs+0x6c> lw	a5,128(a5)
1c002c50 <__call_exitprocs+0x70> bne	a5,s4,1c002c40 <__call_exitprocs+0x60>
1c002c54 <__call_exitprocs+0x74> lw	a4,4(s0)
1c002c56 <__call_exitprocs+0x76> lw	a5,4(s1)
1c002c58 <__call_exitprocs+0x78> addi	a4,a4,-1
1c002c5a <__call_exitprocs+0x7a> bne	a4,s2,1c002c8a <__call_exitprocs+0xaa>
1c002c5e <__call_exitprocs+0x7e> sw	s2,4(s0)
1c002c62 <__call_exitprocs+0x82> beqz	a5,1c002c40 <__call_exitprocs+0x60>
1c002c64 <__call_exitprocs+0x84> lw	s9,4(s0)
1c002c68 <__call_exitprocs+0x88> beqz	s3,1c002c78 <__call_exitprocs+0x98>
1c002c6c <__call_exitprocs+0x8c> lw	a3,256(s3)
1c002c70 <__call_exitprocs+0x90> sll	a4,s8,s2
1c002c74 <__call_exitprocs+0x94> and	a3,a3,a4
1c002c76 <__call_exitprocs+0x96> bnez	a3,1c002c90 <__call_exitprocs+0xb0>
1c002c78 <__call_exitprocs+0x98> jalr	a5
1c002c7a <__call_exitprocs+0x9a> lw	a4,4(s0)
1c002c7c <__call_exitprocs+0x9c> lw	a5,0(s7)
1c002c80 <__call_exitprocs+0xa0> bne	a4,s9,1c002c02 <__call_exitprocs+0x22>
1c002c84 <__call_exitprocs+0xa4> beq	s0,a5,1c002c40 <__call_exitprocs+0x60>
1c002c88 <__call_exitprocs+0xa8> j	1c002c02 <__call_exitprocs+0x22>
1c002c8a <__call_exitprocs+0xaa> sw	zero,4(s1)
1c002c8e <__call_exitprocs+0xae> j	1c002c62 <__call_exitprocs+0x82>
1c002c90 <__call_exitprocs+0xb0> slli	a3,s2,0x2
1c002c94 <__call_exitprocs+0xb4> add	a3,a3,s3
1c002c96 <__call_exitprocs+0xb6> lw	a1,0(a3)
1c002c98 <__call_exitprocs+0xb8> lw	a3,260(s3)
1c002c9c <__call_exitprocs+0xbc> and	a4,a4,a3
1c002c9e <__call_exitprocs+0xbe> bnez	a4,1c002ca6 <__call_exitprocs+0xc6>
1c002ca0 <__call_exitprocs+0xc0> mv	a0,s5
1c002ca2 <__call_exitprocs+0xc2> jalr	a5
1c002ca4 <__call_exitprocs+0xc4> j	1c002c7a <__call_exitprocs+0x9a>
1c002ca6 <__call_exitprocs+0xc6> mv	a0,a1
1c002ca8 <__call_exitprocs+0xc8> jalr	a5
1c002caa <__call_exitprocs+0xca> j	1c002c7a <__call_exitprocs+0x9a>
__sflush_r():
1c002cac <__sflush_r> lhu	a5,12(a1)
1c002cb0 <__sflush_r+0x4> addi	sp,sp,-32
1c002cb2 <__sflush_r+0x6> sw	s0,24(sp)
1c002cb4 <__sflush_r+0x8> sw	s1,20(sp)
1c002cb6 <__sflush_r+0xa> sw	ra,28(sp)
1c002cb8 <__sflush_r+0xc> sw	s2,16(sp)
1c002cba <__sflush_r+0xe> sw	s3,12(sp)
1c002cbc <__sflush_r+0x10> andi	a4,a5,8
1c002cc0 <__sflush_r+0x14> mv	s1,a0
1c002cc2 <__sflush_r+0x16> mv	s0,a1
1c002cc4 <__sflush_r+0x18> bnez	a4,1c002dae <__sflush_r+0x102>
1c002cc6 <__sflush_r+0x1a> lw	a4,4(a1)
1c002cc8 <__sflush_r+0x1c> bgtz	a4,1c002cd6 <__sflush_r+0x2a>
1c002ccc <__sflush_r+0x20> lw	a4,64(a1)
1c002cce <__sflush_r+0x22> bgtz	a4,1c002cd6 <__sflush_r+0x2a>
1c002cd2 <__sflush_r+0x26> li	a0,0
1c002cd4 <__sflush_r+0x28> j	1c002d96 <__sflush_r+0xea>
1c002cd6 <__sflush_r+0x2a> lw	a4,44(s0)
1c002cd8 <__sflush_r+0x2c> beqz	a4,1c002cd2 <__sflush_r+0x26>
1c002cda <__sflush_r+0x2e> lw	s2,0(s1)
1c002cde <__sflush_r+0x32> slli	a3,a5,0x13
1c002ce2 <__sflush_r+0x36> sw	zero,0(s1)
1c002ce6 <__sflush_r+0x3a> bgez	a3,1c002d64 <__sflush_r+0xb8>
1c002cea <__sflush_r+0x3e> lw	a0,84(s0)
1c002cec <__sflush_r+0x40> lhu	a5,12(s0)
1c002cf0 <__sflush_r+0x44> andi	a5,a5,4
1c002cf2 <__sflush_r+0x46> beqz	a5,1c002d00 <__sflush_r+0x54>
1c002cf4 <__sflush_r+0x48> lw	a5,4(s0)
1c002cf6 <__sflush_r+0x4a> sub	a0,a0,a5
1c002cf8 <__sflush_r+0x4c> lw	a5,52(s0)
1c002cfa <__sflush_r+0x4e> beqz	a5,1c002d00 <__sflush_r+0x54>
1c002cfc <__sflush_r+0x50> lw	a5,64(s0)
1c002cfe <__sflush_r+0x52> sub	a0,a0,a5
1c002d00 <__sflush_r+0x54> lw	a5,44(s0)
1c002d02 <__sflush_r+0x56> lw	a1,32(s0)
1c002d04 <__sflush_r+0x58> mv	a2,a0
1c002d06 <__sflush_r+0x5a> li	a3,0
1c002d08 <__sflush_r+0x5c> mv	a0,s1
1c002d0a <__sflush_r+0x5e> jalr	a5
1c002d0c <__sflush_r+0x60> li	a5,-1
1c002d0e <__sflush_r+0x62> lhu	a4,12(s0)
1c002d12 <__sflush_r+0x66> bne	a0,a5,1c002d2c <__sflush_r+0x80>
1c002d16 <__sflush_r+0x6a> lw	a3,0(s1)
1c002d18 <__sflush_r+0x6c> li	a5,29
1c002d1a <__sflush_r+0x6e> bltu	a5,a3,1c002da4 <__sflush_r+0xf8>
1c002d1e <__sflush_r+0x72> lui	a5,0x20400
1c002d22 <__sflush_r+0x76> addi	a5,a5,1
1c002d24 <__sflush_r+0x78> srl	a5,a5,a3
1c002d28 <__sflush_r+0x7c> andi	a5,a5,1
1c002d2a <__sflush_r+0x7e> beqz	a5,1c002da4 <__sflush_r+0xf8>
1c002d2c <__sflush_r+0x80> lw	a5,16(s0)
1c002d2e <__sflush_r+0x82> sw	zero,4(s0)
1c002d32 <__sflush_r+0x86> sw	a5,0(s0)
1c002d34 <__sflush_r+0x88> slli	a5,a4,0x13
1c002d38 <__sflush_r+0x8c> bgez	a5,1c002d48 <__sflush_r+0x9c>
1c002d3c <__sflush_r+0x90> li	a5,-1
1c002d3e <__sflush_r+0x92> bne	a0,a5,1c002d46 <__sflush_r+0x9a>
1c002d42 <__sflush_r+0x96> lw	a5,0(s1)
1c002d44 <__sflush_r+0x98> bnez	a5,1c002d48 <__sflush_r+0x9c>
1c002d46 <__sflush_r+0x9a> sw	a0,84(s0)
1c002d48 <__sflush_r+0x9c> lw	a1,52(s0)
1c002d4a <__sflush_r+0x9e> sw	s2,0(s1)
1c002d4e <__sflush_r+0xa2> beqz	a1,1c002cd2 <__sflush_r+0x26>
1c002d50 <__sflush_r+0xa4> addi	a5,s0,68
1c002d54 <__sflush_r+0xa8> beq	a1,a5,1c002d5e <__sflush_r+0xb2>
1c002d58 <__sflush_r+0xac> mv	a0,s1
1c002d5a <__sflush_r+0xae> jal	ra,1c0022ec <_free_r>
1c002d5e <__sflush_r+0xb2> sw	zero,52(s0)
1c002d62 <__sflush_r+0xb6> j	1c002cd2 <__sflush_r+0x26>
1c002d64 <__sflush_r+0xb8> lw	a1,32(s0)
1c002d66 <__sflush_r+0xba> li	a3,1
1c002d68 <__sflush_r+0xbc> li	a2,0
1c002d6a <__sflush_r+0xbe> mv	a0,s1
1c002d6c <__sflush_r+0xc0> jalr	a4
1c002d6e <__sflush_r+0xc2> li	a5,-1
1c002d70 <__sflush_r+0xc4> bne	a0,a5,1c002cec <__sflush_r+0x40>
1c002d74 <__sflush_r+0xc8> lw	a5,0(s1)
1c002d76 <__sflush_r+0xca> beqz	a5,1c002cec <__sflush_r+0x40>
1c002d78 <__sflush_r+0xcc> li	a4,29
1c002d7a <__sflush_r+0xce> beq	a5,a4,1c002d84 <__sflush_r+0xd8>
1c002d7e <__sflush_r+0xd2> li	a4,22
1c002d80 <__sflush_r+0xd4> bne	a5,a4,1c002d8a <__sflush_r+0xde>
1c002d84 <__sflush_r+0xd8> sw	s2,0(s1)
1c002d88 <__sflush_r+0xdc> j	1c002cd2 <__sflush_r+0x26>
1c002d8a <__sflush_r+0xde> lhu	a5,12(s0)
1c002d8e <__sflush_r+0xe2> ori	a5,a5,64
1c002d92 <__sflush_r+0xe6> sh	a5,12(s0)
1c002d96 <__sflush_r+0xea> lw	ra,28(sp)
1c002d98 <__sflush_r+0xec> lw	s0,24(sp)
1c002d9a <__sflush_r+0xee> lw	s1,20(sp)
1c002d9c <__sflush_r+0xf0> lw	s2,16(sp)
1c002d9e <__sflush_r+0xf2> lw	s3,12(sp)
1c002da0 <__sflush_r+0xf4> addi	sp,sp,32
1c002da2 <__sflush_r+0xf6> ret
1c002da4 <__sflush_r+0xf8> ori	a4,a4,64
1c002da8 <__sflush_r+0xfc> sh	a4,12(s0)
1c002dac <__sflush_r+0x100> j	1c002d96 <__sflush_r+0xea>
1c002dae <__sflush_r+0x102> lw	s3,16(a1)
1c002db2 <__sflush_r+0x106> beqz	s3,1c002cd2 <__sflush_r+0x26>
1c002db6 <__sflush_r+0x10a> lw	s2,0(a1)
1c002dba <__sflush_r+0x10e> andi	a5,a5,3
1c002dbc <__sflush_r+0x110> sw	s3,0(a1)
1c002dc0 <__sflush_r+0x114> sub	s2,s2,s3
1c002dc4 <__sflush_r+0x118> li	a4,0
1c002dc6 <__sflush_r+0x11a> bnez	a5,1c002dca <__sflush_r+0x11e>
1c002dc8 <__sflush_r+0x11c> lw	a4,20(a1)
1c002dca <__sflush_r+0x11e> sw	a4,8(s0)
1c002dcc <__sflush_r+0x120> blez	s2,1c002cd2 <__sflush_r+0x26>
1c002dd0 <__sflush_r+0x124> lw	a5,40(s0)
1c002dd2 <__sflush_r+0x126> lw	a1,32(s0)
1c002dd4 <__sflush_r+0x128> mv	a3,s2
1c002dd6 <__sflush_r+0x12a> mv	a2,s3
1c002dd8 <__sflush_r+0x12c> mv	a0,s1
1c002dda <__sflush_r+0x12e> jalr	a5
1c002ddc <__sflush_r+0x130> bgtz	a0,1c002df0 <__sflush_r+0x144>
1c002de0 <__sflush_r+0x134> lhu	a5,12(s0)
1c002de4 <__sflush_r+0x138> li	a0,-1
1c002de6 <__sflush_r+0x13a> ori	a5,a5,64
1c002dea <__sflush_r+0x13e> sh	a5,12(s0)
1c002dee <__sflush_r+0x142> j	1c002d96 <__sflush_r+0xea>
1c002df0 <__sflush_r+0x144> add	s3,s3,a0
1c002df2 <__sflush_r+0x146> sub	s2,s2,a0
1c002df6 <__sflush_r+0x14a> j	1c002dcc <__sflush_r+0x120>
_fflush_r():
1c002df8 <_fflush_r> lw	a5,16(a1)
1c002dfa <_fflush_r+0x2> beqz	a5,1c002e58 <_fflush_r+0x60>
1c002dfc <_fflush_r+0x4> addi	sp,sp,-32
1c002dfe <_fflush_r+0x6> sw	s0,24(sp)
1c002e00 <_fflush_r+0x8> sw	ra,28(sp)
1c002e02 <_fflush_r+0xa> mv	s0,a0
1c002e04 <_fflush_r+0xc> beqz	a0,1c002e10 <_fflush_r+0x18>
1c002e06 <_fflush_r+0xe> lw	a5,24(a0)
1c002e08 <_fflush_r+0x10> bnez	a5,1c002e10 <_fflush_r+0x18>
1c002e0a <_fflush_r+0x12> sw	a1,12(sp)
1c002e0c <_fflush_r+0x14> jal	1c002f18 <__sinit>
1c002e0e <_fflush_r+0x16> lw	a1,12(sp)
1c002e10 <_fflush_r+0x18> lui	a5,0x1c008
1c002e14 <_fflush_r+0x1c> addi	a5,a5,1168 # 1c008490 <__sf_fake_stdin>
1c002e18 <_fflush_r+0x20> bne	a1,a5,1c002e2e <_fflush_r+0x36>
1c002e1c <_fflush_r+0x24> lw	a1,4(s0)
1c002e1e <_fflush_r+0x26> lh	a5,12(a1)
1c002e22 <_fflush_r+0x2a> beqz	a5,1c002e4e <_fflush_r+0x56>
1c002e24 <_fflush_r+0x2c> mv	a0,s0
1c002e26 <_fflush_r+0x2e> lw	s0,24(sp)
1c002e28 <_fflush_r+0x30> lw	ra,28(sp)
1c002e2a <_fflush_r+0x32> addi	sp,sp,32
1c002e2c <_fflush_r+0x34> j	1c002cac <__sflush_r>
1c002e2e <_fflush_r+0x36> lui	a5,0x1c008
1c002e32 <_fflush_r+0x3a> addi	a5,a5,1200 # 1c0084b0 <__sf_fake_stdout>
1c002e36 <_fflush_r+0x3e> bne	a1,a5,1c002e3e <_fflush_r+0x46>
1c002e3a <_fflush_r+0x42> lw	a1,8(s0)
1c002e3c <_fflush_r+0x44> j	1c002e1e <_fflush_r+0x26>
1c002e3e <_fflush_r+0x46> lui	a5,0x1c008
1c002e42 <_fflush_r+0x4a> addi	a5,a5,1136 # 1c008470 <__sf_fake_stderr>
1c002e46 <_fflush_r+0x4e> bne	a1,a5,1c002e1e <_fflush_r+0x26>
1c002e4a <_fflush_r+0x52> lw	a1,12(s0)
1c002e4c <_fflush_r+0x54> j	1c002e1e <_fflush_r+0x26>
1c002e4e <_fflush_r+0x56> lw	ra,28(sp)
1c002e50 <_fflush_r+0x58> lw	s0,24(sp)
1c002e52 <_fflush_r+0x5a> li	a0,0
1c002e54 <_fflush_r+0x5c> addi	sp,sp,32
1c002e56 <_fflush_r+0x5e> ret
1c002e58 <_fflush_r+0x60> li	a0,0
1c002e5a <_fflush_r+0x62> ret
std():
1c002e5c <std> addi	sp,sp,-16
1c002e5e <std+0x2> sw	s0,8(sp)
1c002e60 <std+0x4> sw	ra,12(sp)
1c002e62 <std+0x6> mv	s0,a0
1c002e64 <std+0x8> sh	a1,12(a0)
1c002e68 <std+0xc> sh	a2,14(a0)
1c002e6c <std+0x10> sw	zero,0(a0)
1c002e70 <std+0x14> sw	zero,4(a0)
1c002e74 <std+0x18> sw	zero,8(a0)
1c002e78 <std+0x1c> sw	zero,100(a0)
1c002e7c <std+0x20> sw	zero,16(a0)
1c002e80 <std+0x24> sw	zero,20(a0)
1c002e84 <std+0x28> sw	zero,24(a0)
1c002e88 <std+0x2c> li	a2,8
1c002e8a <std+0x2e> li	a1,0
1c002e8c <std+0x30> addi	a0,a0,92
1c002e90 <std+0x34> jal	ra,1c000f7c <memset>
1c002e94 <std+0x38> lui	a5,0x1c003
1c002e98 <std+0x3c> addi	a5,a5,1308 # 1c00351c <__sread>
1c002e9c <std+0x40> sw	a5,36(s0)
1c002e9e <std+0x42> lui	a5,0x1c003
1c002ea2 <std+0x46> addi	a5,a5,1356 # 1c00354c <__swrite>
1c002ea6 <std+0x4a> sw	a5,40(s0)
1c002ea8 <std+0x4c> lui	a5,0x1c003
1c002eac <std+0x50> addi	a5,a5,1434 # 1c00359a <__sseek>
1c002eb0 <std+0x54> sw	a5,44(s0)
1c002eb2 <std+0x56> lui	a5,0x1c003
1c002eb6 <std+0x5a> addi	a5,a5,1488 # 1c0035d0 <__sclose>
1c002eba <std+0x5e> lw	ra,12(sp)
1c002ebc <std+0x60> sw	s0,32(s0)
1c002ebe <std+0x62> sw	a5,48(s0)
1c002ec0 <std+0x64> lw	s0,8(sp)
1c002ec2 <std+0x66> addi	sp,sp,16
1c002ec4 <std+0x68> ret
_cleanup_r():
1c002ec6 <_cleanup_r> lui	a1,0x1c003
1c002eca <_cleanup_r+0x4> addi	a1,a1,-520 # 1c002df8 <_fflush_r>
1c002ece <_cleanup_r+0x8> j	1c003020 <_fwalk_reent>
__sfmoreglue():
1c002ed0 <__sfmoreglue> addi	sp,sp,-16
1c002ed2 <__sfmoreglue+0x2> sw	s1,4(sp)
1c002ed4 <__sfmoreglue+0x4> li	a2,104
1c002ed8 <__sfmoreglue+0x8> addi	s1,a1,-1
1c002edc <__sfmoreglue+0xc> mul	s1,s1,a2
1c002ee0 <__sfmoreglue+0x10> sw	s2,0(sp)
1c002ee2 <__sfmoreglue+0x12> mv	s2,a1
1c002ee4 <__sfmoreglue+0x14> sw	s0,8(sp)
1c002ee6 <__sfmoreglue+0x16> sw	ra,12(sp)
1c002ee8 <__sfmoreglue+0x18> addi	a1,s1,116
1c002eec <__sfmoreglue+0x1c> jal	ra,1c002398 <_malloc_r>
1c002ef0 <__sfmoreglue+0x20> mv	s0,a0
1c002ef2 <__sfmoreglue+0x22> beqz	a0,1c002f0a <__sfmoreglue+0x3a>
1c002ef4 <__sfmoreglue+0x24> sw	zero,0(a0)
1c002ef8 <__sfmoreglue+0x28> sw	s2,4(a0)
1c002efc <__sfmoreglue+0x2c> addi	a0,a0,12
1c002efe <__sfmoreglue+0x2e> sw	a0,8(s0)
1c002f00 <__sfmoreglue+0x30> addi	a2,s1,104
1c002f04 <__sfmoreglue+0x34> li	a1,0
1c002f06 <__sfmoreglue+0x36> jal	ra,1c000f7c <memset>
1c002f0a <__sfmoreglue+0x3a> lw	ra,12(sp)
1c002f0c <__sfmoreglue+0x3c> mv	a0,s0
1c002f0e <__sfmoreglue+0x3e> lw	s0,8(sp)
1c002f10 <__sfmoreglue+0x40> lw	s1,4(sp)
1c002f12 <__sfmoreglue+0x42> lw	s2,0(sp)
1c002f14 <__sfmoreglue+0x44> addi	sp,sp,16
1c002f16 <__sfmoreglue+0x46> ret
__sinit():
1c002f18 <__sinit> lw	a5,24(a0)
1c002f1a <__sinit+0x2> bnez	a5,1c002f80 <__sinit+0x68>
1c002f1c <__sinit+0x4> addi	sp,sp,-16
1c002f1e <__sinit+0x6> lui	a5,0x1c003
1c002f22 <__sinit+0xa> sw	s0,8(sp)
1c002f24 <__sinit+0xc> sw	ra,12(sp)
1c002f26 <__sinit+0xe> addi	a5,a5,-314 # 1c002ec6 <_cleanup_r>
1c002f2a <__sinit+0x12> sw	a5,40(a0)
1c002f2c <__sinit+0x14> lui	a5,0x1c008
1c002f30 <__sinit+0x18> lw	a5,1468(a5) # 1c0085bc <_global_impure_ptr>
1c002f34 <__sinit+0x1c> sw	zero,72(a0)
1c002f38 <__sinit+0x20> sw	zero,76(a0)
1c002f3c <__sinit+0x24> sw	zero,80(a0)
1c002f40 <__sinit+0x28> mv	s0,a0
1c002f42 <__sinit+0x2a> bne	a0,a5,1c002f4a <__sinit+0x32>
1c002f46 <__sinit+0x2e> li	a5,1
1c002f48 <__sinit+0x30> sw	a5,24(a0)
1c002f4a <__sinit+0x32> mv	a0,s0
1c002f4c <__sinit+0x34> jal	1c002f82 <__sfp>
1c002f4e <__sinit+0x36> sw	a0,4(s0)
1c002f50 <__sinit+0x38> mv	a0,s0
1c002f52 <__sinit+0x3a> jal	1c002f82 <__sfp>
1c002f54 <__sinit+0x3c> sw	a0,8(s0)
1c002f56 <__sinit+0x3e> mv	a0,s0
1c002f58 <__sinit+0x40> jal	1c002f82 <__sfp>
1c002f5a <__sinit+0x42> sw	a0,12(s0)
1c002f5c <__sinit+0x44> lw	a0,4(s0)
1c002f5e <__sinit+0x46> li	a2,0
1c002f60 <__sinit+0x48> li	a1,4
1c002f62 <__sinit+0x4a> jal	1c002e5c <std>
1c002f64 <__sinit+0x4c> lw	a0,8(s0)
1c002f66 <__sinit+0x4e> li	a2,1
1c002f68 <__sinit+0x50> li	a1,9
1c002f6a <__sinit+0x52> jal	1c002e5c <std>
1c002f6c <__sinit+0x54> lw	a0,12(s0)
1c002f6e <__sinit+0x56> li	a2,2
1c002f70 <__sinit+0x58> li	a1,18
1c002f72 <__sinit+0x5a> jal	1c002e5c <std>
1c002f74 <__sinit+0x5c> li	a5,1
1c002f76 <__sinit+0x5e> lw	ra,12(sp)
1c002f78 <__sinit+0x60> sw	a5,24(s0)
1c002f7a <__sinit+0x62> lw	s0,8(sp)
1c002f7c <__sinit+0x64> addi	sp,sp,16
1c002f7e <__sinit+0x66> ret
1c002f80 <__sinit+0x68> ret
__sfp():
1c002f82 <__sfp> addi	sp,sp,-16
1c002f84 <__sfp+0x2> lui	a5,0x1c008
1c002f88 <__sfp+0x6> sw	s1,4(sp)
1c002f8a <__sfp+0x8> lw	s1,1468(a5) # 1c0085bc <_global_impure_ptr>
1c002f8e <__sfp+0xc> sw	s2,0(sp)
1c002f90 <__sfp+0xe> sw	ra,12(sp)
1c002f92 <__sfp+0x10> lw	a5,24(s1)
1c002f94 <__sfp+0x12> sw	s0,8(sp)
1c002f96 <__sfp+0x14> mv	s2,a0
1c002f98 <__sfp+0x16> bnez	a5,1c002f9e <__sfp+0x1c>
1c002f9a <__sfp+0x18> mv	a0,s1
1c002f9c <__sfp+0x1a> jal	1c002f18 <__sinit>
1c002f9e <__sfp+0x1c> addi	s1,s1,72
1c002fa2 <__sfp+0x20> lw	s0,8(s1)
1c002fa4 <__sfp+0x22> lw	a5,4(s1)
1c002fa6 <__sfp+0x24> addi	a5,a5,-1
1c002fa8 <__sfp+0x26> bgez	a5,1c002fb4 <__sfp+0x32>
1c002fac <__sfp+0x2a> lw	a5,0(s1)
1c002fae <__sfp+0x2c> beqz	a5,1c00300c <__sfp+0x8a>
1c002fb0 <__sfp+0x2e> lw	s1,0(s1)
1c002fb2 <__sfp+0x30> j	1c002fa2 <__sfp+0x20>
1c002fb4 <__sfp+0x32> lh	a4,12(s0)
1c002fb8 <__sfp+0x36> bnez	a4,1c003006 <__sfp+0x84>
1c002fba <__sfp+0x38> lui	a5,0xffff0
1c002fbc <__sfp+0x3a> addi	a5,a5,1
1c002fbe <__sfp+0x3c> sw	zero,100(s0)
1c002fc2 <__sfp+0x40> sw	zero,0(s0)
1c002fc6 <__sfp+0x44> sw	zero,4(s0)
1c002fca <__sfp+0x48> sw	zero,8(s0)
1c002fce <__sfp+0x4c> sw	a5,12(s0)
1c002fd0 <__sfp+0x4e> sw	zero,16(s0)
1c002fd4 <__sfp+0x52> sw	zero,20(s0)
1c002fd8 <__sfp+0x56> sw	zero,24(s0)
1c002fdc <__sfp+0x5a> li	a2,8
1c002fde <__sfp+0x5c> li	a1,0
1c002fe0 <__sfp+0x5e> addi	a0,s0,92
1c002fe4 <__sfp+0x62> jal	ra,1c000f7c <memset>
1c002fe8 <__sfp+0x66> sw	zero,52(s0)
1c002fec <__sfp+0x6a> sw	zero,56(s0)
1c002ff0 <__sfp+0x6e> sw	zero,72(s0)
1c002ff4 <__sfp+0x72> sw	zero,76(s0)
1c002ff8 <__sfp+0x76> lw	ra,12(sp)
1c002ffa <__sfp+0x78> mv	a0,s0
1c002ffc <__sfp+0x7a> lw	s0,8(sp)
1c002ffe <__sfp+0x7c> lw	s1,4(sp)
1c003000 <__sfp+0x7e> lw	s2,0(sp)
1c003002 <__sfp+0x80> addi	sp,sp,16
1c003004 <__sfp+0x82> ret
1c003006 <__sfp+0x84> addi	s0,s0,104
1c00300a <__sfp+0x88> j	1c002fa6 <__sfp+0x24>
1c00300c <__sfp+0x8a> li	a1,4
1c00300e <__sfp+0x8c> mv	a0,s2
1c003010 <__sfp+0x8e> jal	1c002ed0 <__sfmoreglue>
1c003012 <__sfp+0x90> sw	a0,0(s1)
1c003014 <__sfp+0x92> mv	s0,a0
1c003016 <__sfp+0x94> bnez	a0,1c002fb0 <__sfp+0x2e>
1c003018 <__sfp+0x96> li	a5,12
1c00301a <__sfp+0x98> sw	a5,0(s2)
1c00301e <__sfp+0x9c> j	1c002ff8 <__sfp+0x76>
_fwalk_reent():
1c003020 <_fwalk_reent> addi	sp,sp,-48
1c003022 <_fwalk_reent+0x2> sw	s0,40(sp)
1c003024 <_fwalk_reent+0x4> sw	s2,32(sp)
1c003026 <_fwalk_reent+0x6> sw	s3,28(sp)
1c003028 <_fwalk_reent+0x8> sw	s4,24(sp)
1c00302a <_fwalk_reent+0xa> sw	s6,16(sp)
1c00302c <_fwalk_reent+0xc> sw	s7,12(sp)
1c00302e <_fwalk_reent+0xe> sw	ra,44(sp)
1c003030 <_fwalk_reent+0x10> sw	s1,36(sp)
1c003032 <_fwalk_reent+0x12> sw	s5,20(sp)
1c003034 <_fwalk_reent+0x14> mv	s2,a0
1c003036 <_fwalk_reent+0x16> mv	s4,a1
1c003038 <_fwalk_reent+0x18> addi	s0,a0,72
1c00303c <_fwalk_reent+0x1c> li	s3,0
1c00303e <_fwalk_reent+0x1e> li	s6,1
1c003040 <_fwalk_reent+0x20> li	s7,-1
1c003042 <_fwalk_reent+0x22> lw	s1,8(s0)
1c003044 <_fwalk_reent+0x24> lw	s5,4(s0)
1c003048 <_fwalk_reent+0x28> addi	s5,s5,-1
1c00304a <_fwalk_reent+0x2a> bgez	s5,1c00306a <_fwalk_reent+0x4a>
1c00304e <_fwalk_reent+0x2e> lw	s0,0(s0)
1c003050 <_fwalk_reent+0x30> bnez	s0,1c003042 <_fwalk_reent+0x22>
1c003052 <_fwalk_reent+0x32> lw	ra,44(sp)
1c003054 <_fwalk_reent+0x34> lw	s0,40(sp)
1c003056 <_fwalk_reent+0x36> lw	s1,36(sp)
1c003058 <_fwalk_reent+0x38> lw	s2,32(sp)
1c00305a <_fwalk_reent+0x3a> lw	s4,24(sp)
1c00305c <_fwalk_reent+0x3c> lw	s5,20(sp)
1c00305e <_fwalk_reent+0x3e> lw	s6,16(sp)
1c003060 <_fwalk_reent+0x40> lw	s7,12(sp)
1c003062 <_fwalk_reent+0x42> mv	a0,s3
1c003064 <_fwalk_reent+0x44> lw	s3,28(sp)
1c003066 <_fwalk_reent+0x46> addi	sp,sp,48
1c003068 <_fwalk_reent+0x48> ret
1c00306a <_fwalk_reent+0x4a> lhu	a5,12(s1)
1c00306e <_fwalk_reent+0x4e> bgeu	s6,a5,1c003084 <_fwalk_reent+0x64>
1c003072 <_fwalk_reent+0x52> lh	a5,14(s1)
1c003076 <_fwalk_reent+0x56> beq	a5,s7,1c003084 <_fwalk_reent+0x64>
1c00307a <_fwalk_reent+0x5a> mv	a1,s1
1c00307c <_fwalk_reent+0x5c> mv	a0,s2
1c00307e <_fwalk_reent+0x5e> jalr	s4
1c003080 <_fwalk_reent+0x60> or	s3,s3,a0
1c003084 <_fwalk_reent+0x64> addi	s1,s1,104
1c003088 <_fwalk_reent+0x68> j	1c003048 <_fwalk_reent+0x28>
__swhatbuf_r():
1c00308a <__swhatbuf_r> addi	sp,sp,-112
1c00308c <__swhatbuf_r+0x2> sw	s2,96(sp)
1c00308e <__swhatbuf_r+0x4> mv	s2,a1
1c003090 <__swhatbuf_r+0x6> lh	a1,14(a1)
1c003094 <__swhatbuf_r+0xa> sw	s0,104(sp)
1c003096 <__swhatbuf_r+0xc> sw	s1,100(sp)
1c003098 <__swhatbuf_r+0xe> sw	ra,108(sp)
1c00309a <__swhatbuf_r+0x10> mv	s0,a2
1c00309c <__swhatbuf_r+0x12> mv	s1,a3
1c00309e <__swhatbuf_r+0x14> bgez	a1,1c0030b6 <__swhatbuf_r+0x2c>
1c0030a2 <__swhatbuf_r+0x18> lhu	a5,12(s2)
1c0030a6 <__swhatbuf_r+0x1c> sw	zero,0(s1)
1c0030aa <__swhatbuf_r+0x20> andi	a5,a5,128
1c0030ae <__swhatbuf_r+0x24> bnez	a5,1c0030d2 <__swhatbuf_r+0x48>
1c0030b0 <__swhatbuf_r+0x26> li	a5,1024
1c0030b4 <__swhatbuf_r+0x2a> j	1c0030d6 <__swhatbuf_r+0x4c>
1c0030b6 <__swhatbuf_r+0x2c> addi	a2,sp,8
1c0030b8 <__swhatbuf_r+0x2e> jal	ra,1c003632 <_fstat_r>
1c0030bc <__swhatbuf_r+0x32> bltz	a0,1c0030a2 <__swhatbuf_r+0x18>
1c0030c0 <__swhatbuf_r+0x36> lw	a4,12(sp)
1c0030c2 <__swhatbuf_r+0x38> lui	a5,0xf
1c0030c4 <__swhatbuf_r+0x3a> and	a5,a5,a4
1c0030c6 <__swhatbuf_r+0x3c> lui	a4,0xffffe
1c0030c8 <__swhatbuf_r+0x3e> add	a5,a5,a4
1c0030ca <__swhatbuf_r+0x40> seqz	a5,a5
1c0030ce <__swhatbuf_r+0x44> sw	a5,0(s1)
1c0030d0 <__swhatbuf_r+0x46> j	1c0030b0 <__swhatbuf_r+0x26>
1c0030d2 <__swhatbuf_r+0x48> li	a5,64
1c0030d6 <__swhatbuf_r+0x4c> lw	ra,108(sp)
1c0030d8 <__swhatbuf_r+0x4e> sw	a5,0(s0)
1c0030da <__swhatbuf_r+0x50> lw	s0,104(sp)
1c0030dc <__swhatbuf_r+0x52> lw	s1,100(sp)
1c0030de <__swhatbuf_r+0x54> lw	s2,96(sp)
1c0030e0 <__swhatbuf_r+0x56> li	a0,0
1c0030e2 <__swhatbuf_r+0x58> addi	sp,sp,112
1c0030e4 <__swhatbuf_r+0x5a> ret
__smakebuf_r():
1c0030e6 <__smakebuf_r> lhu	a5,12(a1)
1c0030ea <__smakebuf_r+0x4> addi	sp,sp,-32
1c0030ec <__smakebuf_r+0x6> sw	s0,24(sp)
1c0030ee <__smakebuf_r+0x8> sw	ra,28(sp)
1c0030f0 <__smakebuf_r+0xa> sw	s1,20(sp)
1c0030f2 <__smakebuf_r+0xc> sw	s2,16(sp)
1c0030f4 <__smakebuf_r+0xe> andi	a5,a5,2
1c0030f6 <__smakebuf_r+0x10> mv	s0,a1
1c0030f8 <__smakebuf_r+0x12> beqz	a5,1c003112 <__smakebuf_r+0x2c>
1c0030fa <__smakebuf_r+0x14> addi	a5,s0,71
1c0030fe <__smakebuf_r+0x18> sw	a5,0(s0)
1c003100 <__smakebuf_r+0x1a> sw	a5,16(s0)
1c003102 <__smakebuf_r+0x1c> li	a5,1
1c003104 <__smakebuf_r+0x1e> sw	a5,20(s0)
1c003106 <__smakebuf_r+0x20> lw	ra,28(sp)
1c003108 <__smakebuf_r+0x22> lw	s0,24(sp)
1c00310a <__smakebuf_r+0x24> lw	s1,20(sp)
1c00310c <__smakebuf_r+0x26> lw	s2,16(sp)
1c00310e <__smakebuf_r+0x28> addi	sp,sp,32
1c003110 <__smakebuf_r+0x2a> ret
1c003112 <__smakebuf_r+0x2c> addi	a3,sp,12
1c003114 <__smakebuf_r+0x2e> addi	a2,sp,8
1c003116 <__smakebuf_r+0x30> mv	s2,a0
1c003118 <__smakebuf_r+0x32> jal	1c00308a <__swhatbuf_r>
1c00311a <__smakebuf_r+0x34> lw	a1,8(sp)
1c00311c <__smakebuf_r+0x36> mv	s1,a0
1c00311e <__smakebuf_r+0x38> mv	a0,s2
1c003120 <__smakebuf_r+0x3a> jal	ra,1c002398 <_malloc_r>
1c003124 <__smakebuf_r+0x3e> bnez	a0,1c00313c <__smakebuf_r+0x56>
1c003126 <__smakebuf_r+0x40> lh	a5,12(s0)
1c00312a <__smakebuf_r+0x44> andi	a4,a5,512
1c00312e <__smakebuf_r+0x48> bnez	a4,1c003106 <__smakebuf_r+0x20>
1c003130 <__smakebuf_r+0x4a> andi	a5,a5,-4
1c003132 <__smakebuf_r+0x4c> ori	a5,a5,2
1c003136 <__smakebuf_r+0x50> sh	a5,12(s0)
1c00313a <__smakebuf_r+0x54> j	1c0030fa <__smakebuf_r+0x14>
1c00313c <__smakebuf_r+0x56> lui	a5,0x1c003
1c003140 <__smakebuf_r+0x5a> addi	a5,a5,-314 # 1c002ec6 <_cleanup_r>
1c003144 <__smakebuf_r+0x5e> sw	a5,40(s2)
1c003148 <__smakebuf_r+0x62> lhu	a5,12(s0)
1c00314c <__smakebuf_r+0x66> sw	a0,0(s0)
1c00314e <__smakebuf_r+0x68> sw	a0,16(s0)
1c003150 <__smakebuf_r+0x6a> ori	a5,a5,128
1c003154 <__smakebuf_r+0x6e> sh	a5,12(s0)
1c003158 <__smakebuf_r+0x72> lw	a5,8(sp)
1c00315a <__smakebuf_r+0x74> sw	a5,20(s0)
1c00315c <__smakebuf_r+0x76> lw	a5,12(sp)
1c00315e <__smakebuf_r+0x78> beqz	a5,1c00317a <__smakebuf_r+0x94>
1c003160 <__smakebuf_r+0x7a> lh	a1,14(s0)
1c003164 <__smakebuf_r+0x7e> mv	a0,s2
1c003166 <__smakebuf_r+0x80> jal	ra,1c003660 <_isatty_r>
1c00316a <__smakebuf_r+0x84> beqz	a0,1c00317a <__smakebuf_r+0x94>
1c00316c <__smakebuf_r+0x86> lhu	a5,12(s0)
1c003170 <__smakebuf_r+0x8a> andi	a5,a5,-4
1c003172 <__smakebuf_r+0x8c> ori	a5,a5,1
1c003176 <__smakebuf_r+0x90> sh	a5,12(s0)
1c00317a <__smakebuf_r+0x94> lhu	a0,12(s0)
1c00317e <__smakebuf_r+0x98> or	s1,s1,a0
1c003180 <__smakebuf_r+0x9a> sh	s1,12(s0)
1c003184 <__smakebuf_r+0x9e> j	1c003106 <__smakebuf_r+0x20>
memchr():
1c003186 <memchr> andi	a1,a1,255
1c00318a <memchr+0x4> add	a2,a2,a0
1c00318c <memchr+0x6> bne	a0,a2,1c003194 <memchr+0xe>
1c003190 <memchr+0xa> li	a0,0
1c003192 <memchr+0xc> ret
1c003194 <memchr+0xe> lbu	a5,0(a0)
1c003198 <memchr+0x12> beq	a5,a1,1c003192 <memchr+0xc>
1c00319c <memchr+0x16> addi	a0,a0,1
1c00319e <memchr+0x18> j	1c00318c <memchr+0x6>
_printf_common():
1c0031a0 <_printf_common> addi	sp,sp,-48
1c0031a2 <_printf_common+0x2> sw	s4,24(sp)
1c0031a4 <_printf_common+0x4> lw	a5,16(a1)
1c0031a6 <_printf_common+0x6> mv	s4,a4
1c0031a8 <_printf_common+0x8> lw	a4,8(a1)
1c0031aa <_printf_common+0xa> sw	s0,40(sp)
1c0031ac <_printf_common+0xc> sw	s1,36(sp)
1c0031ae <_printf_common+0xe> sw	s3,28(sp)
1c0031b0 <_printf_common+0x10> sw	s5,20(sp)
1c0031b2 <_printf_common+0x12> sw	ra,44(sp)
1c0031b4 <_printf_common+0x14> sw	s2,32(sp)
1c0031b6 <_printf_common+0x16> sw	s6,16(sp)
1c0031b8 <_printf_common+0x18> sw	s7,12(sp)
1c0031ba <_printf_common+0x1a> mv	s3,a0
1c0031bc <_printf_common+0x1c> mv	s0,a1
1c0031be <_printf_common+0x1e> mv	s1,a2
1c0031c0 <_printf_common+0x20> mv	s5,a3
1c0031c2 <_printf_common+0x22> bge	a5,a4,1c0031c8 <_printf_common+0x28>
1c0031c6 <_printf_common+0x26> mv	a5,a4
1c0031c8 <_printf_common+0x28> sw	a5,0(s1)
1c0031ca <_printf_common+0x2a> lbu	a4,67(s0)
1c0031ce <_printf_common+0x2e> beqz	a4,1c0031d4 <_printf_common+0x34>
1c0031d0 <_printf_common+0x30> addi	a5,a5,1
1c0031d2 <_printf_common+0x32> sw	a5,0(s1)
1c0031d4 <_printf_common+0x34> lw	a5,0(s0)
1c0031d6 <_printf_common+0x36> andi	a5,a5,32
1c0031da <_printf_common+0x3a> beqz	a5,1c0031e2 <_printf_common+0x42>
1c0031dc <_printf_common+0x3c> lw	a5,0(s1)
1c0031de <_printf_common+0x3e> addi	a5,a5,2
1c0031e0 <_printf_common+0x40> sw	a5,0(s1)
1c0031e2 <_printf_common+0x42> lw	s2,0(s0)
1c0031e6 <_printf_common+0x46> andi	s2,s2,6
1c0031ea <_printf_common+0x4a> bnez	s2,1c0031fe <_printf_common+0x5e>
1c0031ee <_printf_common+0x4e> addi	s6,s0,25
1c0031f2 <_printf_common+0x52> li	s7,-1
1c0031f4 <_printf_common+0x54> lw	a5,12(s0)
1c0031f6 <_printf_common+0x56> lw	a4,0(s1)
1c0031f8 <_printf_common+0x58> sub	a5,a5,a4
1c0031fa <_printf_common+0x5a> blt	s2,a5,1c003252 <_printf_common+0xb2>
1c0031fe <_printf_common+0x5e> lbu	a5,67(s0)
1c003202 <_printf_common+0x62> snez	a3,a5
1c003206 <_printf_common+0x66> lw	a5,0(s0)
1c003208 <_printf_common+0x68> andi	a5,a5,32
1c00320c <_printf_common+0x6c> bnez	a5,1c00327c <_printf_common+0xdc>
1c00320e <_printf_common+0x6e> addi	a2,s0,67
1c003212 <_printf_common+0x72> mv	a1,s5
1c003214 <_printf_common+0x74> mv	a0,s3
1c003216 <_printf_common+0x76> jalr	s4
1c003218 <_printf_common+0x78> li	a5,-1
1c00321a <_printf_common+0x7a> beq	a0,a5,1c003260 <_printf_common+0xc0>
1c00321e <_printf_common+0x7e> lw	a5,0(s0)
1c003220 <_printf_common+0x80> li	a2,4
1c003222 <_printf_common+0x82> lw	a4,0(s1)
1c003224 <_printf_common+0x84> andi	a5,a5,6
1c003226 <_printf_common+0x86> lw	a3,12(s0)
1c003228 <_printf_common+0x88> li	s1,0
1c00322a <_printf_common+0x8a> bne	a5,a2,1c003238 <_printf_common+0x98>
1c00322e <_printf_common+0x8e> sub	s1,a3,a4
1c003232 <_printf_common+0x92> bgez	s1,1c003238 <_printf_common+0x98>
1c003236 <_printf_common+0x96> li	s1,0
1c003238 <_printf_common+0x98> lw	a5,8(s0)
1c00323a <_printf_common+0x9a> lw	a4,16(s0)
1c00323c <_printf_common+0x9c> bge	a4,a5,1c003244 <_printf_common+0xa4>
1c003240 <_printf_common+0xa0> sub	a5,a5,a4
1c003242 <_printf_common+0xa2> add	s1,s1,a5
1c003244 <_printf_common+0xa4> li	s2,0
1c003246 <_printf_common+0xa6> addi	s0,s0,26
1c003248 <_printf_common+0xa8> li	s6,-1
1c00324a <_printf_common+0xaa> bne	s1,s2,1c00329a <_printf_common+0xfa>
1c00324e <_printf_common+0xae> li	a0,0
1c003250 <_printf_common+0xb0> j	1c003262 <_printf_common+0xc2>
1c003252 <_printf_common+0xb2> li	a3,1
1c003254 <_printf_common+0xb4> mv	a2,s6
1c003256 <_printf_common+0xb6> mv	a1,s5
1c003258 <_printf_common+0xb8> mv	a0,s3
1c00325a <_printf_common+0xba> jalr	s4
1c00325c <_printf_common+0xbc> bne	a0,s7,1c003278 <_printf_common+0xd8>
1c003260 <_printf_common+0xc0> li	a0,-1
1c003262 <_printf_common+0xc2> lw	ra,44(sp)
1c003264 <_printf_common+0xc4> lw	s0,40(sp)
1c003266 <_printf_common+0xc6> lw	s1,36(sp)
1c003268 <_printf_common+0xc8> lw	s2,32(sp)
1c00326a <_printf_common+0xca> lw	s3,28(sp)
1c00326c <_printf_common+0xcc> lw	s4,24(sp)
1c00326e <_printf_common+0xce> lw	s5,20(sp)
1c003270 <_printf_common+0xd0> lw	s6,16(sp)
1c003272 <_printf_common+0xd2> lw	s7,12(sp)
1c003274 <_printf_common+0xd4> addi	sp,sp,48
1c003276 <_printf_common+0xd6> ret
1c003278 <_printf_common+0xd8> addi	s2,s2,1
1c00327a <_printf_common+0xda> j	1c0031f4 <_printf_common+0x54>
1c00327c <_printf_common+0xdc> add	a4,s0,a3
1c003280 <_printf_common+0xe0> li	a2,48
1c003284 <_printf_common+0xe4> sb	a2,67(a4) # ffffe043 <__heap_l2_shared_start+0xe3fee023>
1c003288 <_printf_common+0xe8> lbu	a4,69(s0)
1c00328c <_printf_common+0xec> addi	a5,a3,1
1c003290 <_printf_common+0xf0> add	a5,a5,s0
1c003292 <_printf_common+0xf2> addi	a3,a3,2
1c003294 <_printf_common+0xf4> sb	a4,67(a5)
1c003298 <_printf_common+0xf8> j	1c00320e <_printf_common+0x6e>
1c00329a <_printf_common+0xfa> li	a3,1
1c00329c <_printf_common+0xfc> mv	a2,s0
1c00329e <_printf_common+0xfe> mv	a1,s5
1c0032a0 <_printf_common+0x100> mv	a0,s3
1c0032a2 <_printf_common+0x102> jalr	s4
1c0032a4 <_printf_common+0x104> beq	a0,s6,1c003260 <_printf_common+0xc0>
1c0032a8 <_printf_common+0x108> addi	s2,s2,1
1c0032aa <_printf_common+0x10a> j	1c00324a <_printf_common+0xaa>
_printf_i():
1c0032ac <_printf_i> addi	sp,sp,-48
1c0032ae <_printf_i+0x2> sw	s0,40(sp)
1c0032b0 <_printf_i+0x4> sw	s1,36(sp)
1c0032b2 <_printf_i+0x6> sw	s2,32(sp)
1c0032b4 <_printf_i+0x8> sw	s3,28(sp)
1c0032b6 <_printf_i+0xa> sw	ra,44(sp)
1c0032b8 <_printf_i+0xc> sw	s4,24(sp)
1c0032ba <_printf_i+0xe> sw	s5,20(sp)
1c0032bc <_printf_i+0x10> sw	s6,16(sp)
1c0032be <_printf_i+0x12> lbu	a6,24(a1)
1c0032c2 <_printf_i+0x16> li	a5,120
1c0032c6 <_printf_i+0x1a> mv	s1,a0
1c0032c8 <_printf_i+0x1c> mv	s0,a1
1c0032ca <_printf_i+0x1e> mv	s2,a2
1c0032cc <_printf_i+0x20> mv	s3,a3
1c0032ce <_printf_i+0x22> bltu	a5,a6,1c0032ea <_printf_i+0x3e>
1c0032d2 <_printf_i+0x26> li	a5,98
1c0032d6 <_printf_i+0x2a> addi	a3,a1,67
1c0032da <_printf_i+0x2e> bltu	a5,a6,1c0032f4 <_printf_i+0x48>
1c0032de <_printf_i+0x32> beqz	a6,1c0034a6 <_printf_i+0x1fa>
1c0032e2 <_printf_i+0x36> li	a5,88
1c0032e6 <_printf_i+0x3a> beq	a6,a5,1c003418 <_printf_i+0x16c>
1c0032ea <_printf_i+0x3e> addi	s5,s0,66
1c0032ee <_printf_i+0x42> sb	a6,66(s0)
1c0032f2 <_printf_i+0x46> j	1c003324 <_printf_i+0x78>
1c0032f4 <_printf_i+0x48> addi	a5,a6,-99
1c0032f8 <_printf_i+0x4c> andi	a5,a5,255
1c0032fc <_printf_i+0x50> li	a2,21
1c0032fe <_printf_i+0x52> bltu	a2,a5,1c0032ea <_printf_i+0x3e>
1c003302 <_printf_i+0x56> lui	a2,0x1c008
1c003306 <_printf_i+0x5a> slli	a5,a5,0x2
1c003308 <_printf_i+0x5c> addi	a2,a2,1272 # 1c0084f8 <__sf_fake_stdout+0x48>
1c00330c <_printf_i+0x60> add	a5,a5,a2
1c00330e <_printf_i+0x62> lw	a5,0(a5)
1c003310 <_printf_i+0x64> jr	a5
1c003312 <_printf_i+0x66> lw	a5,0(a4)
1c003314 <_printf_i+0x68> addi	s5,a1,66
1c003318 <_printf_i+0x6c> addi	a3,a5,4
1c00331c <_printf_i+0x70> lw	a5,0(a5)
1c00331e <_printf_i+0x72> sw	a3,0(a4)
1c003320 <_printf_i+0x74> sb	a5,66(a1)
1c003324 <_printf_i+0x78> li	a5,1
1c003326 <_printf_i+0x7a> j	1c0034ce <_printf_i+0x222>
1c003328 <_printf_i+0x7c> lw	a5,0(a1)
1c00332a <_printf_i+0x7e> lw	a0,0(a4)
1c00332c <_printf_i+0x80> andi	a2,a5,128
1c003330 <_printf_i+0x84> addi	a1,a0,4
1c003334 <_printf_i+0x88> beqz	a2,1c003356 <_printf_i+0xaa>
1c003336 <_printf_i+0x8a> lw	a5,0(a0)
1c003338 <_printf_i+0x8c> sw	a1,0(a4)
1c00333a <_printf_i+0x8e> lui	a1,0x1c008
1c00333e <_printf_i+0x92> bgez	a5,1c00334e <_printf_i+0xa2>
1c003342 <_printf_i+0x96> li	a4,45
1c003346 <_printf_i+0x9a> neg	a5,a5
1c00334a <_printf_i+0x9e> sb	a4,67(s0)
1c00334e <_printf_i+0xa2> addi	a1,a1,1232 # 1c0084d0 <__sf_fake_stdout+0x20>
1c003352 <_printf_i+0xa6> li	a4,10
1c003354 <_printf_i+0xa8> j	1c00339c <_printf_i+0xf0>
1c003356 <_printf_i+0xaa> andi	a2,a5,64
1c00335a <_printf_i+0xae> lw	a5,0(a0)
1c00335c <_printf_i+0xb0> sw	a1,0(a4)
1c00335e <_printf_i+0xb2> beqz	a2,1c00333a <_printf_i+0x8e>
1c003360 <_printf_i+0xb4> slli	a5,a5,0x10
1c003362 <_printf_i+0xb6> srai	a5,a5,0x10
1c003364 <_printf_i+0xb8> j	1c00333a <_printf_i+0x8e>
1c003366 <_printf_i+0xba> lw	a2,0(a1)
1c003368 <_printf_i+0xbc> lw	a5,0(a4)
1c00336a <_printf_i+0xbe> andi	a0,a2,128
1c00336e <_printf_i+0xc2> addi	a1,a5,4
1c003372 <_printf_i+0xc6> beqz	a0,1c00337a <_printf_i+0xce>
1c003374 <_printf_i+0xc8> sw	a1,0(a4)
1c003376 <_printf_i+0xca> lw	a5,0(a5)
1c003378 <_printf_i+0xcc> j	1c003386 <_printf_i+0xda>
1c00337a <_printf_i+0xce> andi	a2,a2,64
1c00337e <_printf_i+0xd2> sw	a1,0(a4)
1c003380 <_printf_i+0xd4> beqz	a2,1c003376 <_printf_i+0xca>
1c003382 <_printf_i+0xd6> lhu	a5,0(a5)
1c003386 <_printf_i+0xda> lui	a1,0x1c008
1c00338a <_printf_i+0xde> li	a4,111
1c00338e <_printf_i+0xe2> addi	a1,a1,1232 # 1c0084d0 <__sf_fake_stdout+0x20>
1c003392 <_printf_i+0xe6> beq	a6,a4,1c00347a <_printf_i+0x1ce>
1c003396 <_printf_i+0xea> li	a4,10
1c003398 <_printf_i+0xec> sb	zero,67(s0)
1c00339c <_printf_i+0xf0> lw	a2,4(s0)
1c00339e <_printf_i+0xf2> sw	a2,8(s0)
1c0033a0 <_printf_i+0xf4> bltz	a2,1c0033aa <_printf_i+0xfe>
1c0033a4 <_printf_i+0xf8> lw	a0,0(s0)
1c0033a6 <_printf_i+0xfa> andi	a0,a0,-5
1c0033a8 <_printf_i+0xfc> sw	a0,0(s0)
1c0033aa <_printf_i+0xfe> bnez	a5,1c0033b0 <_printf_i+0x104>
1c0033ac <_printf_i+0x100> mv	s5,a3
1c0033ae <_printf_i+0x102> beqz	a2,1c0033cc <_printf_i+0x120>
1c0033b0 <_printf_i+0x104> mv	s5,a3
1c0033b2 <_printf_i+0x106> remu	a2,a5,a4
1c0033b6 <_printf_i+0x10a> addi	s5,s5,-1
1c0033b8 <_printf_i+0x10c> add	a2,a2,a1
1c0033ba <_printf_i+0x10e> lbu	a2,0(a2)
1c0033be <_printf_i+0x112> sb	a2,0(s5)
1c0033c2 <_printf_i+0x116> mv	a2,a5
1c0033c4 <_printf_i+0x118> divu	a5,a5,a4
1c0033c8 <_printf_i+0x11c> bgeu	a2,a4,1c0033b2 <_printf_i+0x106>
1c0033cc <_printf_i+0x120> li	a5,8
1c0033ce <_printf_i+0x122> bne	a4,a5,1c0033ea <_printf_i+0x13e>
1c0033d2 <_printf_i+0x126> lw	a5,0(s0)
1c0033d4 <_printf_i+0x128> andi	a5,a5,1
1c0033d6 <_printf_i+0x12a> beqz	a5,1c0033ea <_printf_i+0x13e>
1c0033d8 <_printf_i+0x12c> lw	a4,4(s0)
1c0033da <_printf_i+0x12e> lw	a5,16(s0)
1c0033dc <_printf_i+0x130> blt	a5,a4,1c0033ea <_printf_i+0x13e>
1c0033e0 <_printf_i+0x134> li	a5,48
1c0033e4 <_printf_i+0x138> sb	a5,-1(s5)
1c0033e8 <_printf_i+0x13c> addi	s5,s5,-1
1c0033ea <_printf_i+0x13e> sub	a3,a3,s5
1c0033ee <_printf_i+0x142> sw	a3,16(s0)
1c0033f0 <_printf_i+0x144> mv	a4,s3
1c0033f2 <_printf_i+0x146> mv	a3,s2
1c0033f4 <_printf_i+0x148> addi	a2,sp,12
1c0033f6 <_printf_i+0x14a> mv	a1,s0
1c0033f8 <_printf_i+0x14c> mv	a0,s1
1c0033fa <_printf_i+0x14e> jal	1c0031a0 <_printf_common>
1c0033fc <_printf_i+0x150> li	s4,-1
1c0033fe <_printf_i+0x152> bne	a0,s4,1c0034d6 <_printf_i+0x22a>
1c003402 <_printf_i+0x156> li	a0,-1
1c003404 <_printf_i+0x158> lw	ra,44(sp)
1c003406 <_printf_i+0x15a> lw	s0,40(sp)
1c003408 <_printf_i+0x15c> lw	s1,36(sp)
1c00340a <_printf_i+0x15e> lw	s2,32(sp)
1c00340c <_printf_i+0x160> lw	s3,28(sp)
1c00340e <_printf_i+0x162> lw	s4,24(sp)
1c003410 <_printf_i+0x164> lw	s5,20(sp)
1c003412 <_printf_i+0x166> lw	s6,16(sp)
1c003414 <_printf_i+0x168> addi	sp,sp,48
1c003416 <_printf_i+0x16a> ret
1c003418 <_printf_i+0x16c> sb	a6,69(a1)
1c00341c <_printf_i+0x170> lui	a1,0x1c008
1c003420 <_printf_i+0x174> addi	a1,a1,1232 # 1c0084d0 <__sf_fake_stdout+0x20>
1c003424 <_printf_i+0x178> lw	a2,0(s0)
1c003426 <_printf_i+0x17a> lw	a0,0(a4)
1c003428 <_printf_i+0x17c> andi	a6,a2,128
1c00342c <_printf_i+0x180> lw	a5,0(a0)
1c00342e <_printf_i+0x182> addi	a0,a0,4
1c003430 <_printf_i+0x184> beqz	a6,1c00346a <_printf_i+0x1be>
1c003434 <_printf_i+0x188> sw	a0,0(a4)
1c003436 <_printf_i+0x18a> andi	a4,a2,1
1c00343a <_printf_i+0x18e> beqz	a4,1c003442 <_printf_i+0x196>
1c00343c <_printf_i+0x190> ori	a2,a2,32
1c003440 <_printf_i+0x194> sw	a2,0(s0)
1c003442 <_printf_i+0x196> li	a4,16
1c003444 <_printf_i+0x198> bnez	a5,1c003398 <_printf_i+0xec>
1c003446 <_printf_i+0x19a> lw	a2,0(s0)
1c003448 <_printf_i+0x19c> andi	a2,a2,-33
1c00344c <_printf_i+0x1a0> sw	a2,0(s0)
1c00344e <_printf_i+0x1a2> j	1c003398 <_printf_i+0xec>
1c003450 <_printf_i+0x1a4> lw	a5,0(a1)
1c003452 <_printf_i+0x1a6> ori	a5,a5,32
1c003456 <_printf_i+0x1aa> sw	a5,0(a1)
1c003458 <_printf_i+0x1ac> li	a5,120
1c00345c <_printf_i+0x1b0> lui	a1,0x1c008
1c003460 <_printf_i+0x1b4> sb	a5,69(s0)
1c003464 <_printf_i+0x1b8> addi	a1,a1,1252 # 1c0084e4 <__sf_fake_stdout+0x34>
1c003468 <_printf_i+0x1bc> j	1c003424 <_printf_i+0x178>
1c00346a <_printf_i+0x1be> andi	a6,a2,64
1c00346e <_printf_i+0x1c2> sw	a0,0(a4)
1c003470 <_printf_i+0x1c4> beqz	a6,1c003436 <_printf_i+0x18a>
1c003474 <_printf_i+0x1c8> slli	a5,a5,0x10
1c003476 <_printf_i+0x1ca> srli	a5,a5,0x10
1c003478 <_printf_i+0x1cc> j	1c003436 <_printf_i+0x18a>
1c00347a <_printf_i+0x1ce> li	a4,8
1c00347c <_printf_i+0x1d0> j	1c003398 <_printf_i+0xec>
1c00347e <_printf_i+0x1d2> lw	a2,0(a1)
1c003480 <_printf_i+0x1d4> lw	a5,0(a4)
1c003482 <_printf_i+0x1d6> lw	a1,20(a1)
1c003484 <_printf_i+0x1d8> andi	a6,a2,128
1c003488 <_printf_i+0x1dc> addi	a0,a5,4
1c00348c <_printf_i+0x1e0> beqz	a6,1c003498 <_printf_i+0x1ec>
1c003490 <_printf_i+0x1e4> sw	a0,0(a4)
1c003492 <_printf_i+0x1e6> lw	a5,0(a5)
1c003494 <_printf_i+0x1e8> sw	a1,0(a5)
1c003496 <_printf_i+0x1ea> j	1c0034a6 <_printf_i+0x1fa>
1c003498 <_printf_i+0x1ec> sw	a0,0(a4)
1c00349a <_printf_i+0x1ee> andi	a2,a2,64
1c00349e <_printf_i+0x1f2> lw	a5,0(a5)
1c0034a0 <_printf_i+0x1f4> beqz	a2,1c003494 <_printf_i+0x1e8>
1c0034a2 <_printf_i+0x1f6> sh	a1,0(a5)
1c0034a6 <_printf_i+0x1fa> sw	zero,16(s0)
1c0034aa <_printf_i+0x1fe> mv	s5,a3
1c0034ac <_printf_i+0x200> j	1c0033f0 <_printf_i+0x144>
1c0034ae <_printf_i+0x202> lw	a5,0(a4)
1c0034b0 <_printf_i+0x204> lw	a2,4(a1)
1c0034b2 <_printf_i+0x206> li	a1,0
1c0034b4 <_printf_i+0x208> addi	a3,a5,4
1c0034b8 <_printf_i+0x20c> sw	a3,0(a4)
1c0034ba <_printf_i+0x20e> lw	s5,0(a5)
1c0034be <_printf_i+0x212> mv	a0,s5
1c0034c0 <_printf_i+0x214> jal	ra,1c003186 <memchr>
1c0034c4 <_printf_i+0x218> beqz	a0,1c0034cc <_printf_i+0x220>
1c0034c6 <_printf_i+0x21a> sub	a0,a0,s5
1c0034ca <_printf_i+0x21e> sw	a0,4(s0)
1c0034cc <_printf_i+0x220> lw	a5,4(s0)
1c0034ce <_printf_i+0x222> sw	a5,16(s0)
1c0034d0 <_printf_i+0x224> sb	zero,67(s0)
1c0034d4 <_printf_i+0x228> j	1c0033f0 <_printf_i+0x144>
1c0034d6 <_printf_i+0x22a> lw	a3,16(s0)
1c0034d8 <_printf_i+0x22c> mv	a2,s5
1c0034da <_printf_i+0x22e> mv	a1,s2
1c0034dc <_printf_i+0x230> mv	a0,s1
1c0034de <_printf_i+0x232> jalr	s3
1c0034e0 <_printf_i+0x234> beq	a0,s4,1c003402 <_printf_i+0x156>
1c0034e4 <_printf_i+0x238> lw	a5,0(s0)
1c0034e6 <_printf_i+0x23a> andi	a5,a5,2
1c0034e8 <_printf_i+0x23c> bnez	a5,1c003512 <_printf_i+0x266>
1c0034ea <_printf_i+0x23e> lw	a5,12(sp)
1c0034ec <_printf_i+0x240> lw	a0,12(s0)
1c0034ee <_printf_i+0x242> bge	a0,a5,1c003404 <_printf_i+0x158>
1c0034f2 <_printf_i+0x246> mv	a0,a5
1c0034f4 <_printf_i+0x248> j	1c003404 <_printf_i+0x158>
1c0034f6 <_printf_i+0x24a> li	a3,1
1c0034f8 <_printf_i+0x24c> mv	a2,s5
1c0034fa <_printf_i+0x24e> mv	a1,s2
1c0034fc <_printf_i+0x250> mv	a0,s1
1c0034fe <_printf_i+0x252> jalr	s3
1c003500 <_printf_i+0x254> beq	a0,s6,1c003402 <_printf_i+0x156>
1c003504 <_printf_i+0x258> addi	s4,s4,1
1c003506 <_printf_i+0x25a> lw	a5,12(s0)
1c003508 <_printf_i+0x25c> lw	a4,12(sp)
1c00350a <_printf_i+0x25e> sub	a5,a5,a4
1c00350c <_printf_i+0x260> blt	s4,a5,1c0034f6 <_printf_i+0x24a>
1c003510 <_printf_i+0x264> j	1c0034ea <_printf_i+0x23e>
1c003512 <_printf_i+0x266> li	s4,0
1c003514 <_printf_i+0x268> addi	s5,s0,25
1c003518 <_printf_i+0x26c> li	s6,-1
1c00351a <_printf_i+0x26e> j	1c003506 <_printf_i+0x25a>
__sread():
1c00351c <__sread> addi	sp,sp,-16
1c00351e <__sread+0x2> sw	s0,8(sp)
1c003520 <__sread+0x4> mv	s0,a1
1c003522 <__sread+0x6> lh	a1,14(a1)
1c003526 <__sread+0xa> sw	ra,12(sp)
1c003528 <__sread+0xc> jal	1c0036bc <_read_r>
1c00352a <__sread+0xe> bltz	a0,1c00353c <__sread+0x20>
1c00352e <__sread+0x12> lw	a5,84(s0)
1c003530 <__sread+0x14> add	a5,a5,a0
1c003532 <__sread+0x16> sw	a5,84(s0)
1c003534 <__sread+0x18> lw	ra,12(sp)
1c003536 <__sread+0x1a> lw	s0,8(sp)
1c003538 <__sread+0x1c> addi	sp,sp,16
1c00353a <__sread+0x1e> ret
1c00353c <__sread+0x20> lhu	a5,12(s0)
1c003540 <__sread+0x24> lui	a4,0xfffff
1c003542 <__sread+0x26> addi	a4,a4,-1
1c003544 <__sread+0x28> and	a5,a5,a4
1c003546 <__sread+0x2a> sh	a5,12(s0)
1c00354a <__sread+0x2e> j	1c003534 <__sread+0x18>
__swrite():
1c00354c <__swrite> lhu	a5,12(a1)
1c003550 <__swrite+0x4> addi	sp,sp,-32
1c003552 <__swrite+0x6> sw	s0,24(sp)
1c003554 <__swrite+0x8> sw	s1,20(sp)
1c003556 <__swrite+0xa> sw	s2,16(sp)
1c003558 <__swrite+0xc> sw	s3,12(sp)
1c00355a <__swrite+0xe> sw	ra,28(sp)
1c00355c <__swrite+0x10> andi	a5,a5,256
1c003560 <__swrite+0x14> mv	s1,a0
1c003562 <__swrite+0x16> mv	s0,a1
1c003564 <__swrite+0x18> mv	s2,a2
1c003566 <__swrite+0x1a> mv	s3,a3
1c003568 <__swrite+0x1c> beqz	a5,1c003574 <__swrite+0x28>
1c00356a <__swrite+0x1e> lh	a1,14(a1)
1c00356e <__swrite+0x22> li	a3,2
1c003570 <__swrite+0x24> li	a2,0
1c003572 <__swrite+0x26> jal	1c00368c <_lseek_r>
1c003574 <__swrite+0x28> lhu	a5,12(s0)
1c003578 <__swrite+0x2c> lui	a4,0xfffff
1c00357a <__swrite+0x2e> addi	a4,a4,-1
1c00357c <__swrite+0x30> and	a5,a5,a4
1c00357e <__swrite+0x32> lh	a1,14(s0)
1c003582 <__swrite+0x36> sh	a5,12(s0)
1c003586 <__swrite+0x3a> lw	s0,24(sp)
1c003588 <__swrite+0x3c> lw	ra,28(sp)
1c00358a <__swrite+0x3e> mv	a3,s3
1c00358c <__swrite+0x40> mv	a2,s2
1c00358e <__swrite+0x42> lw	s3,12(sp)
1c003590 <__swrite+0x44> lw	s2,16(sp)
1c003592 <__swrite+0x46> mv	a0,s1
1c003594 <__swrite+0x48> lw	s1,20(sp)
1c003596 <__swrite+0x4a> addi	sp,sp,32
1c003598 <__swrite+0x4c> j	1c0035d6 <_write_r>
__sseek():
1c00359a <__sseek> addi	sp,sp,-16
1c00359c <__sseek+0x2> sw	s0,8(sp)
1c00359e <__sseek+0x4> mv	s0,a1
1c0035a0 <__sseek+0x6> lh	a1,14(a1)
1c0035a4 <__sseek+0xa> sw	ra,12(sp)
1c0035a6 <__sseek+0xc> jal	1c00368c <_lseek_r>
1c0035a8 <__sseek+0xe> li	a5,-1
1c0035aa <__sseek+0x10> lhu	a4,12(s0)
1c0035ae <__sseek+0x14> bne	a0,a5,1c0035c4 <__sseek+0x2a>
1c0035b2 <__sseek+0x18> lui	a5,0xfffff
1c0035b4 <__sseek+0x1a> addi	a5,a5,-1
1c0035b6 <__sseek+0x1c> and	a5,a5,a4
1c0035b8 <__sseek+0x1e> sh	a5,12(s0)
1c0035bc <__sseek+0x22> lw	ra,12(sp)
1c0035be <__sseek+0x24> lw	s0,8(sp)
1c0035c0 <__sseek+0x26> addi	sp,sp,16
1c0035c2 <__sseek+0x28> ret
1c0035c4 <__sseek+0x2a> lui	a5,0x1
1c0035c6 <__sseek+0x2c> or	a5,a5,a4
1c0035c8 <__sseek+0x2e> sh	a5,12(s0)
1c0035cc <__sseek+0x32> sw	a0,84(s0)
1c0035ce <__sseek+0x34> j	1c0035bc <__sseek+0x22>
__sclose():
1c0035d0 <__sclose> lh	a1,14(a1)
1c0035d4 <__sclose+0x4> j	1c003606 <_close_r>
_write_r():
1c0035d6 <_write_r> addi	sp,sp,-16
1c0035d8 <_write_r+0x2> sw	s0,8(sp)
1c0035da <_write_r+0x4> sw	s1,4(sp)
1c0035dc <_write_r+0x6> mv	s0,a0
1c0035de <_write_r+0x8> mv	a0,a1
1c0035e0 <_write_r+0xa> mv	a1,a2
1c0035e2 <_write_r+0xc> mv	a2,a3
1c0035e4 <_write_r+0xe> sw	ra,12(sp)
1c0035e6 <_write_r+0x10> sw	zero,-308(gp) # 1c008c1c <errno>
1c0035ea <_write_r+0x14> jal	ra,1c00148a <_write>
1c0035ee <_write_r+0x18> li	a5,-1
1c0035f0 <_write_r+0x1a> bne	a0,a5,1c0035fc <_write_r+0x26>
1c0035f4 <_write_r+0x1e> lw	a5,-308(gp) # 1c008c1c <errno>
1c0035f8 <_write_r+0x22> beqz	a5,1c0035fc <_write_r+0x26>
1c0035fa <_write_r+0x24> sw	a5,0(s0)
1c0035fc <_write_r+0x26> lw	ra,12(sp)
1c0035fe <_write_r+0x28> lw	s0,8(sp)
1c003600 <_write_r+0x2a> lw	s1,4(sp)
1c003602 <_write_r+0x2c> addi	sp,sp,16
1c003604 <_write_r+0x2e> ret
_close_r():
1c003606 <_close_r> addi	sp,sp,-16
1c003608 <_close_r+0x2> sw	s0,8(sp)
1c00360a <_close_r+0x4> sw	s1,4(sp)
1c00360c <_close_r+0x6> mv	s0,a0
1c00360e <_close_r+0x8> mv	a0,a1
1c003610 <_close_r+0xa> sw	ra,12(sp)
1c003612 <_close_r+0xc> sw	zero,-308(gp) # 1c008c1c <errno>
1c003616 <_close_r+0x10> jal	ra,1c001424 <_close>
1c00361a <_close_r+0x14> li	a5,-1
1c00361c <_close_r+0x16> bne	a0,a5,1c003628 <_close_r+0x22>
1c003620 <_close_r+0x1a> lw	a5,-308(gp) # 1c008c1c <errno>
1c003624 <_close_r+0x1e> beqz	a5,1c003628 <_close_r+0x22>
1c003626 <_close_r+0x20> sw	a5,0(s0)
1c003628 <_close_r+0x22> lw	ra,12(sp)
1c00362a <_close_r+0x24> lw	s0,8(sp)
1c00362c <_close_r+0x26> lw	s1,4(sp)
1c00362e <_close_r+0x28> addi	sp,sp,16
1c003630 <_close_r+0x2a> ret
_fstat_r():
1c003632 <_fstat_r> addi	sp,sp,-16
1c003634 <_fstat_r+0x2> sw	s0,8(sp)
1c003636 <_fstat_r+0x4> sw	s1,4(sp)
1c003638 <_fstat_r+0x6> mv	s0,a0
1c00363a <_fstat_r+0x8> mv	a0,a1
1c00363c <_fstat_r+0xa> mv	a1,a2
1c00363e <_fstat_r+0xc> sw	ra,12(sp)
1c003640 <_fstat_r+0xe> sw	zero,-308(gp) # 1c008c1c <errno>
1c003644 <_fstat_r+0x12> jal	ra,1c001464 <_fstat>
1c003648 <_fstat_r+0x16> li	a5,-1
1c00364a <_fstat_r+0x18> bne	a0,a5,1c003656 <_fstat_r+0x24>
1c00364e <_fstat_r+0x1c> lw	a5,-308(gp) # 1c008c1c <errno>
1c003652 <_fstat_r+0x20> beqz	a5,1c003656 <_fstat_r+0x24>
1c003654 <_fstat_r+0x22> sw	a5,0(s0)
1c003656 <_fstat_r+0x24> lw	ra,12(sp)
1c003658 <_fstat_r+0x26> lw	s0,8(sp)
1c00365a <_fstat_r+0x28> lw	s1,4(sp)
1c00365c <_fstat_r+0x2a> addi	sp,sp,16
1c00365e <_fstat_r+0x2c> ret
_isatty_r():
1c003660 <_isatty_r> addi	sp,sp,-16
1c003662 <_isatty_r+0x2> sw	s0,8(sp)
1c003664 <_isatty_r+0x4> sw	s1,4(sp)
1c003666 <_isatty_r+0x6> mv	s0,a0
1c003668 <_isatty_r+0x8> mv	a0,a1
1c00366a <_isatty_r+0xa> sw	ra,12(sp)
1c00366c <_isatty_r+0xc> sw	zero,-308(gp) # 1c008c1c <errno>
1c003670 <_isatty_r+0x10> jal	ra,1c001470 <_isatty>
1c003674 <_isatty_r+0x14> li	a5,-1
1c003676 <_isatty_r+0x16> bne	a0,a5,1c003682 <_isatty_r+0x22>
1c00367a <_isatty_r+0x1a> lw	a5,-308(gp) # 1c008c1c <errno>
1c00367e <_isatty_r+0x1e> beqz	a5,1c003682 <_isatty_r+0x22>
1c003680 <_isatty_r+0x20> sw	a5,0(s0)
1c003682 <_isatty_r+0x22> lw	ra,12(sp)
1c003684 <_isatty_r+0x24> lw	s0,8(sp)
1c003686 <_isatty_r+0x26> lw	s1,4(sp)
1c003688 <_isatty_r+0x28> addi	sp,sp,16
1c00368a <_isatty_r+0x2a> ret
_lseek_r():
1c00368c <_lseek_r> addi	sp,sp,-16
1c00368e <_lseek_r+0x2> sw	s0,8(sp)
1c003690 <_lseek_r+0x4> sw	s1,4(sp)
1c003692 <_lseek_r+0x6> mv	s0,a0
1c003694 <_lseek_r+0x8> mv	a0,a1
1c003696 <_lseek_r+0xa> mv	a1,a2
1c003698 <_lseek_r+0xc> mv	a2,a3
1c00369a <_lseek_r+0xe> sw	ra,12(sp)
1c00369c <_lseek_r+0x10> sw	zero,-308(gp) # 1c008c1c <errno>
1c0036a0 <_lseek_r+0x14> jal	ra,1c001482 <_lseek>
1c0036a4 <_lseek_r+0x18> li	a5,-1
1c0036a6 <_lseek_r+0x1a> bne	a0,a5,1c0036b2 <_lseek_r+0x26>
1c0036aa <_lseek_r+0x1e> lw	a5,-308(gp) # 1c008c1c <errno>
1c0036ae <_lseek_r+0x22> beqz	a5,1c0036b2 <_lseek_r+0x26>
1c0036b0 <_lseek_r+0x24> sw	a5,0(s0)
1c0036b2 <_lseek_r+0x26> lw	ra,12(sp)
1c0036b4 <_lseek_r+0x28> lw	s0,8(sp)
1c0036b6 <_lseek_r+0x2a> lw	s1,4(sp)
1c0036b8 <_lseek_r+0x2c> addi	sp,sp,16
1c0036ba <_lseek_r+0x2e> ret
_read_r():
1c0036bc <_read_r> addi	sp,sp,-16
1c0036be <_read_r+0x2> sw	s0,8(sp)
1c0036c0 <_read_r+0x4> sw	s1,4(sp)
1c0036c2 <_read_r+0x6> mv	s0,a0
1c0036c4 <_read_r+0x8> mv	a0,a1
1c0036c6 <_read_r+0xa> mv	a1,a2
1c0036c8 <_read_r+0xc> mv	a2,a3
1c0036ca <_read_r+0xe> sw	ra,12(sp)
1c0036cc <_read_r+0x10> sw	zero,-308(gp) # 1c008c1c <errno>
1c0036d0 <_read_r+0x14> jal	ra,1c001486 <_read>
1c0036d4 <_read_r+0x18> li	a5,-1
1c0036d6 <_read_r+0x1a> bne	a0,a5,1c0036e2 <_read_r+0x26>
1c0036da <_read_r+0x1e> lw	a5,-308(gp) # 1c008c1c <errno>
1c0036de <_read_r+0x22> beqz	a5,1c0036e2 <_read_r+0x26>
1c0036e0 <_read_r+0x24> sw	a5,0(s0)
1c0036e2 <_read_r+0x26> lw	ra,12(sp)
1c0036e4 <_read_r+0x28> lw	s0,8(sp)
1c0036e6 <_read_r+0x2a> lw	s1,4(sp)
1c0036e8 <_read_r+0x2c> addi	sp,sp,16
1c0036ea <_read_r+0x2e> ret
